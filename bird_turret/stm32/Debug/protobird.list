
protobird.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ec8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08009078  08009078  0000a078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800914c  0800914c  0000b06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800914c  0800914c  0000a14c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009154  08009154  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009154  08009154  0000a154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009158  08009158  0000a158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800915c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b06c  2**0
                  CONTENTS
 10 .bss          00004a14  2000006c  2000006c  0000b06c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004a80  20004a80  0000b06c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d4e5  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ceb  00000000  00000000  00028581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001820  00000000  00000000  0002c270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012bf  00000000  00000000  0002da90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027ff7  00000000  00000000  0002ed4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b374  00000000  00000000  00056d46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee31f  00000000  00000000  000720ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001603d9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006e10  00000000  00000000  0016041c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0016722c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009060 	.word	0x08009060

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08009060 	.word	0x08009060

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	4a07      	ldr	r2, [pc, #28]	@ (80005ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000590:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	4a06      	ldr	r2, [pc, #24]	@ (80005b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000596:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2280      	movs	r2, #128	@ 0x80
 800059c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000088 	.word	0x20000088
 80005b0:	20000128 	.word	0x20000128

080005b4 <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t dir;
int phi, theta;
int8_t oper, dphi, dtheta;
int __io_putchar(int ch){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, 0xFFFF);
 80005bc:	1d39      	adds	r1, r7, #4
 80005be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005c2:	2201      	movs	r2, #1
 80005c4:	4803      	ldr	r0, [pc, #12]	@ (80005d4 <__io_putchar+0x20>)
 80005c6:	f003 fe6f 	bl	80042a8 <HAL_UART_Transmit>
	return ch;
 80005ca:	687b      	ldr	r3, [r7, #4]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000628 	.word	0x20000628

080005d8 <__io_getchar>:
int __io_getchar(){
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	71fb      	strb	r3, [r7, #7]
	/* Clear the Overrun flag just before receiving the first character */
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 80005e2:	2300      	movs	r3, #0
 80005e4:	603b      	str	r3, [r7, #0]
 80005e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000620 <__io_getchar+0x48>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	603b      	str	r3, [r7, #0]
 80005ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <__io_getchar+0x48>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	685b      	ldr	r3, [r3, #4]
 80005f4:	603b      	str	r3, [r7, #0]
 80005f6:	683b      	ldr	r3, [r7, #0]
	/* Wait for reception of a character on the USART RX line and echo this
	* character on console */
	HAL_UART_Receive(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005f8:	1df9      	adds	r1, r7, #7
 80005fa:	f04f 33ff 	mov.w	r3, #4294967295
 80005fe:	2201      	movs	r2, #1
 8000600:	4807      	ldr	r0, [pc, #28]	@ (8000620 <__io_getchar+0x48>)
 8000602:	f003 fedc 	bl	80043be <HAL_UART_Receive>
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000606:	1df9      	adds	r1, r7, #7
 8000608:	f04f 33ff 	mov.w	r3, #4294967295
 800060c:	2201      	movs	r2, #1
 800060e:	4804      	ldr	r0, [pc, #16]	@ (8000620 <__io_getchar+0x48>)
 8000610:	f003 fe4a 	bl	80042a8 <HAL_UART_Transmit>
	return ch;
 8000614:	79fb      	ldrb	r3, [r7, #7]
}
 8000616:	4618      	mov	r0, r3
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20000628 	.word	0x20000628

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b5b0      	push	{r4, r5, r7, lr}
 8000626:	b0a2      	sub	sp, #136	@ 0x88
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062a:	f001 f903 	bl	8001834 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062e:	f000 f8c9 	bl	80007c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000632:	f000 fb05 	bl	8000c40 <MX_GPIO_Init>
  MX_ETH_Init();
 8000636:	f000 f943 	bl	80008c0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800063a:	f000 faa9 	bl	8000b90 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800063e:	f000 fad1 	bl	8000be4 <MX_USB_OTG_FS_PCD_Init>
  MX_UART5_Init();
 8000642:	f000 fa7b 	bl	8000b3c <MX_UART5_Init>
  MX_TIM2_Init();
 8000646:	f000 f989 	bl	800095c <MX_TIM2_Init>
  MX_TIM3_Init();
 800064a:	f000 f9ff 	bl	8000a4c <MX_TIM3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800064e:	f000 f923 	bl	8000898 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, (uint8_t *)&dir, 1);
 8000652:	2201      	movs	r2, #1
 8000654:	494b      	ldr	r1, [pc, #300]	@ (8000784 <main+0x160>)
 8000656:	484c      	ldr	r0, [pc, #304]	@ (8000788 <main+0x164>)
 8000658:	f003 ff48 	bl	80044ec <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800065c:	2108      	movs	r1, #8
 800065e:	484b      	ldr	r0, [pc, #300]	@ (800078c <main+0x168>)
 8000660:	f002 febc 	bl	80033dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000664:	210c      	movs	r1, #12
 8000666:	484a      	ldr	r0, [pc, #296]	@ (8000790 <main+0x16c>)
 8000668:	f002 feb8 	bl	80033dc <HAL_TIM_PWM_Start>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of phiDirSem */
  osSemaphoreDef(phiDirSem);
 800066c:	2300      	movs	r3, #0
 800066e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000672:	2300      	movs	r3, #0
 8000674:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  phiDirSemHandle = osSemaphoreCreate(osSemaphore(phiDirSem), 1);
 8000678:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800067c:	2101      	movs	r1, #1
 800067e:	4618      	mov	r0, r3
 8000680:	f005 fa2c 	bl	8005adc <osSemaphoreCreate>
 8000684:	4603      	mov	r3, r0
 8000686:	4a43      	ldr	r2, [pc, #268]	@ (8000794 <main+0x170>)
 8000688:	6013      	str	r3, [r2, #0]

  /* definition and creation of thetaDirSem */
  osSemaphoreDef(thetaDirSem);
 800068a:	2300      	movs	r3, #0
 800068c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800068e:	2300      	movs	r3, #0
 8000690:	67fb      	str	r3, [r7, #124]	@ 0x7c
  thetaDirSemHandle = osSemaphoreCreate(osSemaphore(thetaDirSem), 1);
 8000692:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000696:	2101      	movs	r1, #1
 8000698:	4618      	mov	r0, r3
 800069a:	f005 fa1f 	bl	8005adc <osSemaphoreCreate>
 800069e:	4603      	mov	r3, r0
 80006a0:	4a3d      	ldr	r2, [pc, #244]	@ (8000798 <main+0x174>)
 80006a2:	6013      	str	r3, [r2, #0]

  /* definition and creation of triggerSem */
  osSemaphoreDef(triggerSem);
 80006a4:	2300      	movs	r3, #0
 80006a6:	673b      	str	r3, [r7, #112]	@ 0x70
 80006a8:	2300      	movs	r3, #0
 80006aa:	677b      	str	r3, [r7, #116]	@ 0x74
  triggerSemHandle = osSemaphoreCreate(osSemaphore(triggerSem), 1);
 80006ac:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80006b0:	2101      	movs	r1, #1
 80006b2:	4618      	mov	r0, r3
 80006b4:	f005 fa12 	bl	8005adc <osSemaphoreCreate>
 80006b8:	4603      	mov	r3, r0
 80006ba:	4a38      	ldr	r2, [pc, #224]	@ (800079c <main+0x178>)
 80006bc:	6013      	str	r3, [r2, #0]

  /* definition and creation of trigendSem */
  osSemaphoreDef(trigendSem);
 80006be:	2300      	movs	r3, #0
 80006c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80006c2:	2300      	movs	r3, #0
 80006c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  trigendSemHandle = osSemaphoreCreate(osSemaphore(trigendSem), 1);
 80006c6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80006ca:	2101      	movs	r1, #1
 80006cc:	4618      	mov	r0, r3
 80006ce:	f005 fa05 	bl	8005adc <osSemaphoreCreate>
 80006d2:	4603      	mov	r3, r0
 80006d4:	4a32      	ldr	r2, [pc, #200]	@ (80007a0 <main+0x17c>)
 80006d6:	6013      	str	r3, [r2, #0]

  /* definition and creation of moveSem */
  osSemaphoreDef(moveSem);
 80006d8:	2300      	movs	r3, #0
 80006da:	663b      	str	r3, [r7, #96]	@ 0x60
 80006dc:	2300      	movs	r3, #0
 80006de:	667b      	str	r3, [r7, #100]	@ 0x64
  moveSemHandle = osSemaphoreCreate(osSemaphore(moveSem), 1);
 80006e0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80006e4:	2101      	movs	r1, #1
 80006e6:	4618      	mov	r0, r3
 80006e8:	f005 f9f8 	bl	8005adc <osSemaphoreCreate>
 80006ec:	4603      	mov	r3, r0
 80006ee:	4a2d      	ldr	r2, [pc, #180]	@ (80007a4 <main+0x180>)
 80006f0:	6013      	str	r3, [r2, #0]

  /* definition and creation of moveendSem */
  osSemaphoreDef(moveendSem);
 80006f2:	2300      	movs	r3, #0
 80006f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80006f6:	2300      	movs	r3, #0
 80006f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  moveendSemHandle = osSemaphoreCreate(osSemaphore(moveendSem), 1);
 80006fa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80006fe:	2101      	movs	r1, #1
 8000700:	4618      	mov	r0, r3
 8000702:	f005 f9eb 	bl	8005adc <osSemaphoreCreate>
 8000706:	4603      	mov	r3, r0
 8000708:	4a27      	ldr	r2, [pc, #156]	@ (80007a8 <main+0x184>)
 800070a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of uartTask */
  osThreadDef(uartTask, StartUartTask, osPriorityNormal, 0, 128);
 800070c:	4b27      	ldr	r3, [pc, #156]	@ (80007ac <main+0x188>)
 800070e:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000712:	461d      	mov	r5, r3
 8000714:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000716:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000718:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800071c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uartTaskHandle = osThreadCreate(osThread(uartTask), NULL);
 8000720:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f005 f98c 	bl	8005a44 <osThreadCreate>
 800072c:	4603      	mov	r3, r0
 800072e:	4a20      	ldr	r2, [pc, #128]	@ (80007b0 <main+0x18c>)
 8000730:	6013      	str	r3, [r2, #0]

  /* definition and creation of motorTask */
  osThreadDef(motorTask, StartMotorTask, osPriorityNormal, 0, 128);
 8000732:	4b20      	ldr	r3, [pc, #128]	@ (80007b4 <main+0x190>)
 8000734:	f107 0420 	add.w	r4, r7, #32
 8000738:	461d      	mov	r5, r3
 800073a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800073c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800073e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000742:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorTaskHandle = osThreadCreate(osThread(motorTask), NULL);
 8000746:	f107 0320 	add.w	r3, r7, #32
 800074a:	2100      	movs	r1, #0
 800074c:	4618      	mov	r0, r3
 800074e:	f005 f979 	bl	8005a44 <osThreadCreate>
 8000752:	4603      	mov	r3, r0
 8000754:	4a18      	ldr	r2, [pc, #96]	@ (80007b8 <main+0x194>)
 8000756:	6013      	str	r3, [r2, #0]

  /* definition and creation of trigTask */
  osThreadDef(trigTask, StartTrigTask, osPriorityHigh, 0, 128);
 8000758:	4b18      	ldr	r3, [pc, #96]	@ (80007bc <main+0x198>)
 800075a:	1d3c      	adds	r4, r7, #4
 800075c:	461d      	mov	r5, r3
 800075e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000760:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000762:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000766:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  trigTaskHandle = osThreadCreate(osThread(trigTask), NULL);
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f005 f968 	bl	8005a44 <osThreadCreate>
 8000774:	4603      	mov	r3, r0
 8000776:	4a12      	ldr	r2, [pc, #72]	@ (80007c0 <main+0x19c>)
 8000778:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800077a:	f005 f95c 	bl	8005a36 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800077e:	bf00      	nop
 8000780:	e7fd      	b.n	800077e <main+0x15a>
 8000782:	bf00      	nop
 8000784:	20000b78 	.word	0x20000b78
 8000788:	20000628 	.word	0x20000628
 800078c:	20000598 	.word	0x20000598
 8000790:	20000550 	.word	0x20000550
 8000794:	20000b60 	.word	0x20000b60
 8000798:	20000b64 	.word	0x20000b64
 800079c:	20000b68 	.word	0x20000b68
 80007a0:	20000b6c 	.word	0x20000b6c
 80007a4:	20000b70 	.word	0x20000b70
 80007a8:	20000b74 	.word	0x20000b74
 80007ac:	08009084 	.word	0x08009084
 80007b0:	20000b54 	.word	0x20000b54
 80007b4:	080090ac 	.word	0x080090ac
 80007b8:	20000b58 	.word	0x20000b58
 80007bc:	080090d4 	.word	0x080090d4
 80007c0:	20000b5c 	.word	0x20000b5c

080007c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b094      	sub	sp, #80	@ 0x50
 80007c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ca:	f107 0320 	add.w	r3, r7, #32
 80007ce:	2230      	movs	r2, #48	@ 0x30
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f007 fdc7 	bl	8008366 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e8:	2300      	movs	r3, #0
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	4b28      	ldr	r3, [pc, #160]	@ (8000890 <SystemClock_Config+0xcc>)
 80007ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f0:	4a27      	ldr	r2, [pc, #156]	@ (8000890 <SystemClock_Config+0xcc>)
 80007f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80007f8:	4b25      	ldr	r3, [pc, #148]	@ (8000890 <SystemClock_Config+0xcc>)
 80007fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000804:	2300      	movs	r3, #0
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	4b22      	ldr	r3, [pc, #136]	@ (8000894 <SystemClock_Config+0xd0>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a21      	ldr	r2, [pc, #132]	@ (8000894 <SystemClock_Config+0xd0>)
 800080e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000812:	6013      	str	r3, [r2, #0]
 8000814:	4b1f      	ldr	r3, [pc, #124]	@ (8000894 <SystemClock_Config+0xd0>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000820:	2301      	movs	r3, #1
 8000822:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000824:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000828:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082a:	2302      	movs	r3, #2
 800082c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800082e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000832:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000834:	2304      	movs	r3, #4
 8000836:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000838:	23a8      	movs	r3, #168	@ 0xa8
 800083a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800083c:	2302      	movs	r3, #2
 800083e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000840:	2307      	movs	r3, #7
 8000842:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000844:	f107 0320 	add.w	r3, r7, #32
 8000848:	4618      	mov	r0, r3
 800084a:	f001 ffe3 	bl	8002814 <HAL_RCC_OscConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000854:	f000 fbd2 	bl	8000ffc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000858:	230f      	movs	r3, #15
 800085a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085c:	2302      	movs	r3, #2
 800085e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000864:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000868:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800086a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800086e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000870:	f107 030c 	add.w	r3, r7, #12
 8000874:	2105      	movs	r1, #5
 8000876:	4618      	mov	r0, r3
 8000878:	f002 fa44 	bl	8002d04 <HAL_RCC_ClockConfig>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000882:	f000 fbbb 	bl	8000ffc <Error_Handler>
  }
}
 8000886:	bf00      	nop
 8000888:	3750      	adds	r7, #80	@ 0x50
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40023800 	.word	0x40023800
 8000894:	40007000 	.word	0x40007000

08000898 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* UART5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800089c:	2200      	movs	r2, #0
 800089e:	2105      	movs	r1, #5
 80008a0:	2035      	movs	r0, #53	@ 0x35
 80008a2:	f001 f8e5 	bl	8001a70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART5_IRQn);
 80008a6:	2035      	movs	r0, #53	@ 0x35
 80008a8:	f001 f8fe 	bl	8001aa8 <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2105      	movs	r1, #5
 80008b0:	2027      	movs	r0, #39	@ 0x27
 80008b2:	f001 f8dd 	bl	8001a70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 80008b6:	2027      	movs	r0, #39	@ 0x27
 80008b8:	f001 f8f6 	bl	8001aa8 <HAL_NVIC_EnableIRQ>
}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}

080008c0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000944 <MX_ETH_Init+0x84>)
 80008c6:	4a20      	ldr	r2, [pc, #128]	@ (8000948 <MX_ETH_Init+0x88>)
 80008c8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008ca:	4b20      	ldr	r3, [pc, #128]	@ (800094c <MX_ETH_Init+0x8c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008d0:	4b1e      	ldr	r3, [pc, #120]	@ (800094c <MX_ETH_Init+0x8c>)
 80008d2:	2280      	movs	r2, #128	@ 0x80
 80008d4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008d6:	4b1d      	ldr	r3, [pc, #116]	@ (800094c <MX_ETH_Init+0x8c>)
 80008d8:	22e1      	movs	r2, #225	@ 0xe1
 80008da:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008dc:	4b1b      	ldr	r3, [pc, #108]	@ (800094c <MX_ETH_Init+0x8c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008e2:	4b1a      	ldr	r3, [pc, #104]	@ (800094c <MX_ETH_Init+0x8c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008e8:	4b18      	ldr	r3, [pc, #96]	@ (800094c <MX_ETH_Init+0x8c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008ee:	4b15      	ldr	r3, [pc, #84]	@ (8000944 <MX_ETH_Init+0x84>)
 80008f0:	4a16      	ldr	r2, [pc, #88]	@ (800094c <MX_ETH_Init+0x8c>)
 80008f2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008f4:	4b13      	ldr	r3, [pc, #76]	@ (8000944 <MX_ETH_Init+0x84>)
 80008f6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80008fa:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008fc:	4b11      	ldr	r3, [pc, #68]	@ (8000944 <MX_ETH_Init+0x84>)
 80008fe:	4a14      	ldr	r2, [pc, #80]	@ (8000950 <MX_ETH_Init+0x90>)
 8000900:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000902:	4b10      	ldr	r3, [pc, #64]	@ (8000944 <MX_ETH_Init+0x84>)
 8000904:	4a13      	ldr	r2, [pc, #76]	@ (8000954 <MX_ETH_Init+0x94>)
 8000906:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000908:	4b0e      	ldr	r3, [pc, #56]	@ (8000944 <MX_ETH_Init+0x84>)
 800090a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800090e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000910:	480c      	ldr	r0, [pc, #48]	@ (8000944 <MX_ETH_Init+0x84>)
 8000912:	f001 f969 	bl	8001be8 <HAL_ETH_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800091c:	f000 fb6e 	bl	8000ffc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000920:	2238      	movs	r2, #56	@ 0x38
 8000922:	2100      	movs	r1, #0
 8000924:	480c      	ldr	r0, [pc, #48]	@ (8000958 <MX_ETH_Init+0x98>)
 8000926:	f007 fd1e 	bl	8008366 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800092a:	4b0b      	ldr	r3, [pc, #44]	@ (8000958 <MX_ETH_Init+0x98>)
 800092c:	2221      	movs	r2, #33	@ 0x21
 800092e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000930:	4b09      	ldr	r3, [pc, #36]	@ (8000958 <MX_ETH_Init+0x98>)
 8000932:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000936:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000938:	4b07      	ldr	r3, [pc, #28]	@ (8000958 <MX_ETH_Init+0x98>)
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	200004a0 	.word	0x200004a0
 8000948:	40028000 	.word	0x40028000
 800094c:	20000b88 	.word	0x20000b88
 8000950:	20000400 	.word	0x20000400
 8000954:	20000360 	.word	0x20000360
 8000958:	20000328 	.word	0x20000328

0800095c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08e      	sub	sp, #56	@ 0x38
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000962:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000970:	f107 0320 	add.w	r3, r7, #32
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
 8000988:	615a      	str	r2, [r3, #20]
 800098a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800098c:	4b2e      	ldr	r3, [pc, #184]	@ (8000a48 <MX_TIM2_Init+0xec>)
 800098e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000992:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 280-1;
 8000994:	4b2c      	ldr	r3, [pc, #176]	@ (8000a48 <MX_TIM2_Init+0xec>)
 8000996:	f240 1217 	movw	r2, #279	@ 0x117
 800099a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099c:	4b2a      	ldr	r3, [pc, #168]	@ (8000a48 <MX_TIM2_Init+0xec>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6000-1;
 80009a2:	4b29      	ldr	r3, [pc, #164]	@ (8000a48 <MX_TIM2_Init+0xec>)
 80009a4:	f241 726f 	movw	r2, #5999	@ 0x176f
 80009a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009aa:	4b27      	ldr	r3, [pc, #156]	@ (8000a48 <MX_TIM2_Init+0xec>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b0:	4b25      	ldr	r3, [pc, #148]	@ (8000a48 <MX_TIM2_Init+0xec>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009b6:	4824      	ldr	r0, [pc, #144]	@ (8000a48 <MX_TIM2_Init+0xec>)
 80009b8:	f002 fbf6 	bl	80031a8 <HAL_TIM_Base_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80009c2:	f000 fb1b 	bl	8000ffc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009d0:	4619      	mov	r1, r3
 80009d2:	481d      	ldr	r0, [pc, #116]	@ (8000a48 <MX_TIM2_Init+0xec>)
 80009d4:	f002 ff7c 	bl	80038d0 <HAL_TIM_ConfigClockSource>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80009de:	f000 fb0d 	bl	8000ffc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009e2:	4819      	ldr	r0, [pc, #100]	@ (8000a48 <MX_TIM2_Init+0xec>)
 80009e4:	f002 fca0 	bl	8003328 <HAL_TIM_PWM_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80009ee:	f000 fb05 	bl	8000ffc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f2:	2300      	movs	r3, #0
 80009f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009fa:	f107 0320 	add.w	r3, r7, #32
 80009fe:	4619      	mov	r1, r3
 8000a00:	4811      	ldr	r0, [pc, #68]	@ (8000a48 <MX_TIM2_Init+0xec>)
 8000a02:	f003 fb71 	bl	80040e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000a0c:	f000 faf6 	bl	8000ffc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a10:	2360      	movs	r3, #96	@ 0x60
 8000a12:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 450-1;
 8000a14:	f240 13c1 	movw	r3, #449	@ 0x1c1
 8000a18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	220c      	movs	r2, #12
 8000a26:	4619      	mov	r1, r3
 8000a28:	4807      	ldr	r0, [pc, #28]	@ (8000a48 <MX_TIM2_Init+0xec>)
 8000a2a:	f002 fe8f 	bl	800374c <HAL_TIM_PWM_ConfigChannel>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000a34:	f000 fae2 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a38:	4803      	ldr	r0, [pc, #12]	@ (8000a48 <MX_TIM2_Init+0xec>)
 8000a3a:	f000 fc0d 	bl	8001258 <HAL_TIM_MspPostInit>

}
 8000a3e:	bf00      	nop
 8000a40:	3738      	adds	r7, #56	@ 0x38
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000550 	.word	0x20000550

08000a4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08e      	sub	sp, #56	@ 0x38
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a52:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a60:	f107 0320 	add.w	r3, r7, #32
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
 8000a78:	615a      	str	r2, [r3, #20]
 8000a7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a7c:	4b2d      	ldr	r3, [pc, #180]	@ (8000b34 <MX_TIM3_Init+0xe8>)
 8000a7e:	4a2e      	ldr	r2, [pc, #184]	@ (8000b38 <MX_TIM3_Init+0xec>)
 8000a80:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 280-1;
 8000a82:	4b2c      	ldr	r3, [pc, #176]	@ (8000b34 <MX_TIM3_Init+0xe8>)
 8000a84:	f240 1217 	movw	r2, #279	@ 0x117
 8000a88:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8a:	4b2a      	ldr	r3, [pc, #168]	@ (8000b34 <MX_TIM3_Init+0xe8>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6000-1;
 8000a90:	4b28      	ldr	r3, [pc, #160]	@ (8000b34 <MX_TIM3_Init+0xe8>)
 8000a92:	f241 726f 	movw	r2, #5999	@ 0x176f
 8000a96:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a98:	4b26      	ldr	r3, [pc, #152]	@ (8000b34 <MX_TIM3_Init+0xe8>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a9e:	4b25      	ldr	r3, [pc, #148]	@ (8000b34 <MX_TIM3_Init+0xe8>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000aa4:	4823      	ldr	r0, [pc, #140]	@ (8000b34 <MX_TIM3_Init+0xe8>)
 8000aa6:	f002 fb7f 	bl	80031a8 <HAL_TIM_Base_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000ab0:	f000 faa4 	bl	8000ffc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ab4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000aba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000abe:	4619      	mov	r1, r3
 8000ac0:	481c      	ldr	r0, [pc, #112]	@ (8000b34 <MX_TIM3_Init+0xe8>)
 8000ac2:	f002 ff05 	bl	80038d0 <HAL_TIM_ConfigClockSource>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000acc:	f000 fa96 	bl	8000ffc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ad0:	4818      	ldr	r0, [pc, #96]	@ (8000b34 <MX_TIM3_Init+0xe8>)
 8000ad2:	f002 fc29 	bl	8003328 <HAL_TIM_PWM_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000adc:	f000 fa8e 	bl	8000ffc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ae8:	f107 0320 	add.w	r3, r7, #32
 8000aec:	4619      	mov	r1, r3
 8000aee:	4811      	ldr	r0, [pc, #68]	@ (8000b34 <MX_TIM3_Init+0xe8>)
 8000af0:	f003 fafa 	bl	80040e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000afa:	f000 fa7f 	bl	8000ffc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000afe:	2360      	movs	r3, #96	@ 0x60
 8000b00:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 450-1;
 8000b02:	f240 13c1 	movw	r3, #449	@ 0x1c1
 8000b06:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	2208      	movs	r2, #8
 8000b14:	4619      	mov	r1, r3
 8000b16:	4807      	ldr	r0, [pc, #28]	@ (8000b34 <MX_TIM3_Init+0xe8>)
 8000b18:	f002 fe18 	bl	800374c <HAL_TIM_PWM_ConfigChannel>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000b22:	f000 fa6b 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b26:	4803      	ldr	r0, [pc, #12]	@ (8000b34 <MX_TIM3_Init+0xe8>)
 8000b28:	f000 fb96 	bl	8001258 <HAL_TIM_MspPostInit>

}
 8000b2c:	bf00      	nop
 8000b2e:	3738      	adds	r7, #56	@ 0x38
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000598 	.word	0x20000598
 8000b38:	40000400 	.word	0x40000400

08000b3c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000b40:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <MX_UART5_Init+0x4c>)
 8000b42:	4a12      	ldr	r2, [pc, #72]	@ (8000b8c <MX_UART5_Init+0x50>)
 8000b44:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000b46:	4b10      	ldr	r3, [pc, #64]	@ (8000b88 <MX_UART5_Init+0x4c>)
 8000b48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b4c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <MX_UART5_Init+0x4c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	@ (8000b88 <MX_UART5_Init+0x4c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b88 <MX_UART5_Init+0x4c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000b60:	4b09      	ldr	r3, [pc, #36]	@ (8000b88 <MX_UART5_Init+0x4c>)
 8000b62:	220c      	movs	r2, #12
 8000b64:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b66:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <MX_UART5_Init+0x4c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <MX_UART5_Init+0x4c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000b72:	4805      	ldr	r0, [pc, #20]	@ (8000b88 <MX_UART5_Init+0x4c>)
 8000b74:	f003 fb48 	bl	8004208 <HAL_UART_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000b7e:	f000 fa3d 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200005e0 	.word	0x200005e0
 8000b8c:	40005000 	.word	0x40005000

08000b90 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b94:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <MX_USART3_UART_Init+0x4c>)
 8000b96:	4a12      	ldr	r2, [pc, #72]	@ (8000be0 <MX_USART3_UART_Init+0x50>)
 8000b98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b9a:	4b10      	ldr	r3, [pc, #64]	@ (8000bdc <MX_USART3_UART_Init+0x4c>)
 8000b9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ba0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bdc <MX_USART3_UART_Init+0x4c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bdc <MX_USART3_UART_Init+0x4c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	@ (8000bdc <MX_USART3_UART_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	@ (8000bdc <MX_USART3_UART_Init+0x4c>)
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bba:	4b08      	ldr	r3, [pc, #32]	@ (8000bdc <MX_USART3_UART_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <MX_USART3_UART_Init+0x4c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bc6:	4805      	ldr	r0, [pc, #20]	@ (8000bdc <MX_USART3_UART_Init+0x4c>)
 8000bc8:	f003 fb1e 	bl	8004208 <HAL_UART_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000bd2:	f000 fa13 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000628 	.word	0x20000628
 8000be0:	40004800 	.word	0x40004800

08000be4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000be8:	4b14      	ldr	r3, [pc, #80]	@ (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000bee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000bf0:	4b12      	ldr	r3, [pc, #72]	@ (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bf2:	2204      	movs	r2, #4
 8000bf4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000bf6:	4b11      	ldr	r3, [pc, #68]	@ (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bf8:	2202      	movs	r2, #2
 8000bfa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c02:	4b0e      	ldr	r3, [pc, #56]	@ (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c04:	2202      	movs	r2, #2
 8000c06:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000c08:	4b0c      	ldr	r3, [pc, #48]	@ (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c14:	4b09      	ldr	r3, [pc, #36]	@ (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c1a:	4b08      	ldr	r3, [pc, #32]	@ (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c20:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c26:	4805      	ldr	r0, [pc, #20]	@ (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c28:	f001 fce5 	bl	80025f6 <HAL_PCD_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c32:	f000 f9e3 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000670 	.word	0x20000670

08000c40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08c      	sub	sp, #48	@ 0x30
 8000c44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c46:	f107 031c 	add.w	r3, r7, #28
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	61bb      	str	r3, [r7, #24]
 8000c5a:	4b4c      	ldr	r3, [pc, #304]	@ (8000d8c <MX_GPIO_Init+0x14c>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	4a4b      	ldr	r2, [pc, #300]	@ (8000d8c <MX_GPIO_Init+0x14c>)
 8000c60:	f043 0304 	orr.w	r3, r3, #4
 8000c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c66:	4b49      	ldr	r3, [pc, #292]	@ (8000d8c <MX_GPIO_Init+0x14c>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	f003 0304 	and.w	r3, r3, #4
 8000c6e:	61bb      	str	r3, [r7, #24]
 8000c70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	4b45      	ldr	r3, [pc, #276]	@ (8000d8c <MX_GPIO_Init+0x14c>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	4a44      	ldr	r2, [pc, #272]	@ (8000d8c <MX_GPIO_Init+0x14c>)
 8000c7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c82:	4b42      	ldr	r3, [pc, #264]	@ (8000d8c <MX_GPIO_Init+0x14c>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	4b3e      	ldr	r3, [pc, #248]	@ (8000d8c <MX_GPIO_Init+0x14c>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	4a3d      	ldr	r2, [pc, #244]	@ (8000d8c <MX_GPIO_Init+0x14c>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9e:	4b3b      	ldr	r3, [pc, #236]	@ (8000d8c <MX_GPIO_Init+0x14c>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	4b37      	ldr	r3, [pc, #220]	@ (8000d8c <MX_GPIO_Init+0x14c>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	4a36      	ldr	r2, [pc, #216]	@ (8000d8c <MX_GPIO_Init+0x14c>)
 8000cb4:	f043 0302 	orr.w	r3, r3, #2
 8000cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cba:	4b34      	ldr	r3, [pc, #208]	@ (8000d8c <MX_GPIO_Init+0x14c>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	4b30      	ldr	r3, [pc, #192]	@ (8000d8c <MX_GPIO_Init+0x14c>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cce:	4a2f      	ldr	r2, [pc, #188]	@ (8000d8c <MX_GPIO_Init+0x14c>)
 8000cd0:	f043 0308 	orr.w	r3, r3, #8
 8000cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd6:	4b2d      	ldr	r3, [pc, #180]	@ (8000d8c <MX_GPIO_Init+0x14c>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	f003 0308 	and.w	r3, r3, #8
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	4b29      	ldr	r3, [pc, #164]	@ (8000d8c <MX_GPIO_Init+0x14c>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	4a28      	ldr	r2, [pc, #160]	@ (8000d8c <MX_GPIO_Init+0x14c>)
 8000cec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf2:	4b26      	ldr	r3, [pc, #152]	@ (8000d8c <MX_GPIO_Init+0x14c>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000d04:	4822      	ldr	r0, [pc, #136]	@ (8000d90 <MX_GPIO_Init+0x150>)
 8000d06:	f001 fc43 	bl	8002590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2140      	movs	r1, #64	@ 0x40
 8000d0e:	4821      	ldr	r0, [pc, #132]	@ (8000d94 <MX_GPIO_Init+0x154>)
 8000d10:	f001 fc3e 	bl	8002590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d1a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d24:	f107 031c 	add.w	r3, r7, #28
 8000d28:	4619      	mov	r1, r3
 8000d2a:	481b      	ldr	r0, [pc, #108]	@ (8000d98 <MX_GPIO_Init+0x158>)
 8000d2c:	f001 fa84 	bl	8002238 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000d30:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000d34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d36:	2301      	movs	r3, #1
 8000d38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d42:	f107 031c 	add.w	r3, r7, #28
 8000d46:	4619      	mov	r1, r3
 8000d48:	4811      	ldr	r0, [pc, #68]	@ (8000d90 <MX_GPIO_Init+0x150>)
 8000d4a:	f001 fa75 	bl	8002238 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d4e:	2340      	movs	r3, #64	@ 0x40
 8000d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d52:	2301      	movs	r3, #1
 8000d54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	4619      	mov	r1, r3
 8000d64:	480b      	ldr	r0, [pc, #44]	@ (8000d94 <MX_GPIO_Init+0x154>)
 8000d66:	f001 fa67 	bl	8002238 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d6a:	2380      	movs	r3, #128	@ 0x80
 8000d6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4805      	ldr	r0, [pc, #20]	@ (8000d94 <MX_GPIO_Init+0x154>)
 8000d7e:	f001 fa5b 	bl	8002238 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d82:	bf00      	nop
 8000d84:	3730      	adds	r7, #48	@ 0x30
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40020400 	.word	0x40020400
 8000d94:	40021800 	.word	0x40021800
 8000d98:	40020800 	.word	0x40020800

08000d9c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <StartUartTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartUartTask */
void StartUartTask(void const * argument)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
#define TRIGOP 1
  /* Infinite loop */
  for(;;)
  {
//	  taskENTER_CRITICAL();
	  HAL_UART_Receive(&huart5, (uint8_t*)&dphi, 1, 0xffff);
 8000db8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	492e      	ldr	r1, [pc, #184]	@ (8000e78 <StartUartTask+0xc8>)
 8000dc0:	482e      	ldr	r0, [pc, #184]	@ (8000e7c <StartUartTask+0xcc>)
 8000dc2:	f003 fafc 	bl	80043be <HAL_UART_Receive>
	  HAL_UART_Receive(&huart5, (uint8_t*)&dtheta, 1, 0xffff);
 8000dc6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000dca:	2201      	movs	r2, #1
 8000dcc:	492c      	ldr	r1, [pc, #176]	@ (8000e80 <StartUartTask+0xd0>)
 8000dce:	482b      	ldr	r0, [pc, #172]	@ (8000e7c <StartUartTask+0xcc>)
 8000dd0:	f003 faf5 	bl	80043be <HAL_UART_Receive>

	  osSemaphoreWait(phiDirSemHandle, osWaitForever);
 8000dd4:	4b2b      	ldr	r3, [pc, #172]	@ (8000e84 <StartUartTask+0xd4>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f004 feaf 	bl	8005b40 <osSemaphoreWait>
	  phi=dphi;
 8000de2:	4b25      	ldr	r3, [pc, #148]	@ (8000e78 <StartUartTask+0xc8>)
 8000de4:	f993 3000 	ldrsb.w	r3, [r3]
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b27      	ldr	r3, [pc, #156]	@ (8000e88 <StartUartTask+0xd8>)
 8000dec:	601a      	str	r2, [r3, #0]
	  osSemaphoreRelease(phiDirSemHandle);
 8000dee:	4b25      	ldr	r3, [pc, #148]	@ (8000e84 <StartUartTask+0xd4>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f004 fef2 	bl	8005bdc <osSemaphoreRelease>
	  osSemaphoreWait(thetaDirSemHandle, osWaitForever);
 8000df8:	4b24      	ldr	r3, [pc, #144]	@ (8000e8c <StartUartTask+0xdc>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000e00:	4618      	mov	r0, r3
 8000e02:	f004 fe9d 	bl	8005b40 <osSemaphoreWait>
	  theta=dtheta;
 8000e06:	4b1e      	ldr	r3, [pc, #120]	@ (8000e80 <StartUartTask+0xd0>)
 8000e08:	f993 3000 	ldrsb.w	r3, [r3]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b20      	ldr	r3, [pc, #128]	@ (8000e90 <StartUartTask+0xe0>)
 8000e10:	601a      	str	r2, [r3, #0]
	  osSemaphoreRelease(thetaDirSemHandle);
 8000e12:	4b1e      	ldr	r3, [pc, #120]	@ (8000e8c <StartUartTask+0xdc>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f004 fee0 	bl	8005bdc <osSemaphoreRelease>

	  HAL_UART_Receive(&huart5, (uint8_t*)&oper, 1, 0xffff);
 8000e1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e20:	2201      	movs	r2, #1
 8000e22:	491c      	ldr	r1, [pc, #112]	@ (8000e94 <StartUartTask+0xe4>)
 8000e24:	4815      	ldr	r0, [pc, #84]	@ (8000e7c <StartUartTask+0xcc>)
 8000e26:	f003 faca 	bl	80043be <HAL_UART_Receive>
//	  taskEXIT_CRITICAL();
	  if(oper == MOVEOP){ // need to check boundary
 8000e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000e94 <StartUartTask+0xe4>)
 8000e2c:	f993 3000 	ldrsb.w	r3, [r3]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d105      	bne.n	8000e40 <StartUartTask+0x90>
		  osSemaphoreRelease(moveSemHandle);
 8000e34:	4b18      	ldr	r3, [pc, #96]	@ (8000e98 <StartUartTask+0xe8>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f004 fecf 	bl	8005bdc <osSemaphoreRelease>
 8000e3e:	e7bb      	b.n	8000db8 <StartUartTask+0x8>
	  }
	  else if(oper == TRIGOP){
 8000e40:	4b14      	ldr	r3, [pc, #80]	@ (8000e94 <StartUartTask+0xe4>)
 8000e42:	f993 3000 	ldrsb.w	r3, [r3]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d1b6      	bne.n	8000db8 <StartUartTask+0x8>
		  osSemaphoreRelease(triggerSemHandle);
 8000e4a:	4b14      	ldr	r3, [pc, #80]	@ (8000e9c <StartUartTask+0xec>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f004 fec4 	bl	8005bdc <osSemaphoreRelease>
		  HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000e54:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e58:	4811      	ldr	r0, [pc, #68]	@ (8000ea0 <StartUartTask+0xf0>)
 8000e5a:	f001 fbb2 	bl	80025c2 <HAL_GPIO_TogglePin>
		  osSemaphoreWait(trigendSemHandle, osWaitForever);
 8000e5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ea4 <StartUartTask+0xf4>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f04f 31ff 	mov.w	r1, #4294967295
 8000e66:	4618      	mov	r0, r3
 8000e68:	f004 fe6a 	bl	8005b40 <osSemaphoreWait>
		  HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000e6c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e70:	480b      	ldr	r0, [pc, #44]	@ (8000ea0 <StartUartTask+0xf0>)
 8000e72:	f001 fba6 	bl	80025c2 <HAL_GPIO_TogglePin>
	  HAL_UART_Receive(&huart5, (uint8_t*)&dphi, 1, 0xffff);
 8000e76:	e79f      	b.n	8000db8 <StartUartTask+0x8>
 8000e78:	20000b85 	.word	0x20000b85
 8000e7c:	200005e0 	.word	0x200005e0
 8000e80:	20000b86 	.word	0x20000b86
 8000e84:	20000b60 	.word	0x20000b60
 8000e88:	20000b7c 	.word	0x20000b7c
 8000e8c:	20000b64 	.word	0x20000b64
 8000e90:	20000b80 	.word	0x20000b80
 8000e94:	20000b84 	.word	0x20000b84
 8000e98:	20000b70 	.word	0x20000b70
 8000e9c:	20000b68 	.word	0x20000b68
 8000ea0:	40020400 	.word	0x40020400
 8000ea4:	20000b6c 	.word	0x20000b6c

08000ea8 <StartMotorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void const * argument)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorTask */
  const int PHICENTER = 450-1, THETACENTER = 450-1;
 8000eb0:	f240 13c1 	movw	r3, #449	@ 0x1c1
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	f240 13c1 	movw	r3, #449	@ 0x1c1
 8000eba:	60bb      	str	r3, [r7, #8]
//  int phipulse = PHICENTER, thetapulse = THETACENTER;
  int phipulse = PHICENTER, thetapulse = THETACENTER;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	617b      	str	r3, [r7, #20]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	613b      	str	r3, [r7, #16]
  /* Infinite loop */
  for(;;)
  {
  	  osSemaphoreWait(moveSemHandle, osWaitForever);
 8000ec4:	4b25      	ldr	r3, [pc, #148]	@ (8000f5c <StartMotorTask+0xb4>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f004 fe37 	bl	8005b40 <osSemaphoreWait>

	  osSemaphoreWait(phiDirSemHandle, osWaitForever);
 8000ed2:	4b23      	ldr	r3, [pc, #140]	@ (8000f60 <StartMotorTask+0xb8>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f04f 31ff 	mov.w	r1, #4294967295
 8000eda:	4618      	mov	r0, r3
 8000edc:	f004 fe30 	bl	8005b40 <osSemaphoreWait>
	  phipulse += phi;
 8000ee0:	4b20      	ldr	r3, [pc, #128]	@ (8000f64 <StartMotorTask+0xbc>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	697a      	ldr	r2, [r7, #20]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	617b      	str	r3, [r7, #20]
	  osSemaphoreRelease(phiDirSemHandle);
 8000eea:	4b1d      	ldr	r3, [pc, #116]	@ (8000f60 <StartMotorTask+0xb8>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f004 fe74 	bl	8005bdc <osSemaphoreRelease>

	  osSemaphoreWait(thetaDirSemHandle, osWaitForever);
 8000ef4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f68 <StartMotorTask+0xc0>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8000efc:	4618      	mov	r0, r3
 8000efe:	f004 fe1f 	bl	8005b40 <osSemaphoreWait>
	  thetapulse += theta;
 8000f02:	4b1a      	ldr	r3, [pc, #104]	@ (8000f6c <StartMotorTask+0xc4>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	4413      	add	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
	  osSemaphoreRelease(thetaDirSemHandle);
 8000f0c:	4b16      	ldr	r3, [pc, #88]	@ (8000f68 <StartMotorTask+0xc0>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f004 fe63 	bl	8005bdc <osSemaphoreRelease>

	  if(phipulse<MINPULSE||phipulse>MAXPULSE||thetapulse<MINPULSE||thetapulse>MAXPULSE){
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	2b95      	cmp	r3, #149	@ 0x95
 8000f1a:	dd0c      	ble.n	8000f36 <StartMotorTask+0x8e>
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8000f22:	4293      	cmp	r3, r2
 8000f24:	dc07      	bgt.n	8000f36 <StartMotorTask+0x8e>
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	2b95      	cmp	r3, #149	@ 0x95
 8000f2a:	dd04      	ble.n	8000f36 <StartMotorTask+0x8e>
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8000f32:	4293      	cmp	r3, r2
 8000f34:	dd0a      	ble.n	8000f4c <StartMotorTask+0xa4>
		  HAL_UART_Transmit(&huart5, '\0', 1, 0xffff);
 8000f36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	480c      	ldr	r0, [pc, #48]	@ (8000f70 <StartMotorTask+0xc8>)
 8000f40:	f003 f9b2 	bl	80042a8 <HAL_UART_Transmit>
		  phipulse = PHICENTER, thetapulse = THETACENTER;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	617b      	str	r3, [r7, #20]
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	613b      	str	r3, [r7, #16]
	  }
	  TIM2->CCR4 = phipulse;
 8000f4c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	6413      	str	r3, [r2, #64]	@ 0x40
	  TIM3->CCR3 = thetapulse;
 8000f54:	4a07      	ldr	r2, [pc, #28]	@ (8000f74 <StartMotorTask+0xcc>)
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	63d3      	str	r3, [r2, #60]	@ 0x3c
  	  osSemaphoreWait(moveSemHandle, osWaitForever);
 8000f5a:	e7b3      	b.n	8000ec4 <StartMotorTask+0x1c>
 8000f5c:	20000b70 	.word	0x20000b70
 8000f60:	20000b60 	.word	0x20000b60
 8000f64:	20000b7c 	.word	0x20000b7c
 8000f68:	20000b64 	.word	0x20000b64
 8000f6c:	20000b80 	.word	0x20000b80
 8000f70:	200005e0 	.word	0x200005e0
 8000f74:	40000400 	.word	0x40000400

08000f78 <StartTrigTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTrigTask */
void StartTrigTask(void const * argument)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTrigTask */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreWait(triggerSemHandle, osWaitForever);
 8000f80:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc0 <StartTrigTask+0x48>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f04f 31ff 	mov.w	r1, #4294967295
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f004 fdd9 	bl	8005b40 <osSemaphoreWait>
	HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000f8e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f92:	480c      	ldr	r0, [pc, #48]	@ (8000fc4 <StartTrigTask+0x4c>)
 8000f94:	f001 fb15 	bl	80025c2 <HAL_GPIO_TogglePin>
	printf("%d %d\r\n", phi, theta);
 8000f98:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc8 <StartTrigTask+0x50>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0b      	ldr	r2, [pc, #44]	@ (8000fcc <StartTrigTask+0x54>)
 8000f9e:	6812      	ldr	r2, [r2, #0]
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	480b      	ldr	r0, [pc, #44]	@ (8000fd0 <StartTrigTask+0x58>)
 8000fa4:	f007 f98a 	bl	80082bc <iprintf>
//    osDelay(16);
	HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000fa8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fac:	4805      	ldr	r0, [pc, #20]	@ (8000fc4 <StartTrigTask+0x4c>)
 8000fae:	f001 fb08 	bl	80025c2 <HAL_GPIO_TogglePin>
    osSemaphoreRelease(trigendSemHandle);
 8000fb2:	4b08      	ldr	r3, [pc, #32]	@ (8000fd4 <StartTrigTask+0x5c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f004 fe10 	bl	8005bdc <osSemaphoreRelease>
	osSemaphoreWait(triggerSemHandle, osWaitForever);
 8000fbc:	bf00      	nop
 8000fbe:	e7df      	b.n	8000f80 <StartTrigTask+0x8>
 8000fc0:	20000b68 	.word	0x20000b68
 8000fc4:	40020400 	.word	0x40020400
 8000fc8:	20000b7c 	.word	0x20000b7c
 8000fcc:	20000b80 	.word	0x20000b80
 8000fd0:	080090f0 	.word	0x080090f0
 8000fd4:	20000b6c 	.word	0x20000b6c

08000fd8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a04      	ldr	r2, [pc, #16]	@ (8000ff8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d101      	bne.n	8000fee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fea:	f000 fc45 	bl	8001878 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40001000 	.word	0x40001000

08000ffc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001000:	b672      	cpsid	i
}
 8001002:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001004:	bf00      	nop
 8001006:	e7fd      	b.n	8001004 <Error_Handler+0x8>

08001008 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	4b12      	ldr	r3, [pc, #72]	@ (800105c <HAL_MspInit+0x54>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001016:	4a11      	ldr	r2, [pc, #68]	@ (800105c <HAL_MspInit+0x54>)
 8001018:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800101c:	6453      	str	r3, [r2, #68]	@ 0x44
 800101e:	4b0f      	ldr	r3, [pc, #60]	@ (800105c <HAL_MspInit+0x54>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001022:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	603b      	str	r3, [r7, #0]
 800102e:	4b0b      	ldr	r3, [pc, #44]	@ (800105c <HAL_MspInit+0x54>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001032:	4a0a      	ldr	r2, [pc, #40]	@ (800105c <HAL_MspInit+0x54>)
 8001034:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001038:	6413      	str	r3, [r2, #64]	@ 0x40
 800103a:	4b08      	ldr	r3, [pc, #32]	@ (800105c <HAL_MspInit+0x54>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001042:	603b      	str	r3, [r7, #0]
 8001044:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001046:	2200      	movs	r2, #0
 8001048:	210f      	movs	r1, #15
 800104a:	f06f 0001 	mvn.w	r0, #1
 800104e:	f000 fd0f 	bl	8001a70 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40023800 	.word	0x40023800

08001060 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08e      	sub	sp, #56	@ 0x38
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a55      	ldr	r2, [pc, #340]	@ (80011d4 <HAL_ETH_MspInit+0x174>)
 800107e:	4293      	cmp	r3, r2
 8001080:	f040 80a4 	bne.w	80011cc <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001084:	2300      	movs	r3, #0
 8001086:	623b      	str	r3, [r7, #32]
 8001088:	4b53      	ldr	r3, [pc, #332]	@ (80011d8 <HAL_ETH_MspInit+0x178>)
 800108a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108c:	4a52      	ldr	r2, [pc, #328]	@ (80011d8 <HAL_ETH_MspInit+0x178>)
 800108e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001092:	6313      	str	r3, [r2, #48]	@ 0x30
 8001094:	4b50      	ldr	r3, [pc, #320]	@ (80011d8 <HAL_ETH_MspInit+0x178>)
 8001096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001098:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800109c:	623b      	str	r3, [r7, #32]
 800109e:	6a3b      	ldr	r3, [r7, #32]
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
 80010a4:	4b4c      	ldr	r3, [pc, #304]	@ (80011d8 <HAL_ETH_MspInit+0x178>)
 80010a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a8:	4a4b      	ldr	r2, [pc, #300]	@ (80011d8 <HAL_ETH_MspInit+0x178>)
 80010aa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80010ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b0:	4b49      	ldr	r3, [pc, #292]	@ (80011d8 <HAL_ETH_MspInit+0x178>)
 80010b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80010b8:	61fb      	str	r3, [r7, #28]
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	2300      	movs	r3, #0
 80010be:	61bb      	str	r3, [r7, #24]
 80010c0:	4b45      	ldr	r3, [pc, #276]	@ (80011d8 <HAL_ETH_MspInit+0x178>)
 80010c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c4:	4a44      	ldr	r2, [pc, #272]	@ (80011d8 <HAL_ETH_MspInit+0x178>)
 80010c6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80010ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80010cc:	4b42      	ldr	r3, [pc, #264]	@ (80011d8 <HAL_ETH_MspInit+0x178>)
 80010ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80010d4:	61bb      	str	r3, [r7, #24]
 80010d6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
 80010dc:	4b3e      	ldr	r3, [pc, #248]	@ (80011d8 <HAL_ETH_MspInit+0x178>)
 80010de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e0:	4a3d      	ldr	r2, [pc, #244]	@ (80011d8 <HAL_ETH_MspInit+0x178>)
 80010e2:	f043 0304 	orr.w	r3, r3, #4
 80010e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e8:	4b3b      	ldr	r3, [pc, #236]	@ (80011d8 <HAL_ETH_MspInit+0x178>)
 80010ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ec:	f003 0304 	and.w	r3, r3, #4
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f4:	2300      	movs	r3, #0
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	4b37      	ldr	r3, [pc, #220]	@ (80011d8 <HAL_ETH_MspInit+0x178>)
 80010fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fc:	4a36      	ldr	r2, [pc, #216]	@ (80011d8 <HAL_ETH_MspInit+0x178>)
 80010fe:	f043 0301 	orr.w	r3, r3, #1
 8001102:	6313      	str	r3, [r2, #48]	@ 0x30
 8001104:	4b34      	ldr	r3, [pc, #208]	@ (80011d8 <HAL_ETH_MspInit+0x178>)
 8001106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	4b30      	ldr	r3, [pc, #192]	@ (80011d8 <HAL_ETH_MspInit+0x178>)
 8001116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001118:	4a2f      	ldr	r2, [pc, #188]	@ (80011d8 <HAL_ETH_MspInit+0x178>)
 800111a:	f043 0302 	orr.w	r3, r3, #2
 800111e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001120:	4b2d      	ldr	r3, [pc, #180]	@ (80011d8 <HAL_ETH_MspInit+0x178>)
 8001122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800112c:	2300      	movs	r3, #0
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	4b29      	ldr	r3, [pc, #164]	@ (80011d8 <HAL_ETH_MspInit+0x178>)
 8001132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001134:	4a28      	ldr	r2, [pc, #160]	@ (80011d8 <HAL_ETH_MspInit+0x178>)
 8001136:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800113a:	6313      	str	r3, [r2, #48]	@ 0x30
 800113c:	4b26      	ldr	r3, [pc, #152]	@ (80011d8 <HAL_ETH_MspInit+0x178>)
 800113e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001148:	2332      	movs	r3, #50	@ 0x32
 800114a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114c:	2302      	movs	r3, #2
 800114e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001154:	2303      	movs	r3, #3
 8001156:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001158:	230b      	movs	r3, #11
 800115a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800115c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001160:	4619      	mov	r1, r3
 8001162:	481e      	ldr	r0, [pc, #120]	@ (80011dc <HAL_ETH_MspInit+0x17c>)
 8001164:	f001 f868 	bl	8002238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001168:	2386      	movs	r3, #134	@ 0x86
 800116a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	2302      	movs	r3, #2
 800116e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001174:	2303      	movs	r3, #3
 8001176:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001178:	230b      	movs	r3, #11
 800117a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001180:	4619      	mov	r1, r3
 8001182:	4817      	ldr	r0, [pc, #92]	@ (80011e0 <HAL_ETH_MspInit+0x180>)
 8001184:	f001 f858 	bl	8002238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001188:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800118c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118e:	2302      	movs	r3, #2
 8001190:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001196:	2303      	movs	r3, #3
 8001198:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800119a:	230b      	movs	r3, #11
 800119c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800119e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011a2:	4619      	mov	r1, r3
 80011a4:	480f      	ldr	r0, [pc, #60]	@ (80011e4 <HAL_ETH_MspInit+0x184>)
 80011a6:	f001 f847 	bl	8002238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80011aa:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80011ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b0:	2302      	movs	r3, #2
 80011b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b8:	2303      	movs	r3, #3
 80011ba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011bc:	230b      	movs	r3, #11
 80011be:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011c4:	4619      	mov	r1, r3
 80011c6:	4808      	ldr	r0, [pc, #32]	@ (80011e8 <HAL_ETH_MspInit+0x188>)
 80011c8:	f001 f836 	bl	8002238 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 80011cc:	bf00      	nop
 80011ce:	3738      	adds	r7, #56	@ 0x38
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40028000 	.word	0x40028000
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020800 	.word	0x40020800
 80011e0:	40020000 	.word	0x40020000
 80011e4:	40020400 	.word	0x40020400
 80011e8:	40021800 	.word	0x40021800

080011ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011fc:	d10e      	bne.n	800121c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	4b13      	ldr	r3, [pc, #76]	@ (8001250 <HAL_TIM_Base_MspInit+0x64>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001206:	4a12      	ldr	r2, [pc, #72]	@ (8001250 <HAL_TIM_Base_MspInit+0x64>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6413      	str	r3, [r2, #64]	@ 0x40
 800120e:	4b10      	ldr	r3, [pc, #64]	@ (8001250 <HAL_TIM_Base_MspInit+0x64>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800121a:	e012      	b.n	8001242 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a0c      	ldr	r2, [pc, #48]	@ (8001254 <HAL_TIM_Base_MspInit+0x68>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d10d      	bne.n	8001242 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	4b09      	ldr	r3, [pc, #36]	@ (8001250 <HAL_TIM_Base_MspInit+0x64>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122e:	4a08      	ldr	r2, [pc, #32]	@ (8001250 <HAL_TIM_Base_MspInit+0x64>)
 8001230:	f043 0302 	orr.w	r3, r3, #2
 8001234:	6413      	str	r3, [r2, #64]	@ 0x40
 8001236:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <HAL_TIM_Base_MspInit+0x64>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]
}
 8001242:	bf00      	nop
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	40023800 	.word	0x40023800
 8001254:	40000400 	.word	0x40000400

08001258 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	@ 0x28
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001278:	d11e      	bne.n	80012b8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	4b22      	ldr	r3, [pc, #136]	@ (8001308 <HAL_TIM_MspPostInit+0xb0>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	4a21      	ldr	r2, [pc, #132]	@ (8001308 <HAL_TIM_MspPostInit+0xb0>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6313      	str	r3, [r2, #48]	@ 0x30
 800128a:	4b1f      	ldr	r3, [pc, #124]	@ (8001308 <HAL_TIM_MspPostInit+0xb0>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001296:	2308      	movs	r3, #8
 8001298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129a:	2302      	movs	r3, #2
 800129c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a2:	2300      	movs	r3, #0
 80012a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012a6:	2301      	movs	r3, #1
 80012a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	4619      	mov	r1, r3
 80012b0:	4816      	ldr	r0, [pc, #88]	@ (800130c <HAL_TIM_MspPostInit+0xb4>)
 80012b2:	f000 ffc1 	bl	8002238 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80012b6:	e023      	b.n	8001300 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a14      	ldr	r2, [pc, #80]	@ (8001310 <HAL_TIM_MspPostInit+0xb8>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d11e      	bne.n	8001300 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	4b10      	ldr	r3, [pc, #64]	@ (8001308 <HAL_TIM_MspPostInit+0xb0>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001308 <HAL_TIM_MspPostInit+0xb0>)
 80012cc:	f043 0304 	orr.w	r3, r3, #4
 80012d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001308 <HAL_TIM_MspPostInit+0xb0>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	f003 0304 	and.w	r3, r3, #4
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ec:	2300      	movs	r3, #0
 80012ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012f0:	2302      	movs	r3, #2
 80012f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	4806      	ldr	r0, [pc, #24]	@ (8001314 <HAL_TIM_MspPostInit+0xbc>)
 80012fc:	f000 ff9c 	bl	8002238 <HAL_GPIO_Init>
}
 8001300:	bf00      	nop
 8001302:	3728      	adds	r7, #40	@ 0x28
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40023800 	.word	0x40023800
 800130c:	40020000 	.word	0x40020000
 8001310:	40000400 	.word	0x40000400
 8001314:	40020800 	.word	0x40020800

08001318 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08c      	sub	sp, #48	@ 0x30
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a42      	ldr	r2, [pc, #264]	@ (8001440 <HAL_UART_MspInit+0x128>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d14b      	bne.n	80013d2 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	61bb      	str	r3, [r7, #24]
 800133e:	4b41      	ldr	r3, [pc, #260]	@ (8001444 <HAL_UART_MspInit+0x12c>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001342:	4a40      	ldr	r2, [pc, #256]	@ (8001444 <HAL_UART_MspInit+0x12c>)
 8001344:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001348:	6413      	str	r3, [r2, #64]	@ 0x40
 800134a:	4b3e      	ldr	r3, [pc, #248]	@ (8001444 <HAL_UART_MspInit+0x12c>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001352:	61bb      	str	r3, [r7, #24]
 8001354:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
 800135a:	4b3a      	ldr	r3, [pc, #232]	@ (8001444 <HAL_UART_MspInit+0x12c>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	4a39      	ldr	r2, [pc, #228]	@ (8001444 <HAL_UART_MspInit+0x12c>)
 8001360:	f043 0304 	orr.w	r3, r3, #4
 8001364:	6313      	str	r3, [r2, #48]	@ 0x30
 8001366:	4b37      	ldr	r3, [pc, #220]	@ (8001444 <HAL_UART_MspInit+0x12c>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	f003 0304 	and.w	r3, r3, #4
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	4b33      	ldr	r3, [pc, #204]	@ (8001444 <HAL_UART_MspInit+0x12c>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	4a32      	ldr	r2, [pc, #200]	@ (8001444 <HAL_UART_MspInit+0x12c>)
 800137c:	f043 0308 	orr.w	r3, r3, #8
 8001380:	6313      	str	r3, [r2, #48]	@ 0x30
 8001382:	4b30      	ldr	r3, [pc, #192]	@ (8001444 <HAL_UART_MspInit+0x12c>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	f003 0308 	and.w	r3, r3, #8
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800138e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001394:	2302      	movs	r3, #2
 8001396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139c:	2303      	movs	r3, #3
 800139e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80013a0:	2308      	movs	r3, #8
 80013a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a4:	f107 031c 	add.w	r3, r7, #28
 80013a8:	4619      	mov	r1, r3
 80013aa:	4827      	ldr	r0, [pc, #156]	@ (8001448 <HAL_UART_MspInit+0x130>)
 80013ac:	f000 ff44 	bl	8002238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013b0:	2304      	movs	r3, #4
 80013b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	2302      	movs	r3, #2
 80013b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013bc:	2303      	movs	r3, #3
 80013be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80013c0:	2308      	movs	r3, #8
 80013c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013c4:	f107 031c 	add.w	r3, r7, #28
 80013c8:	4619      	mov	r1, r3
 80013ca:	4820      	ldr	r0, [pc, #128]	@ (800144c <HAL_UART_MspInit+0x134>)
 80013cc:	f000 ff34 	bl	8002238 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013d0:	e031      	b.n	8001436 <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART3)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a1e      	ldr	r2, [pc, #120]	@ (8001450 <HAL_UART_MspInit+0x138>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d12c      	bne.n	8001436 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013dc:	2300      	movs	r3, #0
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	4b18      	ldr	r3, [pc, #96]	@ (8001444 <HAL_UART_MspInit+0x12c>)
 80013e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e4:	4a17      	ldr	r2, [pc, #92]	@ (8001444 <HAL_UART_MspInit+0x12c>)
 80013e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ec:	4b15      	ldr	r3, [pc, #84]	@ (8001444 <HAL_UART_MspInit+0x12c>)
 80013ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f8:	2300      	movs	r3, #0
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	4b11      	ldr	r3, [pc, #68]	@ (8001444 <HAL_UART_MspInit+0x12c>)
 80013fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001400:	4a10      	ldr	r2, [pc, #64]	@ (8001444 <HAL_UART_MspInit+0x12c>)
 8001402:	f043 0308 	orr.w	r3, r3, #8
 8001406:	6313      	str	r3, [r2, #48]	@ 0x30
 8001408:	4b0e      	ldr	r3, [pc, #56]	@ (8001444 <HAL_UART_MspInit+0x12c>)
 800140a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140c:	f003 0308 	and.w	r3, r3, #8
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001414:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141a:	2302      	movs	r3, #2
 800141c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001422:	2303      	movs	r3, #3
 8001424:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001426:	2307      	movs	r3, #7
 8001428:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800142a:	f107 031c 	add.w	r3, r7, #28
 800142e:	4619      	mov	r1, r3
 8001430:	4806      	ldr	r0, [pc, #24]	@ (800144c <HAL_UART_MspInit+0x134>)
 8001432:	f000 ff01 	bl	8002238 <HAL_GPIO_Init>
}
 8001436:	bf00      	nop
 8001438:	3730      	adds	r7, #48	@ 0x30
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40005000 	.word	0x40005000
 8001444:	40023800 	.word	0x40023800
 8001448:	40020800 	.word	0x40020800
 800144c:	40020c00 	.word	0x40020c00
 8001450:	40004800 	.word	0x40004800

08001454 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08a      	sub	sp, #40	@ 0x28
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001474:	d13f      	bne.n	80014f6 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	4b21      	ldr	r3, [pc, #132]	@ (8001500 <HAL_PCD_MspInit+0xac>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	4a20      	ldr	r2, [pc, #128]	@ (8001500 <HAL_PCD_MspInit+0xac>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6313      	str	r3, [r2, #48]	@ 0x30
 8001486:	4b1e      	ldr	r3, [pc, #120]	@ (8001500 <HAL_PCD_MspInit+0xac>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001492:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001498:	2302      	movs	r3, #2
 800149a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a0:	2303      	movs	r3, #3
 80014a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014a4:	230a      	movs	r3, #10
 80014a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	4619      	mov	r1, r3
 80014ae:	4815      	ldr	r0, [pc, #84]	@ (8001504 <HAL_PCD_MspInit+0xb0>)
 80014b0:	f000 fec2 	bl	8002238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80014b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014c2:	f107 0314 	add.w	r3, r7, #20
 80014c6:	4619      	mov	r1, r3
 80014c8:	480e      	ldr	r0, [pc, #56]	@ (8001504 <HAL_PCD_MspInit+0xb0>)
 80014ca:	f000 feb5 	bl	8002238 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80014ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001500 <HAL_PCD_MspInit+0xac>)
 80014d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001500 <HAL_PCD_MspInit+0xac>)
 80014d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014d8:	6353      	str	r3, [r2, #52]	@ 0x34
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	4b08      	ldr	r3, [pc, #32]	@ (8001500 <HAL_PCD_MspInit+0xac>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e2:	4a07      	ldr	r2, [pc, #28]	@ (8001500 <HAL_PCD_MspInit+0xac>)
 80014e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ea:	4b05      	ldr	r3, [pc, #20]	@ (8001500 <HAL_PCD_MspInit+0xac>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80014f6:	bf00      	nop
 80014f8:	3728      	adds	r7, #40	@ 0x28
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40023800 	.word	0x40023800
 8001504:	40020000 	.word	0x40020000

08001508 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08e      	sub	sp, #56	@ 0x38
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001510:	2300      	movs	r3, #0
 8001512:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001514:	2300      	movs	r3, #0
 8001516:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	4b33      	ldr	r3, [pc, #204]	@ (80015ec <HAL_InitTick+0xe4>)
 800151e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001520:	4a32      	ldr	r2, [pc, #200]	@ (80015ec <HAL_InitTick+0xe4>)
 8001522:	f043 0310 	orr.w	r3, r3, #16
 8001526:	6413      	str	r3, [r2, #64]	@ 0x40
 8001528:	4b30      	ldr	r3, [pc, #192]	@ (80015ec <HAL_InitTick+0xe4>)
 800152a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152c:	f003 0310 	and.w	r3, r3, #16
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001534:	f107 0210 	add.w	r2, r7, #16
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	4611      	mov	r1, r2
 800153e:	4618      	mov	r0, r3
 8001540:	f001 fe00 	bl	8003144 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001544:	6a3b      	ldr	r3, [r7, #32]
 8001546:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800154a:	2b00      	cmp	r3, #0
 800154c:	d103      	bne.n	8001556 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800154e:	f001 fdd1 	bl	80030f4 <HAL_RCC_GetPCLK1Freq>
 8001552:	6378      	str	r0, [r7, #52]	@ 0x34
 8001554:	e004      	b.n	8001560 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001556:	f001 fdcd 	bl	80030f4 <HAL_RCC_GetPCLK1Freq>
 800155a:	4603      	mov	r3, r0
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001562:	4a23      	ldr	r2, [pc, #140]	@ (80015f0 <HAL_InitTick+0xe8>)
 8001564:	fba2 2303 	umull	r2, r3, r2, r3
 8001568:	0c9b      	lsrs	r3, r3, #18
 800156a:	3b01      	subs	r3, #1
 800156c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800156e:	4b21      	ldr	r3, [pc, #132]	@ (80015f4 <HAL_InitTick+0xec>)
 8001570:	4a21      	ldr	r2, [pc, #132]	@ (80015f8 <HAL_InitTick+0xf0>)
 8001572:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001574:	4b1f      	ldr	r3, [pc, #124]	@ (80015f4 <HAL_InitTick+0xec>)
 8001576:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800157a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800157c:	4a1d      	ldr	r2, [pc, #116]	@ (80015f4 <HAL_InitTick+0xec>)
 800157e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001580:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001582:	4b1c      	ldr	r3, [pc, #112]	@ (80015f4 <HAL_InitTick+0xec>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001588:	4b1a      	ldr	r3, [pc, #104]	@ (80015f4 <HAL_InitTick+0xec>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800158e:	4b19      	ldr	r3, [pc, #100]	@ (80015f4 <HAL_InitTick+0xec>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001594:	4817      	ldr	r0, [pc, #92]	@ (80015f4 <HAL_InitTick+0xec>)
 8001596:	f001 fe07 	bl	80031a8 <HAL_TIM_Base_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80015a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d11b      	bne.n	80015e0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80015a8:	4812      	ldr	r0, [pc, #72]	@ (80015f4 <HAL_InitTick+0xec>)
 80015aa:	f001 fe4d 	bl	8003248 <HAL_TIM_Base_Start_IT>
 80015ae:	4603      	mov	r3, r0
 80015b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80015b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d111      	bne.n	80015e0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015bc:	2036      	movs	r0, #54	@ 0x36
 80015be:	f000 fa73 	bl	8001aa8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2b0f      	cmp	r3, #15
 80015c6:	d808      	bhi.n	80015da <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80015c8:	2200      	movs	r2, #0
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	2036      	movs	r0, #54	@ 0x36
 80015ce:	f000 fa4f 	bl	8001a70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015d2:	4a0a      	ldr	r2, [pc, #40]	@ (80015fc <HAL_InitTick+0xf4>)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6013      	str	r3, [r2, #0]
 80015d8:	e002      	b.n	80015e0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80015e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3738      	adds	r7, #56	@ 0x38
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40023800 	.word	0x40023800
 80015f0:	431bde83 	.word	0x431bde83
 80015f4:	20000b90 	.word	0x20000b90
 80015f8:	40001000 	.word	0x40001000
 80015fc:	20000004 	.word	0x20000004

08001600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <NMI_Handler+0x4>

08001608 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <HardFault_Handler+0x4>

08001610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001614:	bf00      	nop
 8001616:	e7fd      	b.n	8001614 <MemManage_Handler+0x4>

08001618 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <BusFault_Handler+0x4>

08001620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001624:	bf00      	nop
 8001626:	e7fd      	b.n	8001624 <UsageFault_Handler+0x4>

08001628 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
	...

08001638 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800163c:	4802      	ldr	r0, [pc, #8]	@ (8001648 <USART3_IRQHandler+0x10>)
 800163e:	f002 ff7b 	bl	8004538 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000628 	.word	0x20000628

0800164c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001650:	4802      	ldr	r0, [pc, #8]	@ (800165c <UART5_IRQHandler+0x10>)
 8001652:	f002 ff71 	bl	8004538 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200005e0 	.word	0x200005e0

08001660 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001664:	4802      	ldr	r0, [pc, #8]	@ (8001670 <TIM6_DAC_IRQHandler+0x10>)
 8001666:	f001 ff81 	bl	800356c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000b90 	.word	0x20000b90

08001674 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	e00a      	b.n	800169c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001686:	f7fe ffa7 	bl	80005d8 <__io_getchar>
 800168a:	4601      	mov	r1, r0
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	1c5a      	adds	r2, r3, #1
 8001690:	60ba      	str	r2, [r7, #8]
 8001692:	b2ca      	uxtb	r2, r1
 8001694:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	3301      	adds	r3, #1
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	dbf0      	blt.n	8001686 <_read+0x12>
  }

  return len;
 80016a4:	687b      	ldr	r3, [r7, #4]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b086      	sub	sp, #24
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	60f8      	str	r0, [r7, #12]
 80016b6:	60b9      	str	r1, [r7, #8]
 80016b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	e009      	b.n	80016d4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	1c5a      	adds	r2, r3, #1
 80016c4:	60ba      	str	r2, [r7, #8]
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe ff73 	bl	80005b4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	3301      	adds	r3, #1
 80016d2:	617b      	str	r3, [r7, #20]
 80016d4:	697a      	ldr	r2, [r7, #20]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	429a      	cmp	r2, r3
 80016da:	dbf1      	blt.n	80016c0 <_write+0x12>
  }
  return len;
 80016dc:	687b      	ldr	r3, [r7, #4]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <_close>:

int _close(int file)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
 8001706:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800170e:	605a      	str	r2, [r3, #4]
  return 0;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <_isatty>:

int _isatty(int file)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001726:	2301      	movs	r3, #1
}
 8001728:	4618      	mov	r0, r3
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001758:	4a14      	ldr	r2, [pc, #80]	@ (80017ac <_sbrk+0x5c>)
 800175a:	4b15      	ldr	r3, [pc, #84]	@ (80017b0 <_sbrk+0x60>)
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001764:	4b13      	ldr	r3, [pc, #76]	@ (80017b4 <_sbrk+0x64>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d102      	bne.n	8001772 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800176c:	4b11      	ldr	r3, [pc, #68]	@ (80017b4 <_sbrk+0x64>)
 800176e:	4a12      	ldr	r2, [pc, #72]	@ (80017b8 <_sbrk+0x68>)
 8001770:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001772:	4b10      	ldr	r3, [pc, #64]	@ (80017b4 <_sbrk+0x64>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4413      	add	r3, r2
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	429a      	cmp	r2, r3
 800177e:	d207      	bcs.n	8001790 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001780:	f006 fe96 	bl	80084b0 <__errno>
 8001784:	4603      	mov	r3, r0
 8001786:	220c      	movs	r2, #12
 8001788:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800178a:	f04f 33ff 	mov.w	r3, #4294967295
 800178e:	e009      	b.n	80017a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001790:	4b08      	ldr	r3, [pc, #32]	@ (80017b4 <_sbrk+0x64>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001796:	4b07      	ldr	r3, [pc, #28]	@ (80017b4 <_sbrk+0x64>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	4a05      	ldr	r2, [pc, #20]	@ (80017b4 <_sbrk+0x64>)
 80017a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017a2:	68fb      	ldr	r3, [r7, #12]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20030000 	.word	0x20030000
 80017b0:	00000400 	.word	0x00000400
 80017b4:	20000bd8 	.word	0x20000bd8
 80017b8:	20004a80 	.word	0x20004a80

080017bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c0:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <SystemInit+0x20>)
 80017c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017c6:	4a05      	ldr	r2, [pc, #20]	@ (80017dc <SystemInit+0x20>)
 80017c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80017e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001818 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017e4:	f7ff ffea 	bl	80017bc <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017e8:	480c      	ldr	r0, [pc, #48]	@ (800181c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017ea:	490d      	ldr	r1, [pc, #52]	@ (8001820 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001824 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f0:	e002      	b.n	80017f8 <LoopCopyDataInit>

080017f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017f6:	3304      	adds	r3, #4

080017f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017fc:	d3f9      	bcc.n	80017f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001828 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001800:	4c0a      	ldr	r4, [pc, #40]	@ (800182c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001804:	e001      	b.n	800180a <LoopFillZerobss>

08001806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001808:	3204      	adds	r2, #4

0800180a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800180c:	d3fb      	bcc.n	8001806 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800180e:	f006 fe55 	bl	80084bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001812:	f7fe ff07 	bl	8000624 <main>
  bx  lr    
 8001816:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001818:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800181c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001820:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001824:	0800915c 	.word	0x0800915c
  ldr r2, =_sbss
 8001828:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800182c:	20004a80 	.word	0x20004a80

08001830 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001830:	e7fe      	b.n	8001830 <ADC_IRQHandler>
	...

08001834 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001838:	4b0e      	ldr	r3, [pc, #56]	@ (8001874 <HAL_Init+0x40>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a0d      	ldr	r2, [pc, #52]	@ (8001874 <HAL_Init+0x40>)
 800183e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001842:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001844:	4b0b      	ldr	r3, [pc, #44]	@ (8001874 <HAL_Init+0x40>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a0a      	ldr	r2, [pc, #40]	@ (8001874 <HAL_Init+0x40>)
 800184a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800184e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001850:	4b08      	ldr	r3, [pc, #32]	@ (8001874 <HAL_Init+0x40>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a07      	ldr	r2, [pc, #28]	@ (8001874 <HAL_Init+0x40>)
 8001856:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800185a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800185c:	2003      	movs	r0, #3
 800185e:	f000 f8fc 	bl	8001a5a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001862:	200f      	movs	r0, #15
 8001864:	f7ff fe50 	bl	8001508 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001868:	f7ff fbce 	bl	8001008 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40023c00 	.word	0x40023c00

08001878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800187c:	4b06      	ldr	r3, [pc, #24]	@ (8001898 <HAL_IncTick+0x20>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	4b06      	ldr	r3, [pc, #24]	@ (800189c <HAL_IncTick+0x24>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4a04      	ldr	r2, [pc, #16]	@ (800189c <HAL_IncTick+0x24>)
 800188a:	6013      	str	r3, [r2, #0]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	20000008 	.word	0x20000008
 800189c:	20000bdc 	.word	0x20000bdc

080018a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return uwTick;
 80018a4:	4b03      	ldr	r3, [pc, #12]	@ (80018b4 <HAL_GetTick+0x14>)
 80018a6:	681b      	ldr	r3, [r3, #0]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	20000bdc 	.word	0x20000bdc

080018b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c0:	f7ff ffee 	bl	80018a0 <HAL_GetTick>
 80018c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d0:	d005      	beq.n	80018de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018d2:	4b0a      	ldr	r3, [pc, #40]	@ (80018fc <HAL_Delay+0x44>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	461a      	mov	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4413      	add	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018de:	bf00      	nop
 80018e0:	f7ff ffde 	bl	80018a0 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d8f7      	bhi.n	80018e0 <HAL_Delay+0x28>
  {
  }
}
 80018f0:	bf00      	nop
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000008 	.word	0x20000008

08001900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001910:	4b0c      	ldr	r3, [pc, #48]	@ (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800191c:	4013      	ands	r3, r2
 800191e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001928:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800192c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001932:	4a04      	ldr	r2, [pc, #16]	@ (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	60d3      	str	r3, [r2, #12]
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800194c:	4b04      	ldr	r3, [pc, #16]	@ (8001960 <__NVIC_GetPriorityGrouping+0x18>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	0a1b      	lsrs	r3, r3, #8
 8001952:	f003 0307 	and.w	r3, r3, #7
}
 8001956:	4618      	mov	r0, r3
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	2b00      	cmp	r3, #0
 8001974:	db0b      	blt.n	800198e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	f003 021f 	and.w	r2, r3, #31
 800197c:	4907      	ldr	r1, [pc, #28]	@ (800199c <__NVIC_EnableIRQ+0x38>)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	095b      	lsrs	r3, r3, #5
 8001984:	2001      	movs	r0, #1
 8001986:	fa00 f202 	lsl.w	r2, r0, r2
 800198a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000e100 	.word	0xe000e100

080019a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	6039      	str	r1, [r7, #0]
 80019aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	db0a      	blt.n	80019ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	490c      	ldr	r1, [pc, #48]	@ (80019ec <__NVIC_SetPriority+0x4c>)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	0112      	lsls	r2, r2, #4
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	440b      	add	r3, r1
 80019c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c8:	e00a      	b.n	80019e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	4908      	ldr	r1, [pc, #32]	@ (80019f0 <__NVIC_SetPriority+0x50>)
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	3b04      	subs	r3, #4
 80019d8:	0112      	lsls	r2, r2, #4
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	440b      	add	r3, r1
 80019de:	761a      	strb	r2, [r3, #24]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	e000e100 	.word	0xe000e100
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b089      	sub	sp, #36	@ 0x24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f1c3 0307 	rsb	r3, r3, #7
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	bf28      	it	cs
 8001a12:	2304      	movcs	r3, #4
 8001a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	2b06      	cmp	r3, #6
 8001a1c:	d902      	bls.n	8001a24 <NVIC_EncodePriority+0x30>
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3b03      	subs	r3, #3
 8001a22:	e000      	b.n	8001a26 <NVIC_EncodePriority+0x32>
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	f04f 32ff 	mov.w	r2, #4294967295
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43da      	mvns	r2, r3
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	401a      	ands	r2, r3
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	fa01 f303 	lsl.w	r3, r1, r3
 8001a46:	43d9      	mvns	r1, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a4c:	4313      	orrs	r3, r2
         );
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3724      	adds	r7, #36	@ 0x24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff ff4c 	bl	8001900 <__NVIC_SetPriorityGrouping>
}
 8001a68:	bf00      	nop
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
 8001a7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a82:	f7ff ff61 	bl	8001948 <__NVIC_GetPriorityGrouping>
 8001a86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	68b9      	ldr	r1, [r7, #8]
 8001a8c:	6978      	ldr	r0, [r7, #20]
 8001a8e:	f7ff ffb1 	bl	80019f4 <NVIC_EncodePriority>
 8001a92:	4602      	mov	r2, r0
 8001a94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a98:	4611      	mov	r1, r2
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff ff80 	bl	80019a0 <__NVIC_SetPriority>
}
 8001aa0:	bf00      	nop
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff ff54 	bl	8001964 <__NVIC_EnableIRQ>
}
 8001abc:	bf00      	nop
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ad2:	f7ff fee5 	bl	80018a0 <HAL_GetTick>
 8001ad6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d008      	beq.n	8001af6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2280      	movs	r2, #128	@ 0x80
 8001ae8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e052      	b.n	8001b9c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 0216 	bic.w	r2, r2, #22
 8001b04:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	695a      	ldr	r2, [r3, #20]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b14:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d103      	bne.n	8001b26 <HAL_DMA_Abort+0x62>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d007      	beq.n	8001b36 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 0208 	bic.w	r2, r2, #8
 8001b34:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0201 	bic.w	r2, r2, #1
 8001b44:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b46:	e013      	b.n	8001b70 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b48:	f7ff feaa 	bl	80018a0 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b05      	cmp	r3, #5
 8001b54:	d90c      	bls.n	8001b70 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2220      	movs	r2, #32
 8001b5a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2203      	movs	r2, #3
 8001b60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e015      	b.n	8001b9c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1e4      	bne.n	8001b48 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b82:	223f      	movs	r2, #63	@ 0x3f
 8001b84:	409a      	lsls	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d004      	beq.n	8001bc2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2280      	movs	r2, #128	@ 0x80
 8001bbc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e00c      	b.n	8001bdc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2205      	movs	r2, #5
 8001bc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 0201 	bic.w	r2, r2, #1
 8001bd8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e06c      	b.n	8001cd4 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d106      	bne.n	8001c12 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2223      	movs	r2, #35	@ 0x23
 8001c08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff fa27 	bl	8001060 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	4b31      	ldr	r3, [pc, #196]	@ (8001cdc <HAL_ETH_Init+0xf4>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1a:	4a30      	ldr	r2, [pc, #192]	@ (8001cdc <HAL_ETH_Init+0xf4>)
 8001c1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c22:	4b2e      	ldr	r3, [pc, #184]	@ (8001cdc <HAL_ETH_Init+0xf4>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001c2e:	4b2c      	ldr	r3, [pc, #176]	@ (8001ce0 <HAL_ETH_Init+0xf8>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	4a2b      	ldr	r2, [pc, #172]	@ (8001ce0 <HAL_ETH_Init+0xf8>)
 8001c34:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001c38:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001c3a:	4b29      	ldr	r3, [pc, #164]	@ (8001ce0 <HAL_ETH_Init+0xf8>)
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	4927      	ldr	r1, [pc, #156]	@ (8001ce0 <HAL_ETH_Init+0xf8>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001c48:	4b25      	ldr	r3, [pc, #148]	@ (8001ce0 <HAL_ETH_Init+0xf8>)
 8001c4a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6812      	ldr	r2, [r2, #0]
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c62:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c64:	f7ff fe1c 	bl	80018a0 <HAL_GetTick>
 8001c68:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001c6a:	e011      	b.n	8001c90 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001c6c:	f7ff fe18 	bl	80018a0 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001c7a:	d909      	bls.n	8001c90 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2204      	movs	r2, #4
 8001c80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	22e0      	movs	r2, #224	@ 0xe0
 8001c88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e021      	b.n	8001cd4 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1e4      	bne.n	8001c6c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 f958 	bl	8001f58 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f9ff 	bl	80020ac <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 fa55 	bl	800215e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	2100      	movs	r1, #0
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 f9bd 	bl	800203c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2210      	movs	r2, #16
 8001cce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40013800 	.word	0x40013800

08001ce4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	4b51      	ldr	r3, [pc, #324]	@ (8001e40 <ETH_SetMACConfig+0x15c>)
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	7c1b      	ldrb	r3, [r3, #16]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d102      	bne.n	8001d0c <ETH_SetMACConfig+0x28>
 8001d06:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001d0a:	e000      	b.n	8001d0e <ETH_SetMACConfig+0x2a>
 8001d0c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	7c5b      	ldrb	r3, [r3, #17]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d102      	bne.n	8001d1c <ETH_SetMACConfig+0x38>
 8001d16:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d1a:	e000      	b.n	8001d1e <ETH_SetMACConfig+0x3a>
 8001d1c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d1e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001d24:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	7fdb      	ldrb	r3, [r3, #31]
 8001d2a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001d2c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001d32:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	7f92      	ldrb	r2, [r2, #30]
 8001d38:	2a00      	cmp	r2, #0
 8001d3a:	d102      	bne.n	8001d42 <ETH_SetMACConfig+0x5e>
 8001d3c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d40:	e000      	b.n	8001d44 <ETH_SetMACConfig+0x60>
 8001d42:	2200      	movs	r2, #0
                        macconf->Speed |
 8001d44:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	7f1b      	ldrb	r3, [r3, #28]
 8001d4a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001d4c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001d52:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	791b      	ldrb	r3, [r3, #4]
 8001d58:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001d5a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001d62:	2a00      	cmp	r2, #0
 8001d64:	d102      	bne.n	8001d6c <ETH_SetMACConfig+0x88>
 8001d66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d6a:	e000      	b.n	8001d6e <ETH_SetMACConfig+0x8a>
 8001d6c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001d6e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	7bdb      	ldrb	r3, [r3, #15]
 8001d74:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001d76:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001d7c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001d84:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d86:	4313      	orrs	r3, r2
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d9e:	2001      	movs	r0, #1
 8001da0:	f7ff fd8a 	bl	80018b8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001dba:	4013      	ands	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dc2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001dca:	2a00      	cmp	r2, #0
 8001dcc:	d101      	bne.n	8001dd2 <ETH_SetMACConfig+0xee>
 8001dce:	2280      	movs	r2, #128	@ 0x80
 8001dd0:	e000      	b.n	8001dd4 <ETH_SetMACConfig+0xf0>
 8001dd2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001dd4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001dda:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001de2:	2a01      	cmp	r2, #1
 8001de4:	d101      	bne.n	8001dea <ETH_SetMACConfig+0x106>
 8001de6:	2208      	movs	r2, #8
 8001de8:	e000      	b.n	8001dec <ETH_SetMACConfig+0x108>
 8001dea:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001dec:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001df4:	2a01      	cmp	r2, #1
 8001df6:	d101      	bne.n	8001dfc <ETH_SetMACConfig+0x118>
 8001df8:	2204      	movs	r2, #4
 8001dfa:	e000      	b.n	8001dfe <ETH_SetMACConfig+0x11a>
 8001dfc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001dfe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001e06:	2a01      	cmp	r2, #1
 8001e08:	d101      	bne.n	8001e0e <ETH_SetMACConfig+0x12a>
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	e000      	b.n	8001e10 <ETH_SetMACConfig+0x12c>
 8001e0e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e10:	4313      	orrs	r3, r2
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e28:	2001      	movs	r0, #1
 8001e2a:	f7ff fd45 	bl	80018b8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	619a      	str	r2, [r3, #24]
}
 8001e36:	bf00      	nop
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	ff20810f 	.word	0xff20810f

08001e44 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	4b3d      	ldr	r3, [pc, #244]	@ (8001f54 <ETH_SetDMAConfig+0x110>)
 8001e5e:	4013      	ands	r3, r2
 8001e60:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	7b1b      	ldrb	r3, [r3, #12]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d102      	bne.n	8001e70 <ETH_SetDMAConfig+0x2c>
 8001e6a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001e6e:	e000      	b.n	8001e72 <ETH_SetDMAConfig+0x2e>
 8001e70:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	7b5b      	ldrb	r3, [r3, #13]
 8001e76:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e78:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	7f52      	ldrb	r2, [r2, #29]
 8001e7e:	2a00      	cmp	r2, #0
 8001e80:	d102      	bne.n	8001e88 <ETH_SetDMAConfig+0x44>
 8001e82:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001e86:	e000      	b.n	8001e8a <ETH_SetDMAConfig+0x46>
 8001e88:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001e8a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	7b9b      	ldrb	r3, [r3, #14]
 8001e90:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001e92:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001e98:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	7f1b      	ldrb	r3, [r3, #28]
 8001e9e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001ea0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	7f9b      	ldrb	r3, [r3, #30]
 8001ea6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001ea8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001eae:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001eb6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ec8:	461a      	mov	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001eda:	2001      	movs	r0, #1
 8001edc:	f7ff fcec 	bl	80018b8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ee8:	461a      	mov	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	791b      	ldrb	r3, [r3, #4]
 8001ef2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001ef8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001efe:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001f04:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001f0c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001f0e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f14:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001f16:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001f1c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6812      	ldr	r2, [r2, #0]
 8001f22:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f26:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f2a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f38:	2001      	movs	r0, #1
 8001f3a:	f7ff fcbd 	bl	80018b8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f46:	461a      	mov	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6013      	str	r3, [r2, #0]
}
 8001f4c:	bf00      	nop
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	f8de3f23 	.word	0xf8de3f23

08001f58 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b0a6      	sub	sp, #152	@ 0x98
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001f60:	2301      	movs	r3, #1
 8001f62:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001f66:	2301      	movs	r3, #1
 8001f68:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001f76:	2301      	movs	r3, #1
 8001f78:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001f82:	2301      	movs	r3, #1
 8001f84:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f94:	2300      	movs	r3, #0
 8001f96:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001fba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001fc0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001fc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001fcc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff fe86 	bl	8001ce4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001ffe:	2301      	movs	r3, #1
 8002000:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002004:	2301      	movs	r3, #1
 8002006:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002008:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800200c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800200e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002012:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002014:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002018:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800201a:	2301      	movs	r3, #1
 800201c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002020:	2300      	movs	r3, #0
 8002022:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002024:	2300      	movs	r3, #0
 8002026:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002028:	f107 0308 	add.w	r3, r7, #8
 800202c:	4619      	mov	r1, r3
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff ff08 	bl	8001e44 <ETH_SetDMAConfig>
}
 8002034:	bf00      	nop
 8002036:	3798      	adds	r7, #152	@ 0x98
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800203c:	b480      	push	{r7}
 800203e:	b087      	sub	sp, #28
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3305      	adds	r3, #5
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	021b      	lsls	r3, r3, #8
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	3204      	adds	r2, #4
 8002054:	7812      	ldrb	r2, [r2, #0]
 8002056:	4313      	orrs	r3, r2
 8002058:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	4b11      	ldr	r3, [pc, #68]	@ (80020a4 <ETH_MACAddressConfig+0x68>)
 800205e:	4413      	add	r3, r2
 8002060:	461a      	mov	r2, r3
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3303      	adds	r3, #3
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	061a      	lsls	r2, r3, #24
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3302      	adds	r3, #2
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	041b      	lsls	r3, r3, #16
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3301      	adds	r3, #1
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	021b      	lsls	r3, r3, #8
 8002080:	4313      	orrs	r3, r2
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	7812      	ldrb	r2, [r2, #0]
 8002086:	4313      	orrs	r3, r2
 8002088:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	4b06      	ldr	r3, [pc, #24]	@ (80020a8 <ETH_MACAddressConfig+0x6c>)
 800208e:	4413      	add	r3, r2
 8002090:	461a      	mov	r2, r3
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	6013      	str	r3, [r2, #0]
}
 8002096:	bf00      	nop
 8002098:	371c      	adds	r7, #28
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40028040 	.word	0x40028040
 80020a8:	40028044 	.word	0x40028044

080020ac <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020b4:	2300      	movs	r3, #0
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	e03e      	b.n	8002138 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68d9      	ldr	r1, [r3, #12]
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	4613      	mov	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	440b      	add	r3, r1
 80020ca:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	2200      	movs	r2, #0
 80020d6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	2200      	movs	r2, #0
 80020dc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	2200      	movs	r2, #0
 80020e2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80020e4:	68b9      	ldr	r1, [r7, #8]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	3206      	adds	r2, #6
 80020ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d80c      	bhi.n	800211c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68d9      	ldr	r1, [r3, #12]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	1c5a      	adds	r2, r3, #1
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	440b      	add	r3, r1
 8002114:	461a      	mov	r2, r3
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	60da      	str	r2, [r3, #12]
 800211a:	e004      	b.n	8002126 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	461a      	mov	r2, r3
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	3301      	adds	r3, #1
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2b03      	cmp	r3, #3
 800213c:	d9bd      	bls.n	80020ba <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68da      	ldr	r2, [r3, #12]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002150:	611a      	str	r2, [r3, #16]
}
 8002152:	bf00      	nop
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800215e:	b480      	push	{r7}
 8002160:	b085      	sub	sp, #20
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	e046      	b.n	80021fa <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6919      	ldr	r1, [r3, #16]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	440b      	add	r3, r1
 800217c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	2200      	movs	r2, #0
 8002188:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	2200      	movs	r2, #0
 800218e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2200      	movs	r2, #0
 8002194:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	2200      	movs	r2, #0
 800219a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	2200      	movs	r2, #0
 80021a0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80021a8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 80021b0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80021be:	68b9      	ldr	r1, [r7, #8]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	3212      	adds	r2, #18
 80021c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d80c      	bhi.n	80021ea <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6919      	ldr	r1, [r3, #16]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	1c5a      	adds	r2, r3, #1
 80021d8:	4613      	mov	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	440b      	add	r3, r1
 80021e2:	461a      	mov	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	60da      	str	r2, [r3, #12]
 80021e8:	e004      	b.n	80021f4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	461a      	mov	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	3301      	adds	r3, #1
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2b03      	cmp	r3, #3
 80021fe:	d9b5      	bls.n	800216c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691a      	ldr	r2, [r3, #16]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800222a:	60da      	str	r2, [r3, #12]
}
 800222c:	bf00      	nop
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002238:	b480      	push	{r7}
 800223a:	b089      	sub	sp, #36	@ 0x24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002242:	2300      	movs	r3, #0
 8002244:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002246:	2300      	movs	r3, #0
 8002248:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800224a:	2300      	movs	r3, #0
 800224c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800224e:	2300      	movs	r3, #0
 8002250:	61fb      	str	r3, [r7, #28]
 8002252:	e177      	b.n	8002544 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002254:	2201      	movs	r2, #1
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	4013      	ands	r3, r2
 8002266:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	429a      	cmp	r2, r3
 800226e:	f040 8166 	bne.w	800253e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	2b01      	cmp	r3, #1
 800227c:	d005      	beq.n	800228a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002286:	2b02      	cmp	r3, #2
 8002288:	d130      	bne.n	80022ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	2203      	movs	r2, #3
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43db      	mvns	r3, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4013      	ands	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	68da      	ldr	r2, [r3, #12]
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022c0:	2201      	movs	r2, #1
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	091b      	lsrs	r3, r3, #4
 80022d6:	f003 0201 	and.w	r2, r3, #1
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 0303 	and.w	r3, r3, #3
 80022f4:	2b03      	cmp	r3, #3
 80022f6:	d017      	beq.n	8002328 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	2203      	movs	r2, #3
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4013      	ands	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 0303 	and.w	r3, r3, #3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d123      	bne.n	800237c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	08da      	lsrs	r2, r3, #3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3208      	adds	r2, #8
 800233c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002340:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	220f      	movs	r2, #15
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	691a      	ldr	r2, [r3, #16]
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	08da      	lsrs	r2, r3, #3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3208      	adds	r2, #8
 8002376:	69b9      	ldr	r1, [r7, #24]
 8002378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	2203      	movs	r2, #3
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 0203 	and.w	r2, r3, #3
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 80c0 	beq.w	800253e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	4b66      	ldr	r3, [pc, #408]	@ (800255c <HAL_GPIO_Init+0x324>)
 80023c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c6:	4a65      	ldr	r2, [pc, #404]	@ (800255c <HAL_GPIO_Init+0x324>)
 80023c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ce:	4b63      	ldr	r3, [pc, #396]	@ (800255c <HAL_GPIO_Init+0x324>)
 80023d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023da:	4a61      	ldr	r2, [pc, #388]	@ (8002560 <HAL_GPIO_Init+0x328>)
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	089b      	lsrs	r3, r3, #2
 80023e0:	3302      	adds	r3, #2
 80023e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	220f      	movs	r2, #15
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43db      	mvns	r3, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4013      	ands	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a58      	ldr	r2, [pc, #352]	@ (8002564 <HAL_GPIO_Init+0x32c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d037      	beq.n	8002476 <HAL_GPIO_Init+0x23e>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a57      	ldr	r2, [pc, #348]	@ (8002568 <HAL_GPIO_Init+0x330>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d031      	beq.n	8002472 <HAL_GPIO_Init+0x23a>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a56      	ldr	r2, [pc, #344]	@ (800256c <HAL_GPIO_Init+0x334>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d02b      	beq.n	800246e <HAL_GPIO_Init+0x236>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a55      	ldr	r2, [pc, #340]	@ (8002570 <HAL_GPIO_Init+0x338>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d025      	beq.n	800246a <HAL_GPIO_Init+0x232>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a54      	ldr	r2, [pc, #336]	@ (8002574 <HAL_GPIO_Init+0x33c>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d01f      	beq.n	8002466 <HAL_GPIO_Init+0x22e>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a53      	ldr	r2, [pc, #332]	@ (8002578 <HAL_GPIO_Init+0x340>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d019      	beq.n	8002462 <HAL_GPIO_Init+0x22a>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a52      	ldr	r2, [pc, #328]	@ (800257c <HAL_GPIO_Init+0x344>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d013      	beq.n	800245e <HAL_GPIO_Init+0x226>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a51      	ldr	r2, [pc, #324]	@ (8002580 <HAL_GPIO_Init+0x348>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d00d      	beq.n	800245a <HAL_GPIO_Init+0x222>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a50      	ldr	r2, [pc, #320]	@ (8002584 <HAL_GPIO_Init+0x34c>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d007      	beq.n	8002456 <HAL_GPIO_Init+0x21e>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a4f      	ldr	r2, [pc, #316]	@ (8002588 <HAL_GPIO_Init+0x350>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d101      	bne.n	8002452 <HAL_GPIO_Init+0x21a>
 800244e:	2309      	movs	r3, #9
 8002450:	e012      	b.n	8002478 <HAL_GPIO_Init+0x240>
 8002452:	230a      	movs	r3, #10
 8002454:	e010      	b.n	8002478 <HAL_GPIO_Init+0x240>
 8002456:	2308      	movs	r3, #8
 8002458:	e00e      	b.n	8002478 <HAL_GPIO_Init+0x240>
 800245a:	2307      	movs	r3, #7
 800245c:	e00c      	b.n	8002478 <HAL_GPIO_Init+0x240>
 800245e:	2306      	movs	r3, #6
 8002460:	e00a      	b.n	8002478 <HAL_GPIO_Init+0x240>
 8002462:	2305      	movs	r3, #5
 8002464:	e008      	b.n	8002478 <HAL_GPIO_Init+0x240>
 8002466:	2304      	movs	r3, #4
 8002468:	e006      	b.n	8002478 <HAL_GPIO_Init+0x240>
 800246a:	2303      	movs	r3, #3
 800246c:	e004      	b.n	8002478 <HAL_GPIO_Init+0x240>
 800246e:	2302      	movs	r3, #2
 8002470:	e002      	b.n	8002478 <HAL_GPIO_Init+0x240>
 8002472:	2301      	movs	r3, #1
 8002474:	e000      	b.n	8002478 <HAL_GPIO_Init+0x240>
 8002476:	2300      	movs	r3, #0
 8002478:	69fa      	ldr	r2, [r7, #28]
 800247a:	f002 0203 	and.w	r2, r2, #3
 800247e:	0092      	lsls	r2, r2, #2
 8002480:	4093      	lsls	r3, r2
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002488:	4935      	ldr	r1, [pc, #212]	@ (8002560 <HAL_GPIO_Init+0x328>)
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	089b      	lsrs	r3, r3, #2
 800248e:	3302      	adds	r3, #2
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002496:	4b3d      	ldr	r3, [pc, #244]	@ (800258c <HAL_GPIO_Init+0x354>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	43db      	mvns	r3, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4013      	ands	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024ba:	4a34      	ldr	r2, [pc, #208]	@ (800258c <HAL_GPIO_Init+0x354>)
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024c0:	4b32      	ldr	r3, [pc, #200]	@ (800258c <HAL_GPIO_Init+0x354>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	43db      	mvns	r3, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4013      	ands	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024e4:	4a29      	ldr	r2, [pc, #164]	@ (800258c <HAL_GPIO_Init+0x354>)
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024ea:	4b28      	ldr	r3, [pc, #160]	@ (800258c <HAL_GPIO_Init+0x354>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	43db      	mvns	r3, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4013      	ands	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	4313      	orrs	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800250e:	4a1f      	ldr	r2, [pc, #124]	@ (800258c <HAL_GPIO_Init+0x354>)
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002514:	4b1d      	ldr	r3, [pc, #116]	@ (800258c <HAL_GPIO_Init+0x354>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	4313      	orrs	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002538:	4a14      	ldr	r2, [pc, #80]	@ (800258c <HAL_GPIO_Init+0x354>)
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	3301      	adds	r3, #1
 8002542:	61fb      	str	r3, [r7, #28]
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	2b0f      	cmp	r3, #15
 8002548:	f67f ae84 	bls.w	8002254 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800254c:	bf00      	nop
 800254e:	bf00      	nop
 8002550:	3724      	adds	r7, #36	@ 0x24
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	40023800 	.word	0x40023800
 8002560:	40013800 	.word	0x40013800
 8002564:	40020000 	.word	0x40020000
 8002568:	40020400 	.word	0x40020400
 800256c:	40020800 	.word	0x40020800
 8002570:	40020c00 	.word	0x40020c00
 8002574:	40021000 	.word	0x40021000
 8002578:	40021400 	.word	0x40021400
 800257c:	40021800 	.word	0x40021800
 8002580:	40021c00 	.word	0x40021c00
 8002584:	40022000 	.word	0x40022000
 8002588:	40022400 	.word	0x40022400
 800258c:	40013c00 	.word	0x40013c00

08002590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	807b      	strh	r3, [r7, #2]
 800259c:	4613      	mov	r3, r2
 800259e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025a0:	787b      	ldrb	r3, [r7, #1]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025a6:	887a      	ldrh	r2, [r7, #2]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025ac:	e003      	b.n	80025b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025ae:	887b      	ldrh	r3, [r7, #2]
 80025b0:	041a      	lsls	r2, r3, #16
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	619a      	str	r2, [r3, #24]
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b085      	sub	sp, #20
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
 80025ca:	460b      	mov	r3, r1
 80025cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025d4:	887a      	ldrh	r2, [r7, #2]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	4013      	ands	r3, r2
 80025da:	041a      	lsls	r2, r3, #16
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	43d9      	mvns	r1, r3
 80025e0:	887b      	ldrh	r3, [r7, #2]
 80025e2:	400b      	ands	r3, r1
 80025e4:	431a      	orrs	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	619a      	str	r2, [r3, #24]
}
 80025ea:	bf00      	nop
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b086      	sub	sp, #24
 80025fa:	af02      	add	r7, sp, #8
 80025fc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e101      	b.n	800280c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d106      	bne.n	8002628 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7fe ff16 	bl	8001454 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2203      	movs	r2, #3
 800262c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002636:	d102      	bne.n	800263e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f002 ff32 	bl	80054ac <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6818      	ldr	r0, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	7c1a      	ldrb	r2, [r3, #16]
 8002650:	f88d 2000 	strb.w	r2, [sp]
 8002654:	3304      	adds	r3, #4
 8002656:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002658:	f002 fec4 	bl	80053e4 <USB_CoreInit>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d005      	beq.n	800266e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2202      	movs	r2, #2
 8002666:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e0ce      	b.n	800280c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2100      	movs	r1, #0
 8002674:	4618      	mov	r0, r3
 8002676:	f002 ff2a 	bl	80054ce <USB_SetCurrentMode>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d005      	beq.n	800268c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2202      	movs	r2, #2
 8002684:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e0bf      	b.n	800280c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800268c:	2300      	movs	r3, #0
 800268e:	73fb      	strb	r3, [r7, #15]
 8002690:	e04a      	b.n	8002728 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002692:	7bfa      	ldrb	r2, [r7, #15]
 8002694:	6879      	ldr	r1, [r7, #4]
 8002696:	4613      	mov	r3, r2
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	4413      	add	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	440b      	add	r3, r1
 80026a0:	3315      	adds	r3, #21
 80026a2:	2201      	movs	r2, #1
 80026a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026a6:	7bfa      	ldrb	r2, [r7, #15]
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	4613      	mov	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	4413      	add	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	440b      	add	r3, r1
 80026b4:	3314      	adds	r3, #20
 80026b6:	7bfa      	ldrb	r2, [r7, #15]
 80026b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026ba:	7bfa      	ldrb	r2, [r7, #15]
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
 80026be:	b298      	uxth	r0, r3
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	4613      	mov	r3, r2
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	4413      	add	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	440b      	add	r3, r1
 80026cc:	332e      	adds	r3, #46	@ 0x2e
 80026ce:	4602      	mov	r2, r0
 80026d0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026d2:	7bfa      	ldrb	r2, [r7, #15]
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	4613      	mov	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	4413      	add	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	440b      	add	r3, r1
 80026e0:	3318      	adds	r3, #24
 80026e2:	2200      	movs	r2, #0
 80026e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026e6:	7bfa      	ldrb	r2, [r7, #15]
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	4413      	add	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	331c      	adds	r3, #28
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026fa:	7bfa      	ldrb	r2, [r7, #15]
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	4613      	mov	r3, r2
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	4413      	add	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	440b      	add	r3, r1
 8002708:	3320      	adds	r3, #32
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800270e:	7bfa      	ldrb	r2, [r7, #15]
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	4613      	mov	r3, r2
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	4413      	add	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	440b      	add	r3, r1
 800271c:	3324      	adds	r3, #36	@ 0x24
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002722:	7bfb      	ldrb	r3, [r7, #15]
 8002724:	3301      	adds	r3, #1
 8002726:	73fb      	strb	r3, [r7, #15]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	791b      	ldrb	r3, [r3, #4]
 800272c:	7bfa      	ldrb	r2, [r7, #15]
 800272e:	429a      	cmp	r2, r3
 8002730:	d3af      	bcc.n	8002692 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002732:	2300      	movs	r3, #0
 8002734:	73fb      	strb	r3, [r7, #15]
 8002736:	e044      	b.n	80027c2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002738:	7bfa      	ldrb	r2, [r7, #15]
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	4413      	add	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800274a:	2200      	movs	r2, #0
 800274c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800274e:	7bfa      	ldrb	r2, [r7, #15]
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	4613      	mov	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	4413      	add	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	440b      	add	r3, r1
 800275c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002760:	7bfa      	ldrb	r2, [r7, #15]
 8002762:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002764:	7bfa      	ldrb	r2, [r7, #15]
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	4413      	add	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002776:	2200      	movs	r2, #0
 8002778:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800277a:	7bfa      	ldrb	r2, [r7, #15]
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	4613      	mov	r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	4413      	add	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	440b      	add	r3, r1
 8002788:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002790:	7bfa      	ldrb	r2, [r7, #15]
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	4613      	mov	r3, r2
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	4413      	add	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	440b      	add	r3, r1
 800279e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027a6:	7bfa      	ldrb	r2, [r7, #15]
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	4613      	mov	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	4413      	add	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	440b      	add	r3, r1
 80027b4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
 80027be:	3301      	adds	r3, #1
 80027c0:	73fb      	strb	r3, [r7, #15]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	791b      	ldrb	r3, [r3, #4]
 80027c6:	7bfa      	ldrb	r2, [r7, #15]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d3b5      	bcc.n	8002738 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6818      	ldr	r0, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	7c1a      	ldrb	r2, [r3, #16]
 80027d4:	f88d 2000 	strb.w	r2, [sp]
 80027d8:	3304      	adds	r3, #4
 80027da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027dc:	f002 fec4 	bl	8005568 <USB_DevInit>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d005      	beq.n	80027f2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2202      	movs	r2, #2
 80027ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e00c      	b.n	800280c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f003 f88c 	bl	8005922 <USB_DevDisconnect>

  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e267      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	d075      	beq.n	800291e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002832:	4b88      	ldr	r3, [pc, #544]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 030c 	and.w	r3, r3, #12
 800283a:	2b04      	cmp	r3, #4
 800283c:	d00c      	beq.n	8002858 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800283e:	4b85      	ldr	r3, [pc, #532]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002846:	2b08      	cmp	r3, #8
 8002848:	d112      	bne.n	8002870 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800284a:	4b82      	ldr	r3, [pc, #520]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002852:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002856:	d10b      	bne.n	8002870 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002858:	4b7e      	ldr	r3, [pc, #504]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d05b      	beq.n	800291c <HAL_RCC_OscConfig+0x108>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d157      	bne.n	800291c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e242      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002878:	d106      	bne.n	8002888 <HAL_RCC_OscConfig+0x74>
 800287a:	4b76      	ldr	r3, [pc, #472]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a75      	ldr	r2, [pc, #468]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002880:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	e01d      	b.n	80028c4 <HAL_RCC_OscConfig+0xb0>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002890:	d10c      	bne.n	80028ac <HAL_RCC_OscConfig+0x98>
 8002892:	4b70      	ldr	r3, [pc, #448]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a6f      	ldr	r2, [pc, #444]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002898:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	4b6d      	ldr	r3, [pc, #436]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a6c      	ldr	r2, [pc, #432]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 80028a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	e00b      	b.n	80028c4 <HAL_RCC_OscConfig+0xb0>
 80028ac:	4b69      	ldr	r3, [pc, #420]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a68      	ldr	r2, [pc, #416]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 80028b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	4b66      	ldr	r3, [pc, #408]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a65      	ldr	r2, [pc, #404]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 80028be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d013      	beq.n	80028f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028cc:	f7fe ffe8 	bl	80018a0 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028d4:	f7fe ffe4 	bl	80018a0 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b64      	cmp	r3, #100	@ 0x64
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e207      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e6:	4b5b      	ldr	r3, [pc, #364]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0f0      	beq.n	80028d4 <HAL_RCC_OscConfig+0xc0>
 80028f2:	e014      	b.n	800291e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7fe ffd4 	bl	80018a0 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028fc:	f7fe ffd0 	bl	80018a0 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b64      	cmp	r3, #100	@ 0x64
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e1f3      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800290e:	4b51      	ldr	r3, [pc, #324]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f0      	bne.n	80028fc <HAL_RCC_OscConfig+0xe8>
 800291a:	e000      	b.n	800291e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800291c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d063      	beq.n	80029f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800292a:	4b4a      	ldr	r3, [pc, #296]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 030c 	and.w	r3, r3, #12
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00b      	beq.n	800294e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002936:	4b47      	ldr	r3, [pc, #284]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800293e:	2b08      	cmp	r3, #8
 8002940:	d11c      	bne.n	800297c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002942:	4b44      	ldr	r3, [pc, #272]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d116      	bne.n	800297c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800294e:	4b41      	ldr	r3, [pc, #260]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d005      	beq.n	8002966 <HAL_RCC_OscConfig+0x152>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d001      	beq.n	8002966 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e1c7      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002966:	4b3b      	ldr	r3, [pc, #236]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	4937      	ldr	r1, [pc, #220]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002976:	4313      	orrs	r3, r2
 8002978:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800297a:	e03a      	b.n	80029f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d020      	beq.n	80029c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002984:	4b34      	ldr	r3, [pc, #208]	@ (8002a58 <HAL_RCC_OscConfig+0x244>)
 8002986:	2201      	movs	r2, #1
 8002988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298a:	f7fe ff89 	bl	80018a0 <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002992:	f7fe ff85 	bl	80018a0 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e1a8      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0f0      	beq.n	8002992 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b0:	4b28      	ldr	r3, [pc, #160]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	4925      	ldr	r1, [pc, #148]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	600b      	str	r3, [r1, #0]
 80029c4:	e015      	b.n	80029f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029c6:	4b24      	ldr	r3, [pc, #144]	@ (8002a58 <HAL_RCC_OscConfig+0x244>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029cc:	f7fe ff68 	bl	80018a0 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029d4:	f7fe ff64 	bl	80018a0 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e187      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1f0      	bne.n	80029d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d036      	beq.n	8002a6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d016      	beq.n	8002a34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a06:	4b15      	ldr	r3, [pc, #84]	@ (8002a5c <HAL_RCC_OscConfig+0x248>)
 8002a08:	2201      	movs	r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a0c:	f7fe ff48 	bl	80018a0 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a14:	f7fe ff44 	bl	80018a0 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e167      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a26:	4b0b      	ldr	r3, [pc, #44]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002a28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0f0      	beq.n	8002a14 <HAL_RCC_OscConfig+0x200>
 8002a32:	e01b      	b.n	8002a6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a34:	4b09      	ldr	r3, [pc, #36]	@ (8002a5c <HAL_RCC_OscConfig+0x248>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a3a:	f7fe ff31 	bl	80018a0 <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a40:	e00e      	b.n	8002a60 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a42:	f7fe ff2d 	bl	80018a0 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d907      	bls.n	8002a60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e150      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
 8002a54:	40023800 	.word	0x40023800
 8002a58:	42470000 	.word	0x42470000
 8002a5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a60:	4b88      	ldr	r3, [pc, #544]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002a62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1ea      	bne.n	8002a42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 8097 	beq.w	8002ba8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a7e:	4b81      	ldr	r3, [pc, #516]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10f      	bne.n	8002aaa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	4b7d      	ldr	r3, [pc, #500]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a92:	4a7c      	ldr	r2, [pc, #496]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002a94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a98:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a9a:	4b7a      	ldr	r3, [pc, #488]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aa2:	60bb      	str	r3, [r7, #8]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aaa:	4b77      	ldr	r3, [pc, #476]	@ (8002c88 <HAL_RCC_OscConfig+0x474>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d118      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ab6:	4b74      	ldr	r3, [pc, #464]	@ (8002c88 <HAL_RCC_OscConfig+0x474>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a73      	ldr	r2, [pc, #460]	@ (8002c88 <HAL_RCC_OscConfig+0x474>)
 8002abc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ac0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ac2:	f7fe feed 	bl	80018a0 <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aca:	f7fe fee9 	bl	80018a0 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e10c      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002adc:	4b6a      	ldr	r3, [pc, #424]	@ (8002c88 <HAL_RCC_OscConfig+0x474>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0f0      	beq.n	8002aca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d106      	bne.n	8002afe <HAL_RCC_OscConfig+0x2ea>
 8002af0:	4b64      	ldr	r3, [pc, #400]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002af2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002af4:	4a63      	ldr	r2, [pc, #396]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002af6:	f043 0301 	orr.w	r3, r3, #1
 8002afa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002afc:	e01c      	b.n	8002b38 <HAL_RCC_OscConfig+0x324>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	2b05      	cmp	r3, #5
 8002b04:	d10c      	bne.n	8002b20 <HAL_RCC_OscConfig+0x30c>
 8002b06:	4b5f      	ldr	r3, [pc, #380]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b0a:	4a5e      	ldr	r2, [pc, #376]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b0c:	f043 0304 	orr.w	r3, r3, #4
 8002b10:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b12:	4b5c      	ldr	r3, [pc, #368]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b16:	4a5b      	ldr	r2, [pc, #364]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b18:	f043 0301 	orr.w	r3, r3, #1
 8002b1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b1e:	e00b      	b.n	8002b38 <HAL_RCC_OscConfig+0x324>
 8002b20:	4b58      	ldr	r3, [pc, #352]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b24:	4a57      	ldr	r2, [pc, #348]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b26:	f023 0301 	bic.w	r3, r3, #1
 8002b2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b2c:	4b55      	ldr	r3, [pc, #340]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b30:	4a54      	ldr	r2, [pc, #336]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b32:	f023 0304 	bic.w	r3, r3, #4
 8002b36:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d015      	beq.n	8002b6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b40:	f7fe feae 	bl	80018a0 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b46:	e00a      	b.n	8002b5e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b48:	f7fe feaa 	bl	80018a0 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e0cb      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b5e:	4b49      	ldr	r3, [pc, #292]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0ee      	beq.n	8002b48 <HAL_RCC_OscConfig+0x334>
 8002b6a:	e014      	b.n	8002b96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b6c:	f7fe fe98 	bl	80018a0 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b72:	e00a      	b.n	8002b8a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b74:	f7fe fe94 	bl	80018a0 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e0b5      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b8a:	4b3e      	ldr	r3, [pc, #248]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1ee      	bne.n	8002b74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b96:	7dfb      	ldrb	r3, [r7, #23]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d105      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b9c:	4b39      	ldr	r3, [pc, #228]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba0:	4a38      	ldr	r2, [pc, #224]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002ba2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ba6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 80a1 	beq.w	8002cf4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bb2:	4b34      	ldr	r3, [pc, #208]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 030c 	and.w	r3, r3, #12
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d05c      	beq.n	8002c78 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d141      	bne.n	8002c4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc6:	4b31      	ldr	r3, [pc, #196]	@ (8002c8c <HAL_RCC_OscConfig+0x478>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bcc:	f7fe fe68 	bl	80018a0 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd4:	f7fe fe64 	bl	80018a0 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e087      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002be6:	4b27      	ldr	r3, [pc, #156]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f0      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69da      	ldr	r2, [r3, #28]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c00:	019b      	lsls	r3, r3, #6
 8002c02:	431a      	orrs	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c08:	085b      	lsrs	r3, r3, #1
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	041b      	lsls	r3, r3, #16
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c14:	061b      	lsls	r3, r3, #24
 8002c16:	491b      	ldr	r1, [pc, #108]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002c8c <HAL_RCC_OscConfig+0x478>)
 8002c1e:	2201      	movs	r2, #1
 8002c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c22:	f7fe fe3d 	bl	80018a0 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c2a:	f7fe fe39 	bl	80018a0 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e05c      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c3c:	4b11      	ldr	r3, [pc, #68]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0f0      	beq.n	8002c2a <HAL_RCC_OscConfig+0x416>
 8002c48:	e054      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c4a:	4b10      	ldr	r3, [pc, #64]	@ (8002c8c <HAL_RCC_OscConfig+0x478>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c50:	f7fe fe26 	bl	80018a0 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c58:	f7fe fe22 	bl	80018a0 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e045      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6a:	4b06      	ldr	r3, [pc, #24]	@ (8002c84 <HAL_RCC_OscConfig+0x470>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0x444>
 8002c76:	e03d      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d107      	bne.n	8002c90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e038      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
 8002c84:	40023800 	.word	0x40023800
 8002c88:	40007000 	.word	0x40007000
 8002c8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c90:	4b1b      	ldr	r3, [pc, #108]	@ (8002d00 <HAL_RCC_OscConfig+0x4ec>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d028      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d121      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d11a      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002cc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d111      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd6:	085b      	lsrs	r3, r3, #1
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d107      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d001      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40023800 	.word	0x40023800

08002d04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0cc      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d18:	4b68      	ldr	r3, [pc, #416]	@ (8002ebc <HAL_RCC_ClockConfig+0x1b8>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 030f 	and.w	r3, r3, #15
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d90c      	bls.n	8002d40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d26:	4b65      	ldr	r3, [pc, #404]	@ (8002ebc <HAL_RCC_ClockConfig+0x1b8>)
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	b2d2      	uxtb	r2, r2
 8002d2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2e:	4b63      	ldr	r3, [pc, #396]	@ (8002ebc <HAL_RCC_ClockConfig+0x1b8>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d001      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0b8      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d020      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d005      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d58:	4b59      	ldr	r3, [pc, #356]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	4a58      	ldr	r2, [pc, #352]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0308 	and.w	r3, r3, #8
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d005      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d70:	4b53      	ldr	r3, [pc, #332]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	4a52      	ldr	r2, [pc, #328]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d7c:	4b50      	ldr	r3, [pc, #320]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	494d      	ldr	r1, [pc, #308]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d044      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d107      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da2:	4b47      	ldr	r3, [pc, #284]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d119      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e07f      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d003      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dbe:	2b03      	cmp	r3, #3
 8002dc0:	d107      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc2:	4b3f      	ldr	r3, [pc, #252]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d109      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e06f      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e067      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002de2:	4b37      	ldr	r3, [pc, #220]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f023 0203 	bic.w	r2, r3, #3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	4934      	ldr	r1, [pc, #208]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002df4:	f7fe fd54 	bl	80018a0 <HAL_GetTick>
 8002df8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfa:	e00a      	b.n	8002e12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dfc:	f7fe fd50 	bl	80018a0 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e04f      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e12:	4b2b      	ldr	r3, [pc, #172]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 020c 	and.w	r2, r3, #12
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d1eb      	bne.n	8002dfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e24:	4b25      	ldr	r3, [pc, #148]	@ (8002ebc <HAL_RCC_ClockConfig+0x1b8>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 030f 	and.w	r3, r3, #15
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d20c      	bcs.n	8002e4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e32:	4b22      	ldr	r3, [pc, #136]	@ (8002ebc <HAL_RCC_ClockConfig+0x1b8>)
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3a:	4b20      	ldr	r3, [pc, #128]	@ (8002ebc <HAL_RCC_ClockConfig+0x1b8>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d001      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e032      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d008      	beq.n	8002e6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e58:	4b19      	ldr	r3, [pc, #100]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	4916      	ldr	r1, [pc, #88]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d009      	beq.n	8002e8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e76:	4b12      	ldr	r3, [pc, #72]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	490e      	ldr	r1, [pc, #56]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e8a:	f000 f821 	bl	8002ed0 <HAL_RCC_GetSysClockFreq>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	091b      	lsrs	r3, r3, #4
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	490a      	ldr	r1, [pc, #40]	@ (8002ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e9c:	5ccb      	ldrb	r3, [r1, r3]
 8002e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea2:	4a09      	ldr	r2, [pc, #36]	@ (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ea6:	4b09      	ldr	r3, [pc, #36]	@ (8002ecc <HAL_RCC_ClockConfig+0x1c8>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fe fb2c 	bl	8001508 <HAL_InitTick>

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40023c00 	.word	0x40023c00
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	08009100 	.word	0x08009100
 8002ec8:	20000000 	.word	0x20000000
 8002ecc:	20000004 	.word	0x20000004

08002ed0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ed4:	b094      	sub	sp, #80	@ 0x50
 8002ed6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	647b      	str	r3, [r7, #68]	@ 0x44
 8002edc:	2300      	movs	r3, #0
 8002ede:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ee8:	4b79      	ldr	r3, [pc, #484]	@ (80030d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 030c 	and.w	r3, r3, #12
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	d00d      	beq.n	8002f10 <HAL_RCC_GetSysClockFreq+0x40>
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	f200 80e1 	bhi.w	80030bc <HAL_RCC_GetSysClockFreq+0x1ec>
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d002      	beq.n	8002f04 <HAL_RCC_GetSysClockFreq+0x34>
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d003      	beq.n	8002f0a <HAL_RCC_GetSysClockFreq+0x3a>
 8002f02:	e0db      	b.n	80030bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f04:	4b73      	ldr	r3, [pc, #460]	@ (80030d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f06:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002f08:	e0db      	b.n	80030c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f0a:	4b73      	ldr	r3, [pc, #460]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f0c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f0e:	e0d8      	b.n	80030c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f10:	4b6f      	ldr	r3, [pc, #444]	@ (80030d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f18:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f1a:	4b6d      	ldr	r3, [pc, #436]	@ (80030d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d063      	beq.n	8002fee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f26:	4b6a      	ldr	r3, [pc, #424]	@ (80030d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	099b      	lsrs	r3, r3, #6
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f30:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f38:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002f42:	4622      	mov	r2, r4
 8002f44:	462b      	mov	r3, r5
 8002f46:	f04f 0000 	mov.w	r0, #0
 8002f4a:	f04f 0100 	mov.w	r1, #0
 8002f4e:	0159      	lsls	r1, r3, #5
 8002f50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f54:	0150      	lsls	r0, r2, #5
 8002f56:	4602      	mov	r2, r0
 8002f58:	460b      	mov	r3, r1
 8002f5a:	4621      	mov	r1, r4
 8002f5c:	1a51      	subs	r1, r2, r1
 8002f5e:	6139      	str	r1, [r7, #16]
 8002f60:	4629      	mov	r1, r5
 8002f62:	eb63 0301 	sbc.w	r3, r3, r1
 8002f66:	617b      	str	r3, [r7, #20]
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	f04f 0300 	mov.w	r3, #0
 8002f70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f74:	4659      	mov	r1, fp
 8002f76:	018b      	lsls	r3, r1, #6
 8002f78:	4651      	mov	r1, sl
 8002f7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f7e:	4651      	mov	r1, sl
 8002f80:	018a      	lsls	r2, r1, #6
 8002f82:	4651      	mov	r1, sl
 8002f84:	ebb2 0801 	subs.w	r8, r2, r1
 8002f88:	4659      	mov	r1, fp
 8002f8a:	eb63 0901 	sbc.w	r9, r3, r1
 8002f8e:	f04f 0200 	mov.w	r2, #0
 8002f92:	f04f 0300 	mov.w	r3, #0
 8002f96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fa2:	4690      	mov	r8, r2
 8002fa4:	4699      	mov	r9, r3
 8002fa6:	4623      	mov	r3, r4
 8002fa8:	eb18 0303 	adds.w	r3, r8, r3
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	462b      	mov	r3, r5
 8002fb0:	eb49 0303 	adc.w	r3, r9, r3
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	f04f 0200 	mov.w	r2, #0
 8002fba:	f04f 0300 	mov.w	r3, #0
 8002fbe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002fc2:	4629      	mov	r1, r5
 8002fc4:	024b      	lsls	r3, r1, #9
 8002fc6:	4621      	mov	r1, r4
 8002fc8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fcc:	4621      	mov	r1, r4
 8002fce:	024a      	lsls	r2, r1, #9
 8002fd0:	4610      	mov	r0, r2
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fdc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002fe0:	f7fd f956 	bl	8000290 <__aeabi_uldivmod>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4613      	mov	r3, r2
 8002fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fec:	e058      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fee:	4b38      	ldr	r3, [pc, #224]	@ (80030d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	099b      	lsrs	r3, r3, #6
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	4611      	mov	r1, r2
 8002ffa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ffe:	623b      	str	r3, [r7, #32]
 8003000:	2300      	movs	r3, #0
 8003002:	627b      	str	r3, [r7, #36]	@ 0x24
 8003004:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003008:	4642      	mov	r2, r8
 800300a:	464b      	mov	r3, r9
 800300c:	f04f 0000 	mov.w	r0, #0
 8003010:	f04f 0100 	mov.w	r1, #0
 8003014:	0159      	lsls	r1, r3, #5
 8003016:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800301a:	0150      	lsls	r0, r2, #5
 800301c:	4602      	mov	r2, r0
 800301e:	460b      	mov	r3, r1
 8003020:	4641      	mov	r1, r8
 8003022:	ebb2 0a01 	subs.w	sl, r2, r1
 8003026:	4649      	mov	r1, r9
 8003028:	eb63 0b01 	sbc.w	fp, r3, r1
 800302c:	f04f 0200 	mov.w	r2, #0
 8003030:	f04f 0300 	mov.w	r3, #0
 8003034:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003038:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800303c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003040:	ebb2 040a 	subs.w	r4, r2, sl
 8003044:	eb63 050b 	sbc.w	r5, r3, fp
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	f04f 0300 	mov.w	r3, #0
 8003050:	00eb      	lsls	r3, r5, #3
 8003052:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003056:	00e2      	lsls	r2, r4, #3
 8003058:	4614      	mov	r4, r2
 800305a:	461d      	mov	r5, r3
 800305c:	4643      	mov	r3, r8
 800305e:	18e3      	adds	r3, r4, r3
 8003060:	603b      	str	r3, [r7, #0]
 8003062:	464b      	mov	r3, r9
 8003064:	eb45 0303 	adc.w	r3, r5, r3
 8003068:	607b      	str	r3, [r7, #4]
 800306a:	f04f 0200 	mov.w	r2, #0
 800306e:	f04f 0300 	mov.w	r3, #0
 8003072:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003076:	4629      	mov	r1, r5
 8003078:	028b      	lsls	r3, r1, #10
 800307a:	4621      	mov	r1, r4
 800307c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003080:	4621      	mov	r1, r4
 8003082:	028a      	lsls	r2, r1, #10
 8003084:	4610      	mov	r0, r2
 8003086:	4619      	mov	r1, r3
 8003088:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800308a:	2200      	movs	r2, #0
 800308c:	61bb      	str	r3, [r7, #24]
 800308e:	61fa      	str	r2, [r7, #28]
 8003090:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003094:	f7fd f8fc 	bl	8000290 <__aeabi_uldivmod>
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	4613      	mov	r3, r2
 800309e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030a0:	4b0b      	ldr	r3, [pc, #44]	@ (80030d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	0c1b      	lsrs	r3, r3, #16
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	3301      	adds	r3, #1
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80030b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80030b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030ba:	e002      	b.n	80030c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030bc:	4b05      	ldr	r3, [pc, #20]	@ (80030d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80030be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3750      	adds	r7, #80	@ 0x50
 80030c8:	46bd      	mov	sp, r7
 80030ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030ce:	bf00      	nop
 80030d0:	40023800 	.word	0x40023800
 80030d4:	00f42400 	.word	0x00f42400
 80030d8:	007a1200 	.word	0x007a1200

080030dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030e0:	4b03      	ldr	r3, [pc, #12]	@ (80030f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80030e2:	681b      	ldr	r3, [r3, #0]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	20000000 	.word	0x20000000

080030f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030f8:	f7ff fff0 	bl	80030dc <HAL_RCC_GetHCLKFreq>
 80030fc:	4602      	mov	r2, r0
 80030fe:	4b05      	ldr	r3, [pc, #20]	@ (8003114 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	0a9b      	lsrs	r3, r3, #10
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	4903      	ldr	r1, [pc, #12]	@ (8003118 <HAL_RCC_GetPCLK1Freq+0x24>)
 800310a:	5ccb      	ldrb	r3, [r1, r3]
 800310c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003110:	4618      	mov	r0, r3
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40023800 	.word	0x40023800
 8003118:	08009110 	.word	0x08009110

0800311c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003120:	f7ff ffdc 	bl	80030dc <HAL_RCC_GetHCLKFreq>
 8003124:	4602      	mov	r2, r0
 8003126:	4b05      	ldr	r3, [pc, #20]	@ (800313c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	0b5b      	lsrs	r3, r3, #13
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	4903      	ldr	r1, [pc, #12]	@ (8003140 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003132:	5ccb      	ldrb	r3, [r1, r3]
 8003134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003138:	4618      	mov	r0, r3
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40023800 	.word	0x40023800
 8003140:	08009110 	.word	0x08009110

08003144 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	220f      	movs	r2, #15
 8003152:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003154:	4b12      	ldr	r3, [pc, #72]	@ (80031a0 <HAL_RCC_GetClockConfig+0x5c>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 0203 	and.w	r2, r3, #3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003160:	4b0f      	ldr	r3, [pc, #60]	@ (80031a0 <HAL_RCC_GetClockConfig+0x5c>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800316c:	4b0c      	ldr	r3, [pc, #48]	@ (80031a0 <HAL_RCC_GetClockConfig+0x5c>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003178:	4b09      	ldr	r3, [pc, #36]	@ (80031a0 <HAL_RCC_GetClockConfig+0x5c>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	08db      	lsrs	r3, r3, #3
 800317e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003186:	4b07      	ldr	r3, [pc, #28]	@ (80031a4 <HAL_RCC_GetClockConfig+0x60>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 020f 	and.w	r2, r3, #15
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	601a      	str	r2, [r3, #0]
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	40023800 	.word	0x40023800
 80031a4:	40023c00 	.word	0x40023c00

080031a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e041      	b.n	800323e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d106      	bne.n	80031d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7fe f80c 	bl	80011ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3304      	adds	r3, #4
 80031e4:	4619      	mov	r1, r3
 80031e6:	4610      	mov	r0, r2
 80031e8:	f000 fc62 	bl	8003ab0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b01      	cmp	r3, #1
 800325a:	d001      	beq.n	8003260 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e04e      	b.n	80032fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f042 0201 	orr.w	r2, r2, #1
 8003276:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a23      	ldr	r2, [pc, #140]	@ (800330c <HAL_TIM_Base_Start_IT+0xc4>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d022      	beq.n	80032c8 <HAL_TIM_Base_Start_IT+0x80>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800328a:	d01d      	beq.n	80032c8 <HAL_TIM_Base_Start_IT+0x80>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a1f      	ldr	r2, [pc, #124]	@ (8003310 <HAL_TIM_Base_Start_IT+0xc8>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d018      	beq.n	80032c8 <HAL_TIM_Base_Start_IT+0x80>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a1e      	ldr	r2, [pc, #120]	@ (8003314 <HAL_TIM_Base_Start_IT+0xcc>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d013      	beq.n	80032c8 <HAL_TIM_Base_Start_IT+0x80>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a1c      	ldr	r2, [pc, #112]	@ (8003318 <HAL_TIM_Base_Start_IT+0xd0>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d00e      	beq.n	80032c8 <HAL_TIM_Base_Start_IT+0x80>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a1b      	ldr	r2, [pc, #108]	@ (800331c <HAL_TIM_Base_Start_IT+0xd4>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d009      	beq.n	80032c8 <HAL_TIM_Base_Start_IT+0x80>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a19      	ldr	r2, [pc, #100]	@ (8003320 <HAL_TIM_Base_Start_IT+0xd8>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d004      	beq.n	80032c8 <HAL_TIM_Base_Start_IT+0x80>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a18      	ldr	r2, [pc, #96]	@ (8003324 <HAL_TIM_Base_Start_IT+0xdc>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d111      	bne.n	80032ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2b06      	cmp	r3, #6
 80032d8:	d010      	beq.n	80032fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f042 0201 	orr.w	r2, r2, #1
 80032e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ea:	e007      	b.n	80032fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0201 	orr.w	r2, r2, #1
 80032fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	40010000 	.word	0x40010000
 8003310:	40000400 	.word	0x40000400
 8003314:	40000800 	.word	0x40000800
 8003318:	40000c00 	.word	0x40000c00
 800331c:	40010400 	.word	0x40010400
 8003320:	40014000 	.word	0x40014000
 8003324:	40001800 	.word	0x40001800

08003328 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e041      	b.n	80033be <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d106      	bne.n	8003354 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f839 	bl	80033c6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3304      	adds	r3, #4
 8003364:	4619      	mov	r1, r3
 8003366:	4610      	mov	r0, r2
 8003368:	f000 fba2 	bl	8003ab0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b083      	sub	sp, #12
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
	...

080033dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d109      	bne.n	8003400 <HAL_TIM_PWM_Start+0x24>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	bf14      	ite	ne
 80033f8:	2301      	movne	r3, #1
 80033fa:	2300      	moveq	r3, #0
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	e022      	b.n	8003446 <HAL_TIM_PWM_Start+0x6a>
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	2b04      	cmp	r3, #4
 8003404:	d109      	bne.n	800341a <HAL_TIM_PWM_Start+0x3e>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b01      	cmp	r3, #1
 8003410:	bf14      	ite	ne
 8003412:	2301      	movne	r3, #1
 8003414:	2300      	moveq	r3, #0
 8003416:	b2db      	uxtb	r3, r3
 8003418:	e015      	b.n	8003446 <HAL_TIM_PWM_Start+0x6a>
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	2b08      	cmp	r3, #8
 800341e:	d109      	bne.n	8003434 <HAL_TIM_PWM_Start+0x58>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b01      	cmp	r3, #1
 800342a:	bf14      	ite	ne
 800342c:	2301      	movne	r3, #1
 800342e:	2300      	moveq	r3, #0
 8003430:	b2db      	uxtb	r3, r3
 8003432:	e008      	b.n	8003446 <HAL_TIM_PWM_Start+0x6a>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b01      	cmp	r3, #1
 800343e:	bf14      	ite	ne
 8003440:	2301      	movne	r3, #1
 8003442:	2300      	moveq	r3, #0
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e07c      	b.n	8003548 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d104      	bne.n	800345e <HAL_TIM_PWM_Start+0x82>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2202      	movs	r2, #2
 8003458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800345c:	e013      	b.n	8003486 <HAL_TIM_PWM_Start+0xaa>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	2b04      	cmp	r3, #4
 8003462:	d104      	bne.n	800346e <HAL_TIM_PWM_Start+0x92>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2202      	movs	r2, #2
 8003468:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800346c:	e00b      	b.n	8003486 <HAL_TIM_PWM_Start+0xaa>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	2b08      	cmp	r3, #8
 8003472:	d104      	bne.n	800347e <HAL_TIM_PWM_Start+0xa2>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800347c:	e003      	b.n	8003486 <HAL_TIM_PWM_Start+0xaa>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2202      	movs	r2, #2
 8003482:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2201      	movs	r2, #1
 800348c:	6839      	ldr	r1, [r7, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f000 fe04 	bl	800409c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a2d      	ldr	r2, [pc, #180]	@ (8003550 <HAL_TIM_PWM_Start+0x174>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d004      	beq.n	80034a8 <HAL_TIM_PWM_Start+0xcc>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a2c      	ldr	r2, [pc, #176]	@ (8003554 <HAL_TIM_PWM_Start+0x178>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d101      	bne.n	80034ac <HAL_TIM_PWM_Start+0xd0>
 80034a8:	2301      	movs	r3, #1
 80034aa:	e000      	b.n	80034ae <HAL_TIM_PWM_Start+0xd2>
 80034ac:	2300      	movs	r3, #0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d007      	beq.n	80034c2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a22      	ldr	r2, [pc, #136]	@ (8003550 <HAL_TIM_PWM_Start+0x174>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d022      	beq.n	8003512 <HAL_TIM_PWM_Start+0x136>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034d4:	d01d      	beq.n	8003512 <HAL_TIM_PWM_Start+0x136>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a1f      	ldr	r2, [pc, #124]	@ (8003558 <HAL_TIM_PWM_Start+0x17c>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d018      	beq.n	8003512 <HAL_TIM_PWM_Start+0x136>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a1d      	ldr	r2, [pc, #116]	@ (800355c <HAL_TIM_PWM_Start+0x180>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d013      	beq.n	8003512 <HAL_TIM_PWM_Start+0x136>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a1c      	ldr	r2, [pc, #112]	@ (8003560 <HAL_TIM_PWM_Start+0x184>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d00e      	beq.n	8003512 <HAL_TIM_PWM_Start+0x136>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a16      	ldr	r2, [pc, #88]	@ (8003554 <HAL_TIM_PWM_Start+0x178>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d009      	beq.n	8003512 <HAL_TIM_PWM_Start+0x136>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a18      	ldr	r2, [pc, #96]	@ (8003564 <HAL_TIM_PWM_Start+0x188>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d004      	beq.n	8003512 <HAL_TIM_PWM_Start+0x136>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a16      	ldr	r2, [pc, #88]	@ (8003568 <HAL_TIM_PWM_Start+0x18c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d111      	bne.n	8003536 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2b06      	cmp	r3, #6
 8003522:	d010      	beq.n	8003546 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0201 	orr.w	r2, r2, #1
 8003532:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003534:	e007      	b.n	8003546 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f042 0201 	orr.w	r2, r2, #1
 8003544:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40010000 	.word	0x40010000
 8003554:	40010400 	.word	0x40010400
 8003558:	40000400 	.word	0x40000400
 800355c:	40000800 	.word	0x40000800
 8003560:	40000c00 	.word	0x40000c00
 8003564:	40014000 	.word	0x40014000
 8003568:	40001800 	.word	0x40001800

0800356c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d020      	beq.n	80035d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d01b      	beq.n	80035d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f06f 0202 	mvn.w	r2, #2
 80035a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 fa5b 	bl	8003a72 <HAL_TIM_IC_CaptureCallback>
 80035bc:	e005      	b.n	80035ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 fa4d 	bl	8003a5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 fa5e 	bl	8003a86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	f003 0304 	and.w	r3, r3, #4
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d020      	beq.n	800361c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d01b      	beq.n	800361c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f06f 0204 	mvn.w	r2, #4
 80035ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2202      	movs	r2, #2
 80035f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 fa35 	bl	8003a72 <HAL_TIM_IC_CaptureCallback>
 8003608:	e005      	b.n	8003616 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 fa27 	bl	8003a5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 fa38 	bl	8003a86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f003 0308 	and.w	r3, r3, #8
 8003622:	2b00      	cmp	r3, #0
 8003624:	d020      	beq.n	8003668 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f003 0308 	and.w	r3, r3, #8
 800362c:	2b00      	cmp	r3, #0
 800362e:	d01b      	beq.n	8003668 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f06f 0208 	mvn.w	r2, #8
 8003638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2204      	movs	r2, #4
 800363e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 fa0f 	bl	8003a72 <HAL_TIM_IC_CaptureCallback>
 8003654:	e005      	b.n	8003662 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 fa01 	bl	8003a5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 fa12 	bl	8003a86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	f003 0310 	and.w	r3, r3, #16
 800366e:	2b00      	cmp	r3, #0
 8003670:	d020      	beq.n	80036b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f003 0310 	and.w	r3, r3, #16
 8003678:	2b00      	cmp	r3, #0
 800367a:	d01b      	beq.n	80036b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f06f 0210 	mvn.w	r2, #16
 8003684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2208      	movs	r2, #8
 800368a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f9e9 	bl	8003a72 <HAL_TIM_IC_CaptureCallback>
 80036a0:	e005      	b.n	80036ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f9db 	bl	8003a5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f9ec 	bl	8003a86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00c      	beq.n	80036d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d007      	beq.n	80036d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f06f 0201 	mvn.w	r2, #1
 80036d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7fd fc80 	bl	8000fd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00c      	beq.n	80036fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d007      	beq.n	80036fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80036f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 fd7c 	bl	80041f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00c      	beq.n	8003720 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800370c:	2b00      	cmp	r3, #0
 800370e:	d007      	beq.n	8003720 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f9bd 	bl	8003a9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	f003 0320 	and.w	r3, r3, #32
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00c      	beq.n	8003744 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f003 0320 	and.w	r3, r3, #32
 8003730:	2b00      	cmp	r3, #0
 8003732:	d007      	beq.n	8003744 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f06f 0220 	mvn.w	r2, #32
 800373c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 fd4e 	bl	80041e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003744:	bf00      	nop
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003758:	2300      	movs	r3, #0
 800375a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003762:	2b01      	cmp	r3, #1
 8003764:	d101      	bne.n	800376a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003766:	2302      	movs	r3, #2
 8003768:	e0ae      	b.n	80038c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b0c      	cmp	r3, #12
 8003776:	f200 809f 	bhi.w	80038b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800377a:	a201      	add	r2, pc, #4	@ (adr r2, 8003780 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800377c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003780:	080037b5 	.word	0x080037b5
 8003784:	080038b9 	.word	0x080038b9
 8003788:	080038b9 	.word	0x080038b9
 800378c:	080038b9 	.word	0x080038b9
 8003790:	080037f5 	.word	0x080037f5
 8003794:	080038b9 	.word	0x080038b9
 8003798:	080038b9 	.word	0x080038b9
 800379c:	080038b9 	.word	0x080038b9
 80037a0:	08003837 	.word	0x08003837
 80037a4:	080038b9 	.word	0x080038b9
 80037a8:	080038b9 	.word	0x080038b9
 80037ac:	080038b9 	.word	0x080038b9
 80037b0:	08003877 	.word	0x08003877
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68b9      	ldr	r1, [r7, #8]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 fa24 	bl	8003c08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	699a      	ldr	r2, [r3, #24]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f042 0208 	orr.w	r2, r2, #8
 80037ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	699a      	ldr	r2, [r3, #24]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0204 	bic.w	r2, r2, #4
 80037de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6999      	ldr	r1, [r3, #24]
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	691a      	ldr	r2, [r3, #16]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	619a      	str	r2, [r3, #24]
      break;
 80037f2:	e064      	b.n	80038be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68b9      	ldr	r1, [r7, #8]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 fa74 	bl	8003ce8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	699a      	ldr	r2, [r3, #24]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800380e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	699a      	ldr	r2, [r3, #24]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800381e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6999      	ldr	r1, [r3, #24]
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	021a      	lsls	r2, r3, #8
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	619a      	str	r2, [r3, #24]
      break;
 8003834:	e043      	b.n	80038be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68b9      	ldr	r1, [r7, #8]
 800383c:	4618      	mov	r0, r3
 800383e:	f000 fac9 	bl	8003dd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	69da      	ldr	r2, [r3, #28]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f042 0208 	orr.w	r2, r2, #8
 8003850:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	69da      	ldr	r2, [r3, #28]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0204 	bic.w	r2, r2, #4
 8003860:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	69d9      	ldr	r1, [r3, #28]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	691a      	ldr	r2, [r3, #16]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	430a      	orrs	r2, r1
 8003872:	61da      	str	r2, [r3, #28]
      break;
 8003874:	e023      	b.n	80038be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68b9      	ldr	r1, [r7, #8]
 800387c:	4618      	mov	r0, r3
 800387e:	f000 fb1d 	bl	8003ebc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	69da      	ldr	r2, [r3, #28]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003890:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	69da      	ldr	r2, [r3, #28]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	69d9      	ldr	r1, [r3, #28]
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	021a      	lsls	r2, r3, #8
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	61da      	str	r2, [r3, #28]
      break;
 80038b6:	e002      	b.n	80038be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	75fb      	strb	r3, [r7, #23]
      break;
 80038bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3718      	adds	r7, #24
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038da:	2300      	movs	r3, #0
 80038dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d101      	bne.n	80038ec <HAL_TIM_ConfigClockSource+0x1c>
 80038e8:	2302      	movs	r3, #2
 80038ea:	e0b4      	b.n	8003a56 <HAL_TIM_ConfigClockSource+0x186>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2202      	movs	r2, #2
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800390a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003912:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003924:	d03e      	beq.n	80039a4 <HAL_TIM_ConfigClockSource+0xd4>
 8003926:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800392a:	f200 8087 	bhi.w	8003a3c <HAL_TIM_ConfigClockSource+0x16c>
 800392e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003932:	f000 8086 	beq.w	8003a42 <HAL_TIM_ConfigClockSource+0x172>
 8003936:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800393a:	d87f      	bhi.n	8003a3c <HAL_TIM_ConfigClockSource+0x16c>
 800393c:	2b70      	cmp	r3, #112	@ 0x70
 800393e:	d01a      	beq.n	8003976 <HAL_TIM_ConfigClockSource+0xa6>
 8003940:	2b70      	cmp	r3, #112	@ 0x70
 8003942:	d87b      	bhi.n	8003a3c <HAL_TIM_ConfigClockSource+0x16c>
 8003944:	2b60      	cmp	r3, #96	@ 0x60
 8003946:	d050      	beq.n	80039ea <HAL_TIM_ConfigClockSource+0x11a>
 8003948:	2b60      	cmp	r3, #96	@ 0x60
 800394a:	d877      	bhi.n	8003a3c <HAL_TIM_ConfigClockSource+0x16c>
 800394c:	2b50      	cmp	r3, #80	@ 0x50
 800394e:	d03c      	beq.n	80039ca <HAL_TIM_ConfigClockSource+0xfa>
 8003950:	2b50      	cmp	r3, #80	@ 0x50
 8003952:	d873      	bhi.n	8003a3c <HAL_TIM_ConfigClockSource+0x16c>
 8003954:	2b40      	cmp	r3, #64	@ 0x40
 8003956:	d058      	beq.n	8003a0a <HAL_TIM_ConfigClockSource+0x13a>
 8003958:	2b40      	cmp	r3, #64	@ 0x40
 800395a:	d86f      	bhi.n	8003a3c <HAL_TIM_ConfigClockSource+0x16c>
 800395c:	2b30      	cmp	r3, #48	@ 0x30
 800395e:	d064      	beq.n	8003a2a <HAL_TIM_ConfigClockSource+0x15a>
 8003960:	2b30      	cmp	r3, #48	@ 0x30
 8003962:	d86b      	bhi.n	8003a3c <HAL_TIM_ConfigClockSource+0x16c>
 8003964:	2b20      	cmp	r3, #32
 8003966:	d060      	beq.n	8003a2a <HAL_TIM_ConfigClockSource+0x15a>
 8003968:	2b20      	cmp	r3, #32
 800396a:	d867      	bhi.n	8003a3c <HAL_TIM_ConfigClockSource+0x16c>
 800396c:	2b00      	cmp	r3, #0
 800396e:	d05c      	beq.n	8003a2a <HAL_TIM_ConfigClockSource+0x15a>
 8003970:	2b10      	cmp	r3, #16
 8003972:	d05a      	beq.n	8003a2a <HAL_TIM_ConfigClockSource+0x15a>
 8003974:	e062      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003986:	f000 fb69 	bl	800405c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003998:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	609a      	str	r2, [r3, #8]
      break;
 80039a2:	e04f      	b.n	8003a44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039b4:	f000 fb52 	bl	800405c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	689a      	ldr	r2, [r3, #8]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80039c6:	609a      	str	r2, [r3, #8]
      break;
 80039c8:	e03c      	b.n	8003a44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039d6:	461a      	mov	r2, r3
 80039d8:	f000 fac6 	bl	8003f68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2150      	movs	r1, #80	@ 0x50
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 fb1f 	bl	8004026 <TIM_ITRx_SetConfig>
      break;
 80039e8:	e02c      	b.n	8003a44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039f6:	461a      	mov	r2, r3
 80039f8:	f000 fae5 	bl	8003fc6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2160      	movs	r1, #96	@ 0x60
 8003a02:	4618      	mov	r0, r3
 8003a04:	f000 fb0f 	bl	8004026 <TIM_ITRx_SetConfig>
      break;
 8003a08:	e01c      	b.n	8003a44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a16:	461a      	mov	r2, r3
 8003a18:	f000 faa6 	bl	8003f68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2140      	movs	r1, #64	@ 0x40
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 faff 	bl	8004026 <TIM_ITRx_SetConfig>
      break;
 8003a28:	e00c      	b.n	8003a44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4619      	mov	r1, r3
 8003a34:	4610      	mov	r0, r2
 8003a36:	f000 faf6 	bl	8004026 <TIM_ITRx_SetConfig>
      break;
 8003a3a:	e003      	b.n	8003a44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a40:	e000      	b.n	8003a44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b083      	sub	sp, #12
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a8e:	bf00      	nop
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
	...

08003ab0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a46      	ldr	r2, [pc, #280]	@ (8003bdc <TIM_Base_SetConfig+0x12c>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d013      	beq.n	8003af0 <TIM_Base_SetConfig+0x40>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ace:	d00f      	beq.n	8003af0 <TIM_Base_SetConfig+0x40>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a43      	ldr	r2, [pc, #268]	@ (8003be0 <TIM_Base_SetConfig+0x130>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d00b      	beq.n	8003af0 <TIM_Base_SetConfig+0x40>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a42      	ldr	r2, [pc, #264]	@ (8003be4 <TIM_Base_SetConfig+0x134>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d007      	beq.n	8003af0 <TIM_Base_SetConfig+0x40>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a41      	ldr	r2, [pc, #260]	@ (8003be8 <TIM_Base_SetConfig+0x138>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d003      	beq.n	8003af0 <TIM_Base_SetConfig+0x40>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a40      	ldr	r2, [pc, #256]	@ (8003bec <TIM_Base_SetConfig+0x13c>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d108      	bne.n	8003b02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003af6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a35      	ldr	r2, [pc, #212]	@ (8003bdc <TIM_Base_SetConfig+0x12c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d02b      	beq.n	8003b62 <TIM_Base_SetConfig+0xb2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b10:	d027      	beq.n	8003b62 <TIM_Base_SetConfig+0xb2>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a32      	ldr	r2, [pc, #200]	@ (8003be0 <TIM_Base_SetConfig+0x130>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d023      	beq.n	8003b62 <TIM_Base_SetConfig+0xb2>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a31      	ldr	r2, [pc, #196]	@ (8003be4 <TIM_Base_SetConfig+0x134>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d01f      	beq.n	8003b62 <TIM_Base_SetConfig+0xb2>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a30      	ldr	r2, [pc, #192]	@ (8003be8 <TIM_Base_SetConfig+0x138>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d01b      	beq.n	8003b62 <TIM_Base_SetConfig+0xb2>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a2f      	ldr	r2, [pc, #188]	@ (8003bec <TIM_Base_SetConfig+0x13c>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d017      	beq.n	8003b62 <TIM_Base_SetConfig+0xb2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a2e      	ldr	r2, [pc, #184]	@ (8003bf0 <TIM_Base_SetConfig+0x140>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d013      	beq.n	8003b62 <TIM_Base_SetConfig+0xb2>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a2d      	ldr	r2, [pc, #180]	@ (8003bf4 <TIM_Base_SetConfig+0x144>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d00f      	beq.n	8003b62 <TIM_Base_SetConfig+0xb2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a2c      	ldr	r2, [pc, #176]	@ (8003bf8 <TIM_Base_SetConfig+0x148>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d00b      	beq.n	8003b62 <TIM_Base_SetConfig+0xb2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a2b      	ldr	r2, [pc, #172]	@ (8003bfc <TIM_Base_SetConfig+0x14c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d007      	beq.n	8003b62 <TIM_Base_SetConfig+0xb2>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a2a      	ldr	r2, [pc, #168]	@ (8003c00 <TIM_Base_SetConfig+0x150>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d003      	beq.n	8003b62 <TIM_Base_SetConfig+0xb2>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a29      	ldr	r2, [pc, #164]	@ (8003c04 <TIM_Base_SetConfig+0x154>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d108      	bne.n	8003b74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a10      	ldr	r2, [pc, #64]	@ (8003bdc <TIM_Base_SetConfig+0x12c>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d003      	beq.n	8003ba8 <TIM_Base_SetConfig+0xf8>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a12      	ldr	r2, [pc, #72]	@ (8003bec <TIM_Base_SetConfig+0x13c>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d103      	bne.n	8003bb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	691a      	ldr	r2, [r3, #16]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d105      	bne.n	8003bce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	f023 0201 	bic.w	r2, r3, #1
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	611a      	str	r2, [r3, #16]
  }
}
 8003bce:	bf00      	nop
 8003bd0:	3714      	adds	r7, #20
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	40010000 	.word	0x40010000
 8003be0:	40000400 	.word	0x40000400
 8003be4:	40000800 	.word	0x40000800
 8003be8:	40000c00 	.word	0x40000c00
 8003bec:	40010400 	.word	0x40010400
 8003bf0:	40014000 	.word	0x40014000
 8003bf4:	40014400 	.word	0x40014400
 8003bf8:	40014800 	.word	0x40014800
 8003bfc:	40001800 	.word	0x40001800
 8003c00:	40001c00 	.word	0x40001c00
 8003c04:	40002000 	.word	0x40002000

08003c08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b087      	sub	sp, #28
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a1b      	ldr	r3, [r3, #32]
 8003c1c:	f023 0201 	bic.w	r2, r3, #1
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f023 0303 	bic.w	r3, r3, #3
 8003c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f023 0302 	bic.w	r3, r3, #2
 8003c50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a20      	ldr	r2, [pc, #128]	@ (8003ce0 <TIM_OC1_SetConfig+0xd8>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d003      	beq.n	8003c6c <TIM_OC1_SetConfig+0x64>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a1f      	ldr	r2, [pc, #124]	@ (8003ce4 <TIM_OC1_SetConfig+0xdc>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d10c      	bne.n	8003c86 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	f023 0308 	bic.w	r3, r3, #8
 8003c72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f023 0304 	bic.w	r3, r3, #4
 8003c84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a15      	ldr	r2, [pc, #84]	@ (8003ce0 <TIM_OC1_SetConfig+0xd8>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d003      	beq.n	8003c96 <TIM_OC1_SetConfig+0x8e>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a14      	ldr	r2, [pc, #80]	@ (8003ce4 <TIM_OC1_SetConfig+0xdc>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d111      	bne.n	8003cba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ca4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	621a      	str	r2, [r3, #32]
}
 8003cd4:	bf00      	nop
 8003cd6:	371c      	adds	r7, #28
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr
 8003ce0:	40010000 	.word	0x40010000
 8003ce4:	40010400 	.word	0x40010400

08003ce8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	f023 0210 	bic.w	r2, r3, #16
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	021b      	lsls	r3, r3, #8
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f023 0320 	bic.w	r3, r3, #32
 8003d32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	011b      	lsls	r3, r3, #4
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a22      	ldr	r2, [pc, #136]	@ (8003dcc <TIM_OC2_SetConfig+0xe4>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d003      	beq.n	8003d50 <TIM_OC2_SetConfig+0x68>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a21      	ldr	r2, [pc, #132]	@ (8003dd0 <TIM_OC2_SetConfig+0xe8>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d10d      	bne.n	8003d6c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	011b      	lsls	r3, r3, #4
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a17      	ldr	r2, [pc, #92]	@ (8003dcc <TIM_OC2_SetConfig+0xe4>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d003      	beq.n	8003d7c <TIM_OC2_SetConfig+0x94>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a16      	ldr	r2, [pc, #88]	@ (8003dd0 <TIM_OC2_SetConfig+0xe8>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d113      	bne.n	8003da4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	621a      	str	r2, [r3, #32]
}
 8003dbe:	bf00      	nop
 8003dc0:	371c      	adds	r7, #28
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	40010000 	.word	0x40010000
 8003dd0:	40010400 	.word	0x40010400

08003dd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b087      	sub	sp, #28
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f023 0303 	bic.w	r3, r3, #3
 8003e0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	021b      	lsls	r3, r3, #8
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a21      	ldr	r2, [pc, #132]	@ (8003eb4 <TIM_OC3_SetConfig+0xe0>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d003      	beq.n	8003e3a <TIM_OC3_SetConfig+0x66>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a20      	ldr	r2, [pc, #128]	@ (8003eb8 <TIM_OC3_SetConfig+0xe4>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d10d      	bne.n	8003e56 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	021b      	lsls	r3, r3, #8
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a16      	ldr	r2, [pc, #88]	@ (8003eb4 <TIM_OC3_SetConfig+0xe0>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d003      	beq.n	8003e66 <TIM_OC3_SetConfig+0x92>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a15      	ldr	r2, [pc, #84]	@ (8003eb8 <TIM_OC3_SetConfig+0xe4>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d113      	bne.n	8003e8e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	011b      	lsls	r3, r3, #4
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	621a      	str	r2, [r3, #32]
}
 8003ea8:	bf00      	nop
 8003eaa:	371c      	adds	r7, #28
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr
 8003eb4:	40010000 	.word	0x40010000
 8003eb8:	40010400 	.word	0x40010400

08003ebc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b087      	sub	sp, #28
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	021b      	lsls	r3, r3, #8
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	031b      	lsls	r3, r3, #12
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a12      	ldr	r2, [pc, #72]	@ (8003f60 <TIM_OC4_SetConfig+0xa4>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d003      	beq.n	8003f24 <TIM_OC4_SetConfig+0x68>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a11      	ldr	r2, [pc, #68]	@ (8003f64 <TIM_OC4_SetConfig+0xa8>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d109      	bne.n	8003f38 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	019b      	lsls	r3, r3, #6
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	621a      	str	r2, [r3, #32]
}
 8003f52:	bf00      	nop
 8003f54:	371c      	adds	r7, #28
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	40010000 	.word	0x40010000
 8003f64:	40010400 	.word	0x40010400

08003f68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	f023 0201 	bic.w	r2, r3, #1
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	011b      	lsls	r3, r3, #4
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f023 030a 	bic.w	r3, r3, #10
 8003fa4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	621a      	str	r2, [r3, #32]
}
 8003fba:	bf00      	nop
 8003fbc:	371c      	adds	r7, #28
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b087      	sub	sp, #28
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	60f8      	str	r0, [r7, #12]
 8003fce:	60b9      	str	r1, [r7, #8]
 8003fd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	f023 0210 	bic.w	r2, r3, #16
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ff0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	031b      	lsls	r3, r3, #12
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004002:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	011b      	lsls	r3, r3, #4
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	4313      	orrs	r3, r2
 800400c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	621a      	str	r2, [r3, #32]
}
 800401a:	bf00      	nop
 800401c:	371c      	adds	r7, #28
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004026:	b480      	push	{r7}
 8004028:	b085      	sub	sp, #20
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
 800402e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800403c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4313      	orrs	r3, r2
 8004044:	f043 0307 	orr.w	r3, r3, #7
 8004048:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	609a      	str	r2, [r3, #8]
}
 8004050:	bf00      	nop
 8004052:	3714      	adds	r7, #20
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800405c:	b480      	push	{r7}
 800405e:	b087      	sub	sp, #28
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
 8004068:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004076:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	021a      	lsls	r2, r3, #8
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	431a      	orrs	r2, r3
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	4313      	orrs	r3, r2
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	4313      	orrs	r3, r2
 8004088:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	609a      	str	r2, [r3, #8]
}
 8004090:	bf00      	nop
 8004092:	371c      	adds	r7, #28
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800409c:	b480      	push	{r7}
 800409e:	b087      	sub	sp, #28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	f003 031f 	and.w	r3, r3, #31
 80040ae:	2201      	movs	r2, #1
 80040b0:	fa02 f303 	lsl.w	r3, r2, r3
 80040b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a1a      	ldr	r2, [r3, #32]
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	43db      	mvns	r3, r3
 80040be:	401a      	ands	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6a1a      	ldr	r2, [r3, #32]
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	f003 031f 	and.w	r3, r3, #31
 80040ce:	6879      	ldr	r1, [r7, #4]
 80040d0:	fa01 f303 	lsl.w	r3, r1, r3
 80040d4:	431a      	orrs	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	621a      	str	r2, [r3, #32]
}
 80040da:	bf00      	nop
 80040dc:	371c      	adds	r7, #28
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
	...

080040e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d101      	bne.n	8004100 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040fc:	2302      	movs	r3, #2
 80040fe:	e05a      	b.n	80041b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2202      	movs	r2, #2
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004126:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	4313      	orrs	r3, r2
 8004130:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a21      	ldr	r2, [pc, #132]	@ (80041c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d022      	beq.n	800418a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800414c:	d01d      	beq.n	800418a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a1d      	ldr	r2, [pc, #116]	@ (80041c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d018      	beq.n	800418a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a1b      	ldr	r2, [pc, #108]	@ (80041cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d013      	beq.n	800418a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a1a      	ldr	r2, [pc, #104]	@ (80041d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d00e      	beq.n	800418a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a18      	ldr	r2, [pc, #96]	@ (80041d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d009      	beq.n	800418a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a17      	ldr	r2, [pc, #92]	@ (80041d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d004      	beq.n	800418a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a15      	ldr	r2, [pc, #84]	@ (80041dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d10c      	bne.n	80041a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004190:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	68ba      	ldr	r2, [r7, #8]
 8004198:	4313      	orrs	r3, r2
 800419a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68ba      	ldr	r2, [r7, #8]
 80041a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3714      	adds	r7, #20
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	40010000 	.word	0x40010000
 80041c8:	40000400 	.word	0x40000400
 80041cc:	40000800 	.word	0x40000800
 80041d0:	40000c00 	.word	0x40000c00
 80041d4:	40010400 	.word	0x40010400
 80041d8:	40014000 	.word	0x40014000
 80041dc:	40001800 	.word	0x40001800

080041e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e042      	b.n	80042a0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d106      	bne.n	8004234 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7fd f872 	bl	8001318 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2224      	movs	r2, #36	@ 0x24
 8004238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68da      	ldr	r2, [r3, #12]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800424a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 fe55 	bl	8004efc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	691a      	ldr	r2, [r3, #16]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004260:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	695a      	ldr	r2, [r3, #20]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004270:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68da      	ldr	r2, [r3, #12]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004280:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2220      	movs	r2, #32
 800428c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2220      	movs	r2, #32
 8004294:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3708      	adds	r7, #8
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b08a      	sub	sp, #40	@ 0x28
 80042ac:	af02      	add	r7, sp, #8
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	603b      	str	r3, [r7, #0]
 80042b4:	4613      	mov	r3, r2
 80042b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b20      	cmp	r3, #32
 80042c6:	d175      	bne.n	80043b4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d002      	beq.n	80042d4 <HAL_UART_Transmit+0x2c>
 80042ce:	88fb      	ldrh	r3, [r7, #6]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d101      	bne.n	80042d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e06e      	b.n	80043b6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2221      	movs	r2, #33	@ 0x21
 80042e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042e6:	f7fd fadb 	bl	80018a0 <HAL_GetTick>
 80042ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	88fa      	ldrh	r2, [r7, #6]
 80042f0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	88fa      	ldrh	r2, [r7, #6]
 80042f6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004300:	d108      	bne.n	8004314 <HAL_UART_Transmit+0x6c>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d104      	bne.n	8004314 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800430a:	2300      	movs	r3, #0
 800430c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	61bb      	str	r3, [r7, #24]
 8004312:	e003      	b.n	800431c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004318:	2300      	movs	r3, #0
 800431a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800431c:	e02e      	b.n	800437c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	2200      	movs	r2, #0
 8004326:	2180      	movs	r1, #128	@ 0x80
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f000 fbb7 	bl	8004a9c <UART_WaitOnFlagUntilTimeout>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d005      	beq.n	8004340 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2220      	movs	r2, #32
 8004338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e03a      	b.n	80043b6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10b      	bne.n	800435e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	881b      	ldrh	r3, [r3, #0]
 800434a:	461a      	mov	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004354:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	3302      	adds	r3, #2
 800435a:	61bb      	str	r3, [r7, #24]
 800435c:	e007      	b.n	800436e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	781a      	ldrb	r2, [r3, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	3301      	adds	r3, #1
 800436c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004372:	b29b      	uxth	r3, r3
 8004374:	3b01      	subs	r3, #1
 8004376:	b29a      	uxth	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004380:	b29b      	uxth	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1cb      	bne.n	800431e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2200      	movs	r2, #0
 800438e:	2140      	movs	r1, #64	@ 0x40
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f000 fb83 	bl	8004a9c <UART_WaitOnFlagUntilTimeout>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d005      	beq.n	80043a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2220      	movs	r2, #32
 80043a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e006      	b.n	80043b6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2220      	movs	r2, #32
 80043ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80043b0:	2300      	movs	r3, #0
 80043b2:	e000      	b.n	80043b6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80043b4:	2302      	movs	r3, #2
  }
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3720      	adds	r7, #32
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b08a      	sub	sp, #40	@ 0x28
 80043c2:	af02      	add	r7, sp, #8
 80043c4:	60f8      	str	r0, [r7, #12]
 80043c6:	60b9      	str	r1, [r7, #8]
 80043c8:	603b      	str	r3, [r7, #0]
 80043ca:	4613      	mov	r3, r2
 80043cc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80043ce:	2300      	movs	r3, #0
 80043d0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b20      	cmp	r3, #32
 80043dc:	f040 8081 	bne.w	80044e2 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d002      	beq.n	80043ec <HAL_UART_Receive+0x2e>
 80043e6:	88fb      	ldrh	r3, [r7, #6]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d101      	bne.n	80043f0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e079      	b.n	80044e4 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2222      	movs	r2, #34	@ 0x22
 80043fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004404:	f7fd fa4c 	bl	80018a0 <HAL_GetTick>
 8004408:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	88fa      	ldrh	r2, [r7, #6]
 800440e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	88fa      	ldrh	r2, [r7, #6]
 8004414:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800441e:	d108      	bne.n	8004432 <HAL_UART_Receive+0x74>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d104      	bne.n	8004432 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004428:	2300      	movs	r3, #0
 800442a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	61bb      	str	r3, [r7, #24]
 8004430:	e003      	b.n	800443a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004436:	2300      	movs	r3, #0
 8004438:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800443a:	e047      	b.n	80044cc <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	9300      	str	r3, [sp, #0]
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	2200      	movs	r2, #0
 8004444:	2120      	movs	r1, #32
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f000 fb28 	bl	8004a9c <UART_WaitOnFlagUntilTimeout>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d005      	beq.n	800445e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2220      	movs	r2, #32
 8004456:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e042      	b.n	80044e4 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d10c      	bne.n	800447e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	b29b      	uxth	r3, r3
 800446c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004470:	b29a      	uxth	r2, r3
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	3302      	adds	r3, #2
 800447a:	61bb      	str	r3, [r7, #24]
 800447c:	e01f      	b.n	80044be <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004486:	d007      	beq.n	8004498 <HAL_UART_Receive+0xda>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10a      	bne.n	80044a6 <HAL_UART_Receive+0xe8>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d106      	bne.n	80044a6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	701a      	strb	r2, [r3, #0]
 80044a4:	e008      	b.n	80044b8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	3301      	adds	r3, #1
 80044bc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	3b01      	subs	r3, #1
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1b2      	bne.n	800443c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2220      	movs	r2, #32
 80044da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80044de:	2300      	movs	r3, #0
 80044e0:	e000      	b.n	80044e4 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80044e2:	2302      	movs	r3, #2
  }
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3720      	adds	r7, #32
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	4613      	mov	r3, r2
 80044f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b20      	cmp	r3, #32
 8004504:	d112      	bne.n	800452c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d002      	beq.n	8004512 <HAL_UART_Receive_IT+0x26>
 800450c:	88fb      	ldrh	r3, [r7, #6]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e00b      	b.n	800452e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800451c:	88fb      	ldrh	r3, [r7, #6]
 800451e:	461a      	mov	r2, r3
 8004520:	68b9      	ldr	r1, [r7, #8]
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 fb13 	bl	8004b4e <UART_Start_Receive_IT>
 8004528:	4603      	mov	r3, r0
 800452a:	e000      	b.n	800452e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800452c:	2302      	movs	r3, #2
  }
}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
	...

08004538 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b0ba      	sub	sp, #232	@ 0xe8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800455e:	2300      	movs	r3, #0
 8004560:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004564:	2300      	movs	r3, #0
 8004566:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800456a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004576:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10f      	bne.n	800459e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800457e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004582:	f003 0320 	and.w	r3, r3, #32
 8004586:	2b00      	cmp	r3, #0
 8004588:	d009      	beq.n	800459e <HAL_UART_IRQHandler+0x66>
 800458a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800458e:	f003 0320 	and.w	r3, r3, #32
 8004592:	2b00      	cmp	r3, #0
 8004594:	d003      	beq.n	800459e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 fbf2 	bl	8004d80 <UART_Receive_IT>
      return;
 800459c:	e25b      	b.n	8004a56 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800459e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f000 80de 	beq.w	8004764 <HAL_UART_IRQHandler+0x22c>
 80045a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d106      	bne.n	80045c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80045b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045b8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f000 80d1 	beq.w	8004764 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00b      	beq.n	80045e6 <HAL_UART_IRQHandler+0xae>
 80045ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d005      	beq.n	80045e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045de:	f043 0201 	orr.w	r2, r3, #1
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045ea:	f003 0304 	and.w	r3, r3, #4
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00b      	beq.n	800460a <HAL_UART_IRQHandler+0xd2>
 80045f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d005      	beq.n	800460a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004602:	f043 0202 	orr.w	r2, r3, #2
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800460a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00b      	beq.n	800462e <HAL_UART_IRQHandler+0xf6>
 8004616:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d005      	beq.n	800462e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004626:	f043 0204 	orr.w	r2, r3, #4
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800462e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004632:	f003 0308 	and.w	r3, r3, #8
 8004636:	2b00      	cmp	r3, #0
 8004638:	d011      	beq.n	800465e <HAL_UART_IRQHandler+0x126>
 800463a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800463e:	f003 0320 	and.w	r3, r3, #32
 8004642:	2b00      	cmp	r3, #0
 8004644:	d105      	bne.n	8004652 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004646:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d005      	beq.n	800465e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004656:	f043 0208 	orr.w	r2, r3, #8
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 81f2 	beq.w	8004a4c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800466c:	f003 0320 	and.w	r3, r3, #32
 8004670:	2b00      	cmp	r3, #0
 8004672:	d008      	beq.n	8004686 <HAL_UART_IRQHandler+0x14e>
 8004674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004678:	f003 0320 	and.w	r3, r3, #32
 800467c:	2b00      	cmp	r3, #0
 800467e:	d002      	beq.n	8004686 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 fb7d 	bl	8004d80 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004690:	2b40      	cmp	r3, #64	@ 0x40
 8004692:	bf0c      	ite	eq
 8004694:	2301      	moveq	r3, #1
 8004696:	2300      	movne	r3, #0
 8004698:	b2db      	uxtb	r3, r3
 800469a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046a2:	f003 0308 	and.w	r3, r3, #8
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d103      	bne.n	80046b2 <HAL_UART_IRQHandler+0x17a>
 80046aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d04f      	beq.n	8004752 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 fa85 	bl	8004bc2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046c2:	2b40      	cmp	r3, #64	@ 0x40
 80046c4:	d141      	bne.n	800474a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	3314      	adds	r3, #20
 80046cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80046d4:	e853 3f00 	ldrex	r3, [r3]
 80046d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80046dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80046e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	3314      	adds	r3, #20
 80046ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80046f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80046f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80046fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004702:	e841 2300 	strex	r3, r2, [r1]
 8004706:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800470a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1d9      	bne.n	80046c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004716:	2b00      	cmp	r3, #0
 8004718:	d013      	beq.n	8004742 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800471e:	4a7e      	ldr	r2, [pc, #504]	@ (8004918 <HAL_UART_IRQHandler+0x3e0>)
 8004720:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004726:	4618      	mov	r0, r3
 8004728:	f7fd fa3c 	bl	8001ba4 <HAL_DMA_Abort_IT>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d016      	beq.n	8004760 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004736:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800473c:	4610      	mov	r0, r2
 800473e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004740:	e00e      	b.n	8004760 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f994 	bl	8004a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004748:	e00a      	b.n	8004760 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f990 	bl	8004a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004750:	e006      	b.n	8004760 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f98c 	bl	8004a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800475e:	e175      	b.n	8004a4c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004760:	bf00      	nop
    return;
 8004762:	e173      	b.n	8004a4c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004768:	2b01      	cmp	r3, #1
 800476a:	f040 814f 	bne.w	8004a0c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800476e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004772:	f003 0310 	and.w	r3, r3, #16
 8004776:	2b00      	cmp	r3, #0
 8004778:	f000 8148 	beq.w	8004a0c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800477c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004780:	f003 0310 	and.w	r3, r3, #16
 8004784:	2b00      	cmp	r3, #0
 8004786:	f000 8141 	beq.w	8004a0c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800478a:	2300      	movs	r3, #0
 800478c:	60bb      	str	r3, [r7, #8]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	60bb      	str	r3, [r7, #8]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	60bb      	str	r3, [r7, #8]
 800479e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047aa:	2b40      	cmp	r3, #64	@ 0x40
 80047ac:	f040 80b6 	bne.w	800491c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 8145 	beq.w	8004a50 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80047ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047ce:	429a      	cmp	r2, r3
 80047d0:	f080 813e 	bcs.w	8004a50 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047da:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047e6:	f000 8088 	beq.w	80048fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	330c      	adds	r3, #12
 80047f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80047f8:	e853 3f00 	ldrex	r3, [r3]
 80047fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004800:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004804:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004808:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	330c      	adds	r3, #12
 8004812:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004816:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800481a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004822:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004826:	e841 2300 	strex	r3, r2, [r1]
 800482a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800482e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1d9      	bne.n	80047ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	3314      	adds	r3, #20
 800483c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004840:	e853 3f00 	ldrex	r3, [r3]
 8004844:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004846:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004848:	f023 0301 	bic.w	r3, r3, #1
 800484c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	3314      	adds	r3, #20
 8004856:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800485a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800485e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004860:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004862:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004866:	e841 2300 	strex	r3, r2, [r1]
 800486a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800486c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1e1      	bne.n	8004836 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	3314      	adds	r3, #20
 8004878:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800487c:	e853 3f00 	ldrex	r3, [r3]
 8004880:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004882:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004884:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004888:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	3314      	adds	r3, #20
 8004892:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004896:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004898:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800489c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800489e:	e841 2300 	strex	r3, r2, [r1]
 80048a2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80048a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1e3      	bne.n	8004872 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2220      	movs	r2, #32
 80048ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	330c      	adds	r3, #12
 80048be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048c2:	e853 3f00 	ldrex	r3, [r3]
 80048c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80048c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048ca:	f023 0310 	bic.w	r3, r3, #16
 80048ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	330c      	adds	r3, #12
 80048d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80048dc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80048de:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80048e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80048e4:	e841 2300 	strex	r3, r2, [r1]
 80048e8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80048ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1e3      	bne.n	80048b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7fd f8e5 	bl	8001ac4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2202      	movs	r2, #2
 80048fe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004908:	b29b      	uxth	r3, r3
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	b29b      	uxth	r3, r3
 800490e:	4619      	mov	r1, r3
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 f8b7 	bl	8004a84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004916:	e09b      	b.n	8004a50 <HAL_UART_IRQHandler+0x518>
 8004918:	08004c89 	.word	0x08004c89
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004924:	b29b      	uxth	r3, r3
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004930:	b29b      	uxth	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 808e 	beq.w	8004a54 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004938:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 8089 	beq.w	8004a54 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	330c      	adds	r3, #12
 8004948:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800494c:	e853 3f00 	ldrex	r3, [r3]
 8004950:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004954:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004958:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	330c      	adds	r3, #12
 8004962:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004966:	647a      	str	r2, [r7, #68]	@ 0x44
 8004968:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800496c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800496e:	e841 2300 	strex	r3, r2, [r1]
 8004972:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004974:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1e3      	bne.n	8004942 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	3314      	adds	r3, #20
 8004980:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004984:	e853 3f00 	ldrex	r3, [r3]
 8004988:	623b      	str	r3, [r7, #32]
   return(result);
 800498a:	6a3b      	ldr	r3, [r7, #32]
 800498c:	f023 0301 	bic.w	r3, r3, #1
 8004990:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	3314      	adds	r3, #20
 800499a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800499e:	633a      	str	r2, [r7, #48]	@ 0x30
 80049a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049a6:	e841 2300 	strex	r3, r2, [r1]
 80049aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80049ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1e3      	bne.n	800497a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2220      	movs	r2, #32
 80049b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	330c      	adds	r3, #12
 80049c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	e853 3f00 	ldrex	r3, [r3]
 80049ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f023 0310 	bic.w	r3, r3, #16
 80049d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	330c      	adds	r3, #12
 80049e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80049e4:	61fa      	str	r2, [r7, #28]
 80049e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e8:	69b9      	ldr	r1, [r7, #24]
 80049ea:	69fa      	ldr	r2, [r7, #28]
 80049ec:	e841 2300 	strex	r3, r2, [r1]
 80049f0:	617b      	str	r3, [r7, #20]
   return(result);
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1e3      	bne.n	80049c0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2202      	movs	r2, #2
 80049fc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a02:	4619      	mov	r1, r3
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 f83d 	bl	8004a84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a0a:	e023      	b.n	8004a54 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d009      	beq.n	8004a2c <HAL_UART_IRQHandler+0x4f4>
 8004a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d003      	beq.n	8004a2c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f943 	bl	8004cb0 <UART_Transmit_IT>
    return;
 8004a2a:	e014      	b.n	8004a56 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00e      	beq.n	8004a56 <HAL_UART_IRQHandler+0x51e>
 8004a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d008      	beq.n	8004a56 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 f983 	bl	8004d50 <UART_EndTransmit_IT>
    return;
 8004a4a:	e004      	b.n	8004a56 <HAL_UART_IRQHandler+0x51e>
    return;
 8004a4c:	bf00      	nop
 8004a4e:	e002      	b.n	8004a56 <HAL_UART_IRQHandler+0x51e>
      return;
 8004a50:	bf00      	nop
 8004a52:	e000      	b.n	8004a56 <HAL_UART_IRQHandler+0x51e>
      return;
 8004a54:	bf00      	nop
  }
}
 8004a56:	37e8      	adds	r7, #232	@ 0xe8
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	603b      	str	r3, [r7, #0]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aac:	e03b      	b.n	8004b26 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aae:	6a3b      	ldr	r3, [r7, #32]
 8004ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab4:	d037      	beq.n	8004b26 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ab6:	f7fc fef3 	bl	80018a0 <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	6a3a      	ldr	r2, [r7, #32]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d302      	bcc.n	8004acc <UART_WaitOnFlagUntilTimeout+0x30>
 8004ac6:	6a3b      	ldr	r3, [r7, #32]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d101      	bne.n	8004ad0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e03a      	b.n	8004b46 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	f003 0304 	and.w	r3, r3, #4
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d023      	beq.n	8004b26 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	2b80      	cmp	r3, #128	@ 0x80
 8004ae2:	d020      	beq.n	8004b26 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	2b40      	cmp	r3, #64	@ 0x40
 8004ae8:	d01d      	beq.n	8004b26 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0308 	and.w	r3, r3, #8
 8004af4:	2b08      	cmp	r3, #8
 8004af6:	d116      	bne.n	8004b26 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004af8:	2300      	movs	r3, #0
 8004afa:	617b      	str	r3, [r7, #20]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	617b      	str	r3, [r7, #20]
 8004b0c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f000 f857 	bl	8004bc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2208      	movs	r2, #8
 8004b18:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e00f      	b.n	8004b46 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	bf0c      	ite	eq
 8004b36:	2301      	moveq	r3, #1
 8004b38:	2300      	movne	r3, #0
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	79fb      	ldrb	r3, [r7, #7]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d0b4      	beq.n	8004aae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3718      	adds	r7, #24
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b085      	sub	sp, #20
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	60f8      	str	r0, [r7, #12]
 8004b56:	60b9      	str	r1, [r7, #8]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	88fa      	ldrh	r2, [r7, #6]
 8004b66:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	88fa      	ldrh	r2, [r7, #6]
 8004b6c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2222      	movs	r2, #34	@ 0x22
 8004b78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d007      	beq.n	8004b94 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68da      	ldr	r2, [r3, #12]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b92:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	695a      	ldr	r2, [r3, #20]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f042 0201 	orr.w	r2, r2, #1
 8004ba2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68da      	ldr	r2, [r3, #12]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f042 0220 	orr.w	r2, r2, #32
 8004bb2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3714      	adds	r7, #20
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b095      	sub	sp, #84	@ 0x54
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	330c      	adds	r3, #12
 8004bd0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bd4:	e853 3f00 	ldrex	r3, [r3]
 8004bd8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004be0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	330c      	adds	r3, #12
 8004be8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004bea:	643a      	str	r2, [r7, #64]	@ 0x40
 8004bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004bf0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004bf2:	e841 2300 	strex	r3, r2, [r1]
 8004bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1e5      	bne.n	8004bca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	3314      	adds	r3, #20
 8004c04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c06:	6a3b      	ldr	r3, [r7, #32]
 8004c08:	e853 3f00 	ldrex	r3, [r3]
 8004c0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	f023 0301 	bic.w	r3, r3, #1
 8004c14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	3314      	adds	r3, #20
 8004c1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c20:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c26:	e841 2300 	strex	r3, r2, [r1]
 8004c2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1e5      	bne.n	8004bfe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d119      	bne.n	8004c6e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	330c      	adds	r3, #12
 8004c40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	e853 3f00 	ldrex	r3, [r3]
 8004c48:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	f023 0310 	bic.w	r3, r3, #16
 8004c50:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	330c      	adds	r3, #12
 8004c58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c5a:	61ba      	str	r2, [r7, #24]
 8004c5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5e:	6979      	ldr	r1, [r7, #20]
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	e841 2300 	strex	r3, r2, [r1]
 8004c66:	613b      	str	r3, [r7, #16]
   return(result);
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1e5      	bne.n	8004c3a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2220      	movs	r2, #32
 8004c72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004c7c:	bf00      	nop
 8004c7e:	3754      	adds	r7, #84	@ 0x54
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	f7ff fee4 	bl	8004a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ca8:	bf00      	nop
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b21      	cmp	r3, #33	@ 0x21
 8004cc2:	d13e      	bne.n	8004d42 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ccc:	d114      	bne.n	8004cf8 <UART_Transmit_IT+0x48>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d110      	bne.n	8004cf8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	881b      	ldrh	r3, [r3, #0]
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	1c9a      	adds	r2, r3, #2
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	621a      	str	r2, [r3, #32]
 8004cf6:	e008      	b.n	8004d0a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a1b      	ldr	r3, [r3, #32]
 8004cfc:	1c59      	adds	r1, r3, #1
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	6211      	str	r1, [r2, #32]
 8004d02:	781a      	ldrb	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	3b01      	subs	r3, #1
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	4619      	mov	r1, r3
 8004d18:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d10f      	bne.n	8004d3e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68da      	ldr	r2, [r3, #12]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d2c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68da      	ldr	r2, [r3, #12]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d3c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	e000      	b.n	8004d44 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d42:	2302      	movs	r3, #2
  }
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3714      	adds	r7, #20
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68da      	ldr	r2, [r3, #12]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d66:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2220      	movs	r2, #32
 8004d6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f7ff fe73 	bl	8004a5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b08c      	sub	sp, #48	@ 0x30
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	2b22      	cmp	r3, #34	@ 0x22
 8004d92:	f040 80ae 	bne.w	8004ef2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d9e:	d117      	bne.n	8004dd0 <UART_Receive_IT+0x50>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d113      	bne.n	8004dd0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004da8:	2300      	movs	r3, #0
 8004daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc8:	1c9a      	adds	r2, r3, #2
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	629a      	str	r2, [r3, #40]	@ 0x28
 8004dce:	e026      	b.n	8004e1e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004de2:	d007      	beq.n	8004df4 <UART_Receive_IT+0x74>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10a      	bne.n	8004e02 <UART_Receive_IT+0x82>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d106      	bne.n	8004e02 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	b2da      	uxtb	r2, r3
 8004dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dfe:	701a      	strb	r2, [r3, #0]
 8004e00:	e008      	b.n	8004e14 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e0e:	b2da      	uxtb	r2, r3
 8004e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e12:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	3b01      	subs	r3, #1
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d15d      	bne.n	8004eee <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68da      	ldr	r2, [r3, #12]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 0220 	bic.w	r2, r2, #32
 8004e40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68da      	ldr	r2, [r3, #12]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	695a      	ldr	r2, [r3, #20]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 0201 	bic.w	r2, r2, #1
 8004e60:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2220      	movs	r2, #32
 8004e66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d135      	bne.n	8004ee4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	330c      	adds	r3, #12
 8004e84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	e853 3f00 	ldrex	r3, [r3]
 8004e8c:	613b      	str	r3, [r7, #16]
   return(result);
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	f023 0310 	bic.w	r3, r3, #16
 8004e94:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	330c      	adds	r3, #12
 8004e9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e9e:	623a      	str	r2, [r7, #32]
 8004ea0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea2:	69f9      	ldr	r1, [r7, #28]
 8004ea4:	6a3a      	ldr	r2, [r7, #32]
 8004ea6:	e841 2300 	strex	r3, r2, [r1]
 8004eaa:	61bb      	str	r3, [r7, #24]
   return(result);
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1e5      	bne.n	8004e7e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0310 	and.w	r3, r3, #16
 8004ebc:	2b10      	cmp	r3, #16
 8004ebe:	d10a      	bne.n	8004ed6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	60fb      	str	r3, [r7, #12]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	60fb      	str	r3, [r7, #12]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	60fb      	str	r3, [r7, #12]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004eda:	4619      	mov	r1, r3
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f7ff fdd1 	bl	8004a84 <HAL_UARTEx_RxEventCallback>
 8004ee2:	e002      	b.n	8004eea <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f7fb ff59 	bl	8000d9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004eea:	2300      	movs	r3, #0
 8004eec:	e002      	b.n	8004ef4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	e000      	b.n	8004ef4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004ef2:	2302      	movs	r3, #2
  }
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3730      	adds	r7, #48	@ 0x30
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004efc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f00:	b0c0      	sub	sp, #256	@ 0x100
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f18:	68d9      	ldr	r1, [r3, #12]
 8004f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	ea40 0301 	orr.w	r3, r0, r1
 8004f24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f2a:	689a      	ldr	r2, [r3, #8]
 8004f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	431a      	orrs	r2, r3
 8004f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	431a      	orrs	r2, r3
 8004f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004f54:	f021 010c 	bic.w	r1, r1, #12
 8004f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004f62:	430b      	orrs	r3, r1
 8004f64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f76:	6999      	ldr	r1, [r3, #24]
 8004f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	ea40 0301 	orr.w	r3, r0, r1
 8004f82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	4b8f      	ldr	r3, [pc, #572]	@ (80051c8 <UART_SetConfig+0x2cc>)
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d005      	beq.n	8004f9c <UART_SetConfig+0xa0>
 8004f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	4b8d      	ldr	r3, [pc, #564]	@ (80051cc <UART_SetConfig+0x2d0>)
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d104      	bne.n	8004fa6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f9c:	f7fe f8be 	bl	800311c <HAL_RCC_GetPCLK2Freq>
 8004fa0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004fa4:	e003      	b.n	8004fae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fa6:	f7fe f8a5 	bl	80030f4 <HAL_RCC_GetPCLK1Freq>
 8004faa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fb2:	69db      	ldr	r3, [r3, #28]
 8004fb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fb8:	f040 810c 	bne.w	80051d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004fbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004fc6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004fca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004fce:	4622      	mov	r2, r4
 8004fd0:	462b      	mov	r3, r5
 8004fd2:	1891      	adds	r1, r2, r2
 8004fd4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004fd6:	415b      	adcs	r3, r3
 8004fd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004fda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004fde:	4621      	mov	r1, r4
 8004fe0:	eb12 0801 	adds.w	r8, r2, r1
 8004fe4:	4629      	mov	r1, r5
 8004fe6:	eb43 0901 	adc.w	r9, r3, r1
 8004fea:	f04f 0200 	mov.w	r2, #0
 8004fee:	f04f 0300 	mov.w	r3, #0
 8004ff2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ff6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ffa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ffe:	4690      	mov	r8, r2
 8005000:	4699      	mov	r9, r3
 8005002:	4623      	mov	r3, r4
 8005004:	eb18 0303 	adds.w	r3, r8, r3
 8005008:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800500c:	462b      	mov	r3, r5
 800500e:	eb49 0303 	adc.w	r3, r9, r3
 8005012:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005022:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005026:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800502a:	460b      	mov	r3, r1
 800502c:	18db      	adds	r3, r3, r3
 800502e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005030:	4613      	mov	r3, r2
 8005032:	eb42 0303 	adc.w	r3, r2, r3
 8005036:	657b      	str	r3, [r7, #84]	@ 0x54
 8005038:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800503c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005040:	f7fb f926 	bl	8000290 <__aeabi_uldivmod>
 8005044:	4602      	mov	r2, r0
 8005046:	460b      	mov	r3, r1
 8005048:	4b61      	ldr	r3, [pc, #388]	@ (80051d0 <UART_SetConfig+0x2d4>)
 800504a:	fba3 2302 	umull	r2, r3, r3, r2
 800504e:	095b      	lsrs	r3, r3, #5
 8005050:	011c      	lsls	r4, r3, #4
 8005052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005056:	2200      	movs	r2, #0
 8005058:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800505c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005060:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005064:	4642      	mov	r2, r8
 8005066:	464b      	mov	r3, r9
 8005068:	1891      	adds	r1, r2, r2
 800506a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800506c:	415b      	adcs	r3, r3
 800506e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005070:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005074:	4641      	mov	r1, r8
 8005076:	eb12 0a01 	adds.w	sl, r2, r1
 800507a:	4649      	mov	r1, r9
 800507c:	eb43 0b01 	adc.w	fp, r3, r1
 8005080:	f04f 0200 	mov.w	r2, #0
 8005084:	f04f 0300 	mov.w	r3, #0
 8005088:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800508c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005090:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005094:	4692      	mov	sl, r2
 8005096:	469b      	mov	fp, r3
 8005098:	4643      	mov	r3, r8
 800509a:	eb1a 0303 	adds.w	r3, sl, r3
 800509e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80050a2:	464b      	mov	r3, r9
 80050a4:	eb4b 0303 	adc.w	r3, fp, r3
 80050a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80050ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80050b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80050bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80050c0:	460b      	mov	r3, r1
 80050c2:	18db      	adds	r3, r3, r3
 80050c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80050c6:	4613      	mov	r3, r2
 80050c8:	eb42 0303 	adc.w	r3, r2, r3
 80050cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80050ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80050d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80050d6:	f7fb f8db 	bl	8000290 <__aeabi_uldivmod>
 80050da:	4602      	mov	r2, r0
 80050dc:	460b      	mov	r3, r1
 80050de:	4611      	mov	r1, r2
 80050e0:	4b3b      	ldr	r3, [pc, #236]	@ (80051d0 <UART_SetConfig+0x2d4>)
 80050e2:	fba3 2301 	umull	r2, r3, r3, r1
 80050e6:	095b      	lsrs	r3, r3, #5
 80050e8:	2264      	movs	r2, #100	@ 0x64
 80050ea:	fb02 f303 	mul.w	r3, r2, r3
 80050ee:	1acb      	subs	r3, r1, r3
 80050f0:	00db      	lsls	r3, r3, #3
 80050f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80050f6:	4b36      	ldr	r3, [pc, #216]	@ (80051d0 <UART_SetConfig+0x2d4>)
 80050f8:	fba3 2302 	umull	r2, r3, r3, r2
 80050fc:	095b      	lsrs	r3, r3, #5
 80050fe:	005b      	lsls	r3, r3, #1
 8005100:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005104:	441c      	add	r4, r3
 8005106:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800510a:	2200      	movs	r2, #0
 800510c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005110:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005114:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005118:	4642      	mov	r2, r8
 800511a:	464b      	mov	r3, r9
 800511c:	1891      	adds	r1, r2, r2
 800511e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005120:	415b      	adcs	r3, r3
 8005122:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005124:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005128:	4641      	mov	r1, r8
 800512a:	1851      	adds	r1, r2, r1
 800512c:	6339      	str	r1, [r7, #48]	@ 0x30
 800512e:	4649      	mov	r1, r9
 8005130:	414b      	adcs	r3, r1
 8005132:	637b      	str	r3, [r7, #52]	@ 0x34
 8005134:	f04f 0200 	mov.w	r2, #0
 8005138:	f04f 0300 	mov.w	r3, #0
 800513c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005140:	4659      	mov	r1, fp
 8005142:	00cb      	lsls	r3, r1, #3
 8005144:	4651      	mov	r1, sl
 8005146:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800514a:	4651      	mov	r1, sl
 800514c:	00ca      	lsls	r2, r1, #3
 800514e:	4610      	mov	r0, r2
 8005150:	4619      	mov	r1, r3
 8005152:	4603      	mov	r3, r0
 8005154:	4642      	mov	r2, r8
 8005156:	189b      	adds	r3, r3, r2
 8005158:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800515c:	464b      	mov	r3, r9
 800515e:	460a      	mov	r2, r1
 8005160:	eb42 0303 	adc.w	r3, r2, r3
 8005164:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005174:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005178:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800517c:	460b      	mov	r3, r1
 800517e:	18db      	adds	r3, r3, r3
 8005180:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005182:	4613      	mov	r3, r2
 8005184:	eb42 0303 	adc.w	r3, r2, r3
 8005188:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800518a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800518e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005192:	f7fb f87d 	bl	8000290 <__aeabi_uldivmod>
 8005196:	4602      	mov	r2, r0
 8005198:	460b      	mov	r3, r1
 800519a:	4b0d      	ldr	r3, [pc, #52]	@ (80051d0 <UART_SetConfig+0x2d4>)
 800519c:	fba3 1302 	umull	r1, r3, r3, r2
 80051a0:	095b      	lsrs	r3, r3, #5
 80051a2:	2164      	movs	r1, #100	@ 0x64
 80051a4:	fb01 f303 	mul.w	r3, r1, r3
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	00db      	lsls	r3, r3, #3
 80051ac:	3332      	adds	r3, #50	@ 0x32
 80051ae:	4a08      	ldr	r2, [pc, #32]	@ (80051d0 <UART_SetConfig+0x2d4>)
 80051b0:	fba2 2303 	umull	r2, r3, r2, r3
 80051b4:	095b      	lsrs	r3, r3, #5
 80051b6:	f003 0207 	and.w	r2, r3, #7
 80051ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4422      	add	r2, r4
 80051c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80051c4:	e106      	b.n	80053d4 <UART_SetConfig+0x4d8>
 80051c6:	bf00      	nop
 80051c8:	40011000 	.word	0x40011000
 80051cc:	40011400 	.word	0x40011400
 80051d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051d8:	2200      	movs	r2, #0
 80051da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80051de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80051e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80051e6:	4642      	mov	r2, r8
 80051e8:	464b      	mov	r3, r9
 80051ea:	1891      	adds	r1, r2, r2
 80051ec:	6239      	str	r1, [r7, #32]
 80051ee:	415b      	adcs	r3, r3
 80051f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80051f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051f6:	4641      	mov	r1, r8
 80051f8:	1854      	adds	r4, r2, r1
 80051fa:	4649      	mov	r1, r9
 80051fc:	eb43 0501 	adc.w	r5, r3, r1
 8005200:	f04f 0200 	mov.w	r2, #0
 8005204:	f04f 0300 	mov.w	r3, #0
 8005208:	00eb      	lsls	r3, r5, #3
 800520a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800520e:	00e2      	lsls	r2, r4, #3
 8005210:	4614      	mov	r4, r2
 8005212:	461d      	mov	r5, r3
 8005214:	4643      	mov	r3, r8
 8005216:	18e3      	adds	r3, r4, r3
 8005218:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800521c:	464b      	mov	r3, r9
 800521e:	eb45 0303 	adc.w	r3, r5, r3
 8005222:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005232:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005236:	f04f 0200 	mov.w	r2, #0
 800523a:	f04f 0300 	mov.w	r3, #0
 800523e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005242:	4629      	mov	r1, r5
 8005244:	008b      	lsls	r3, r1, #2
 8005246:	4621      	mov	r1, r4
 8005248:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800524c:	4621      	mov	r1, r4
 800524e:	008a      	lsls	r2, r1, #2
 8005250:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005254:	f7fb f81c 	bl	8000290 <__aeabi_uldivmod>
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	4b60      	ldr	r3, [pc, #384]	@ (80053e0 <UART_SetConfig+0x4e4>)
 800525e:	fba3 2302 	umull	r2, r3, r3, r2
 8005262:	095b      	lsrs	r3, r3, #5
 8005264:	011c      	lsls	r4, r3, #4
 8005266:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800526a:	2200      	movs	r2, #0
 800526c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005270:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005274:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005278:	4642      	mov	r2, r8
 800527a:	464b      	mov	r3, r9
 800527c:	1891      	adds	r1, r2, r2
 800527e:	61b9      	str	r1, [r7, #24]
 8005280:	415b      	adcs	r3, r3
 8005282:	61fb      	str	r3, [r7, #28]
 8005284:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005288:	4641      	mov	r1, r8
 800528a:	1851      	adds	r1, r2, r1
 800528c:	6139      	str	r1, [r7, #16]
 800528e:	4649      	mov	r1, r9
 8005290:	414b      	adcs	r3, r1
 8005292:	617b      	str	r3, [r7, #20]
 8005294:	f04f 0200 	mov.w	r2, #0
 8005298:	f04f 0300 	mov.w	r3, #0
 800529c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052a0:	4659      	mov	r1, fp
 80052a2:	00cb      	lsls	r3, r1, #3
 80052a4:	4651      	mov	r1, sl
 80052a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052aa:	4651      	mov	r1, sl
 80052ac:	00ca      	lsls	r2, r1, #3
 80052ae:	4610      	mov	r0, r2
 80052b0:	4619      	mov	r1, r3
 80052b2:	4603      	mov	r3, r0
 80052b4:	4642      	mov	r2, r8
 80052b6:	189b      	adds	r3, r3, r2
 80052b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80052bc:	464b      	mov	r3, r9
 80052be:	460a      	mov	r2, r1
 80052c0:	eb42 0303 	adc.w	r3, r2, r3
 80052c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80052c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80052d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80052d4:	f04f 0200 	mov.w	r2, #0
 80052d8:	f04f 0300 	mov.w	r3, #0
 80052dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80052e0:	4649      	mov	r1, r9
 80052e2:	008b      	lsls	r3, r1, #2
 80052e4:	4641      	mov	r1, r8
 80052e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052ea:	4641      	mov	r1, r8
 80052ec:	008a      	lsls	r2, r1, #2
 80052ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80052f2:	f7fa ffcd 	bl	8000290 <__aeabi_uldivmod>
 80052f6:	4602      	mov	r2, r0
 80052f8:	460b      	mov	r3, r1
 80052fa:	4611      	mov	r1, r2
 80052fc:	4b38      	ldr	r3, [pc, #224]	@ (80053e0 <UART_SetConfig+0x4e4>)
 80052fe:	fba3 2301 	umull	r2, r3, r3, r1
 8005302:	095b      	lsrs	r3, r3, #5
 8005304:	2264      	movs	r2, #100	@ 0x64
 8005306:	fb02 f303 	mul.w	r3, r2, r3
 800530a:	1acb      	subs	r3, r1, r3
 800530c:	011b      	lsls	r3, r3, #4
 800530e:	3332      	adds	r3, #50	@ 0x32
 8005310:	4a33      	ldr	r2, [pc, #204]	@ (80053e0 <UART_SetConfig+0x4e4>)
 8005312:	fba2 2303 	umull	r2, r3, r2, r3
 8005316:	095b      	lsrs	r3, r3, #5
 8005318:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800531c:	441c      	add	r4, r3
 800531e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005322:	2200      	movs	r2, #0
 8005324:	673b      	str	r3, [r7, #112]	@ 0x70
 8005326:	677a      	str	r2, [r7, #116]	@ 0x74
 8005328:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800532c:	4642      	mov	r2, r8
 800532e:	464b      	mov	r3, r9
 8005330:	1891      	adds	r1, r2, r2
 8005332:	60b9      	str	r1, [r7, #8]
 8005334:	415b      	adcs	r3, r3
 8005336:	60fb      	str	r3, [r7, #12]
 8005338:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800533c:	4641      	mov	r1, r8
 800533e:	1851      	adds	r1, r2, r1
 8005340:	6039      	str	r1, [r7, #0]
 8005342:	4649      	mov	r1, r9
 8005344:	414b      	adcs	r3, r1
 8005346:	607b      	str	r3, [r7, #4]
 8005348:	f04f 0200 	mov.w	r2, #0
 800534c:	f04f 0300 	mov.w	r3, #0
 8005350:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005354:	4659      	mov	r1, fp
 8005356:	00cb      	lsls	r3, r1, #3
 8005358:	4651      	mov	r1, sl
 800535a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800535e:	4651      	mov	r1, sl
 8005360:	00ca      	lsls	r2, r1, #3
 8005362:	4610      	mov	r0, r2
 8005364:	4619      	mov	r1, r3
 8005366:	4603      	mov	r3, r0
 8005368:	4642      	mov	r2, r8
 800536a:	189b      	adds	r3, r3, r2
 800536c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800536e:	464b      	mov	r3, r9
 8005370:	460a      	mov	r2, r1
 8005372:	eb42 0303 	adc.w	r3, r2, r3
 8005376:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	663b      	str	r3, [r7, #96]	@ 0x60
 8005382:	667a      	str	r2, [r7, #100]	@ 0x64
 8005384:	f04f 0200 	mov.w	r2, #0
 8005388:	f04f 0300 	mov.w	r3, #0
 800538c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005390:	4649      	mov	r1, r9
 8005392:	008b      	lsls	r3, r1, #2
 8005394:	4641      	mov	r1, r8
 8005396:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800539a:	4641      	mov	r1, r8
 800539c:	008a      	lsls	r2, r1, #2
 800539e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80053a2:	f7fa ff75 	bl	8000290 <__aeabi_uldivmod>
 80053a6:	4602      	mov	r2, r0
 80053a8:	460b      	mov	r3, r1
 80053aa:	4b0d      	ldr	r3, [pc, #52]	@ (80053e0 <UART_SetConfig+0x4e4>)
 80053ac:	fba3 1302 	umull	r1, r3, r3, r2
 80053b0:	095b      	lsrs	r3, r3, #5
 80053b2:	2164      	movs	r1, #100	@ 0x64
 80053b4:	fb01 f303 	mul.w	r3, r1, r3
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	011b      	lsls	r3, r3, #4
 80053bc:	3332      	adds	r3, #50	@ 0x32
 80053be:	4a08      	ldr	r2, [pc, #32]	@ (80053e0 <UART_SetConfig+0x4e4>)
 80053c0:	fba2 2303 	umull	r2, r3, r2, r3
 80053c4:	095b      	lsrs	r3, r3, #5
 80053c6:	f003 020f 	and.w	r2, r3, #15
 80053ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4422      	add	r2, r4
 80053d2:	609a      	str	r2, [r3, #8]
}
 80053d4:	bf00      	nop
 80053d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80053da:	46bd      	mov	sp, r7
 80053dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053e0:	51eb851f 	.word	0x51eb851f

080053e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053e4:	b084      	sub	sp, #16
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b084      	sub	sp, #16
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
 80053ee:	f107 001c 	add.w	r0, r7, #28
 80053f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053f6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d123      	bne.n	8005446 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005402:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005412:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005426:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800542a:	2b01      	cmp	r3, #1
 800542c:	d105      	bne.n	800543a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 faa0 	bl	8005980 <USB_CoreReset>
 8005440:	4603      	mov	r3, r0
 8005442:	73fb      	strb	r3, [r7, #15]
 8005444:	e01b      	b.n	800547e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 fa94 	bl	8005980 <USB_CoreReset>
 8005458:	4603      	mov	r3, r0
 800545a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800545c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005460:	2b00      	cmp	r3, #0
 8005462:	d106      	bne.n	8005472 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005468:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005470:	e005      	b.n	800547e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005476:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800547e:	7fbb      	ldrb	r3, [r7, #30]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d10b      	bne.n	800549c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f043 0206 	orr.w	r2, r3, #6
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f043 0220 	orr.w	r2, r3, #32
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800549c:	7bfb      	ldrb	r3, [r7, #15]
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054a8:	b004      	add	sp, #16
 80054aa:	4770      	bx	lr

080054ac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f023 0201 	bic.w	r2, r3, #1
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b084      	sub	sp, #16
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
 80054d6:	460b      	mov	r3, r1
 80054d8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80054da:	2300      	movs	r3, #0
 80054dc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80054ea:	78fb      	ldrb	r3, [r7, #3]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d115      	bne.n	800551c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80054fc:	200a      	movs	r0, #10
 80054fe:	f7fc f9db 	bl	80018b8 <HAL_Delay>
      ms += 10U;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	330a      	adds	r3, #10
 8005506:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 fa2b 	bl	8005964 <USB_GetMode>
 800550e:	4603      	mov	r3, r0
 8005510:	2b01      	cmp	r3, #1
 8005512:	d01e      	beq.n	8005552 <USB_SetCurrentMode+0x84>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2bc7      	cmp	r3, #199	@ 0xc7
 8005518:	d9f0      	bls.n	80054fc <USB_SetCurrentMode+0x2e>
 800551a:	e01a      	b.n	8005552 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800551c:	78fb      	ldrb	r3, [r7, #3]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d115      	bne.n	800554e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800552e:	200a      	movs	r0, #10
 8005530:	f7fc f9c2 	bl	80018b8 <HAL_Delay>
      ms += 10U;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	330a      	adds	r3, #10
 8005538:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 fa12 	bl	8005964 <USB_GetMode>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d005      	beq.n	8005552 <USB_SetCurrentMode+0x84>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2bc7      	cmp	r3, #199	@ 0xc7
 800554a:	d9f0      	bls.n	800552e <USB_SetCurrentMode+0x60>
 800554c:	e001      	b.n	8005552 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e005      	b.n	800555e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2bc8      	cmp	r3, #200	@ 0xc8
 8005556:	d101      	bne.n	800555c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e000      	b.n	800555e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
	...

08005568 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005568:	b084      	sub	sp, #16
 800556a:	b580      	push	{r7, lr}
 800556c:	b086      	sub	sp, #24
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
 8005572:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005576:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800557a:	2300      	movs	r3, #0
 800557c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005582:	2300      	movs	r3, #0
 8005584:	613b      	str	r3, [r7, #16]
 8005586:	e009      	b.n	800559c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	3340      	adds	r3, #64	@ 0x40
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4413      	add	r3, r2
 8005592:	2200      	movs	r2, #0
 8005594:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	3301      	adds	r3, #1
 800559a:	613b      	str	r3, [r7, #16]
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	2b0e      	cmp	r3, #14
 80055a0:	d9f2      	bls.n	8005588 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80055a2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d11c      	bne.n	80055e4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055b8:	f043 0302 	orr.w	r3, r3, #2
 80055bc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055c2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ce:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055da:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	639a      	str	r2, [r3, #56]	@ 0x38
 80055e2:	e00b      	b.n	80055fc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055e8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005602:	461a      	mov	r2, r3
 8005604:	2300      	movs	r3, #0
 8005606:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005608:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800560c:	2b01      	cmp	r3, #1
 800560e:	d10d      	bne.n	800562c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005610:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005614:	2b00      	cmp	r3, #0
 8005616:	d104      	bne.n	8005622 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005618:	2100      	movs	r1, #0
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f968 	bl	80058f0 <USB_SetDevSpeed>
 8005620:	e008      	b.n	8005634 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005622:	2101      	movs	r1, #1
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 f963 	bl	80058f0 <USB_SetDevSpeed>
 800562a:	e003      	b.n	8005634 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800562c:	2103      	movs	r1, #3
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f95e 	bl	80058f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005634:	2110      	movs	r1, #16
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f8fa 	bl	8005830 <USB_FlushTxFifo>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d001      	beq.n	8005646 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f924 	bl	8005894 <USB_FlushRxFifo>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d001      	beq.n	8005656 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800565c:	461a      	mov	r2, r3
 800565e:	2300      	movs	r3, #0
 8005660:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005668:	461a      	mov	r2, r3
 800566a:	2300      	movs	r3, #0
 800566c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005674:	461a      	mov	r2, r3
 8005676:	2300      	movs	r3, #0
 8005678:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800567a:	2300      	movs	r3, #0
 800567c:	613b      	str	r3, [r7, #16]
 800567e:	e043      	b.n	8005708 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4413      	add	r3, r2
 8005688:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005692:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005696:	d118      	bne.n	80056ca <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d10a      	bne.n	80056b4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	015a      	lsls	r2, r3, #5
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	4413      	add	r3, r2
 80056a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056aa:	461a      	mov	r2, r3
 80056ac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80056b0:	6013      	str	r3, [r2, #0]
 80056b2:	e013      	b.n	80056dc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	015a      	lsls	r2, r3, #5
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	4413      	add	r3, r2
 80056bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056c0:	461a      	mov	r2, r3
 80056c2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80056c6:	6013      	str	r3, [r2, #0]
 80056c8:	e008      	b.n	80056dc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	015a      	lsls	r2, r3, #5
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	4413      	add	r3, r2
 80056d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056d6:	461a      	mov	r2, r3
 80056d8:	2300      	movs	r3, #0
 80056da:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	015a      	lsls	r2, r3, #5
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	4413      	add	r3, r2
 80056e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056e8:	461a      	mov	r2, r3
 80056ea:	2300      	movs	r3, #0
 80056ec:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	015a      	lsls	r2, r3, #5
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056fa:	461a      	mov	r2, r3
 80056fc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005700:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	3301      	adds	r3, #1
 8005706:	613b      	str	r3, [r7, #16]
 8005708:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800570c:	461a      	mov	r2, r3
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	4293      	cmp	r3, r2
 8005712:	d3b5      	bcc.n	8005680 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005714:	2300      	movs	r3, #0
 8005716:	613b      	str	r3, [r7, #16]
 8005718:	e043      	b.n	80057a2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	015a      	lsls	r2, r3, #5
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	4413      	add	r3, r2
 8005722:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800572c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005730:	d118      	bne.n	8005764 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d10a      	bne.n	800574e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	4413      	add	r3, r2
 8005740:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005744:	461a      	mov	r2, r3
 8005746:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800574a:	6013      	str	r3, [r2, #0]
 800574c:	e013      	b.n	8005776 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	015a      	lsls	r2, r3, #5
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	4413      	add	r3, r2
 8005756:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800575a:	461a      	mov	r2, r3
 800575c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005760:	6013      	str	r3, [r2, #0]
 8005762:	e008      	b.n	8005776 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	015a      	lsls	r2, r3, #5
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	4413      	add	r3, r2
 800576c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005770:	461a      	mov	r2, r3
 8005772:	2300      	movs	r3, #0
 8005774:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	015a      	lsls	r2, r3, #5
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	4413      	add	r3, r2
 800577e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005782:	461a      	mov	r2, r3
 8005784:	2300      	movs	r3, #0
 8005786:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	015a      	lsls	r2, r3, #5
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	4413      	add	r3, r2
 8005790:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005794:	461a      	mov	r2, r3
 8005796:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800579a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	3301      	adds	r3, #1
 80057a0:	613b      	str	r3, [r7, #16]
 80057a2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80057a6:	461a      	mov	r2, r3
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d3b5      	bcc.n	800571a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057c0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80057ce:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80057d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d105      	bne.n	80057e4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	f043 0210 	orr.w	r2, r3, #16
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	699a      	ldr	r2, [r3, #24]
 80057e8:	4b10      	ldr	r3, [pc, #64]	@ (800582c <USB_DevInit+0x2c4>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80057f0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d005      	beq.n	8005804 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	f043 0208 	orr.w	r2, r3, #8
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005804:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005808:	2b01      	cmp	r3, #1
 800580a:	d107      	bne.n	800581c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005814:	f043 0304 	orr.w	r3, r3, #4
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800581c:	7dfb      	ldrb	r3, [r7, #23]
}
 800581e:	4618      	mov	r0, r3
 8005820:	3718      	adds	r7, #24
 8005822:	46bd      	mov	sp, r7
 8005824:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005828:	b004      	add	sp, #16
 800582a:	4770      	bx	lr
 800582c:	803c3800 	.word	0x803c3800

08005830 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800583a:	2300      	movs	r3, #0
 800583c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	3301      	adds	r3, #1
 8005842:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800584a:	d901      	bls.n	8005850 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e01b      	b.n	8005888 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	2b00      	cmp	r3, #0
 8005856:	daf2      	bge.n	800583e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005858:	2300      	movs	r3, #0
 800585a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	019b      	lsls	r3, r3, #6
 8005860:	f043 0220 	orr.w	r2, r3, #32
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	3301      	adds	r3, #1
 800586c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005874:	d901      	bls.n	800587a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e006      	b.n	8005888 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	f003 0320 	and.w	r3, r3, #32
 8005882:	2b20      	cmp	r3, #32
 8005884:	d0f0      	beq.n	8005868 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3714      	adds	r7, #20
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800589c:	2300      	movs	r3, #0
 800589e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	3301      	adds	r3, #1
 80058a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058ac:	d901      	bls.n	80058b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e018      	b.n	80058e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	daf2      	bge.n	80058a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80058ba:	2300      	movs	r3, #0
 80058bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2210      	movs	r2, #16
 80058c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	3301      	adds	r3, #1
 80058c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058d0:	d901      	bls.n	80058d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e006      	b.n	80058e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	f003 0310 	and.w	r3, r3, #16
 80058de:	2b10      	cmp	r3, #16
 80058e0:	d0f0      	beq.n	80058c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3714      	adds	r7, #20
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b085      	sub	sp, #20
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	460b      	mov	r3, r1
 80058fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	78fb      	ldrb	r3, [r7, #3]
 800590a:	68f9      	ldr	r1, [r7, #12]
 800590c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005910:	4313      	orrs	r3, r2
 8005912:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3714      	adds	r7, #20
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr

08005922 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005922:	b480      	push	{r7}
 8005924:	b085      	sub	sp, #20
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800593c:	f023 0303 	bic.w	r3, r3, #3
 8005940:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005950:	f043 0302 	orr.w	r3, r3, #2
 8005954:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3714      	adds	r7, #20
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	695b      	ldr	r3, [r3, #20]
 8005970:	f003 0301 	and.w	r3, r3, #1
}
 8005974:	4618      	mov	r0, r3
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005980:	b480      	push	{r7}
 8005982:	b085      	sub	sp, #20
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005988:	2300      	movs	r3, #0
 800598a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	3301      	adds	r3, #1
 8005990:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005998:	d901      	bls.n	800599e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e01b      	b.n	80059d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	daf2      	bge.n	800598c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80059a6:	2300      	movs	r3, #0
 80059a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	f043 0201 	orr.w	r2, r3, #1
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	3301      	adds	r3, #1
 80059ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059c2:	d901      	bls.n	80059c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e006      	b.n	80059d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	f003 0301 	and.w	r3, r3, #1
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d0f0      	beq.n	80059b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr

080059e2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b085      	sub	sp, #20
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	4603      	mov	r3, r0
 80059ea:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80059ec:	2300      	movs	r3, #0
 80059ee:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80059f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059f4:	2b84      	cmp	r3, #132	@ 0x84
 80059f6:	d005      	beq.n	8005a04 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80059f8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4413      	add	r3, r2
 8005a00:	3303      	adds	r3, #3
 8005a02:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005a04:	68fb      	ldr	r3, [r7, #12]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b083      	sub	sp, #12
 8005a16:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a18:	f3ef 8305 	mrs	r3, IPSR
 8005a1c:	607b      	str	r3, [r7, #4]
  return(result);
 8005a1e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	bf14      	ite	ne
 8005a24:	2301      	movne	r3, #1
 8005a26:	2300      	moveq	r3, #0
 8005a28:	b2db      	uxtb	r3, r3
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	370c      	adds	r7, #12
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005a3a:	f001 f8f7 	bl	8006c2c <vTaskStartScheduler>
  
  return osOK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a46:	b089      	sub	sp, #36	@ 0x24
 8005a48:	af04      	add	r7, sp, #16
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d020      	beq.n	8005a98 <osThreadCreate+0x54>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d01c      	beq.n	8005a98 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685c      	ldr	r4, [r3, #4]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	691e      	ldr	r6, [r3, #16]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a70:	4618      	mov	r0, r3
 8005a72:	f7ff ffb6 	bl	80059e2 <makeFreeRtosPriority>
 8005a76:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	695b      	ldr	r3, [r3, #20]
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a80:	9202      	str	r2, [sp, #8]
 8005a82:	9301      	str	r3, [sp, #4]
 8005a84:	9100      	str	r1, [sp, #0]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	4632      	mov	r2, r6
 8005a8a:	4629      	mov	r1, r5
 8005a8c:	4620      	mov	r0, r4
 8005a8e:	f000 ff1d 	bl	80068cc <xTaskCreateStatic>
 8005a92:	4603      	mov	r3, r0
 8005a94:	60fb      	str	r3, [r7, #12]
 8005a96:	e01c      	b.n	8005ad2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685c      	ldr	r4, [r3, #4]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005aa4:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005aac:	4618      	mov	r0, r3
 8005aae:	f7ff ff98 	bl	80059e2 <makeFreeRtosPriority>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	f107 030c 	add.w	r3, r7, #12
 8005ab8:	9301      	str	r3, [sp, #4]
 8005aba:	9200      	str	r2, [sp, #0]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	4632      	mov	r2, r6
 8005ac0:	4629      	mov	r1, r5
 8005ac2:	4620      	mov	r0, r4
 8005ac4:	f000 ff62 	bl	800698c <xTaskCreate>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d001      	beq.n	8005ad2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	e000      	b.n	8005ad4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3714      	adds	r7, #20
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005adc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af02      	add	r7, sp, #8
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00f      	beq.n	8005b0e <osSemaphoreCreate+0x32>
    if (count == 1) {
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d10a      	bne.n	8005b0a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	2203      	movs	r2, #3
 8005afa:	9200      	str	r2, [sp, #0]
 8005afc:	2200      	movs	r2, #0
 8005afe:	2100      	movs	r1, #0
 8005b00:	2001      	movs	r0, #1
 8005b02:	f000 f9bf 	bl	8005e84 <xQueueGenericCreateStatic>
 8005b06:	4603      	mov	r3, r0
 8005b08:	e016      	b.n	8005b38 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	e014      	b.n	8005b38 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d110      	bne.n	8005b36 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8005b14:	2203      	movs	r2, #3
 8005b16:	2100      	movs	r1, #0
 8005b18:	2001      	movs	r0, #1
 8005b1a:	f000 fa30 	bl	8005f7e <xQueueGenericCreate>
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d005      	beq.n	8005b32 <osSemaphoreCreate+0x56>
 8005b26:	2300      	movs	r3, #0
 8005b28:	2200      	movs	r2, #0
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f000 fa81 	bl	8006034 <xQueueGenericSend>
      return sema;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	e000      	b.n	8005b38 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005b36:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3710      	adds	r7, #16
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005b54:	2380      	movs	r3, #128	@ 0x80
 8005b56:	e03a      	b.n	8005bce <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b62:	d103      	bne.n	8005b6c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005b64:	f04f 33ff 	mov.w	r3, #4294967295
 8005b68:	60fb      	str	r3, [r7, #12]
 8005b6a:	e009      	b.n	8005b80 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d006      	beq.n	8005b80 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d101      	bne.n	8005b80 <osSemaphoreWait+0x40>
      ticks = 1;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005b80:	f7ff ff47 	bl	8005a12 <inHandlerMode>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d017      	beq.n	8005bba <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005b8a:	f107 0308 	add.w	r3, r7, #8
 8005b8e:	461a      	mov	r2, r3
 8005b90:	2100      	movs	r1, #0
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 fcf0 	bl	8006578 <xQueueReceiveFromISR>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d001      	beq.n	8005ba2 <osSemaphoreWait+0x62>
      return osErrorOS;
 8005b9e:	23ff      	movs	r3, #255	@ 0xff
 8005ba0:	e015      	b.n	8005bce <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d011      	beq.n	8005bcc <osSemaphoreWait+0x8c>
 8005ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8005bd8 <osSemaphoreWait+0x98>)
 8005baa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bae:	601a      	str	r2, [r3, #0]
 8005bb0:	f3bf 8f4f 	dsb	sy
 8005bb4:	f3bf 8f6f 	isb	sy
 8005bb8:	e008      	b.n	8005bcc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005bba:	68f9      	ldr	r1, [r7, #12]
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 fbcb 	bl	8006358 <xQueueSemaphoreTake>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d001      	beq.n	8005bcc <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005bc8:	23ff      	movs	r3, #255	@ 0xff
 8005bca:	e000      	b.n	8005bce <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	e000ed04 	.word	0xe000ed04

08005bdc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005be4:	2300      	movs	r3, #0
 8005be6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005be8:	2300      	movs	r3, #0
 8005bea:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005bec:	f7ff ff11 	bl	8005a12 <inHandlerMode>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d016      	beq.n	8005c24 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005bf6:	f107 0308 	add.w	r3, r7, #8
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 fb1b 	bl	8006238 <xQueueGiveFromISR>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d001      	beq.n	8005c0c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005c08:	23ff      	movs	r3, #255	@ 0xff
 8005c0a:	e017      	b.n	8005c3c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d013      	beq.n	8005c3a <osSemaphoreRelease+0x5e>
 8005c12:	4b0c      	ldr	r3, [pc, #48]	@ (8005c44 <osSemaphoreRelease+0x68>)
 8005c14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c18:	601a      	str	r2, [r3, #0]
 8005c1a:	f3bf 8f4f 	dsb	sy
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	e00a      	b.n	8005c3a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005c24:	2300      	movs	r3, #0
 8005c26:	2200      	movs	r2, #0
 8005c28:	2100      	movs	r1, #0
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 fa02 	bl	8006034 <xQueueGenericSend>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d001      	beq.n	8005c3a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8005c36:	23ff      	movs	r3, #255	@ 0xff
 8005c38:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3710      	adds	r7, #16
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	e000ed04 	.word	0xe000ed04

08005c48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f103 0208 	add.w	r2, r3, #8
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f103 0208 	add.w	r2, r3, #8
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f103 0208 	add.w	r2, r3, #8
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005c96:	bf00      	nop
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ca2:	b480      	push	{r7}
 8005ca4:	b085      	sub	sp, #20
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
 8005caa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	689a      	ldr	r2, [r3, #8]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	683a      	ldr	r2, [r7, #0]
 8005cc6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	683a      	ldr	r2, [r7, #0]
 8005ccc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	1c5a      	adds	r2, r3, #1
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	601a      	str	r2, [r3, #0]
}
 8005cde:	bf00      	nop
 8005ce0:	3714      	adds	r7, #20
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr

08005cea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005cea:	b480      	push	{r7}
 8005cec:	b085      	sub	sp, #20
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
 8005cf2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d00:	d103      	bne.n	8005d0a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	60fb      	str	r3, [r7, #12]
 8005d08:	e00c      	b.n	8005d24 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	3308      	adds	r3, #8
 8005d0e:	60fb      	str	r3, [r7, #12]
 8005d10:	e002      	b.n	8005d18 <vListInsert+0x2e>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	60fb      	str	r3, [r7, #12]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68ba      	ldr	r2, [r7, #8]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d2f6      	bcs.n	8005d12 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	683a      	ldr	r2, [r7, #0]
 8005d32:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	683a      	ldr	r2, [r7, #0]
 8005d3e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	1c5a      	adds	r2, r3, #1
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	601a      	str	r2, [r3, #0]
}
 8005d50:	bf00      	nop
 8005d52:	3714      	adds	r7, #20
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	6892      	ldr	r2, [r2, #8]
 8005d72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	6852      	ldr	r2, [r2, #4]
 8005d7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d103      	bne.n	8005d90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	689a      	ldr	r2, [r3, #8]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	1e5a      	subs	r2, r3, #1
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3714      	adds	r7, #20
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10b      	bne.n	8005ddc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc8:	f383 8811 	msr	BASEPRI, r3
 8005dcc:	f3bf 8f6f 	isb	sy
 8005dd0:	f3bf 8f4f 	dsb	sy
 8005dd4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005dd6:	bf00      	nop
 8005dd8:	bf00      	nop
 8005dda:	e7fd      	b.n	8005dd8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005ddc:	f001 fe9c 	bl	8007b18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005de8:	68f9      	ldr	r1, [r7, #12]
 8005dea:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005dec:	fb01 f303 	mul.w	r3, r1, r3
 8005df0:	441a      	add	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	68f9      	ldr	r1, [r7, #12]
 8005e10:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005e12:	fb01 f303 	mul.w	r3, r1, r3
 8005e16:	441a      	add	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	22ff      	movs	r2, #255	@ 0xff
 8005e20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	22ff      	movs	r2, #255	@ 0xff
 8005e28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d114      	bne.n	8005e5c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d01a      	beq.n	8005e70 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	3310      	adds	r3, #16
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f001 f94e 	bl	80070e0 <xTaskRemoveFromEventList>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d012      	beq.n	8005e70 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005e80 <xQueueGenericReset+0xd0>)
 8005e4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e50:	601a      	str	r2, [r3, #0]
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	f3bf 8f6f 	isb	sy
 8005e5a:	e009      	b.n	8005e70 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	3310      	adds	r3, #16
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7ff fef1 	bl	8005c48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	3324      	adds	r3, #36	@ 0x24
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7ff feec 	bl	8005c48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005e70:	f001 fe84 	bl	8007b7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005e74:	2301      	movs	r3, #1
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	e000ed04 	.word	0xe000ed04

08005e84 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b08e      	sub	sp, #56	@ 0x38
 8005e88:	af02      	add	r7, sp, #8
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
 8005e90:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d10b      	bne.n	8005eb0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e9c:	f383 8811 	msr	BASEPRI, r3
 8005ea0:	f3bf 8f6f 	isb	sy
 8005ea4:	f3bf 8f4f 	dsb	sy
 8005ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005eaa:	bf00      	nop
 8005eac:	bf00      	nop
 8005eae:	e7fd      	b.n	8005eac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10b      	bne.n	8005ece <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eba:	f383 8811 	msr	BASEPRI, r3
 8005ebe:	f3bf 8f6f 	isb	sy
 8005ec2:	f3bf 8f4f 	dsb	sy
 8005ec6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005ec8:	bf00      	nop
 8005eca:	bf00      	nop
 8005ecc:	e7fd      	b.n	8005eca <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d002      	beq.n	8005eda <xQueueGenericCreateStatic+0x56>
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <xQueueGenericCreateStatic+0x5a>
 8005eda:	2301      	movs	r3, #1
 8005edc:	e000      	b.n	8005ee0 <xQueueGenericCreateStatic+0x5c>
 8005ede:	2300      	movs	r3, #0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d10b      	bne.n	8005efc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee8:	f383 8811 	msr	BASEPRI, r3
 8005eec:	f3bf 8f6f 	isb	sy
 8005ef0:	f3bf 8f4f 	dsb	sy
 8005ef4:	623b      	str	r3, [r7, #32]
}
 8005ef6:	bf00      	nop
 8005ef8:	bf00      	nop
 8005efa:	e7fd      	b.n	8005ef8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d102      	bne.n	8005f08 <xQueueGenericCreateStatic+0x84>
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d101      	bne.n	8005f0c <xQueueGenericCreateStatic+0x88>
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e000      	b.n	8005f0e <xQueueGenericCreateStatic+0x8a>
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10b      	bne.n	8005f2a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f16:	f383 8811 	msr	BASEPRI, r3
 8005f1a:	f3bf 8f6f 	isb	sy
 8005f1e:	f3bf 8f4f 	dsb	sy
 8005f22:	61fb      	str	r3, [r7, #28]
}
 8005f24:	bf00      	nop
 8005f26:	bf00      	nop
 8005f28:	e7fd      	b.n	8005f26 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005f2a:	2348      	movs	r3, #72	@ 0x48
 8005f2c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	2b48      	cmp	r3, #72	@ 0x48
 8005f32:	d00b      	beq.n	8005f4c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f38:	f383 8811 	msr	BASEPRI, r3
 8005f3c:	f3bf 8f6f 	isb	sy
 8005f40:	f3bf 8f4f 	dsb	sy
 8005f44:	61bb      	str	r3, [r7, #24]
}
 8005f46:	bf00      	nop
 8005f48:	bf00      	nop
 8005f4a:	e7fd      	b.n	8005f48 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005f4c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00d      	beq.n	8005f74 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f60:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	4613      	mov	r3, r2
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	68b9      	ldr	r1, [r7, #8]
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f000 f840 	bl	8005ff4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3730      	adds	r7, #48	@ 0x30
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b08a      	sub	sp, #40	@ 0x28
 8005f82:	af02      	add	r7, sp, #8
 8005f84:	60f8      	str	r0, [r7, #12]
 8005f86:	60b9      	str	r1, [r7, #8]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10b      	bne.n	8005faa <xQueueGenericCreate+0x2c>
	__asm volatile
 8005f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f96:	f383 8811 	msr	BASEPRI, r3
 8005f9a:	f3bf 8f6f 	isb	sy
 8005f9e:	f3bf 8f4f 	dsb	sy
 8005fa2:	613b      	str	r3, [r7, #16]
}
 8005fa4:	bf00      	nop
 8005fa6:	bf00      	nop
 8005fa8:	e7fd      	b.n	8005fa6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	fb02 f303 	mul.w	r3, r2, r3
 8005fb2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	3348      	adds	r3, #72	@ 0x48
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f001 fecf 	bl	8007d5c <pvPortMalloc>
 8005fbe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d011      	beq.n	8005fea <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	3348      	adds	r3, #72	@ 0x48
 8005fce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005fd8:	79fa      	ldrb	r2, [r7, #7]
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	9300      	str	r3, [sp, #0]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	697a      	ldr	r2, [r7, #20]
 8005fe2:	68b9      	ldr	r1, [r7, #8]
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f000 f805 	bl	8005ff4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005fea:	69bb      	ldr	r3, [r7, #24]
	}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3720      	adds	r7, #32
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
 8006000:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d103      	bne.n	8006010 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	69ba      	ldr	r2, [r7, #24]
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	e002      	b.n	8006016 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006022:	2101      	movs	r1, #1
 8006024:	69b8      	ldr	r0, [r7, #24]
 8006026:	f7ff fec3 	bl	8005db0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800602a:	bf00      	nop
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
	...

08006034 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b08e      	sub	sp, #56	@ 0x38
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]
 8006040:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006042:	2300      	movs	r3, #0
 8006044:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800604a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800604c:	2b00      	cmp	r3, #0
 800604e:	d10b      	bne.n	8006068 <xQueueGenericSend+0x34>
	__asm volatile
 8006050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006054:	f383 8811 	msr	BASEPRI, r3
 8006058:	f3bf 8f6f 	isb	sy
 800605c:	f3bf 8f4f 	dsb	sy
 8006060:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006062:	bf00      	nop
 8006064:	bf00      	nop
 8006066:	e7fd      	b.n	8006064 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d103      	bne.n	8006076 <xQueueGenericSend+0x42>
 800606e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006072:	2b00      	cmp	r3, #0
 8006074:	d101      	bne.n	800607a <xQueueGenericSend+0x46>
 8006076:	2301      	movs	r3, #1
 8006078:	e000      	b.n	800607c <xQueueGenericSend+0x48>
 800607a:	2300      	movs	r3, #0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10b      	bne.n	8006098 <xQueueGenericSend+0x64>
	__asm volatile
 8006080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006084:	f383 8811 	msr	BASEPRI, r3
 8006088:	f3bf 8f6f 	isb	sy
 800608c:	f3bf 8f4f 	dsb	sy
 8006090:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006092:	bf00      	nop
 8006094:	bf00      	nop
 8006096:	e7fd      	b.n	8006094 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	2b02      	cmp	r3, #2
 800609c:	d103      	bne.n	80060a6 <xQueueGenericSend+0x72>
 800609e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d101      	bne.n	80060aa <xQueueGenericSend+0x76>
 80060a6:	2301      	movs	r3, #1
 80060a8:	e000      	b.n	80060ac <xQueueGenericSend+0x78>
 80060aa:	2300      	movs	r3, #0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10b      	bne.n	80060c8 <xQueueGenericSend+0x94>
	__asm volatile
 80060b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b4:	f383 8811 	msr	BASEPRI, r3
 80060b8:	f3bf 8f6f 	isb	sy
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	623b      	str	r3, [r7, #32]
}
 80060c2:	bf00      	nop
 80060c4:	bf00      	nop
 80060c6:	e7fd      	b.n	80060c4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060c8:	f001 f9d0 	bl	800746c <xTaskGetSchedulerState>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d102      	bne.n	80060d8 <xQueueGenericSend+0xa4>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d101      	bne.n	80060dc <xQueueGenericSend+0xa8>
 80060d8:	2301      	movs	r3, #1
 80060da:	e000      	b.n	80060de <xQueueGenericSend+0xaa>
 80060dc:	2300      	movs	r3, #0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d10b      	bne.n	80060fa <xQueueGenericSend+0xc6>
	__asm volatile
 80060e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060e6:	f383 8811 	msr	BASEPRI, r3
 80060ea:	f3bf 8f6f 	isb	sy
 80060ee:	f3bf 8f4f 	dsb	sy
 80060f2:	61fb      	str	r3, [r7, #28]
}
 80060f4:	bf00      	nop
 80060f6:	bf00      	nop
 80060f8:	e7fd      	b.n	80060f6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80060fa:	f001 fd0d 	bl	8007b18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80060fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006100:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006104:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006106:	429a      	cmp	r2, r3
 8006108:	d302      	bcc.n	8006110 <xQueueGenericSend+0xdc>
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	2b02      	cmp	r3, #2
 800610e:	d129      	bne.n	8006164 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006110:	683a      	ldr	r2, [r7, #0]
 8006112:	68b9      	ldr	r1, [r7, #8]
 8006114:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006116:	f000 fac9 	bl	80066ac <prvCopyDataToQueue>
 800611a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800611c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006120:	2b00      	cmp	r3, #0
 8006122:	d010      	beq.n	8006146 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006126:	3324      	adds	r3, #36	@ 0x24
 8006128:	4618      	mov	r0, r3
 800612a:	f000 ffd9 	bl	80070e0 <xTaskRemoveFromEventList>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d013      	beq.n	800615c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006134:	4b3f      	ldr	r3, [pc, #252]	@ (8006234 <xQueueGenericSend+0x200>)
 8006136:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800613a:	601a      	str	r2, [r3, #0]
 800613c:	f3bf 8f4f 	dsb	sy
 8006140:	f3bf 8f6f 	isb	sy
 8006144:	e00a      	b.n	800615c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006148:	2b00      	cmp	r3, #0
 800614a:	d007      	beq.n	800615c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800614c:	4b39      	ldr	r3, [pc, #228]	@ (8006234 <xQueueGenericSend+0x200>)
 800614e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006152:	601a      	str	r2, [r3, #0]
 8006154:	f3bf 8f4f 	dsb	sy
 8006158:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800615c:	f001 fd0e 	bl	8007b7c <vPortExitCritical>
				return pdPASS;
 8006160:	2301      	movs	r3, #1
 8006162:	e063      	b.n	800622c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d103      	bne.n	8006172 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800616a:	f001 fd07 	bl	8007b7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800616e:	2300      	movs	r3, #0
 8006170:	e05c      	b.n	800622c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006174:	2b00      	cmp	r3, #0
 8006176:	d106      	bne.n	8006186 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006178:	f107 0314 	add.w	r3, r7, #20
 800617c:	4618      	mov	r0, r3
 800617e:	f001 f813 	bl	80071a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006182:	2301      	movs	r3, #1
 8006184:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006186:	f001 fcf9 	bl	8007b7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800618a:	f000 fdb9 	bl	8006d00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800618e:	f001 fcc3 	bl	8007b18 <vPortEnterCritical>
 8006192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006194:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006198:	b25b      	sxtb	r3, r3
 800619a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800619e:	d103      	bne.n	80061a8 <xQueueGenericSend+0x174>
 80061a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80061ae:	b25b      	sxtb	r3, r3
 80061b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b4:	d103      	bne.n	80061be <xQueueGenericSend+0x18a>
 80061b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061be:	f001 fcdd 	bl	8007b7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061c2:	1d3a      	adds	r2, r7, #4
 80061c4:	f107 0314 	add.w	r3, r7, #20
 80061c8:	4611      	mov	r1, r2
 80061ca:	4618      	mov	r0, r3
 80061cc:	f001 f802 	bl	80071d4 <xTaskCheckForTimeOut>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d124      	bne.n	8006220 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80061d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061d8:	f000 fb60 	bl	800689c <prvIsQueueFull>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d018      	beq.n	8006214 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80061e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e4:	3310      	adds	r3, #16
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	4611      	mov	r1, r2
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 ff52 	bl	8007094 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80061f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061f2:	f000 faeb 	bl	80067cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80061f6:	f000 fd91 	bl	8006d1c <xTaskResumeAll>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f47f af7c 	bne.w	80060fa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006202:	4b0c      	ldr	r3, [pc, #48]	@ (8006234 <xQueueGenericSend+0x200>)
 8006204:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006208:	601a      	str	r2, [r3, #0]
 800620a:	f3bf 8f4f 	dsb	sy
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	e772      	b.n	80060fa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006214:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006216:	f000 fad9 	bl	80067cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800621a:	f000 fd7f 	bl	8006d1c <xTaskResumeAll>
 800621e:	e76c      	b.n	80060fa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006220:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006222:	f000 fad3 	bl	80067cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006226:	f000 fd79 	bl	8006d1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800622a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800622c:	4618      	mov	r0, r3
 800622e:	3738      	adds	r7, #56	@ 0x38
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	e000ed04 	.word	0xe000ed04

08006238 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b08e      	sub	sp, #56	@ 0x38
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006248:	2b00      	cmp	r3, #0
 800624a:	d10b      	bne.n	8006264 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800624c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006250:	f383 8811 	msr	BASEPRI, r3
 8006254:	f3bf 8f6f 	isb	sy
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	623b      	str	r3, [r7, #32]
}
 800625e:	bf00      	nop
 8006260:	bf00      	nop
 8006262:	e7fd      	b.n	8006260 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00b      	beq.n	8006284 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800626c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006270:	f383 8811 	msr	BASEPRI, r3
 8006274:	f3bf 8f6f 	isb	sy
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	61fb      	str	r3, [r7, #28]
}
 800627e:	bf00      	nop
 8006280:	bf00      	nop
 8006282:	e7fd      	b.n	8006280 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d103      	bne.n	8006294 <xQueueGiveFromISR+0x5c>
 800628c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d101      	bne.n	8006298 <xQueueGiveFromISR+0x60>
 8006294:	2301      	movs	r3, #1
 8006296:	e000      	b.n	800629a <xQueueGiveFromISR+0x62>
 8006298:	2300      	movs	r3, #0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10b      	bne.n	80062b6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800629e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062a2:	f383 8811 	msr	BASEPRI, r3
 80062a6:	f3bf 8f6f 	isb	sy
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	61bb      	str	r3, [r7, #24]
}
 80062b0:	bf00      	nop
 80062b2:	bf00      	nop
 80062b4:	e7fd      	b.n	80062b2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80062b6:	f001 fd0f 	bl	8007cd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80062ba:	f3ef 8211 	mrs	r2, BASEPRI
 80062be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c2:	f383 8811 	msr	BASEPRI, r3
 80062c6:	f3bf 8f6f 	isb	sy
 80062ca:	f3bf 8f4f 	dsb	sy
 80062ce:	617a      	str	r2, [r7, #20]
 80062d0:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80062d2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80062d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062da:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80062dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d22b      	bcs.n	800633e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80062e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80062f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f2:	1c5a      	adds	r2, r3, #1
 80062f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80062f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80062fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006300:	d112      	bne.n	8006328 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006306:	2b00      	cmp	r3, #0
 8006308:	d016      	beq.n	8006338 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800630a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800630c:	3324      	adds	r3, #36	@ 0x24
 800630e:	4618      	mov	r0, r3
 8006310:	f000 fee6 	bl	80070e0 <xTaskRemoveFromEventList>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00e      	beq.n	8006338 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00b      	beq.n	8006338 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	2201      	movs	r2, #1
 8006324:	601a      	str	r2, [r3, #0]
 8006326:	e007      	b.n	8006338 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006328:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800632c:	3301      	adds	r3, #1
 800632e:	b2db      	uxtb	r3, r3
 8006330:	b25a      	sxtb	r2, r3
 8006332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006334:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006338:	2301      	movs	r3, #1
 800633a:	637b      	str	r3, [r7, #52]	@ 0x34
 800633c:	e001      	b.n	8006342 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800633e:	2300      	movs	r3, #0
 8006340:	637b      	str	r3, [r7, #52]	@ 0x34
 8006342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006344:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800634c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800634e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006350:	4618      	mov	r0, r3
 8006352:	3738      	adds	r7, #56	@ 0x38
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b08e      	sub	sp, #56	@ 0x38
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006362:	2300      	movs	r3, #0
 8006364:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800636a:	2300      	movs	r3, #0
 800636c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800636e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006370:	2b00      	cmp	r3, #0
 8006372:	d10b      	bne.n	800638c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006378:	f383 8811 	msr	BASEPRI, r3
 800637c:	f3bf 8f6f 	isb	sy
 8006380:	f3bf 8f4f 	dsb	sy
 8006384:	623b      	str	r3, [r7, #32]
}
 8006386:	bf00      	nop
 8006388:	bf00      	nop
 800638a:	e7fd      	b.n	8006388 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800638c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800638e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00b      	beq.n	80063ac <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006398:	f383 8811 	msr	BASEPRI, r3
 800639c:	f3bf 8f6f 	isb	sy
 80063a0:	f3bf 8f4f 	dsb	sy
 80063a4:	61fb      	str	r3, [r7, #28]
}
 80063a6:	bf00      	nop
 80063a8:	bf00      	nop
 80063aa:	e7fd      	b.n	80063a8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063ac:	f001 f85e 	bl	800746c <xTaskGetSchedulerState>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d102      	bne.n	80063bc <xQueueSemaphoreTake+0x64>
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d101      	bne.n	80063c0 <xQueueSemaphoreTake+0x68>
 80063bc:	2301      	movs	r3, #1
 80063be:	e000      	b.n	80063c2 <xQueueSemaphoreTake+0x6a>
 80063c0:	2300      	movs	r3, #0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10b      	bne.n	80063de <xQueueSemaphoreTake+0x86>
	__asm volatile
 80063c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ca:	f383 8811 	msr	BASEPRI, r3
 80063ce:	f3bf 8f6f 	isb	sy
 80063d2:	f3bf 8f4f 	dsb	sy
 80063d6:	61bb      	str	r3, [r7, #24]
}
 80063d8:	bf00      	nop
 80063da:	bf00      	nop
 80063dc:	e7fd      	b.n	80063da <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063de:	f001 fb9b 	bl	8007b18 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80063e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063e6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80063e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d024      	beq.n	8006438 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80063ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063f0:	1e5a      	subs	r2, r3, #1
 80063f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063f4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d104      	bne.n	8006408 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80063fe:	f001 f9e1 	bl	80077c4 <pvTaskIncrementMutexHeldCount>
 8006402:	4602      	mov	r2, r0
 8006404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006406:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00f      	beq.n	8006430 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006412:	3310      	adds	r3, #16
 8006414:	4618      	mov	r0, r3
 8006416:	f000 fe63 	bl	80070e0 <xTaskRemoveFromEventList>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d007      	beq.n	8006430 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006420:	4b54      	ldr	r3, [pc, #336]	@ (8006574 <xQueueSemaphoreTake+0x21c>)
 8006422:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006426:	601a      	str	r2, [r3, #0]
 8006428:	f3bf 8f4f 	dsb	sy
 800642c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006430:	f001 fba4 	bl	8007b7c <vPortExitCritical>
				return pdPASS;
 8006434:	2301      	movs	r3, #1
 8006436:	e098      	b.n	800656a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d112      	bne.n	8006464 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800643e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00b      	beq.n	800645c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006448:	f383 8811 	msr	BASEPRI, r3
 800644c:	f3bf 8f6f 	isb	sy
 8006450:	f3bf 8f4f 	dsb	sy
 8006454:	617b      	str	r3, [r7, #20]
}
 8006456:	bf00      	nop
 8006458:	bf00      	nop
 800645a:	e7fd      	b.n	8006458 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800645c:	f001 fb8e 	bl	8007b7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006460:	2300      	movs	r3, #0
 8006462:	e082      	b.n	800656a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006466:	2b00      	cmp	r3, #0
 8006468:	d106      	bne.n	8006478 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800646a:	f107 030c 	add.w	r3, r7, #12
 800646e:	4618      	mov	r0, r3
 8006470:	f000 fe9a 	bl	80071a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006474:	2301      	movs	r3, #1
 8006476:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006478:	f001 fb80 	bl	8007b7c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800647c:	f000 fc40 	bl	8006d00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006480:	f001 fb4a 	bl	8007b18 <vPortEnterCritical>
 8006484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006486:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800648a:	b25b      	sxtb	r3, r3
 800648c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006490:	d103      	bne.n	800649a <xQueueSemaphoreTake+0x142>
 8006492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006494:	2200      	movs	r2, #0
 8006496:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800649a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800649c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80064a0:	b25b      	sxtb	r3, r3
 80064a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a6:	d103      	bne.n	80064b0 <xQueueSemaphoreTake+0x158>
 80064a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80064b0:	f001 fb64 	bl	8007b7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064b4:	463a      	mov	r2, r7
 80064b6:	f107 030c 	add.w	r3, r7, #12
 80064ba:	4611      	mov	r1, r2
 80064bc:	4618      	mov	r0, r3
 80064be:	f000 fe89 	bl	80071d4 <xTaskCheckForTimeOut>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d132      	bne.n	800652e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80064ca:	f000 f9d1 	bl	8006870 <prvIsQueueEmpty>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d026      	beq.n	8006522 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80064d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d109      	bne.n	80064f0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80064dc:	f001 fb1c 	bl	8007b18 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80064e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	4618      	mov	r0, r3
 80064e6:	f000 ffdf 	bl	80074a8 <xTaskPriorityInherit>
 80064ea:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80064ec:	f001 fb46 	bl	8007b7c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80064f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064f2:	3324      	adds	r3, #36	@ 0x24
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	4611      	mov	r1, r2
 80064f8:	4618      	mov	r0, r3
 80064fa:	f000 fdcb 	bl	8007094 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80064fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006500:	f000 f964 	bl	80067cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006504:	f000 fc0a 	bl	8006d1c <xTaskResumeAll>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	f47f af67 	bne.w	80063de <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006510:	4b18      	ldr	r3, [pc, #96]	@ (8006574 <xQueueSemaphoreTake+0x21c>)
 8006512:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006516:	601a      	str	r2, [r3, #0]
 8006518:	f3bf 8f4f 	dsb	sy
 800651c:	f3bf 8f6f 	isb	sy
 8006520:	e75d      	b.n	80063de <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006522:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006524:	f000 f952 	bl	80067cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006528:	f000 fbf8 	bl	8006d1c <xTaskResumeAll>
 800652c:	e757      	b.n	80063de <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800652e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006530:	f000 f94c 	bl	80067cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006534:	f000 fbf2 	bl	8006d1c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006538:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800653a:	f000 f999 	bl	8006870 <prvIsQueueEmpty>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	f43f af4c 	beq.w	80063de <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00d      	beq.n	8006568 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800654c:	f001 fae4 	bl	8007b18 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006550:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006552:	f000 f893 	bl	800667c <prvGetDisinheritPriorityAfterTimeout>
 8006556:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800655e:	4618      	mov	r0, r3
 8006560:	f001 f8a0 	bl	80076a4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006564:	f001 fb0a 	bl	8007b7c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006568:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800656a:	4618      	mov	r0, r3
 800656c:	3738      	adds	r7, #56	@ 0x38
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	e000ed04 	.word	0xe000ed04

08006578 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b08e      	sub	sp, #56	@ 0x38
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10b      	bne.n	80065a6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800658e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006592:	f383 8811 	msr	BASEPRI, r3
 8006596:	f3bf 8f6f 	isb	sy
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	623b      	str	r3, [r7, #32]
}
 80065a0:	bf00      	nop
 80065a2:	bf00      	nop
 80065a4:	e7fd      	b.n	80065a2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d103      	bne.n	80065b4 <xQueueReceiveFromISR+0x3c>
 80065ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d101      	bne.n	80065b8 <xQueueReceiveFromISR+0x40>
 80065b4:	2301      	movs	r3, #1
 80065b6:	e000      	b.n	80065ba <xQueueReceiveFromISR+0x42>
 80065b8:	2300      	movs	r3, #0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d10b      	bne.n	80065d6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80065be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c2:	f383 8811 	msr	BASEPRI, r3
 80065c6:	f3bf 8f6f 	isb	sy
 80065ca:	f3bf 8f4f 	dsb	sy
 80065ce:	61fb      	str	r3, [r7, #28]
}
 80065d0:	bf00      	nop
 80065d2:	bf00      	nop
 80065d4:	e7fd      	b.n	80065d2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065d6:	f001 fb7f 	bl	8007cd8 <vPortValidateInterruptPriority>
	__asm volatile
 80065da:	f3ef 8211 	mrs	r2, BASEPRI
 80065de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e2:	f383 8811 	msr	BASEPRI, r3
 80065e6:	f3bf 8f6f 	isb	sy
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	61ba      	str	r2, [r7, #24]
 80065f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80065f2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80065f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065fa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d02f      	beq.n	8006662 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006604:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006608:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800660c:	68b9      	ldr	r1, [r7, #8]
 800660e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006610:	f000 f8b6 	bl	8006780 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006616:	1e5a      	subs	r2, r3, #1
 8006618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800661a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800661c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006624:	d112      	bne.n	800664c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d016      	beq.n	800665c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800662e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006630:	3310      	adds	r3, #16
 8006632:	4618      	mov	r0, r3
 8006634:	f000 fd54 	bl	80070e0 <xTaskRemoveFromEventList>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00e      	beq.n	800665c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d00b      	beq.n	800665c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	601a      	str	r2, [r3, #0]
 800664a:	e007      	b.n	800665c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800664c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006650:	3301      	adds	r3, #1
 8006652:	b2db      	uxtb	r3, r3
 8006654:	b25a      	sxtb	r2, r3
 8006656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006658:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800665c:	2301      	movs	r3, #1
 800665e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006660:	e001      	b.n	8006666 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006662:	2300      	movs	r3, #0
 8006664:	637b      	str	r3, [r7, #52]	@ 0x34
 8006666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006668:	613b      	str	r3, [r7, #16]
	__asm volatile
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	f383 8811 	msr	BASEPRI, r3
}
 8006670:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006674:	4618      	mov	r0, r3
 8006676:	3738      	adds	r7, #56	@ 0x38
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006688:	2b00      	cmp	r3, #0
 800668a:	d006      	beq.n	800669a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f1c3 0307 	rsb	r3, r3, #7
 8006696:	60fb      	str	r3, [r7, #12]
 8006698:	e001      	b.n	800669e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800669a:	2300      	movs	r3, #0
 800669c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800669e:	68fb      	ldr	r3, [r7, #12]
	}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3714      	adds	r7, #20
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b086      	sub	sp, #24
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80066b8:	2300      	movs	r3, #0
 80066ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10d      	bne.n	80066e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d14d      	bne.n	800676e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	4618      	mov	r0, r3
 80066d8:	f000 ff5c 	bl	8007594 <xTaskPriorityDisinherit>
 80066dc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	609a      	str	r2, [r3, #8]
 80066e4:	e043      	b.n	800676e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d119      	bne.n	8006720 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6858      	ldr	r0, [r3, #4]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f4:	461a      	mov	r2, r3
 80066f6:	68b9      	ldr	r1, [r7, #8]
 80066f8:	f001 ff07 	bl	800850a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	685a      	ldr	r2, [r3, #4]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006704:	441a      	add	r2, r3
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	685a      	ldr	r2, [r3, #4]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	429a      	cmp	r2, r3
 8006714:	d32b      	bcc.n	800676e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	605a      	str	r2, [r3, #4]
 800671e:	e026      	b.n	800676e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	68d8      	ldr	r0, [r3, #12]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006728:	461a      	mov	r2, r3
 800672a:	68b9      	ldr	r1, [r7, #8]
 800672c:	f001 feed 	bl	800850a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	68da      	ldr	r2, [r3, #12]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006738:	425b      	negs	r3, r3
 800673a:	441a      	add	r2, r3
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	68da      	ldr	r2, [r3, #12]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	429a      	cmp	r2, r3
 800674a:	d207      	bcs.n	800675c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	689a      	ldr	r2, [r3, #8]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006754:	425b      	negs	r3, r3
 8006756:	441a      	add	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2b02      	cmp	r3, #2
 8006760:	d105      	bne.n	800676e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d002      	beq.n	800676e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	3b01      	subs	r3, #1
 800676c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	1c5a      	adds	r2, r3, #1
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006776:	697b      	ldr	r3, [r7, #20]
}
 8006778:	4618      	mov	r0, r3
 800677a:	3718      	adds	r7, #24
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800678e:	2b00      	cmp	r3, #0
 8006790:	d018      	beq.n	80067c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	68da      	ldr	r2, [r3, #12]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800679a:	441a      	add	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	68da      	ldr	r2, [r3, #12]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d303      	bcc.n	80067b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	68d9      	ldr	r1, [r3, #12]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067bc:	461a      	mov	r2, r3
 80067be:	6838      	ldr	r0, [r7, #0]
 80067c0:	f001 fea3 	bl	800850a <memcpy>
	}
}
 80067c4:	bf00      	nop
 80067c6:	3708      	adds	r7, #8
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80067d4:	f001 f9a0 	bl	8007b18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80067de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067e0:	e011      	b.n	8006806 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d012      	beq.n	8006810 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	3324      	adds	r3, #36	@ 0x24
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 fc76 	bl	80070e0 <xTaskRemoveFromEventList>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d001      	beq.n	80067fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80067fa:	f000 fd4f 	bl	800729c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80067fe:	7bfb      	ldrb	r3, [r7, #15]
 8006800:	3b01      	subs	r3, #1
 8006802:	b2db      	uxtb	r3, r3
 8006804:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800680a:	2b00      	cmp	r3, #0
 800680c:	dce9      	bgt.n	80067e2 <prvUnlockQueue+0x16>
 800680e:	e000      	b.n	8006812 <prvUnlockQueue+0x46>
					break;
 8006810:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	22ff      	movs	r2, #255	@ 0xff
 8006816:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800681a:	f001 f9af 	bl	8007b7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800681e:	f001 f97b 	bl	8007b18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006828:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800682a:	e011      	b.n	8006850 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d012      	beq.n	800685a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	3310      	adds	r3, #16
 8006838:	4618      	mov	r0, r3
 800683a:	f000 fc51 	bl	80070e0 <xTaskRemoveFromEventList>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d001      	beq.n	8006848 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006844:	f000 fd2a 	bl	800729c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006848:	7bbb      	ldrb	r3, [r7, #14]
 800684a:	3b01      	subs	r3, #1
 800684c:	b2db      	uxtb	r3, r3
 800684e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006850:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006854:	2b00      	cmp	r3, #0
 8006856:	dce9      	bgt.n	800682c <prvUnlockQueue+0x60>
 8006858:	e000      	b.n	800685c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800685a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	22ff      	movs	r2, #255	@ 0xff
 8006860:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006864:	f001 f98a 	bl	8007b7c <vPortExitCritical>
}
 8006868:	bf00      	nop
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006878:	f001 f94e 	bl	8007b18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006880:	2b00      	cmp	r3, #0
 8006882:	d102      	bne.n	800688a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006884:	2301      	movs	r3, #1
 8006886:	60fb      	str	r3, [r7, #12]
 8006888:	e001      	b.n	800688e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800688a:	2300      	movs	r3, #0
 800688c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800688e:	f001 f975 	bl	8007b7c <vPortExitCritical>

	return xReturn;
 8006892:	68fb      	ldr	r3, [r7, #12]
}
 8006894:	4618      	mov	r0, r3
 8006896:	3710      	adds	r7, #16
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80068a4:	f001 f938 	bl	8007b18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d102      	bne.n	80068ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80068b4:	2301      	movs	r3, #1
 80068b6:	60fb      	str	r3, [r7, #12]
 80068b8:	e001      	b.n	80068be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80068ba:	2300      	movs	r3, #0
 80068bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80068be:	f001 f95d 	bl	8007b7c <vPortExitCritical>

	return xReturn;
 80068c2:	68fb      	ldr	r3, [r7, #12]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b08e      	sub	sp, #56	@ 0x38
 80068d0:	af04      	add	r7, sp, #16
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	607a      	str	r2, [r7, #4]
 80068d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80068da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d10b      	bne.n	80068f8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80068e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e4:	f383 8811 	msr	BASEPRI, r3
 80068e8:	f3bf 8f6f 	isb	sy
 80068ec:	f3bf 8f4f 	dsb	sy
 80068f0:	623b      	str	r3, [r7, #32]
}
 80068f2:	bf00      	nop
 80068f4:	bf00      	nop
 80068f6:	e7fd      	b.n	80068f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80068f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10b      	bne.n	8006916 <xTaskCreateStatic+0x4a>
	__asm volatile
 80068fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006902:	f383 8811 	msr	BASEPRI, r3
 8006906:	f3bf 8f6f 	isb	sy
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	61fb      	str	r3, [r7, #28]
}
 8006910:	bf00      	nop
 8006912:	bf00      	nop
 8006914:	e7fd      	b.n	8006912 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006916:	23a0      	movs	r3, #160	@ 0xa0
 8006918:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	2ba0      	cmp	r3, #160	@ 0xa0
 800691e:	d00b      	beq.n	8006938 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006924:	f383 8811 	msr	BASEPRI, r3
 8006928:	f3bf 8f6f 	isb	sy
 800692c:	f3bf 8f4f 	dsb	sy
 8006930:	61bb      	str	r3, [r7, #24]
}
 8006932:	bf00      	nop
 8006934:	bf00      	nop
 8006936:	e7fd      	b.n	8006934 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006938:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800693a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800693c:	2b00      	cmp	r3, #0
 800693e:	d01e      	beq.n	800697e <xTaskCreateStatic+0xb2>
 8006940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006942:	2b00      	cmp	r3, #0
 8006944:	d01b      	beq.n	800697e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006948:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800694a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800694c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800694e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006952:	2202      	movs	r2, #2
 8006954:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006958:	2300      	movs	r3, #0
 800695a:	9303      	str	r3, [sp, #12]
 800695c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800695e:	9302      	str	r3, [sp, #8]
 8006960:	f107 0314 	add.w	r3, r7, #20
 8006964:	9301      	str	r3, [sp, #4]
 8006966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006968:	9300      	str	r3, [sp, #0]
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	68b9      	ldr	r1, [r7, #8]
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f000 f851 	bl	8006a18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006976:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006978:	f000 f8ee 	bl	8006b58 <prvAddNewTaskToReadyList>
 800697c:	e001      	b.n	8006982 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800697e:	2300      	movs	r3, #0
 8006980:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006982:	697b      	ldr	r3, [r7, #20]
	}
 8006984:	4618      	mov	r0, r3
 8006986:	3728      	adds	r7, #40	@ 0x28
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800698c:	b580      	push	{r7, lr}
 800698e:	b08c      	sub	sp, #48	@ 0x30
 8006990:	af04      	add	r7, sp, #16
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	603b      	str	r3, [r7, #0]
 8006998:	4613      	mov	r3, r2
 800699a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800699c:	88fb      	ldrh	r3, [r7, #6]
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	4618      	mov	r0, r3
 80069a2:	f001 f9db 	bl	8007d5c <pvPortMalloc>
 80069a6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00e      	beq.n	80069cc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80069ae:	20a0      	movs	r0, #160	@ 0xa0
 80069b0:	f001 f9d4 	bl	8007d5c <pvPortMalloc>
 80069b4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d003      	beq.n	80069c4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80069c2:	e005      	b.n	80069d0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80069c4:	6978      	ldr	r0, [r7, #20]
 80069c6:	f001 fa97 	bl	8007ef8 <vPortFree>
 80069ca:	e001      	b.n	80069d0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80069cc:	2300      	movs	r3, #0
 80069ce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d017      	beq.n	8006a06 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80069de:	88fa      	ldrh	r2, [r7, #6]
 80069e0:	2300      	movs	r3, #0
 80069e2:	9303      	str	r3, [sp, #12]
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	9302      	str	r3, [sp, #8]
 80069e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ea:	9301      	str	r3, [sp, #4]
 80069ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ee:	9300      	str	r3, [sp, #0]
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	68b9      	ldr	r1, [r7, #8]
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	f000 f80f 	bl	8006a18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069fa:	69f8      	ldr	r0, [r7, #28]
 80069fc:	f000 f8ac 	bl	8006b58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a00:	2301      	movs	r3, #1
 8006a02:	61bb      	str	r3, [r7, #24]
 8006a04:	e002      	b.n	8006a0c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006a06:	f04f 33ff 	mov.w	r3, #4294967295
 8006a0a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006a0c:	69bb      	ldr	r3, [r7, #24]
	}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3720      	adds	r7, #32
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
	...

08006a18 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b088      	sub	sp, #32
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
 8006a24:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006a30:	3b01      	subs	r3, #1
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	4413      	add	r3, r2
 8006a36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	f023 0307 	bic.w	r3, r3, #7
 8006a3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	f003 0307 	and.w	r3, r3, #7
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00b      	beq.n	8006a62 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8006a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	617b      	str	r3, [r7, #20]
}
 8006a5c:	bf00      	nop
 8006a5e:	bf00      	nop
 8006a60:	e7fd      	b.n	8006a5e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d01f      	beq.n	8006aa8 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a68:	2300      	movs	r3, #0
 8006a6a:	61fb      	str	r3, [r7, #28]
 8006a6c:	e012      	b.n	8006a94 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	4413      	add	r3, r2
 8006a74:	7819      	ldrb	r1, [r3, #0]
 8006a76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	3334      	adds	r3, #52	@ 0x34
 8006a7e:	460a      	mov	r2, r1
 8006a80:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	4413      	add	r3, r2
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d006      	beq.n	8006a9c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	3301      	adds	r3, #1
 8006a92:	61fb      	str	r3, [r7, #28]
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	2b0f      	cmp	r3, #15
 8006a98:	d9e9      	bls.n	8006a6e <prvInitialiseNewTask+0x56>
 8006a9a:	e000      	b.n	8006a9e <prvInitialiseNewTask+0x86>
			{
				break;
 8006a9c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006aa6:	e003      	b.n	8006ab0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab2:	2b06      	cmp	r3, #6
 8006ab4:	d901      	bls.n	8006aba <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006ab6:	2306      	movs	r3, #6
 8006ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006abc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006abe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ac4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac8:	2200      	movs	r2, #0
 8006aca:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ace:	3304      	adds	r3, #4
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f7ff f8d9 	bl	8005c88 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad8:	3318      	adds	r3, #24
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7ff f8d4 	bl	8005c88 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ae4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae8:	f1c3 0207 	rsb	r2, r3, #7
 8006aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006af4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af8:	2200      	movs	r2, #0
 8006afa:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b08:	334c      	adds	r3, #76	@ 0x4c
 8006b0a:	224c      	movs	r2, #76	@ 0x4c
 8006b0c:	2100      	movs	r1, #0
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f001 fc29 	bl	8008366 <memset>
 8006b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b16:	4a0d      	ldr	r2, [pc, #52]	@ (8006b4c <prvInitialiseNewTask+0x134>)
 8006b18:	651a      	str	r2, [r3, #80]	@ 0x50
 8006b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b1c:	4a0c      	ldr	r2, [pc, #48]	@ (8006b50 <prvInitialiseNewTask+0x138>)
 8006b1e:	655a      	str	r2, [r3, #84]	@ 0x54
 8006b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b22:	4a0c      	ldr	r2, [pc, #48]	@ (8006b54 <prvInitialiseNewTask+0x13c>)
 8006b24:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006b26:	683a      	ldr	r2, [r7, #0]
 8006b28:	68f9      	ldr	r1, [r7, #12]
 8006b2a:	69b8      	ldr	r0, [r7, #24]
 8006b2c:	f000 fec4 	bl	80078b8 <pxPortInitialiseStack>
 8006b30:	4602      	mov	r2, r0
 8006b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b34:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d002      	beq.n	8006b42 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b42:	bf00      	nop
 8006b44:	3720      	adds	r7, #32
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	20004934 	.word	0x20004934
 8006b50:	2000499c 	.word	0x2000499c
 8006b54:	20004a04 	.word	0x20004a04

08006b58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006b60:	f000 ffda 	bl	8007b18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006b64:	4b2a      	ldr	r3, [pc, #168]	@ (8006c10 <prvAddNewTaskToReadyList+0xb8>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	3301      	adds	r3, #1
 8006b6a:	4a29      	ldr	r2, [pc, #164]	@ (8006c10 <prvAddNewTaskToReadyList+0xb8>)
 8006b6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006b6e:	4b29      	ldr	r3, [pc, #164]	@ (8006c14 <prvAddNewTaskToReadyList+0xbc>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d109      	bne.n	8006b8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006b76:	4a27      	ldr	r2, [pc, #156]	@ (8006c14 <prvAddNewTaskToReadyList+0xbc>)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006b7c:	4b24      	ldr	r3, [pc, #144]	@ (8006c10 <prvAddNewTaskToReadyList+0xb8>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d110      	bne.n	8006ba6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006b84:	f000 fbae 	bl	80072e4 <prvInitialiseTaskLists>
 8006b88:	e00d      	b.n	8006ba6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006b8a:	4b23      	ldr	r3, [pc, #140]	@ (8006c18 <prvAddNewTaskToReadyList+0xc0>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d109      	bne.n	8006ba6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006b92:	4b20      	ldr	r3, [pc, #128]	@ (8006c14 <prvAddNewTaskToReadyList+0xbc>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d802      	bhi.n	8006ba6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006ba0:	4a1c      	ldr	r2, [pc, #112]	@ (8006c14 <prvAddNewTaskToReadyList+0xbc>)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8006c1c <prvAddNewTaskToReadyList+0xc4>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	3301      	adds	r3, #1
 8006bac:	4a1b      	ldr	r2, [pc, #108]	@ (8006c1c <prvAddNewTaskToReadyList+0xc4>)
 8006bae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	409a      	lsls	r2, r3
 8006bb8:	4b19      	ldr	r3, [pc, #100]	@ (8006c20 <prvAddNewTaskToReadyList+0xc8>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	4a18      	ldr	r2, [pc, #96]	@ (8006c20 <prvAddNewTaskToReadyList+0xc8>)
 8006bc0:	6013      	str	r3, [r2, #0]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	4413      	add	r3, r2
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	4a15      	ldr	r2, [pc, #84]	@ (8006c24 <prvAddNewTaskToReadyList+0xcc>)
 8006bd0:	441a      	add	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	3304      	adds	r3, #4
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	4610      	mov	r0, r2
 8006bda:	f7ff f862 	bl	8005ca2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006bde:	f000 ffcd 	bl	8007b7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006be2:	4b0d      	ldr	r3, [pc, #52]	@ (8006c18 <prvAddNewTaskToReadyList+0xc0>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00e      	beq.n	8006c08 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006bea:	4b0a      	ldr	r3, [pc, #40]	@ (8006c14 <prvAddNewTaskToReadyList+0xbc>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d207      	bcs.n	8006c08 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8006c28 <prvAddNewTaskToReadyList+0xd0>)
 8006bfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bfe:	601a      	str	r2, [r3, #0]
 8006c00:	f3bf 8f4f 	dsb	sy
 8006c04:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c08:	bf00      	nop
 8006c0a:	3708      	adds	r7, #8
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	20000ce0 	.word	0x20000ce0
 8006c14:	20000be0 	.word	0x20000be0
 8006c18:	20000cec 	.word	0x20000cec
 8006c1c:	20000cfc 	.word	0x20000cfc
 8006c20:	20000ce8 	.word	0x20000ce8
 8006c24:	20000be4 	.word	0x20000be4
 8006c28:	e000ed04 	.word	0xe000ed04

08006c2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b08a      	sub	sp, #40	@ 0x28
 8006c30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006c32:	2300      	movs	r3, #0
 8006c34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006c36:	2300      	movs	r3, #0
 8006c38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006c3a:	463a      	mov	r2, r7
 8006c3c:	1d39      	adds	r1, r7, #4
 8006c3e:	f107 0308 	add.w	r3, r7, #8
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7f9 fc9c 	bl	8000580 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006c48:	6839      	ldr	r1, [r7, #0]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68ba      	ldr	r2, [r7, #8]
 8006c4e:	9202      	str	r2, [sp, #8]
 8006c50:	9301      	str	r3, [sp, #4]
 8006c52:	2300      	movs	r3, #0
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	2300      	movs	r3, #0
 8006c58:	460a      	mov	r2, r1
 8006c5a:	4921      	ldr	r1, [pc, #132]	@ (8006ce0 <vTaskStartScheduler+0xb4>)
 8006c5c:	4821      	ldr	r0, [pc, #132]	@ (8006ce4 <vTaskStartScheduler+0xb8>)
 8006c5e:	f7ff fe35 	bl	80068cc <xTaskCreateStatic>
 8006c62:	4603      	mov	r3, r0
 8006c64:	4a20      	ldr	r2, [pc, #128]	@ (8006ce8 <vTaskStartScheduler+0xbc>)
 8006c66:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006c68:	4b1f      	ldr	r3, [pc, #124]	@ (8006ce8 <vTaskStartScheduler+0xbc>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d002      	beq.n	8006c76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006c70:	2301      	movs	r3, #1
 8006c72:	617b      	str	r3, [r7, #20]
 8006c74:	e001      	b.n	8006c7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006c76:	2300      	movs	r3, #0
 8006c78:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d11b      	bne.n	8006cb8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c84:	f383 8811 	msr	BASEPRI, r3
 8006c88:	f3bf 8f6f 	isb	sy
 8006c8c:	f3bf 8f4f 	dsb	sy
 8006c90:	613b      	str	r3, [r7, #16]
}
 8006c92:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006c94:	4b15      	ldr	r3, [pc, #84]	@ (8006cec <vTaskStartScheduler+0xc0>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	334c      	adds	r3, #76	@ 0x4c
 8006c9a:	4a15      	ldr	r2, [pc, #84]	@ (8006cf0 <vTaskStartScheduler+0xc4>)
 8006c9c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c9e:	4b15      	ldr	r3, [pc, #84]	@ (8006cf4 <vTaskStartScheduler+0xc8>)
 8006ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ca4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ca6:	4b14      	ldr	r3, [pc, #80]	@ (8006cf8 <vTaskStartScheduler+0xcc>)
 8006ca8:	2201      	movs	r2, #1
 8006caa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006cac:	4b13      	ldr	r3, [pc, #76]	@ (8006cfc <vTaskStartScheduler+0xd0>)
 8006cae:	2200      	movs	r2, #0
 8006cb0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006cb2:	f000 fe8d 	bl	80079d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006cb6:	e00f      	b.n	8006cd8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cbe:	d10b      	bne.n	8006cd8 <vTaskStartScheduler+0xac>
	__asm volatile
 8006cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc4:	f383 8811 	msr	BASEPRI, r3
 8006cc8:	f3bf 8f6f 	isb	sy
 8006ccc:	f3bf 8f4f 	dsb	sy
 8006cd0:	60fb      	str	r3, [r7, #12]
}
 8006cd2:	bf00      	nop
 8006cd4:	bf00      	nop
 8006cd6:	e7fd      	b.n	8006cd4 <vTaskStartScheduler+0xa8>
}
 8006cd8:	bf00      	nop
 8006cda:	3718      	adds	r7, #24
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	080090f8 	.word	0x080090f8
 8006ce4:	080072b5 	.word	0x080072b5
 8006ce8:	20000d04 	.word	0x20000d04
 8006cec:	20000be0 	.word	0x20000be0
 8006cf0:	2000001c 	.word	0x2000001c
 8006cf4:	20000d00 	.word	0x20000d00
 8006cf8:	20000cec 	.word	0x20000cec
 8006cfc:	20000ce4 	.word	0x20000ce4

08006d00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006d00:	b480      	push	{r7}
 8006d02:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006d04:	4b04      	ldr	r3, [pc, #16]	@ (8006d18 <vTaskSuspendAll+0x18>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	4a03      	ldr	r2, [pc, #12]	@ (8006d18 <vTaskSuspendAll+0x18>)
 8006d0c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006d0e:	bf00      	nop
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr
 8006d18:	20000d08 	.word	0x20000d08

08006d1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006d22:	2300      	movs	r3, #0
 8006d24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006d26:	2300      	movs	r3, #0
 8006d28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006d2a:	4b42      	ldr	r3, [pc, #264]	@ (8006e34 <xTaskResumeAll+0x118>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d10b      	bne.n	8006d4a <xTaskResumeAll+0x2e>
	__asm volatile
 8006d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d36:	f383 8811 	msr	BASEPRI, r3
 8006d3a:	f3bf 8f6f 	isb	sy
 8006d3e:	f3bf 8f4f 	dsb	sy
 8006d42:	603b      	str	r3, [r7, #0]
}
 8006d44:	bf00      	nop
 8006d46:	bf00      	nop
 8006d48:	e7fd      	b.n	8006d46 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006d4a:	f000 fee5 	bl	8007b18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006d4e:	4b39      	ldr	r3, [pc, #228]	@ (8006e34 <xTaskResumeAll+0x118>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	3b01      	subs	r3, #1
 8006d54:	4a37      	ldr	r2, [pc, #220]	@ (8006e34 <xTaskResumeAll+0x118>)
 8006d56:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d58:	4b36      	ldr	r3, [pc, #216]	@ (8006e34 <xTaskResumeAll+0x118>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d161      	bne.n	8006e24 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006d60:	4b35      	ldr	r3, [pc, #212]	@ (8006e38 <xTaskResumeAll+0x11c>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d05d      	beq.n	8006e24 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d68:	e02e      	b.n	8006dc8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d6a:	4b34      	ldr	r3, [pc, #208]	@ (8006e3c <xTaskResumeAll+0x120>)
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	3318      	adds	r3, #24
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7fe fff0 	bl	8005d5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	3304      	adds	r3, #4
 8006d80:	4618      	mov	r0, r3
 8006d82:	f7fe ffeb 	bl	8005d5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	409a      	lsls	r2, r3
 8006d8e:	4b2c      	ldr	r3, [pc, #176]	@ (8006e40 <xTaskResumeAll+0x124>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	4a2a      	ldr	r2, [pc, #168]	@ (8006e40 <xTaskResumeAll+0x124>)
 8006d96:	6013      	str	r3, [r2, #0]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4413      	add	r3, r2
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	4a27      	ldr	r2, [pc, #156]	@ (8006e44 <xTaskResumeAll+0x128>)
 8006da6:	441a      	add	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	3304      	adds	r3, #4
 8006dac:	4619      	mov	r1, r3
 8006dae:	4610      	mov	r0, r2
 8006db0:	f7fe ff77 	bl	8005ca2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006db8:	4b23      	ldr	r3, [pc, #140]	@ (8006e48 <xTaskResumeAll+0x12c>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d302      	bcc.n	8006dc8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006dc2:	4b22      	ldr	r3, [pc, #136]	@ (8006e4c <xTaskResumeAll+0x130>)
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006dc8:	4b1c      	ldr	r3, [pc, #112]	@ (8006e3c <xTaskResumeAll+0x120>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d1cc      	bne.n	8006d6a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d001      	beq.n	8006dda <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006dd6:	f000 fb29 	bl	800742c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006dda:	4b1d      	ldr	r3, [pc, #116]	@ (8006e50 <xTaskResumeAll+0x134>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d010      	beq.n	8006e08 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006de6:	f000 f837 	bl	8006e58 <xTaskIncrementTick>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d002      	beq.n	8006df6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006df0:	4b16      	ldr	r3, [pc, #88]	@ (8006e4c <xTaskResumeAll+0x130>)
 8006df2:	2201      	movs	r2, #1
 8006df4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d1f1      	bne.n	8006de6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006e02:	4b13      	ldr	r3, [pc, #76]	@ (8006e50 <xTaskResumeAll+0x134>)
 8006e04:	2200      	movs	r2, #0
 8006e06:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006e08:	4b10      	ldr	r3, [pc, #64]	@ (8006e4c <xTaskResumeAll+0x130>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d009      	beq.n	8006e24 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006e10:	2301      	movs	r3, #1
 8006e12:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006e14:	4b0f      	ldr	r3, [pc, #60]	@ (8006e54 <xTaskResumeAll+0x138>)
 8006e16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e1a:	601a      	str	r2, [r3, #0]
 8006e1c:	f3bf 8f4f 	dsb	sy
 8006e20:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e24:	f000 feaa 	bl	8007b7c <vPortExitCritical>

	return xAlreadyYielded;
 8006e28:	68bb      	ldr	r3, [r7, #8]
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	20000d08 	.word	0x20000d08
 8006e38:	20000ce0 	.word	0x20000ce0
 8006e3c:	20000ca0 	.word	0x20000ca0
 8006e40:	20000ce8 	.word	0x20000ce8
 8006e44:	20000be4 	.word	0x20000be4
 8006e48:	20000be0 	.word	0x20000be0
 8006e4c:	20000cf4 	.word	0x20000cf4
 8006e50:	20000cf0 	.word	0x20000cf0
 8006e54:	e000ed04 	.word	0xe000ed04

08006e58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b086      	sub	sp, #24
 8006e5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e62:	4b4f      	ldr	r3, [pc, #316]	@ (8006fa0 <xTaskIncrementTick+0x148>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	f040 808f 	bne.w	8006f8a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e6c:	4b4d      	ldr	r3, [pc, #308]	@ (8006fa4 <xTaskIncrementTick+0x14c>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	3301      	adds	r3, #1
 8006e72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e74:	4a4b      	ldr	r2, [pc, #300]	@ (8006fa4 <xTaskIncrementTick+0x14c>)
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d121      	bne.n	8006ec4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e80:	4b49      	ldr	r3, [pc, #292]	@ (8006fa8 <xTaskIncrementTick+0x150>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00b      	beq.n	8006ea2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e8e:	f383 8811 	msr	BASEPRI, r3
 8006e92:	f3bf 8f6f 	isb	sy
 8006e96:	f3bf 8f4f 	dsb	sy
 8006e9a:	603b      	str	r3, [r7, #0]
}
 8006e9c:	bf00      	nop
 8006e9e:	bf00      	nop
 8006ea0:	e7fd      	b.n	8006e9e <xTaskIncrementTick+0x46>
 8006ea2:	4b41      	ldr	r3, [pc, #260]	@ (8006fa8 <xTaskIncrementTick+0x150>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	60fb      	str	r3, [r7, #12]
 8006ea8:	4b40      	ldr	r3, [pc, #256]	@ (8006fac <xTaskIncrementTick+0x154>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a3e      	ldr	r2, [pc, #248]	@ (8006fa8 <xTaskIncrementTick+0x150>)
 8006eae:	6013      	str	r3, [r2, #0]
 8006eb0:	4a3e      	ldr	r2, [pc, #248]	@ (8006fac <xTaskIncrementTick+0x154>)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6013      	str	r3, [r2, #0]
 8006eb6:	4b3e      	ldr	r3, [pc, #248]	@ (8006fb0 <xTaskIncrementTick+0x158>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	3301      	adds	r3, #1
 8006ebc:	4a3c      	ldr	r2, [pc, #240]	@ (8006fb0 <xTaskIncrementTick+0x158>)
 8006ebe:	6013      	str	r3, [r2, #0]
 8006ec0:	f000 fab4 	bl	800742c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ec4:	4b3b      	ldr	r3, [pc, #236]	@ (8006fb4 <xTaskIncrementTick+0x15c>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	693a      	ldr	r2, [r7, #16]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d348      	bcc.n	8006f60 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ece:	4b36      	ldr	r3, [pc, #216]	@ (8006fa8 <xTaskIncrementTick+0x150>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d104      	bne.n	8006ee2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ed8:	4b36      	ldr	r3, [pc, #216]	@ (8006fb4 <xTaskIncrementTick+0x15c>)
 8006eda:	f04f 32ff 	mov.w	r2, #4294967295
 8006ede:	601a      	str	r2, [r3, #0]
					break;
 8006ee0:	e03e      	b.n	8006f60 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ee2:	4b31      	ldr	r3, [pc, #196]	@ (8006fa8 <xTaskIncrementTick+0x150>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006ef2:	693a      	ldr	r2, [r7, #16]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d203      	bcs.n	8006f02 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006efa:	4a2e      	ldr	r2, [pc, #184]	@ (8006fb4 <xTaskIncrementTick+0x15c>)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006f00:	e02e      	b.n	8006f60 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	3304      	adds	r3, #4
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7fe ff28 	bl	8005d5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d004      	beq.n	8006f1e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	3318      	adds	r3, #24
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f7fe ff1f 	bl	8005d5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f22:	2201      	movs	r2, #1
 8006f24:	409a      	lsls	r2, r3
 8006f26:	4b24      	ldr	r3, [pc, #144]	@ (8006fb8 <xTaskIncrementTick+0x160>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	4a22      	ldr	r2, [pc, #136]	@ (8006fb8 <xTaskIncrementTick+0x160>)
 8006f2e:	6013      	str	r3, [r2, #0]
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f34:	4613      	mov	r3, r2
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	4413      	add	r3, r2
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	4a1f      	ldr	r2, [pc, #124]	@ (8006fbc <xTaskIncrementTick+0x164>)
 8006f3e:	441a      	add	r2, r3
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	3304      	adds	r3, #4
 8006f44:	4619      	mov	r1, r3
 8006f46:	4610      	mov	r0, r2
 8006f48:	f7fe feab 	bl	8005ca2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f50:	4b1b      	ldr	r3, [pc, #108]	@ (8006fc0 <xTaskIncrementTick+0x168>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d3b9      	bcc.n	8006ece <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f5e:	e7b6      	b.n	8006ece <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f60:	4b17      	ldr	r3, [pc, #92]	@ (8006fc0 <xTaskIncrementTick+0x168>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f66:	4915      	ldr	r1, [pc, #84]	@ (8006fbc <xTaskIncrementTick+0x164>)
 8006f68:	4613      	mov	r3, r2
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	4413      	add	r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	440b      	add	r3, r1
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d901      	bls.n	8006f7c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006f7c:	4b11      	ldr	r3, [pc, #68]	@ (8006fc4 <xTaskIncrementTick+0x16c>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d007      	beq.n	8006f94 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006f84:	2301      	movs	r3, #1
 8006f86:	617b      	str	r3, [r7, #20]
 8006f88:	e004      	b.n	8006f94 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8006fc8 <xTaskIncrementTick+0x170>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	3301      	adds	r3, #1
 8006f90:	4a0d      	ldr	r2, [pc, #52]	@ (8006fc8 <xTaskIncrementTick+0x170>)
 8006f92:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006f94:	697b      	ldr	r3, [r7, #20]
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3718      	adds	r7, #24
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	20000d08 	.word	0x20000d08
 8006fa4:	20000ce4 	.word	0x20000ce4
 8006fa8:	20000c98 	.word	0x20000c98
 8006fac:	20000c9c 	.word	0x20000c9c
 8006fb0:	20000cf8 	.word	0x20000cf8
 8006fb4:	20000d00 	.word	0x20000d00
 8006fb8:	20000ce8 	.word	0x20000ce8
 8006fbc:	20000be4 	.word	0x20000be4
 8006fc0:	20000be0 	.word	0x20000be0
 8006fc4:	20000cf4 	.word	0x20000cf4
 8006fc8:	20000cf0 	.word	0x20000cf0

08006fcc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b087      	sub	sp, #28
 8006fd0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006fd2:	4b2a      	ldr	r3, [pc, #168]	@ (800707c <vTaskSwitchContext+0xb0>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d003      	beq.n	8006fe2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006fda:	4b29      	ldr	r3, [pc, #164]	@ (8007080 <vTaskSwitchContext+0xb4>)
 8006fdc:	2201      	movs	r2, #1
 8006fde:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006fe0:	e045      	b.n	800706e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8006fe2:	4b27      	ldr	r3, [pc, #156]	@ (8007080 <vTaskSwitchContext+0xb4>)
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fe8:	4b26      	ldr	r3, [pc, #152]	@ (8007084 <vTaskSwitchContext+0xb8>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	fab3 f383 	clz	r3, r3
 8006ff4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006ff6:	7afb      	ldrb	r3, [r7, #11]
 8006ff8:	f1c3 031f 	rsb	r3, r3, #31
 8006ffc:	617b      	str	r3, [r7, #20]
 8006ffe:	4922      	ldr	r1, [pc, #136]	@ (8007088 <vTaskSwitchContext+0xbc>)
 8007000:	697a      	ldr	r2, [r7, #20]
 8007002:	4613      	mov	r3, r2
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	4413      	add	r3, r2
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	440b      	add	r3, r1
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d10b      	bne.n	800702a <vTaskSwitchContext+0x5e>
	__asm volatile
 8007012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007016:	f383 8811 	msr	BASEPRI, r3
 800701a:	f3bf 8f6f 	isb	sy
 800701e:	f3bf 8f4f 	dsb	sy
 8007022:	607b      	str	r3, [r7, #4]
}
 8007024:	bf00      	nop
 8007026:	bf00      	nop
 8007028:	e7fd      	b.n	8007026 <vTaskSwitchContext+0x5a>
 800702a:	697a      	ldr	r2, [r7, #20]
 800702c:	4613      	mov	r3, r2
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	4413      	add	r3, r2
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	4a14      	ldr	r2, [pc, #80]	@ (8007088 <vTaskSwitchContext+0xbc>)
 8007036:	4413      	add	r3, r2
 8007038:	613b      	str	r3, [r7, #16]
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	685a      	ldr	r2, [r3, #4]
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	605a      	str	r2, [r3, #4]
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	685a      	ldr	r2, [r3, #4]
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	3308      	adds	r3, #8
 800704c:	429a      	cmp	r2, r3
 800704e:	d104      	bne.n	800705a <vTaskSwitchContext+0x8e>
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	685a      	ldr	r2, [r3, #4]
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	605a      	str	r2, [r3, #4]
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	4a0a      	ldr	r2, [pc, #40]	@ (800708c <vTaskSwitchContext+0xc0>)
 8007062:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007064:	4b09      	ldr	r3, [pc, #36]	@ (800708c <vTaskSwitchContext+0xc0>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	334c      	adds	r3, #76	@ 0x4c
 800706a:	4a09      	ldr	r2, [pc, #36]	@ (8007090 <vTaskSwitchContext+0xc4>)
 800706c:	6013      	str	r3, [r2, #0]
}
 800706e:	bf00      	nop
 8007070:	371c      	adds	r7, #28
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	20000d08 	.word	0x20000d08
 8007080:	20000cf4 	.word	0x20000cf4
 8007084:	20000ce8 	.word	0x20000ce8
 8007088:	20000be4 	.word	0x20000be4
 800708c:	20000be0 	.word	0x20000be0
 8007090:	2000001c 	.word	0x2000001c

08007094 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d10b      	bne.n	80070bc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80070a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070a8:	f383 8811 	msr	BASEPRI, r3
 80070ac:	f3bf 8f6f 	isb	sy
 80070b0:	f3bf 8f4f 	dsb	sy
 80070b4:	60fb      	str	r3, [r7, #12]
}
 80070b6:	bf00      	nop
 80070b8:	bf00      	nop
 80070ba:	e7fd      	b.n	80070b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80070bc:	4b07      	ldr	r3, [pc, #28]	@ (80070dc <vTaskPlaceOnEventList+0x48>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	3318      	adds	r3, #24
 80070c2:	4619      	mov	r1, r3
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f7fe fe10 	bl	8005cea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80070ca:	2101      	movs	r1, #1
 80070cc:	6838      	ldr	r0, [r7, #0]
 80070ce:	f000 fb8d 	bl	80077ec <prvAddCurrentTaskToDelayedList>
}
 80070d2:	bf00      	nop
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	20000be0 	.word	0x20000be0

080070e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b086      	sub	sp, #24
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d10b      	bne.n	800710e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80070f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070fa:	f383 8811 	msr	BASEPRI, r3
 80070fe:	f3bf 8f6f 	isb	sy
 8007102:	f3bf 8f4f 	dsb	sy
 8007106:	60fb      	str	r3, [r7, #12]
}
 8007108:	bf00      	nop
 800710a:	bf00      	nop
 800710c:	e7fd      	b.n	800710a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	3318      	adds	r3, #24
 8007112:	4618      	mov	r0, r3
 8007114:	f7fe fe22 	bl	8005d5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007118:	4b1d      	ldr	r3, [pc, #116]	@ (8007190 <xTaskRemoveFromEventList+0xb0>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d11c      	bne.n	800715a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	3304      	adds	r3, #4
 8007124:	4618      	mov	r0, r3
 8007126:	f7fe fe19 	bl	8005d5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800712e:	2201      	movs	r2, #1
 8007130:	409a      	lsls	r2, r3
 8007132:	4b18      	ldr	r3, [pc, #96]	@ (8007194 <xTaskRemoveFromEventList+0xb4>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4313      	orrs	r3, r2
 8007138:	4a16      	ldr	r2, [pc, #88]	@ (8007194 <xTaskRemoveFromEventList+0xb4>)
 800713a:	6013      	str	r3, [r2, #0]
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007140:	4613      	mov	r3, r2
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	4413      	add	r3, r2
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	4a13      	ldr	r2, [pc, #76]	@ (8007198 <xTaskRemoveFromEventList+0xb8>)
 800714a:	441a      	add	r2, r3
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	3304      	adds	r3, #4
 8007150:	4619      	mov	r1, r3
 8007152:	4610      	mov	r0, r2
 8007154:	f7fe fda5 	bl	8005ca2 <vListInsertEnd>
 8007158:	e005      	b.n	8007166 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	3318      	adds	r3, #24
 800715e:	4619      	mov	r1, r3
 8007160:	480e      	ldr	r0, [pc, #56]	@ (800719c <xTaskRemoveFromEventList+0xbc>)
 8007162:	f7fe fd9e 	bl	8005ca2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800716a:	4b0d      	ldr	r3, [pc, #52]	@ (80071a0 <xTaskRemoveFromEventList+0xc0>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007170:	429a      	cmp	r2, r3
 8007172:	d905      	bls.n	8007180 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007174:	2301      	movs	r3, #1
 8007176:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007178:	4b0a      	ldr	r3, [pc, #40]	@ (80071a4 <xTaskRemoveFromEventList+0xc4>)
 800717a:	2201      	movs	r2, #1
 800717c:	601a      	str	r2, [r3, #0]
 800717e:	e001      	b.n	8007184 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007180:	2300      	movs	r3, #0
 8007182:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007184:	697b      	ldr	r3, [r7, #20]
}
 8007186:	4618      	mov	r0, r3
 8007188:	3718      	adds	r7, #24
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	20000d08 	.word	0x20000d08
 8007194:	20000ce8 	.word	0x20000ce8
 8007198:	20000be4 	.word	0x20000be4
 800719c:	20000ca0 	.word	0x20000ca0
 80071a0:	20000be0 	.word	0x20000be0
 80071a4:	20000cf4 	.word	0x20000cf4

080071a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80071b0:	4b06      	ldr	r3, [pc, #24]	@ (80071cc <vTaskInternalSetTimeOutState+0x24>)
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80071b8:	4b05      	ldr	r3, [pc, #20]	@ (80071d0 <vTaskInternalSetTimeOutState+0x28>)
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	605a      	str	r2, [r3, #4]
}
 80071c0:	bf00      	nop
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr
 80071cc:	20000cf8 	.word	0x20000cf8
 80071d0:	20000ce4 	.word	0x20000ce4

080071d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b088      	sub	sp, #32
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d10b      	bne.n	80071fc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80071e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e8:	f383 8811 	msr	BASEPRI, r3
 80071ec:	f3bf 8f6f 	isb	sy
 80071f0:	f3bf 8f4f 	dsb	sy
 80071f4:	613b      	str	r3, [r7, #16]
}
 80071f6:	bf00      	nop
 80071f8:	bf00      	nop
 80071fa:	e7fd      	b.n	80071f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10b      	bne.n	800721a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007206:	f383 8811 	msr	BASEPRI, r3
 800720a:	f3bf 8f6f 	isb	sy
 800720e:	f3bf 8f4f 	dsb	sy
 8007212:	60fb      	str	r3, [r7, #12]
}
 8007214:	bf00      	nop
 8007216:	bf00      	nop
 8007218:	e7fd      	b.n	8007216 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800721a:	f000 fc7d 	bl	8007b18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800721e:	4b1d      	ldr	r3, [pc, #116]	@ (8007294 <xTaskCheckForTimeOut+0xc0>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	69ba      	ldr	r2, [r7, #24]
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007236:	d102      	bne.n	800723e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007238:	2300      	movs	r3, #0
 800723a:	61fb      	str	r3, [r7, #28]
 800723c:	e023      	b.n	8007286 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	4b15      	ldr	r3, [pc, #84]	@ (8007298 <xTaskCheckForTimeOut+0xc4>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	429a      	cmp	r2, r3
 8007248:	d007      	beq.n	800725a <xTaskCheckForTimeOut+0x86>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	69ba      	ldr	r2, [r7, #24]
 8007250:	429a      	cmp	r2, r3
 8007252:	d302      	bcc.n	800725a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007254:	2301      	movs	r3, #1
 8007256:	61fb      	str	r3, [r7, #28]
 8007258:	e015      	b.n	8007286 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	697a      	ldr	r2, [r7, #20]
 8007260:	429a      	cmp	r2, r3
 8007262:	d20b      	bcs.n	800727c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	1ad2      	subs	r2, r2, r3
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f7ff ff99 	bl	80071a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007276:	2300      	movs	r3, #0
 8007278:	61fb      	str	r3, [r7, #28]
 800727a:	e004      	b.n	8007286 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	2200      	movs	r2, #0
 8007280:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007282:	2301      	movs	r3, #1
 8007284:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007286:	f000 fc79 	bl	8007b7c <vPortExitCritical>

	return xReturn;
 800728a:	69fb      	ldr	r3, [r7, #28]
}
 800728c:	4618      	mov	r0, r3
 800728e:	3720      	adds	r7, #32
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	20000ce4 	.word	0x20000ce4
 8007298:	20000cf8 	.word	0x20000cf8

0800729c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800729c:	b480      	push	{r7}
 800729e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80072a0:	4b03      	ldr	r3, [pc, #12]	@ (80072b0 <vTaskMissedYield+0x14>)
 80072a2:	2201      	movs	r2, #1
 80072a4:	601a      	str	r2, [r3, #0]
}
 80072a6:	bf00      	nop
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr
 80072b0:	20000cf4 	.word	0x20000cf4

080072b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80072bc:	f000 f852 	bl	8007364 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80072c0:	4b06      	ldr	r3, [pc, #24]	@ (80072dc <prvIdleTask+0x28>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d9f9      	bls.n	80072bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80072c8:	4b05      	ldr	r3, [pc, #20]	@ (80072e0 <prvIdleTask+0x2c>)
 80072ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072ce:	601a      	str	r2, [r3, #0]
 80072d0:	f3bf 8f4f 	dsb	sy
 80072d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80072d8:	e7f0      	b.n	80072bc <prvIdleTask+0x8>
 80072da:	bf00      	nop
 80072dc:	20000be4 	.word	0x20000be4
 80072e0:	e000ed04 	.word	0xe000ed04

080072e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072ea:	2300      	movs	r3, #0
 80072ec:	607b      	str	r3, [r7, #4]
 80072ee:	e00c      	b.n	800730a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	4613      	mov	r3, r2
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	4413      	add	r3, r2
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	4a12      	ldr	r2, [pc, #72]	@ (8007344 <prvInitialiseTaskLists+0x60>)
 80072fc:	4413      	add	r3, r2
 80072fe:	4618      	mov	r0, r3
 8007300:	f7fe fca2 	bl	8005c48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	3301      	adds	r3, #1
 8007308:	607b      	str	r3, [r7, #4]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2b06      	cmp	r3, #6
 800730e:	d9ef      	bls.n	80072f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007310:	480d      	ldr	r0, [pc, #52]	@ (8007348 <prvInitialiseTaskLists+0x64>)
 8007312:	f7fe fc99 	bl	8005c48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007316:	480d      	ldr	r0, [pc, #52]	@ (800734c <prvInitialiseTaskLists+0x68>)
 8007318:	f7fe fc96 	bl	8005c48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800731c:	480c      	ldr	r0, [pc, #48]	@ (8007350 <prvInitialiseTaskLists+0x6c>)
 800731e:	f7fe fc93 	bl	8005c48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007322:	480c      	ldr	r0, [pc, #48]	@ (8007354 <prvInitialiseTaskLists+0x70>)
 8007324:	f7fe fc90 	bl	8005c48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007328:	480b      	ldr	r0, [pc, #44]	@ (8007358 <prvInitialiseTaskLists+0x74>)
 800732a:	f7fe fc8d 	bl	8005c48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800732e:	4b0b      	ldr	r3, [pc, #44]	@ (800735c <prvInitialiseTaskLists+0x78>)
 8007330:	4a05      	ldr	r2, [pc, #20]	@ (8007348 <prvInitialiseTaskLists+0x64>)
 8007332:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007334:	4b0a      	ldr	r3, [pc, #40]	@ (8007360 <prvInitialiseTaskLists+0x7c>)
 8007336:	4a05      	ldr	r2, [pc, #20]	@ (800734c <prvInitialiseTaskLists+0x68>)
 8007338:	601a      	str	r2, [r3, #0]
}
 800733a:	bf00      	nop
 800733c:	3708      	adds	r7, #8
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	20000be4 	.word	0x20000be4
 8007348:	20000c70 	.word	0x20000c70
 800734c:	20000c84 	.word	0x20000c84
 8007350:	20000ca0 	.word	0x20000ca0
 8007354:	20000cb4 	.word	0x20000cb4
 8007358:	20000ccc 	.word	0x20000ccc
 800735c:	20000c98 	.word	0x20000c98
 8007360:	20000c9c 	.word	0x20000c9c

08007364 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800736a:	e019      	b.n	80073a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800736c:	f000 fbd4 	bl	8007b18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007370:	4b10      	ldr	r3, [pc, #64]	@ (80073b4 <prvCheckTasksWaitingTermination+0x50>)
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	3304      	adds	r3, #4
 800737c:	4618      	mov	r0, r3
 800737e:	f7fe fced 	bl	8005d5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007382:	4b0d      	ldr	r3, [pc, #52]	@ (80073b8 <prvCheckTasksWaitingTermination+0x54>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	3b01      	subs	r3, #1
 8007388:	4a0b      	ldr	r2, [pc, #44]	@ (80073b8 <prvCheckTasksWaitingTermination+0x54>)
 800738a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800738c:	4b0b      	ldr	r3, [pc, #44]	@ (80073bc <prvCheckTasksWaitingTermination+0x58>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	3b01      	subs	r3, #1
 8007392:	4a0a      	ldr	r2, [pc, #40]	@ (80073bc <prvCheckTasksWaitingTermination+0x58>)
 8007394:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007396:	f000 fbf1 	bl	8007b7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f810 	bl	80073c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073a0:	4b06      	ldr	r3, [pc, #24]	@ (80073bc <prvCheckTasksWaitingTermination+0x58>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d1e1      	bne.n	800736c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80073a8:	bf00      	nop
 80073aa:	bf00      	nop
 80073ac:	3708      	adds	r7, #8
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	20000cb4 	.word	0x20000cb4
 80073b8:	20000ce0 	.word	0x20000ce0
 80073bc:	20000cc8 	.word	0x20000cc8

080073c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	334c      	adds	r3, #76	@ 0x4c
 80073cc:	4618      	mov	r0, r3
 80073ce:	f000 ffe3 	bl	8008398 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d108      	bne.n	80073ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073e0:	4618      	mov	r0, r3
 80073e2:	f000 fd89 	bl	8007ef8 <vPortFree>
				vPortFree( pxTCB );
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 fd86 	bl	8007ef8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80073ec:	e019      	b.n	8007422 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d103      	bne.n	8007400 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 fd7d 	bl	8007ef8 <vPortFree>
	}
 80073fe:	e010      	b.n	8007422 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007406:	2b02      	cmp	r3, #2
 8007408:	d00b      	beq.n	8007422 <prvDeleteTCB+0x62>
	__asm volatile
 800740a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800740e:	f383 8811 	msr	BASEPRI, r3
 8007412:	f3bf 8f6f 	isb	sy
 8007416:	f3bf 8f4f 	dsb	sy
 800741a:	60fb      	str	r3, [r7, #12]
}
 800741c:	bf00      	nop
 800741e:	bf00      	nop
 8007420:	e7fd      	b.n	800741e <prvDeleteTCB+0x5e>
	}
 8007422:	bf00      	nop
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
	...

0800742c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007432:	4b0c      	ldr	r3, [pc, #48]	@ (8007464 <prvResetNextTaskUnblockTime+0x38>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d104      	bne.n	8007446 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800743c:	4b0a      	ldr	r3, [pc, #40]	@ (8007468 <prvResetNextTaskUnblockTime+0x3c>)
 800743e:	f04f 32ff 	mov.w	r2, #4294967295
 8007442:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007444:	e008      	b.n	8007458 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007446:	4b07      	ldr	r3, [pc, #28]	@ (8007464 <prvResetNextTaskUnblockTime+0x38>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	4a04      	ldr	r2, [pc, #16]	@ (8007468 <prvResetNextTaskUnblockTime+0x3c>)
 8007456:	6013      	str	r3, [r2, #0]
}
 8007458:	bf00      	nop
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr
 8007464:	20000c98 	.word	0x20000c98
 8007468:	20000d00 	.word	0x20000d00

0800746c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007472:	4b0b      	ldr	r3, [pc, #44]	@ (80074a0 <xTaskGetSchedulerState+0x34>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d102      	bne.n	8007480 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800747a:	2301      	movs	r3, #1
 800747c:	607b      	str	r3, [r7, #4]
 800747e:	e008      	b.n	8007492 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007480:	4b08      	ldr	r3, [pc, #32]	@ (80074a4 <xTaskGetSchedulerState+0x38>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d102      	bne.n	800748e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007488:	2302      	movs	r3, #2
 800748a:	607b      	str	r3, [r7, #4]
 800748c:	e001      	b.n	8007492 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800748e:	2300      	movs	r3, #0
 8007490:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007492:	687b      	ldr	r3, [r7, #4]
	}
 8007494:	4618      	mov	r0, r3
 8007496:	370c      	adds	r7, #12
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr
 80074a0:	20000cec 	.word	0x20000cec
 80074a4:	20000d08 	.word	0x20000d08

080074a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80074b4:	2300      	movs	r3, #0
 80074b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d05e      	beq.n	800757c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074c2:	4b31      	ldr	r3, [pc, #196]	@ (8007588 <xTaskPriorityInherit+0xe0>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d24e      	bcs.n	800756a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	699b      	ldr	r3, [r3, #24]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	db06      	blt.n	80074e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074d4:	4b2c      	ldr	r3, [pc, #176]	@ (8007588 <xTaskPriorityInherit+0xe0>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074da:	f1c3 0207 	rsb	r2, r3, #7
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	6959      	ldr	r1, [r3, #20]
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074ea:	4613      	mov	r3, r2
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	4413      	add	r3, r2
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4a26      	ldr	r2, [pc, #152]	@ (800758c <xTaskPriorityInherit+0xe4>)
 80074f4:	4413      	add	r3, r2
 80074f6:	4299      	cmp	r1, r3
 80074f8:	d12f      	bne.n	800755a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	3304      	adds	r3, #4
 80074fe:	4618      	mov	r0, r3
 8007500:	f7fe fc2c 	bl	8005d5c <uxListRemove>
 8007504:	4603      	mov	r3, r0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10a      	bne.n	8007520 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800750e:	2201      	movs	r2, #1
 8007510:	fa02 f303 	lsl.w	r3, r2, r3
 8007514:	43da      	mvns	r2, r3
 8007516:	4b1e      	ldr	r3, [pc, #120]	@ (8007590 <xTaskPriorityInherit+0xe8>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4013      	ands	r3, r2
 800751c:	4a1c      	ldr	r2, [pc, #112]	@ (8007590 <xTaskPriorityInherit+0xe8>)
 800751e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007520:	4b19      	ldr	r3, [pc, #100]	@ (8007588 <xTaskPriorityInherit+0xe0>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800752e:	2201      	movs	r2, #1
 8007530:	409a      	lsls	r2, r3
 8007532:	4b17      	ldr	r3, [pc, #92]	@ (8007590 <xTaskPriorityInherit+0xe8>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4313      	orrs	r3, r2
 8007538:	4a15      	ldr	r2, [pc, #84]	@ (8007590 <xTaskPriorityInherit+0xe8>)
 800753a:	6013      	str	r3, [r2, #0]
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007540:	4613      	mov	r3, r2
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	4413      	add	r3, r2
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	4a10      	ldr	r2, [pc, #64]	@ (800758c <xTaskPriorityInherit+0xe4>)
 800754a:	441a      	add	r2, r3
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	3304      	adds	r3, #4
 8007550:	4619      	mov	r1, r3
 8007552:	4610      	mov	r0, r2
 8007554:	f7fe fba5 	bl	8005ca2 <vListInsertEnd>
 8007558:	e004      	b.n	8007564 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800755a:	4b0b      	ldr	r3, [pc, #44]	@ (8007588 <xTaskPriorityInherit+0xe0>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007564:	2301      	movs	r3, #1
 8007566:	60fb      	str	r3, [r7, #12]
 8007568:	e008      	b.n	800757c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800756e:	4b06      	ldr	r3, [pc, #24]	@ (8007588 <xTaskPriorityInherit+0xe0>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007574:	429a      	cmp	r2, r3
 8007576:	d201      	bcs.n	800757c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007578:	2301      	movs	r3, #1
 800757a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800757c:	68fb      	ldr	r3, [r7, #12]
	}
 800757e:	4618      	mov	r0, r3
 8007580:	3710      	adds	r7, #16
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	20000be0 	.word	0x20000be0
 800758c:	20000be4 	.word	0x20000be4
 8007590:	20000ce8 	.word	0x20000ce8

08007594 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007594:	b580      	push	{r7, lr}
 8007596:	b086      	sub	sp, #24
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80075a0:	2300      	movs	r3, #0
 80075a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d070      	beq.n	800768c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80075aa:	4b3b      	ldr	r3, [pc, #236]	@ (8007698 <xTaskPriorityDisinherit+0x104>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	693a      	ldr	r2, [r7, #16]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d00b      	beq.n	80075cc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80075b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b8:	f383 8811 	msr	BASEPRI, r3
 80075bc:	f3bf 8f6f 	isb	sy
 80075c0:	f3bf 8f4f 	dsb	sy
 80075c4:	60fb      	str	r3, [r7, #12]
}
 80075c6:	bf00      	nop
 80075c8:	bf00      	nop
 80075ca:	e7fd      	b.n	80075c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d10b      	bne.n	80075ec <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80075d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d8:	f383 8811 	msr	BASEPRI, r3
 80075dc:	f3bf 8f6f 	isb	sy
 80075e0:	f3bf 8f4f 	dsb	sy
 80075e4:	60bb      	str	r3, [r7, #8]
}
 80075e6:	bf00      	nop
 80075e8:	bf00      	nop
 80075ea:	e7fd      	b.n	80075e8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075f0:	1e5a      	subs	r2, r3, #1
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075fe:	429a      	cmp	r2, r3
 8007600:	d044      	beq.n	800768c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007606:	2b00      	cmp	r3, #0
 8007608:	d140      	bne.n	800768c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	3304      	adds	r3, #4
 800760e:	4618      	mov	r0, r3
 8007610:	f7fe fba4 	bl	8005d5c <uxListRemove>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d115      	bne.n	8007646 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800761e:	491f      	ldr	r1, [pc, #124]	@ (800769c <xTaskPriorityDisinherit+0x108>)
 8007620:	4613      	mov	r3, r2
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	4413      	add	r3, r2
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	440b      	add	r3, r1
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10a      	bne.n	8007646 <xTaskPriorityDisinherit+0xb2>
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007634:	2201      	movs	r2, #1
 8007636:	fa02 f303 	lsl.w	r3, r2, r3
 800763a:	43da      	mvns	r2, r3
 800763c:	4b18      	ldr	r3, [pc, #96]	@ (80076a0 <xTaskPriorityDisinherit+0x10c>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4013      	ands	r3, r2
 8007642:	4a17      	ldr	r2, [pc, #92]	@ (80076a0 <xTaskPriorityDisinherit+0x10c>)
 8007644:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007652:	f1c3 0207 	rsb	r2, r3, #7
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800765e:	2201      	movs	r2, #1
 8007660:	409a      	lsls	r2, r3
 8007662:	4b0f      	ldr	r3, [pc, #60]	@ (80076a0 <xTaskPriorityDisinherit+0x10c>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4313      	orrs	r3, r2
 8007668:	4a0d      	ldr	r2, [pc, #52]	@ (80076a0 <xTaskPriorityDisinherit+0x10c>)
 800766a:	6013      	str	r3, [r2, #0]
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007670:	4613      	mov	r3, r2
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	4413      	add	r3, r2
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	4a08      	ldr	r2, [pc, #32]	@ (800769c <xTaskPriorityDisinherit+0x108>)
 800767a:	441a      	add	r2, r3
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	3304      	adds	r3, #4
 8007680:	4619      	mov	r1, r3
 8007682:	4610      	mov	r0, r2
 8007684:	f7fe fb0d 	bl	8005ca2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007688:	2301      	movs	r3, #1
 800768a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800768c:	697b      	ldr	r3, [r7, #20]
	}
 800768e:	4618      	mov	r0, r3
 8007690:	3718      	adds	r7, #24
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	20000be0 	.word	0x20000be0
 800769c:	20000be4 	.word	0x20000be4
 80076a0:	20000ce8 	.word	0x20000ce8

080076a4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b088      	sub	sp, #32
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80076b2:	2301      	movs	r3, #1
 80076b4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d079      	beq.n	80077b0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d10b      	bne.n	80076dc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80076c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c8:	f383 8811 	msr	BASEPRI, r3
 80076cc:	f3bf 8f6f 	isb	sy
 80076d0:	f3bf 8f4f 	dsb	sy
 80076d4:	60fb      	str	r3, [r7, #12]
}
 80076d6:	bf00      	nop
 80076d8:	bf00      	nop
 80076da:	e7fd      	b.n	80076d8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076e0:	683a      	ldr	r2, [r7, #0]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d902      	bls.n	80076ec <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	61fb      	str	r3, [r7, #28]
 80076ea:	e002      	b.n	80076f2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076f0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076f6:	69fa      	ldr	r2, [r7, #28]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d059      	beq.n	80077b0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007700:	697a      	ldr	r2, [r7, #20]
 8007702:	429a      	cmp	r2, r3
 8007704:	d154      	bne.n	80077b0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007706:	4b2c      	ldr	r3, [pc, #176]	@ (80077b8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	69ba      	ldr	r2, [r7, #24]
 800770c:	429a      	cmp	r2, r3
 800770e:	d10b      	bne.n	8007728 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007714:	f383 8811 	msr	BASEPRI, r3
 8007718:	f3bf 8f6f 	isb	sy
 800771c:	f3bf 8f4f 	dsb	sy
 8007720:	60bb      	str	r3, [r7, #8]
}
 8007722:	bf00      	nop
 8007724:	bf00      	nop
 8007726:	e7fd      	b.n	8007724 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800772c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	69fa      	ldr	r2, [r7, #28]
 8007732:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	699b      	ldr	r3, [r3, #24]
 8007738:	2b00      	cmp	r3, #0
 800773a:	db04      	blt.n	8007746 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	f1c3 0207 	rsb	r2, r3, #7
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007746:	69bb      	ldr	r3, [r7, #24]
 8007748:	6959      	ldr	r1, [r3, #20]
 800774a:	693a      	ldr	r2, [r7, #16]
 800774c:	4613      	mov	r3, r2
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	4413      	add	r3, r2
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	4a19      	ldr	r2, [pc, #100]	@ (80077bc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007756:	4413      	add	r3, r2
 8007758:	4299      	cmp	r1, r3
 800775a:	d129      	bne.n	80077b0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	3304      	adds	r3, #4
 8007760:	4618      	mov	r0, r3
 8007762:	f7fe fafb 	bl	8005d5c <uxListRemove>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d10a      	bne.n	8007782 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800776c:	69bb      	ldr	r3, [r7, #24]
 800776e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007770:	2201      	movs	r2, #1
 8007772:	fa02 f303 	lsl.w	r3, r2, r3
 8007776:	43da      	mvns	r2, r3
 8007778:	4b11      	ldr	r3, [pc, #68]	@ (80077c0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4013      	ands	r3, r2
 800777e:	4a10      	ldr	r2, [pc, #64]	@ (80077c0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007780:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007786:	2201      	movs	r2, #1
 8007788:	409a      	lsls	r2, r3
 800778a:	4b0d      	ldr	r3, [pc, #52]	@ (80077c0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4313      	orrs	r3, r2
 8007790:	4a0b      	ldr	r2, [pc, #44]	@ (80077c0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007792:	6013      	str	r3, [r2, #0]
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007798:	4613      	mov	r3, r2
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	4413      	add	r3, r2
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	4a06      	ldr	r2, [pc, #24]	@ (80077bc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80077a2:	441a      	add	r2, r3
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	3304      	adds	r3, #4
 80077a8:	4619      	mov	r1, r3
 80077aa:	4610      	mov	r0, r2
 80077ac:	f7fe fa79 	bl	8005ca2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80077b0:	bf00      	nop
 80077b2:	3720      	adds	r7, #32
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	20000be0 	.word	0x20000be0
 80077bc:	20000be4 	.word	0x20000be4
 80077c0:	20000ce8 	.word	0x20000ce8

080077c4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80077c4:	b480      	push	{r7}
 80077c6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80077c8:	4b07      	ldr	r3, [pc, #28]	@ (80077e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d004      	beq.n	80077da <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80077d0:	4b05      	ldr	r3, [pc, #20]	@ (80077e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80077d6:	3201      	adds	r2, #1
 80077d8:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80077da:	4b03      	ldr	r3, [pc, #12]	@ (80077e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80077dc:	681b      	ldr	r3, [r3, #0]
	}
 80077de:	4618      	mov	r0, r3
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr
 80077e8:	20000be0 	.word	0x20000be0

080077ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80077f6:	4b29      	ldr	r3, [pc, #164]	@ (800789c <prvAddCurrentTaskToDelayedList+0xb0>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077fc:	4b28      	ldr	r3, [pc, #160]	@ (80078a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	3304      	adds	r3, #4
 8007802:	4618      	mov	r0, r3
 8007804:	f7fe faaa 	bl	8005d5c <uxListRemove>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d10b      	bne.n	8007826 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800780e:	4b24      	ldr	r3, [pc, #144]	@ (80078a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007814:	2201      	movs	r2, #1
 8007816:	fa02 f303 	lsl.w	r3, r2, r3
 800781a:	43da      	mvns	r2, r3
 800781c:	4b21      	ldr	r3, [pc, #132]	@ (80078a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4013      	ands	r3, r2
 8007822:	4a20      	ldr	r2, [pc, #128]	@ (80078a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007824:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800782c:	d10a      	bne.n	8007844 <prvAddCurrentTaskToDelayedList+0x58>
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d007      	beq.n	8007844 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007834:	4b1a      	ldr	r3, [pc, #104]	@ (80078a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	3304      	adds	r3, #4
 800783a:	4619      	mov	r1, r3
 800783c:	481a      	ldr	r0, [pc, #104]	@ (80078a8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800783e:	f7fe fa30 	bl	8005ca2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007842:	e026      	b.n	8007892 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007844:	68fa      	ldr	r2, [r7, #12]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4413      	add	r3, r2
 800784a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800784c:	4b14      	ldr	r3, [pc, #80]	@ (80078a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	68ba      	ldr	r2, [r7, #8]
 8007852:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007854:	68ba      	ldr	r2, [r7, #8]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	429a      	cmp	r2, r3
 800785a:	d209      	bcs.n	8007870 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800785c:	4b13      	ldr	r3, [pc, #76]	@ (80078ac <prvAddCurrentTaskToDelayedList+0xc0>)
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	4b0f      	ldr	r3, [pc, #60]	@ (80078a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	3304      	adds	r3, #4
 8007866:	4619      	mov	r1, r3
 8007868:	4610      	mov	r0, r2
 800786a:	f7fe fa3e 	bl	8005cea <vListInsert>
}
 800786e:	e010      	b.n	8007892 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007870:	4b0f      	ldr	r3, [pc, #60]	@ (80078b0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	4b0a      	ldr	r3, [pc, #40]	@ (80078a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	3304      	adds	r3, #4
 800787a:	4619      	mov	r1, r3
 800787c:	4610      	mov	r0, r2
 800787e:	f7fe fa34 	bl	8005cea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007882:	4b0c      	ldr	r3, [pc, #48]	@ (80078b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	68ba      	ldr	r2, [r7, #8]
 8007888:	429a      	cmp	r2, r3
 800788a:	d202      	bcs.n	8007892 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800788c:	4a09      	ldr	r2, [pc, #36]	@ (80078b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	6013      	str	r3, [r2, #0]
}
 8007892:	bf00      	nop
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	20000ce4 	.word	0x20000ce4
 80078a0:	20000be0 	.word	0x20000be0
 80078a4:	20000ce8 	.word	0x20000ce8
 80078a8:	20000ccc 	.word	0x20000ccc
 80078ac:	20000c9c 	.word	0x20000c9c
 80078b0:	20000c98 	.word	0x20000c98
 80078b4:	20000d00 	.word	0x20000d00

080078b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	3b04      	subs	r3, #4
 80078c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80078d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	3b04      	subs	r3, #4
 80078d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	f023 0201 	bic.w	r2, r3, #1
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	3b04      	subs	r3, #4
 80078e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80078e8:	4a0c      	ldr	r2, [pc, #48]	@ (800791c <pxPortInitialiseStack+0x64>)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	3b14      	subs	r3, #20
 80078f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	3b04      	subs	r3, #4
 80078fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f06f 0202 	mvn.w	r2, #2
 8007906:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	3b20      	subs	r3, #32
 800790c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800790e:	68fb      	ldr	r3, [r7, #12]
}
 8007910:	4618      	mov	r0, r3
 8007912:	3714      	adds	r7, #20
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr
 800791c:	08007921 	.word	0x08007921

08007920 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007920:	b480      	push	{r7}
 8007922:	b085      	sub	sp, #20
 8007924:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007926:	2300      	movs	r3, #0
 8007928:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800792a:	4b13      	ldr	r3, [pc, #76]	@ (8007978 <prvTaskExitError+0x58>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007932:	d00b      	beq.n	800794c <prvTaskExitError+0x2c>
	__asm volatile
 8007934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007938:	f383 8811 	msr	BASEPRI, r3
 800793c:	f3bf 8f6f 	isb	sy
 8007940:	f3bf 8f4f 	dsb	sy
 8007944:	60fb      	str	r3, [r7, #12]
}
 8007946:	bf00      	nop
 8007948:	bf00      	nop
 800794a:	e7fd      	b.n	8007948 <prvTaskExitError+0x28>
	__asm volatile
 800794c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007950:	f383 8811 	msr	BASEPRI, r3
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	60bb      	str	r3, [r7, #8]
}
 800795e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007960:	bf00      	nop
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d0fc      	beq.n	8007962 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007968:	bf00      	nop
 800796a:	bf00      	nop
 800796c:	3714      	adds	r7, #20
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	2000000c 	.word	0x2000000c
 800797c:	00000000 	.word	0x00000000

08007980 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007980:	4b07      	ldr	r3, [pc, #28]	@ (80079a0 <pxCurrentTCBConst2>)
 8007982:	6819      	ldr	r1, [r3, #0]
 8007984:	6808      	ldr	r0, [r1, #0]
 8007986:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800798a:	f380 8809 	msr	PSP, r0
 800798e:	f3bf 8f6f 	isb	sy
 8007992:	f04f 0000 	mov.w	r0, #0
 8007996:	f380 8811 	msr	BASEPRI, r0
 800799a:	4770      	bx	lr
 800799c:	f3af 8000 	nop.w

080079a0 <pxCurrentTCBConst2>:
 80079a0:	20000be0 	.word	0x20000be0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80079a4:	bf00      	nop
 80079a6:	bf00      	nop

080079a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80079a8:	4808      	ldr	r0, [pc, #32]	@ (80079cc <prvPortStartFirstTask+0x24>)
 80079aa:	6800      	ldr	r0, [r0, #0]
 80079ac:	6800      	ldr	r0, [r0, #0]
 80079ae:	f380 8808 	msr	MSP, r0
 80079b2:	f04f 0000 	mov.w	r0, #0
 80079b6:	f380 8814 	msr	CONTROL, r0
 80079ba:	b662      	cpsie	i
 80079bc:	b661      	cpsie	f
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	f3bf 8f6f 	isb	sy
 80079c6:	df00      	svc	0
 80079c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80079ca:	bf00      	nop
 80079cc:	e000ed08 	.word	0xe000ed08

080079d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b086      	sub	sp, #24
 80079d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80079d6:	4b47      	ldr	r3, [pc, #284]	@ (8007af4 <xPortStartScheduler+0x124>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a47      	ldr	r2, [pc, #284]	@ (8007af8 <xPortStartScheduler+0x128>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d10b      	bne.n	80079f8 <xPortStartScheduler+0x28>
	__asm volatile
 80079e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079e4:	f383 8811 	msr	BASEPRI, r3
 80079e8:	f3bf 8f6f 	isb	sy
 80079ec:	f3bf 8f4f 	dsb	sy
 80079f0:	613b      	str	r3, [r7, #16]
}
 80079f2:	bf00      	nop
 80079f4:	bf00      	nop
 80079f6:	e7fd      	b.n	80079f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80079f8:	4b3e      	ldr	r3, [pc, #248]	@ (8007af4 <xPortStartScheduler+0x124>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a3f      	ldr	r2, [pc, #252]	@ (8007afc <xPortStartScheduler+0x12c>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d10b      	bne.n	8007a1a <xPortStartScheduler+0x4a>
	__asm volatile
 8007a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a06:	f383 8811 	msr	BASEPRI, r3
 8007a0a:	f3bf 8f6f 	isb	sy
 8007a0e:	f3bf 8f4f 	dsb	sy
 8007a12:	60fb      	str	r3, [r7, #12]
}
 8007a14:	bf00      	nop
 8007a16:	bf00      	nop
 8007a18:	e7fd      	b.n	8007a16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007a1a:	4b39      	ldr	r3, [pc, #228]	@ (8007b00 <xPortStartScheduler+0x130>)
 8007a1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	22ff      	movs	r2, #255	@ 0xff
 8007a2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007a34:	78fb      	ldrb	r3, [r7, #3]
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007a3c:	b2da      	uxtb	r2, r3
 8007a3e:	4b31      	ldr	r3, [pc, #196]	@ (8007b04 <xPortStartScheduler+0x134>)
 8007a40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a42:	4b31      	ldr	r3, [pc, #196]	@ (8007b08 <xPortStartScheduler+0x138>)
 8007a44:	2207      	movs	r2, #7
 8007a46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a48:	e009      	b.n	8007a5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007a4a:	4b2f      	ldr	r3, [pc, #188]	@ (8007b08 <xPortStartScheduler+0x138>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	3b01      	subs	r3, #1
 8007a50:	4a2d      	ldr	r2, [pc, #180]	@ (8007b08 <xPortStartScheduler+0x138>)
 8007a52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007a54:	78fb      	ldrb	r3, [r7, #3]
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	005b      	lsls	r3, r3, #1
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a5e:	78fb      	ldrb	r3, [r7, #3]
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a66:	2b80      	cmp	r3, #128	@ 0x80
 8007a68:	d0ef      	beq.n	8007a4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007a6a:	4b27      	ldr	r3, [pc, #156]	@ (8007b08 <xPortStartScheduler+0x138>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f1c3 0307 	rsb	r3, r3, #7
 8007a72:	2b04      	cmp	r3, #4
 8007a74:	d00b      	beq.n	8007a8e <xPortStartScheduler+0xbe>
	__asm volatile
 8007a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a7a:	f383 8811 	msr	BASEPRI, r3
 8007a7e:	f3bf 8f6f 	isb	sy
 8007a82:	f3bf 8f4f 	dsb	sy
 8007a86:	60bb      	str	r3, [r7, #8]
}
 8007a88:	bf00      	nop
 8007a8a:	bf00      	nop
 8007a8c:	e7fd      	b.n	8007a8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007a8e:	4b1e      	ldr	r3, [pc, #120]	@ (8007b08 <xPortStartScheduler+0x138>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	021b      	lsls	r3, r3, #8
 8007a94:	4a1c      	ldr	r2, [pc, #112]	@ (8007b08 <xPortStartScheduler+0x138>)
 8007a96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007a98:	4b1b      	ldr	r3, [pc, #108]	@ (8007b08 <xPortStartScheduler+0x138>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007aa0:	4a19      	ldr	r2, [pc, #100]	@ (8007b08 <xPortStartScheduler+0x138>)
 8007aa2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	b2da      	uxtb	r2, r3
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007aac:	4b17      	ldr	r3, [pc, #92]	@ (8007b0c <xPortStartScheduler+0x13c>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a16      	ldr	r2, [pc, #88]	@ (8007b0c <xPortStartScheduler+0x13c>)
 8007ab2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007ab6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ab8:	4b14      	ldr	r3, [pc, #80]	@ (8007b0c <xPortStartScheduler+0x13c>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a13      	ldr	r2, [pc, #76]	@ (8007b0c <xPortStartScheduler+0x13c>)
 8007abe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007ac2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007ac4:	f000 f8da 	bl	8007c7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ac8:	4b11      	ldr	r3, [pc, #68]	@ (8007b10 <xPortStartScheduler+0x140>)
 8007aca:	2200      	movs	r2, #0
 8007acc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007ace:	f000 f8f9 	bl	8007cc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007ad2:	4b10      	ldr	r3, [pc, #64]	@ (8007b14 <xPortStartScheduler+0x144>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a0f      	ldr	r2, [pc, #60]	@ (8007b14 <xPortStartScheduler+0x144>)
 8007ad8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007adc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007ade:	f7ff ff63 	bl	80079a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007ae2:	f7ff fa73 	bl	8006fcc <vTaskSwitchContext>
	prvTaskExitError();
 8007ae6:	f7ff ff1b 	bl	8007920 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007aea:	2300      	movs	r3, #0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3718      	adds	r7, #24
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	e000ed00 	.word	0xe000ed00
 8007af8:	410fc271 	.word	0x410fc271
 8007afc:	410fc270 	.word	0x410fc270
 8007b00:	e000e400 	.word	0xe000e400
 8007b04:	20000d0c 	.word	0x20000d0c
 8007b08:	20000d10 	.word	0x20000d10
 8007b0c:	e000ed20 	.word	0xe000ed20
 8007b10:	2000000c 	.word	0x2000000c
 8007b14:	e000ef34 	.word	0xe000ef34

08007b18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b22:	f383 8811 	msr	BASEPRI, r3
 8007b26:	f3bf 8f6f 	isb	sy
 8007b2a:	f3bf 8f4f 	dsb	sy
 8007b2e:	607b      	str	r3, [r7, #4]
}
 8007b30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007b32:	4b10      	ldr	r3, [pc, #64]	@ (8007b74 <vPortEnterCritical+0x5c>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	3301      	adds	r3, #1
 8007b38:	4a0e      	ldr	r2, [pc, #56]	@ (8007b74 <vPortEnterCritical+0x5c>)
 8007b3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8007b74 <vPortEnterCritical+0x5c>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d110      	bne.n	8007b66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007b44:	4b0c      	ldr	r3, [pc, #48]	@ (8007b78 <vPortEnterCritical+0x60>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00b      	beq.n	8007b66 <vPortEnterCritical+0x4e>
	__asm volatile
 8007b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b52:	f383 8811 	msr	BASEPRI, r3
 8007b56:	f3bf 8f6f 	isb	sy
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	603b      	str	r3, [r7, #0]
}
 8007b60:	bf00      	nop
 8007b62:	bf00      	nop
 8007b64:	e7fd      	b.n	8007b62 <vPortEnterCritical+0x4a>
	}
}
 8007b66:	bf00      	nop
 8007b68:	370c      	adds	r7, #12
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr
 8007b72:	bf00      	nop
 8007b74:	2000000c 	.word	0x2000000c
 8007b78:	e000ed04 	.word	0xe000ed04

08007b7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007b82:	4b12      	ldr	r3, [pc, #72]	@ (8007bcc <vPortExitCritical+0x50>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d10b      	bne.n	8007ba2 <vPortExitCritical+0x26>
	__asm volatile
 8007b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b8e:	f383 8811 	msr	BASEPRI, r3
 8007b92:	f3bf 8f6f 	isb	sy
 8007b96:	f3bf 8f4f 	dsb	sy
 8007b9a:	607b      	str	r3, [r7, #4]
}
 8007b9c:	bf00      	nop
 8007b9e:	bf00      	nop
 8007ba0:	e7fd      	b.n	8007b9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8007bcc <vPortExitCritical+0x50>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	3b01      	subs	r3, #1
 8007ba8:	4a08      	ldr	r2, [pc, #32]	@ (8007bcc <vPortExitCritical+0x50>)
 8007baa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007bac:	4b07      	ldr	r3, [pc, #28]	@ (8007bcc <vPortExitCritical+0x50>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d105      	bne.n	8007bc0 <vPortExitCritical+0x44>
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	f383 8811 	msr	BASEPRI, r3
}
 8007bbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007bc0:	bf00      	nop
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr
 8007bcc:	2000000c 	.word	0x2000000c

08007bd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007bd0:	f3ef 8009 	mrs	r0, PSP
 8007bd4:	f3bf 8f6f 	isb	sy
 8007bd8:	4b15      	ldr	r3, [pc, #84]	@ (8007c30 <pxCurrentTCBConst>)
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	f01e 0f10 	tst.w	lr, #16
 8007be0:	bf08      	it	eq
 8007be2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007be6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bea:	6010      	str	r0, [r2, #0]
 8007bec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007bf0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007bf4:	f380 8811 	msr	BASEPRI, r0
 8007bf8:	f3bf 8f4f 	dsb	sy
 8007bfc:	f3bf 8f6f 	isb	sy
 8007c00:	f7ff f9e4 	bl	8006fcc <vTaskSwitchContext>
 8007c04:	f04f 0000 	mov.w	r0, #0
 8007c08:	f380 8811 	msr	BASEPRI, r0
 8007c0c:	bc09      	pop	{r0, r3}
 8007c0e:	6819      	ldr	r1, [r3, #0]
 8007c10:	6808      	ldr	r0, [r1, #0]
 8007c12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c16:	f01e 0f10 	tst.w	lr, #16
 8007c1a:	bf08      	it	eq
 8007c1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007c20:	f380 8809 	msr	PSP, r0
 8007c24:	f3bf 8f6f 	isb	sy
 8007c28:	4770      	bx	lr
 8007c2a:	bf00      	nop
 8007c2c:	f3af 8000 	nop.w

08007c30 <pxCurrentTCBConst>:
 8007c30:	20000be0 	.word	0x20000be0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007c34:	bf00      	nop
 8007c36:	bf00      	nop

08007c38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c42:	f383 8811 	msr	BASEPRI, r3
 8007c46:	f3bf 8f6f 	isb	sy
 8007c4a:	f3bf 8f4f 	dsb	sy
 8007c4e:	607b      	str	r3, [r7, #4]
}
 8007c50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007c52:	f7ff f901 	bl	8006e58 <xTaskIncrementTick>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d003      	beq.n	8007c64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c5c:	4b06      	ldr	r3, [pc, #24]	@ (8007c78 <SysTick_Handler+0x40>)
 8007c5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c62:	601a      	str	r2, [r3, #0]
 8007c64:	2300      	movs	r3, #0
 8007c66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	f383 8811 	msr	BASEPRI, r3
}
 8007c6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007c70:	bf00      	nop
 8007c72:	3708      	adds	r7, #8
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	e000ed04 	.word	0xe000ed04

08007c7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007c80:	4b0b      	ldr	r3, [pc, #44]	@ (8007cb0 <vPortSetupTimerInterrupt+0x34>)
 8007c82:	2200      	movs	r2, #0
 8007c84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007c86:	4b0b      	ldr	r3, [pc, #44]	@ (8007cb4 <vPortSetupTimerInterrupt+0x38>)
 8007c88:	2200      	movs	r2, #0
 8007c8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8007cb8 <vPortSetupTimerInterrupt+0x3c>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a0a      	ldr	r2, [pc, #40]	@ (8007cbc <vPortSetupTimerInterrupt+0x40>)
 8007c92:	fba2 2303 	umull	r2, r3, r2, r3
 8007c96:	099b      	lsrs	r3, r3, #6
 8007c98:	4a09      	ldr	r2, [pc, #36]	@ (8007cc0 <vPortSetupTimerInterrupt+0x44>)
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007c9e:	4b04      	ldr	r3, [pc, #16]	@ (8007cb0 <vPortSetupTimerInterrupt+0x34>)
 8007ca0:	2207      	movs	r2, #7
 8007ca2:	601a      	str	r2, [r3, #0]
}
 8007ca4:	bf00      	nop
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr
 8007cae:	bf00      	nop
 8007cb0:	e000e010 	.word	0xe000e010
 8007cb4:	e000e018 	.word	0xe000e018
 8007cb8:	20000000 	.word	0x20000000
 8007cbc:	10624dd3 	.word	0x10624dd3
 8007cc0:	e000e014 	.word	0xe000e014

08007cc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007cc4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007cd4 <vPortEnableVFP+0x10>
 8007cc8:	6801      	ldr	r1, [r0, #0]
 8007cca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007cce:	6001      	str	r1, [r0, #0]
 8007cd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007cd2:	bf00      	nop
 8007cd4:	e000ed88 	.word	0xe000ed88

08007cd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007cd8:	b480      	push	{r7}
 8007cda:	b085      	sub	sp, #20
 8007cdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007cde:	f3ef 8305 	mrs	r3, IPSR
 8007ce2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2b0f      	cmp	r3, #15
 8007ce8:	d915      	bls.n	8007d16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007cea:	4a18      	ldr	r2, [pc, #96]	@ (8007d4c <vPortValidateInterruptPriority+0x74>)
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	4413      	add	r3, r2
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007cf4:	4b16      	ldr	r3, [pc, #88]	@ (8007d50 <vPortValidateInterruptPriority+0x78>)
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	7afa      	ldrb	r2, [r7, #11]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d20b      	bcs.n	8007d16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d02:	f383 8811 	msr	BASEPRI, r3
 8007d06:	f3bf 8f6f 	isb	sy
 8007d0a:	f3bf 8f4f 	dsb	sy
 8007d0e:	607b      	str	r3, [r7, #4]
}
 8007d10:	bf00      	nop
 8007d12:	bf00      	nop
 8007d14:	e7fd      	b.n	8007d12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007d16:	4b0f      	ldr	r3, [pc, #60]	@ (8007d54 <vPortValidateInterruptPriority+0x7c>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8007d58 <vPortValidateInterruptPriority+0x80>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d90b      	bls.n	8007d3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d2a:	f383 8811 	msr	BASEPRI, r3
 8007d2e:	f3bf 8f6f 	isb	sy
 8007d32:	f3bf 8f4f 	dsb	sy
 8007d36:	603b      	str	r3, [r7, #0]
}
 8007d38:	bf00      	nop
 8007d3a:	bf00      	nop
 8007d3c:	e7fd      	b.n	8007d3a <vPortValidateInterruptPriority+0x62>
	}
 8007d3e:	bf00      	nop
 8007d40:	3714      	adds	r7, #20
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr
 8007d4a:	bf00      	nop
 8007d4c:	e000e3f0 	.word	0xe000e3f0
 8007d50:	20000d0c 	.word	0x20000d0c
 8007d54:	e000ed0c 	.word	0xe000ed0c
 8007d58:	20000d10 	.word	0x20000d10

08007d5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b08a      	sub	sp, #40	@ 0x28
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007d64:	2300      	movs	r3, #0
 8007d66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007d68:	f7fe ffca 	bl	8006d00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007d6c:	4b5c      	ldr	r3, [pc, #368]	@ (8007ee0 <pvPortMalloc+0x184>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d101      	bne.n	8007d78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007d74:	f000 f924 	bl	8007fc0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007d78:	4b5a      	ldr	r3, [pc, #360]	@ (8007ee4 <pvPortMalloc+0x188>)
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	4013      	ands	r3, r2
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f040 8095 	bne.w	8007eb0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d01e      	beq.n	8007dca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007d8c:	2208      	movs	r2, #8
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4413      	add	r3, r2
 8007d92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f003 0307 	and.w	r3, r3, #7
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d015      	beq.n	8007dca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f023 0307 	bic.w	r3, r3, #7
 8007da4:	3308      	adds	r3, #8
 8007da6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f003 0307 	and.w	r3, r3, #7
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00b      	beq.n	8007dca <pvPortMalloc+0x6e>
	__asm volatile
 8007db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007db6:	f383 8811 	msr	BASEPRI, r3
 8007dba:	f3bf 8f6f 	isb	sy
 8007dbe:	f3bf 8f4f 	dsb	sy
 8007dc2:	617b      	str	r3, [r7, #20]
}
 8007dc4:	bf00      	nop
 8007dc6:	bf00      	nop
 8007dc8:	e7fd      	b.n	8007dc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d06f      	beq.n	8007eb0 <pvPortMalloc+0x154>
 8007dd0:	4b45      	ldr	r3, [pc, #276]	@ (8007ee8 <pvPortMalloc+0x18c>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d86a      	bhi.n	8007eb0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007dda:	4b44      	ldr	r3, [pc, #272]	@ (8007eec <pvPortMalloc+0x190>)
 8007ddc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007dde:	4b43      	ldr	r3, [pc, #268]	@ (8007eec <pvPortMalloc+0x190>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007de4:	e004      	b.n	8007df0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d903      	bls.n	8007e02 <pvPortMalloc+0xa6>
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1f1      	bne.n	8007de6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007e02:	4b37      	ldr	r3, [pc, #220]	@ (8007ee0 <pvPortMalloc+0x184>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d051      	beq.n	8007eb0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007e0c:	6a3b      	ldr	r3, [r7, #32]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2208      	movs	r2, #8
 8007e12:	4413      	add	r3, r2
 8007e14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	6a3b      	ldr	r3, [r7, #32]
 8007e1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e20:	685a      	ldr	r2, [r3, #4]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	1ad2      	subs	r2, r2, r3
 8007e26:	2308      	movs	r3, #8
 8007e28:	005b      	lsls	r3, r3, #1
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d920      	bls.n	8007e70 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007e2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	4413      	add	r3, r2
 8007e34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	f003 0307 	and.w	r3, r3, #7
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00b      	beq.n	8007e58 <pvPortMalloc+0xfc>
	__asm volatile
 8007e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e44:	f383 8811 	msr	BASEPRI, r3
 8007e48:	f3bf 8f6f 	isb	sy
 8007e4c:	f3bf 8f4f 	dsb	sy
 8007e50:	613b      	str	r3, [r7, #16]
}
 8007e52:	bf00      	nop
 8007e54:	bf00      	nop
 8007e56:	e7fd      	b.n	8007e54 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e5a:	685a      	ldr	r2, [r3, #4]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	1ad2      	subs	r2, r2, r3
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007e6a:	69b8      	ldr	r0, [r7, #24]
 8007e6c:	f000 f90a 	bl	8008084 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007e70:	4b1d      	ldr	r3, [pc, #116]	@ (8007ee8 <pvPortMalloc+0x18c>)
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	1ad3      	subs	r3, r2, r3
 8007e7a:	4a1b      	ldr	r2, [pc, #108]	@ (8007ee8 <pvPortMalloc+0x18c>)
 8007e7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8007ee8 <pvPortMalloc+0x18c>)
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	4b1b      	ldr	r3, [pc, #108]	@ (8007ef0 <pvPortMalloc+0x194>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d203      	bcs.n	8007e92 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007e8a:	4b17      	ldr	r3, [pc, #92]	@ (8007ee8 <pvPortMalloc+0x18c>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a18      	ldr	r2, [pc, #96]	@ (8007ef0 <pvPortMalloc+0x194>)
 8007e90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e94:	685a      	ldr	r2, [r3, #4]
 8007e96:	4b13      	ldr	r3, [pc, #76]	@ (8007ee4 <pvPortMalloc+0x188>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	431a      	orrs	r2, r3
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007ea6:	4b13      	ldr	r3, [pc, #76]	@ (8007ef4 <pvPortMalloc+0x198>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	3301      	adds	r3, #1
 8007eac:	4a11      	ldr	r2, [pc, #68]	@ (8007ef4 <pvPortMalloc+0x198>)
 8007eae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007eb0:	f7fe ff34 	bl	8006d1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	f003 0307 	and.w	r3, r3, #7
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d00b      	beq.n	8007ed6 <pvPortMalloc+0x17a>
	__asm volatile
 8007ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec2:	f383 8811 	msr	BASEPRI, r3
 8007ec6:	f3bf 8f6f 	isb	sy
 8007eca:	f3bf 8f4f 	dsb	sy
 8007ece:	60fb      	str	r3, [r7, #12]
}
 8007ed0:	bf00      	nop
 8007ed2:	bf00      	nop
 8007ed4:	e7fd      	b.n	8007ed2 <pvPortMalloc+0x176>
	return pvReturn;
 8007ed6:	69fb      	ldr	r3, [r7, #28]
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3728      	adds	r7, #40	@ 0x28
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	2000491c 	.word	0x2000491c
 8007ee4:	20004930 	.word	0x20004930
 8007ee8:	20004920 	.word	0x20004920
 8007eec:	20004914 	.word	0x20004914
 8007ef0:	20004924 	.word	0x20004924
 8007ef4:	20004928 	.word	0x20004928

08007ef8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b086      	sub	sp, #24
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d04f      	beq.n	8007faa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007f0a:	2308      	movs	r3, #8
 8007f0c:	425b      	negs	r3, r3
 8007f0e:	697a      	ldr	r2, [r7, #20]
 8007f10:	4413      	add	r3, r2
 8007f12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	685a      	ldr	r2, [r3, #4]
 8007f1c:	4b25      	ldr	r3, [pc, #148]	@ (8007fb4 <vPortFree+0xbc>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4013      	ands	r3, r2
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d10b      	bne.n	8007f3e <vPortFree+0x46>
	__asm volatile
 8007f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f2a:	f383 8811 	msr	BASEPRI, r3
 8007f2e:	f3bf 8f6f 	isb	sy
 8007f32:	f3bf 8f4f 	dsb	sy
 8007f36:	60fb      	str	r3, [r7, #12]
}
 8007f38:	bf00      	nop
 8007f3a:	bf00      	nop
 8007f3c:	e7fd      	b.n	8007f3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00b      	beq.n	8007f5e <vPortFree+0x66>
	__asm volatile
 8007f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f4a:	f383 8811 	msr	BASEPRI, r3
 8007f4e:	f3bf 8f6f 	isb	sy
 8007f52:	f3bf 8f4f 	dsb	sy
 8007f56:	60bb      	str	r3, [r7, #8]
}
 8007f58:	bf00      	nop
 8007f5a:	bf00      	nop
 8007f5c:	e7fd      	b.n	8007f5a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	685a      	ldr	r2, [r3, #4]
 8007f62:	4b14      	ldr	r3, [pc, #80]	@ (8007fb4 <vPortFree+0xbc>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4013      	ands	r3, r2
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d01e      	beq.n	8007faa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d11a      	bne.n	8007faa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	685a      	ldr	r2, [r3, #4]
 8007f78:	4b0e      	ldr	r3, [pc, #56]	@ (8007fb4 <vPortFree+0xbc>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	43db      	mvns	r3, r3
 8007f7e:	401a      	ands	r2, r3
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007f84:	f7fe febc 	bl	8006d00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	685a      	ldr	r2, [r3, #4]
 8007f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8007fb8 <vPortFree+0xc0>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4413      	add	r3, r2
 8007f92:	4a09      	ldr	r2, [pc, #36]	@ (8007fb8 <vPortFree+0xc0>)
 8007f94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007f96:	6938      	ldr	r0, [r7, #16]
 8007f98:	f000 f874 	bl	8008084 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007f9c:	4b07      	ldr	r3, [pc, #28]	@ (8007fbc <vPortFree+0xc4>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	4a06      	ldr	r2, [pc, #24]	@ (8007fbc <vPortFree+0xc4>)
 8007fa4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007fa6:	f7fe feb9 	bl	8006d1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007faa:	bf00      	nop
 8007fac:	3718      	adds	r7, #24
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	20004930 	.word	0x20004930
 8007fb8:	20004920 	.word	0x20004920
 8007fbc:	2000492c 	.word	0x2000492c

08007fc0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b085      	sub	sp, #20
 8007fc4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007fc6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007fca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007fcc:	4b27      	ldr	r3, [pc, #156]	@ (800806c <prvHeapInit+0xac>)
 8007fce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f003 0307 	and.w	r3, r3, #7
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00c      	beq.n	8007ff4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	3307      	adds	r3, #7
 8007fde:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f023 0307 	bic.w	r3, r3, #7
 8007fe6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007fe8:	68ba      	ldr	r2, [r7, #8]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	1ad3      	subs	r3, r2, r3
 8007fee:	4a1f      	ldr	r2, [pc, #124]	@ (800806c <prvHeapInit+0xac>)
 8007ff0:	4413      	add	r3, r2
 8007ff2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007ff8:	4a1d      	ldr	r2, [pc, #116]	@ (8008070 <prvHeapInit+0xb0>)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8008070 <prvHeapInit+0xb0>)
 8008000:	2200      	movs	r2, #0
 8008002:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	68ba      	ldr	r2, [r7, #8]
 8008008:	4413      	add	r3, r2
 800800a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800800c:	2208      	movs	r2, #8
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	1a9b      	subs	r3, r3, r2
 8008012:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f023 0307 	bic.w	r3, r3, #7
 800801a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	4a15      	ldr	r2, [pc, #84]	@ (8008074 <prvHeapInit+0xb4>)
 8008020:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008022:	4b14      	ldr	r3, [pc, #80]	@ (8008074 <prvHeapInit+0xb4>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	2200      	movs	r2, #0
 8008028:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800802a:	4b12      	ldr	r3, [pc, #72]	@ (8008074 <prvHeapInit+0xb4>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2200      	movs	r2, #0
 8008030:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	68fa      	ldr	r2, [r7, #12]
 800803a:	1ad2      	subs	r2, r2, r3
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008040:	4b0c      	ldr	r3, [pc, #48]	@ (8008074 <prvHeapInit+0xb4>)
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	4a0a      	ldr	r2, [pc, #40]	@ (8008078 <prvHeapInit+0xb8>)
 800804e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	4a09      	ldr	r2, [pc, #36]	@ (800807c <prvHeapInit+0xbc>)
 8008056:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008058:	4b09      	ldr	r3, [pc, #36]	@ (8008080 <prvHeapInit+0xc0>)
 800805a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800805e:	601a      	str	r2, [r3, #0]
}
 8008060:	bf00      	nop
 8008062:	3714      	adds	r7, #20
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr
 800806c:	20000d14 	.word	0x20000d14
 8008070:	20004914 	.word	0x20004914
 8008074:	2000491c 	.word	0x2000491c
 8008078:	20004924 	.word	0x20004924
 800807c:	20004920 	.word	0x20004920
 8008080:	20004930 	.word	0x20004930

08008084 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800808c:	4b28      	ldr	r3, [pc, #160]	@ (8008130 <prvInsertBlockIntoFreeList+0xac>)
 800808e:	60fb      	str	r3, [r7, #12]
 8008090:	e002      	b.n	8008098 <prvInsertBlockIntoFreeList+0x14>
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	60fb      	str	r3, [r7, #12]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	687a      	ldr	r2, [r7, #4]
 800809e:	429a      	cmp	r2, r3
 80080a0:	d8f7      	bhi.n	8008092 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	68ba      	ldr	r2, [r7, #8]
 80080ac:	4413      	add	r3, r2
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d108      	bne.n	80080c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	685a      	ldr	r2, [r3, #4]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	441a      	add	r2, r3
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	68ba      	ldr	r2, [r7, #8]
 80080d0:	441a      	add	r2, r3
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d118      	bne.n	800810c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	4b15      	ldr	r3, [pc, #84]	@ (8008134 <prvInsertBlockIntoFreeList+0xb0>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d00d      	beq.n	8008102 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	685a      	ldr	r2, [r3, #4]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	441a      	add	r2, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	601a      	str	r2, [r3, #0]
 8008100:	e008      	b.n	8008114 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008102:	4b0c      	ldr	r3, [pc, #48]	@ (8008134 <prvInsertBlockIntoFreeList+0xb0>)
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	601a      	str	r2, [r3, #0]
 800810a:	e003      	b.n	8008114 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	429a      	cmp	r2, r3
 800811a:	d002      	beq.n	8008122 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008122:	bf00      	nop
 8008124:	3714      	adds	r7, #20
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	20004914 	.word	0x20004914
 8008134:	2000491c 	.word	0x2000491c

08008138 <std>:
 8008138:	2300      	movs	r3, #0
 800813a:	b510      	push	{r4, lr}
 800813c:	4604      	mov	r4, r0
 800813e:	e9c0 3300 	strd	r3, r3, [r0]
 8008142:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008146:	6083      	str	r3, [r0, #8]
 8008148:	8181      	strh	r1, [r0, #12]
 800814a:	6643      	str	r3, [r0, #100]	@ 0x64
 800814c:	81c2      	strh	r2, [r0, #14]
 800814e:	6183      	str	r3, [r0, #24]
 8008150:	4619      	mov	r1, r3
 8008152:	2208      	movs	r2, #8
 8008154:	305c      	adds	r0, #92	@ 0x5c
 8008156:	f000 f906 	bl	8008366 <memset>
 800815a:	4b0d      	ldr	r3, [pc, #52]	@ (8008190 <std+0x58>)
 800815c:	6263      	str	r3, [r4, #36]	@ 0x24
 800815e:	4b0d      	ldr	r3, [pc, #52]	@ (8008194 <std+0x5c>)
 8008160:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008162:	4b0d      	ldr	r3, [pc, #52]	@ (8008198 <std+0x60>)
 8008164:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008166:	4b0d      	ldr	r3, [pc, #52]	@ (800819c <std+0x64>)
 8008168:	6323      	str	r3, [r4, #48]	@ 0x30
 800816a:	4b0d      	ldr	r3, [pc, #52]	@ (80081a0 <std+0x68>)
 800816c:	6224      	str	r4, [r4, #32]
 800816e:	429c      	cmp	r4, r3
 8008170:	d006      	beq.n	8008180 <std+0x48>
 8008172:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008176:	4294      	cmp	r4, r2
 8008178:	d002      	beq.n	8008180 <std+0x48>
 800817a:	33d0      	adds	r3, #208	@ 0xd0
 800817c:	429c      	cmp	r4, r3
 800817e:	d105      	bne.n	800818c <std+0x54>
 8008180:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008188:	f000 b9bc 	b.w	8008504 <__retarget_lock_init_recursive>
 800818c:	bd10      	pop	{r4, pc}
 800818e:	bf00      	nop
 8008190:	080082e1 	.word	0x080082e1
 8008194:	08008303 	.word	0x08008303
 8008198:	0800833b 	.word	0x0800833b
 800819c:	0800835f 	.word	0x0800835f
 80081a0:	20004934 	.word	0x20004934

080081a4 <stdio_exit_handler>:
 80081a4:	4a02      	ldr	r2, [pc, #8]	@ (80081b0 <stdio_exit_handler+0xc>)
 80081a6:	4903      	ldr	r1, [pc, #12]	@ (80081b4 <stdio_exit_handler+0x10>)
 80081a8:	4803      	ldr	r0, [pc, #12]	@ (80081b8 <stdio_exit_handler+0x14>)
 80081aa:	f000 b869 	b.w	8008280 <_fwalk_sglue>
 80081ae:	bf00      	nop
 80081b0:	20000010 	.word	0x20000010
 80081b4:	08008dc1 	.word	0x08008dc1
 80081b8:	20000020 	.word	0x20000020

080081bc <cleanup_stdio>:
 80081bc:	6841      	ldr	r1, [r0, #4]
 80081be:	4b0c      	ldr	r3, [pc, #48]	@ (80081f0 <cleanup_stdio+0x34>)
 80081c0:	4299      	cmp	r1, r3
 80081c2:	b510      	push	{r4, lr}
 80081c4:	4604      	mov	r4, r0
 80081c6:	d001      	beq.n	80081cc <cleanup_stdio+0x10>
 80081c8:	f000 fdfa 	bl	8008dc0 <_fflush_r>
 80081cc:	68a1      	ldr	r1, [r4, #8]
 80081ce:	4b09      	ldr	r3, [pc, #36]	@ (80081f4 <cleanup_stdio+0x38>)
 80081d0:	4299      	cmp	r1, r3
 80081d2:	d002      	beq.n	80081da <cleanup_stdio+0x1e>
 80081d4:	4620      	mov	r0, r4
 80081d6:	f000 fdf3 	bl	8008dc0 <_fflush_r>
 80081da:	68e1      	ldr	r1, [r4, #12]
 80081dc:	4b06      	ldr	r3, [pc, #24]	@ (80081f8 <cleanup_stdio+0x3c>)
 80081de:	4299      	cmp	r1, r3
 80081e0:	d004      	beq.n	80081ec <cleanup_stdio+0x30>
 80081e2:	4620      	mov	r0, r4
 80081e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081e8:	f000 bdea 	b.w	8008dc0 <_fflush_r>
 80081ec:	bd10      	pop	{r4, pc}
 80081ee:	bf00      	nop
 80081f0:	20004934 	.word	0x20004934
 80081f4:	2000499c 	.word	0x2000499c
 80081f8:	20004a04 	.word	0x20004a04

080081fc <global_stdio_init.part.0>:
 80081fc:	b510      	push	{r4, lr}
 80081fe:	4b0b      	ldr	r3, [pc, #44]	@ (800822c <global_stdio_init.part.0+0x30>)
 8008200:	4c0b      	ldr	r4, [pc, #44]	@ (8008230 <global_stdio_init.part.0+0x34>)
 8008202:	4a0c      	ldr	r2, [pc, #48]	@ (8008234 <global_stdio_init.part.0+0x38>)
 8008204:	601a      	str	r2, [r3, #0]
 8008206:	4620      	mov	r0, r4
 8008208:	2200      	movs	r2, #0
 800820a:	2104      	movs	r1, #4
 800820c:	f7ff ff94 	bl	8008138 <std>
 8008210:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008214:	2201      	movs	r2, #1
 8008216:	2109      	movs	r1, #9
 8008218:	f7ff ff8e 	bl	8008138 <std>
 800821c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008220:	2202      	movs	r2, #2
 8008222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008226:	2112      	movs	r1, #18
 8008228:	f7ff bf86 	b.w	8008138 <std>
 800822c:	20004a6c 	.word	0x20004a6c
 8008230:	20004934 	.word	0x20004934
 8008234:	080081a5 	.word	0x080081a5

08008238 <__sfp_lock_acquire>:
 8008238:	4801      	ldr	r0, [pc, #4]	@ (8008240 <__sfp_lock_acquire+0x8>)
 800823a:	f000 b964 	b.w	8008506 <__retarget_lock_acquire_recursive>
 800823e:	bf00      	nop
 8008240:	20004a75 	.word	0x20004a75

08008244 <__sfp_lock_release>:
 8008244:	4801      	ldr	r0, [pc, #4]	@ (800824c <__sfp_lock_release+0x8>)
 8008246:	f000 b95f 	b.w	8008508 <__retarget_lock_release_recursive>
 800824a:	bf00      	nop
 800824c:	20004a75 	.word	0x20004a75

08008250 <__sinit>:
 8008250:	b510      	push	{r4, lr}
 8008252:	4604      	mov	r4, r0
 8008254:	f7ff fff0 	bl	8008238 <__sfp_lock_acquire>
 8008258:	6a23      	ldr	r3, [r4, #32]
 800825a:	b11b      	cbz	r3, 8008264 <__sinit+0x14>
 800825c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008260:	f7ff bff0 	b.w	8008244 <__sfp_lock_release>
 8008264:	4b04      	ldr	r3, [pc, #16]	@ (8008278 <__sinit+0x28>)
 8008266:	6223      	str	r3, [r4, #32]
 8008268:	4b04      	ldr	r3, [pc, #16]	@ (800827c <__sinit+0x2c>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d1f5      	bne.n	800825c <__sinit+0xc>
 8008270:	f7ff ffc4 	bl	80081fc <global_stdio_init.part.0>
 8008274:	e7f2      	b.n	800825c <__sinit+0xc>
 8008276:	bf00      	nop
 8008278:	080081bd 	.word	0x080081bd
 800827c:	20004a6c 	.word	0x20004a6c

08008280 <_fwalk_sglue>:
 8008280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008284:	4607      	mov	r7, r0
 8008286:	4688      	mov	r8, r1
 8008288:	4614      	mov	r4, r2
 800828a:	2600      	movs	r6, #0
 800828c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008290:	f1b9 0901 	subs.w	r9, r9, #1
 8008294:	d505      	bpl.n	80082a2 <_fwalk_sglue+0x22>
 8008296:	6824      	ldr	r4, [r4, #0]
 8008298:	2c00      	cmp	r4, #0
 800829a:	d1f7      	bne.n	800828c <_fwalk_sglue+0xc>
 800829c:	4630      	mov	r0, r6
 800829e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082a2:	89ab      	ldrh	r3, [r5, #12]
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d907      	bls.n	80082b8 <_fwalk_sglue+0x38>
 80082a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80082ac:	3301      	adds	r3, #1
 80082ae:	d003      	beq.n	80082b8 <_fwalk_sglue+0x38>
 80082b0:	4629      	mov	r1, r5
 80082b2:	4638      	mov	r0, r7
 80082b4:	47c0      	blx	r8
 80082b6:	4306      	orrs	r6, r0
 80082b8:	3568      	adds	r5, #104	@ 0x68
 80082ba:	e7e9      	b.n	8008290 <_fwalk_sglue+0x10>

080082bc <iprintf>:
 80082bc:	b40f      	push	{r0, r1, r2, r3}
 80082be:	b507      	push	{r0, r1, r2, lr}
 80082c0:	4906      	ldr	r1, [pc, #24]	@ (80082dc <iprintf+0x20>)
 80082c2:	ab04      	add	r3, sp, #16
 80082c4:	6808      	ldr	r0, [r1, #0]
 80082c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80082ca:	6881      	ldr	r1, [r0, #8]
 80082cc:	9301      	str	r3, [sp, #4]
 80082ce:	f000 fa4d 	bl	800876c <_vfiprintf_r>
 80082d2:	b003      	add	sp, #12
 80082d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80082d8:	b004      	add	sp, #16
 80082da:	4770      	bx	lr
 80082dc:	2000001c 	.word	0x2000001c

080082e0 <__sread>:
 80082e0:	b510      	push	{r4, lr}
 80082e2:	460c      	mov	r4, r1
 80082e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082e8:	f000 f8be 	bl	8008468 <_read_r>
 80082ec:	2800      	cmp	r0, #0
 80082ee:	bfab      	itete	ge
 80082f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80082f2:	89a3      	ldrhlt	r3, [r4, #12]
 80082f4:	181b      	addge	r3, r3, r0
 80082f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80082fa:	bfac      	ite	ge
 80082fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80082fe:	81a3      	strhlt	r3, [r4, #12]
 8008300:	bd10      	pop	{r4, pc}

08008302 <__swrite>:
 8008302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008306:	461f      	mov	r7, r3
 8008308:	898b      	ldrh	r3, [r1, #12]
 800830a:	05db      	lsls	r3, r3, #23
 800830c:	4605      	mov	r5, r0
 800830e:	460c      	mov	r4, r1
 8008310:	4616      	mov	r6, r2
 8008312:	d505      	bpl.n	8008320 <__swrite+0x1e>
 8008314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008318:	2302      	movs	r3, #2
 800831a:	2200      	movs	r2, #0
 800831c:	f000 f892 	bl	8008444 <_lseek_r>
 8008320:	89a3      	ldrh	r3, [r4, #12]
 8008322:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008326:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800832a:	81a3      	strh	r3, [r4, #12]
 800832c:	4632      	mov	r2, r6
 800832e:	463b      	mov	r3, r7
 8008330:	4628      	mov	r0, r5
 8008332:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008336:	f000 b8a9 	b.w	800848c <_write_r>

0800833a <__sseek>:
 800833a:	b510      	push	{r4, lr}
 800833c:	460c      	mov	r4, r1
 800833e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008342:	f000 f87f 	bl	8008444 <_lseek_r>
 8008346:	1c43      	adds	r3, r0, #1
 8008348:	89a3      	ldrh	r3, [r4, #12]
 800834a:	bf15      	itete	ne
 800834c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800834e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008352:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008356:	81a3      	strheq	r3, [r4, #12]
 8008358:	bf18      	it	ne
 800835a:	81a3      	strhne	r3, [r4, #12]
 800835c:	bd10      	pop	{r4, pc}

0800835e <__sclose>:
 800835e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008362:	f000 b809 	b.w	8008378 <_close_r>

08008366 <memset>:
 8008366:	4402      	add	r2, r0
 8008368:	4603      	mov	r3, r0
 800836a:	4293      	cmp	r3, r2
 800836c:	d100      	bne.n	8008370 <memset+0xa>
 800836e:	4770      	bx	lr
 8008370:	f803 1b01 	strb.w	r1, [r3], #1
 8008374:	e7f9      	b.n	800836a <memset+0x4>
	...

08008378 <_close_r>:
 8008378:	b538      	push	{r3, r4, r5, lr}
 800837a:	4d06      	ldr	r5, [pc, #24]	@ (8008394 <_close_r+0x1c>)
 800837c:	2300      	movs	r3, #0
 800837e:	4604      	mov	r4, r0
 8008380:	4608      	mov	r0, r1
 8008382:	602b      	str	r3, [r5, #0]
 8008384:	f7f9 f9af 	bl	80016e6 <_close>
 8008388:	1c43      	adds	r3, r0, #1
 800838a:	d102      	bne.n	8008392 <_close_r+0x1a>
 800838c:	682b      	ldr	r3, [r5, #0]
 800838e:	b103      	cbz	r3, 8008392 <_close_r+0x1a>
 8008390:	6023      	str	r3, [r4, #0]
 8008392:	bd38      	pop	{r3, r4, r5, pc}
 8008394:	20004a70 	.word	0x20004a70

08008398 <_reclaim_reent>:
 8008398:	4b29      	ldr	r3, [pc, #164]	@ (8008440 <_reclaim_reent+0xa8>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4283      	cmp	r3, r0
 800839e:	b570      	push	{r4, r5, r6, lr}
 80083a0:	4604      	mov	r4, r0
 80083a2:	d04b      	beq.n	800843c <_reclaim_reent+0xa4>
 80083a4:	69c3      	ldr	r3, [r0, #28]
 80083a6:	b1ab      	cbz	r3, 80083d4 <_reclaim_reent+0x3c>
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	b16b      	cbz	r3, 80083c8 <_reclaim_reent+0x30>
 80083ac:	2500      	movs	r5, #0
 80083ae:	69e3      	ldr	r3, [r4, #28]
 80083b0:	68db      	ldr	r3, [r3, #12]
 80083b2:	5959      	ldr	r1, [r3, r5]
 80083b4:	2900      	cmp	r1, #0
 80083b6:	d13b      	bne.n	8008430 <_reclaim_reent+0x98>
 80083b8:	3504      	adds	r5, #4
 80083ba:	2d80      	cmp	r5, #128	@ 0x80
 80083bc:	d1f7      	bne.n	80083ae <_reclaim_reent+0x16>
 80083be:	69e3      	ldr	r3, [r4, #28]
 80083c0:	4620      	mov	r0, r4
 80083c2:	68d9      	ldr	r1, [r3, #12]
 80083c4:	f000 f8b0 	bl	8008528 <_free_r>
 80083c8:	69e3      	ldr	r3, [r4, #28]
 80083ca:	6819      	ldr	r1, [r3, #0]
 80083cc:	b111      	cbz	r1, 80083d4 <_reclaim_reent+0x3c>
 80083ce:	4620      	mov	r0, r4
 80083d0:	f000 f8aa 	bl	8008528 <_free_r>
 80083d4:	6961      	ldr	r1, [r4, #20]
 80083d6:	b111      	cbz	r1, 80083de <_reclaim_reent+0x46>
 80083d8:	4620      	mov	r0, r4
 80083da:	f000 f8a5 	bl	8008528 <_free_r>
 80083de:	69e1      	ldr	r1, [r4, #28]
 80083e0:	b111      	cbz	r1, 80083e8 <_reclaim_reent+0x50>
 80083e2:	4620      	mov	r0, r4
 80083e4:	f000 f8a0 	bl	8008528 <_free_r>
 80083e8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80083ea:	b111      	cbz	r1, 80083f2 <_reclaim_reent+0x5a>
 80083ec:	4620      	mov	r0, r4
 80083ee:	f000 f89b 	bl	8008528 <_free_r>
 80083f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083f4:	b111      	cbz	r1, 80083fc <_reclaim_reent+0x64>
 80083f6:	4620      	mov	r0, r4
 80083f8:	f000 f896 	bl	8008528 <_free_r>
 80083fc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80083fe:	b111      	cbz	r1, 8008406 <_reclaim_reent+0x6e>
 8008400:	4620      	mov	r0, r4
 8008402:	f000 f891 	bl	8008528 <_free_r>
 8008406:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008408:	b111      	cbz	r1, 8008410 <_reclaim_reent+0x78>
 800840a:	4620      	mov	r0, r4
 800840c:	f000 f88c 	bl	8008528 <_free_r>
 8008410:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008412:	b111      	cbz	r1, 800841a <_reclaim_reent+0x82>
 8008414:	4620      	mov	r0, r4
 8008416:	f000 f887 	bl	8008528 <_free_r>
 800841a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800841c:	b111      	cbz	r1, 8008424 <_reclaim_reent+0x8c>
 800841e:	4620      	mov	r0, r4
 8008420:	f000 f882 	bl	8008528 <_free_r>
 8008424:	6a23      	ldr	r3, [r4, #32]
 8008426:	b14b      	cbz	r3, 800843c <_reclaim_reent+0xa4>
 8008428:	4620      	mov	r0, r4
 800842a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800842e:	4718      	bx	r3
 8008430:	680e      	ldr	r6, [r1, #0]
 8008432:	4620      	mov	r0, r4
 8008434:	f000 f878 	bl	8008528 <_free_r>
 8008438:	4631      	mov	r1, r6
 800843a:	e7bb      	b.n	80083b4 <_reclaim_reent+0x1c>
 800843c:	bd70      	pop	{r4, r5, r6, pc}
 800843e:	bf00      	nop
 8008440:	2000001c 	.word	0x2000001c

08008444 <_lseek_r>:
 8008444:	b538      	push	{r3, r4, r5, lr}
 8008446:	4d07      	ldr	r5, [pc, #28]	@ (8008464 <_lseek_r+0x20>)
 8008448:	4604      	mov	r4, r0
 800844a:	4608      	mov	r0, r1
 800844c:	4611      	mov	r1, r2
 800844e:	2200      	movs	r2, #0
 8008450:	602a      	str	r2, [r5, #0]
 8008452:	461a      	mov	r2, r3
 8008454:	f7f9 f96e 	bl	8001734 <_lseek>
 8008458:	1c43      	adds	r3, r0, #1
 800845a:	d102      	bne.n	8008462 <_lseek_r+0x1e>
 800845c:	682b      	ldr	r3, [r5, #0]
 800845e:	b103      	cbz	r3, 8008462 <_lseek_r+0x1e>
 8008460:	6023      	str	r3, [r4, #0]
 8008462:	bd38      	pop	{r3, r4, r5, pc}
 8008464:	20004a70 	.word	0x20004a70

08008468 <_read_r>:
 8008468:	b538      	push	{r3, r4, r5, lr}
 800846a:	4d07      	ldr	r5, [pc, #28]	@ (8008488 <_read_r+0x20>)
 800846c:	4604      	mov	r4, r0
 800846e:	4608      	mov	r0, r1
 8008470:	4611      	mov	r1, r2
 8008472:	2200      	movs	r2, #0
 8008474:	602a      	str	r2, [r5, #0]
 8008476:	461a      	mov	r2, r3
 8008478:	f7f9 f8fc 	bl	8001674 <_read>
 800847c:	1c43      	adds	r3, r0, #1
 800847e:	d102      	bne.n	8008486 <_read_r+0x1e>
 8008480:	682b      	ldr	r3, [r5, #0]
 8008482:	b103      	cbz	r3, 8008486 <_read_r+0x1e>
 8008484:	6023      	str	r3, [r4, #0]
 8008486:	bd38      	pop	{r3, r4, r5, pc}
 8008488:	20004a70 	.word	0x20004a70

0800848c <_write_r>:
 800848c:	b538      	push	{r3, r4, r5, lr}
 800848e:	4d07      	ldr	r5, [pc, #28]	@ (80084ac <_write_r+0x20>)
 8008490:	4604      	mov	r4, r0
 8008492:	4608      	mov	r0, r1
 8008494:	4611      	mov	r1, r2
 8008496:	2200      	movs	r2, #0
 8008498:	602a      	str	r2, [r5, #0]
 800849a:	461a      	mov	r2, r3
 800849c:	f7f9 f907 	bl	80016ae <_write>
 80084a0:	1c43      	adds	r3, r0, #1
 80084a2:	d102      	bne.n	80084aa <_write_r+0x1e>
 80084a4:	682b      	ldr	r3, [r5, #0]
 80084a6:	b103      	cbz	r3, 80084aa <_write_r+0x1e>
 80084a8:	6023      	str	r3, [r4, #0]
 80084aa:	bd38      	pop	{r3, r4, r5, pc}
 80084ac:	20004a70 	.word	0x20004a70

080084b0 <__errno>:
 80084b0:	4b01      	ldr	r3, [pc, #4]	@ (80084b8 <__errno+0x8>)
 80084b2:	6818      	ldr	r0, [r3, #0]
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop
 80084b8:	2000001c 	.word	0x2000001c

080084bc <__libc_init_array>:
 80084bc:	b570      	push	{r4, r5, r6, lr}
 80084be:	4d0d      	ldr	r5, [pc, #52]	@ (80084f4 <__libc_init_array+0x38>)
 80084c0:	4c0d      	ldr	r4, [pc, #52]	@ (80084f8 <__libc_init_array+0x3c>)
 80084c2:	1b64      	subs	r4, r4, r5
 80084c4:	10a4      	asrs	r4, r4, #2
 80084c6:	2600      	movs	r6, #0
 80084c8:	42a6      	cmp	r6, r4
 80084ca:	d109      	bne.n	80084e0 <__libc_init_array+0x24>
 80084cc:	4d0b      	ldr	r5, [pc, #44]	@ (80084fc <__libc_init_array+0x40>)
 80084ce:	4c0c      	ldr	r4, [pc, #48]	@ (8008500 <__libc_init_array+0x44>)
 80084d0:	f000 fdc6 	bl	8009060 <_init>
 80084d4:	1b64      	subs	r4, r4, r5
 80084d6:	10a4      	asrs	r4, r4, #2
 80084d8:	2600      	movs	r6, #0
 80084da:	42a6      	cmp	r6, r4
 80084dc:	d105      	bne.n	80084ea <__libc_init_array+0x2e>
 80084de:	bd70      	pop	{r4, r5, r6, pc}
 80084e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80084e4:	4798      	blx	r3
 80084e6:	3601      	adds	r6, #1
 80084e8:	e7ee      	b.n	80084c8 <__libc_init_array+0xc>
 80084ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ee:	4798      	blx	r3
 80084f0:	3601      	adds	r6, #1
 80084f2:	e7f2      	b.n	80084da <__libc_init_array+0x1e>
 80084f4:	08009154 	.word	0x08009154
 80084f8:	08009154 	.word	0x08009154
 80084fc:	08009154 	.word	0x08009154
 8008500:	08009158 	.word	0x08009158

08008504 <__retarget_lock_init_recursive>:
 8008504:	4770      	bx	lr

08008506 <__retarget_lock_acquire_recursive>:
 8008506:	4770      	bx	lr

08008508 <__retarget_lock_release_recursive>:
 8008508:	4770      	bx	lr

0800850a <memcpy>:
 800850a:	440a      	add	r2, r1
 800850c:	4291      	cmp	r1, r2
 800850e:	f100 33ff 	add.w	r3, r0, #4294967295
 8008512:	d100      	bne.n	8008516 <memcpy+0xc>
 8008514:	4770      	bx	lr
 8008516:	b510      	push	{r4, lr}
 8008518:	f811 4b01 	ldrb.w	r4, [r1], #1
 800851c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008520:	4291      	cmp	r1, r2
 8008522:	d1f9      	bne.n	8008518 <memcpy+0xe>
 8008524:	bd10      	pop	{r4, pc}
	...

08008528 <_free_r>:
 8008528:	b538      	push	{r3, r4, r5, lr}
 800852a:	4605      	mov	r5, r0
 800852c:	2900      	cmp	r1, #0
 800852e:	d041      	beq.n	80085b4 <_free_r+0x8c>
 8008530:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008534:	1f0c      	subs	r4, r1, #4
 8008536:	2b00      	cmp	r3, #0
 8008538:	bfb8      	it	lt
 800853a:	18e4      	addlt	r4, r4, r3
 800853c:	f000 f8e0 	bl	8008700 <__malloc_lock>
 8008540:	4a1d      	ldr	r2, [pc, #116]	@ (80085b8 <_free_r+0x90>)
 8008542:	6813      	ldr	r3, [r2, #0]
 8008544:	b933      	cbnz	r3, 8008554 <_free_r+0x2c>
 8008546:	6063      	str	r3, [r4, #4]
 8008548:	6014      	str	r4, [r2, #0]
 800854a:	4628      	mov	r0, r5
 800854c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008550:	f000 b8dc 	b.w	800870c <__malloc_unlock>
 8008554:	42a3      	cmp	r3, r4
 8008556:	d908      	bls.n	800856a <_free_r+0x42>
 8008558:	6820      	ldr	r0, [r4, #0]
 800855a:	1821      	adds	r1, r4, r0
 800855c:	428b      	cmp	r3, r1
 800855e:	bf01      	itttt	eq
 8008560:	6819      	ldreq	r1, [r3, #0]
 8008562:	685b      	ldreq	r3, [r3, #4]
 8008564:	1809      	addeq	r1, r1, r0
 8008566:	6021      	streq	r1, [r4, #0]
 8008568:	e7ed      	b.n	8008546 <_free_r+0x1e>
 800856a:	461a      	mov	r2, r3
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	b10b      	cbz	r3, 8008574 <_free_r+0x4c>
 8008570:	42a3      	cmp	r3, r4
 8008572:	d9fa      	bls.n	800856a <_free_r+0x42>
 8008574:	6811      	ldr	r1, [r2, #0]
 8008576:	1850      	adds	r0, r2, r1
 8008578:	42a0      	cmp	r0, r4
 800857a:	d10b      	bne.n	8008594 <_free_r+0x6c>
 800857c:	6820      	ldr	r0, [r4, #0]
 800857e:	4401      	add	r1, r0
 8008580:	1850      	adds	r0, r2, r1
 8008582:	4283      	cmp	r3, r0
 8008584:	6011      	str	r1, [r2, #0]
 8008586:	d1e0      	bne.n	800854a <_free_r+0x22>
 8008588:	6818      	ldr	r0, [r3, #0]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	6053      	str	r3, [r2, #4]
 800858e:	4408      	add	r0, r1
 8008590:	6010      	str	r0, [r2, #0]
 8008592:	e7da      	b.n	800854a <_free_r+0x22>
 8008594:	d902      	bls.n	800859c <_free_r+0x74>
 8008596:	230c      	movs	r3, #12
 8008598:	602b      	str	r3, [r5, #0]
 800859a:	e7d6      	b.n	800854a <_free_r+0x22>
 800859c:	6820      	ldr	r0, [r4, #0]
 800859e:	1821      	adds	r1, r4, r0
 80085a0:	428b      	cmp	r3, r1
 80085a2:	bf04      	itt	eq
 80085a4:	6819      	ldreq	r1, [r3, #0]
 80085a6:	685b      	ldreq	r3, [r3, #4]
 80085a8:	6063      	str	r3, [r4, #4]
 80085aa:	bf04      	itt	eq
 80085ac:	1809      	addeq	r1, r1, r0
 80085ae:	6021      	streq	r1, [r4, #0]
 80085b0:	6054      	str	r4, [r2, #4]
 80085b2:	e7ca      	b.n	800854a <_free_r+0x22>
 80085b4:	bd38      	pop	{r3, r4, r5, pc}
 80085b6:	bf00      	nop
 80085b8:	20004a7c 	.word	0x20004a7c

080085bc <sbrk_aligned>:
 80085bc:	b570      	push	{r4, r5, r6, lr}
 80085be:	4e0f      	ldr	r6, [pc, #60]	@ (80085fc <sbrk_aligned+0x40>)
 80085c0:	460c      	mov	r4, r1
 80085c2:	6831      	ldr	r1, [r6, #0]
 80085c4:	4605      	mov	r5, r0
 80085c6:	b911      	cbnz	r1, 80085ce <sbrk_aligned+0x12>
 80085c8:	f000 fcb6 	bl	8008f38 <_sbrk_r>
 80085cc:	6030      	str	r0, [r6, #0]
 80085ce:	4621      	mov	r1, r4
 80085d0:	4628      	mov	r0, r5
 80085d2:	f000 fcb1 	bl	8008f38 <_sbrk_r>
 80085d6:	1c43      	adds	r3, r0, #1
 80085d8:	d103      	bne.n	80085e2 <sbrk_aligned+0x26>
 80085da:	f04f 34ff 	mov.w	r4, #4294967295
 80085de:	4620      	mov	r0, r4
 80085e0:	bd70      	pop	{r4, r5, r6, pc}
 80085e2:	1cc4      	adds	r4, r0, #3
 80085e4:	f024 0403 	bic.w	r4, r4, #3
 80085e8:	42a0      	cmp	r0, r4
 80085ea:	d0f8      	beq.n	80085de <sbrk_aligned+0x22>
 80085ec:	1a21      	subs	r1, r4, r0
 80085ee:	4628      	mov	r0, r5
 80085f0:	f000 fca2 	bl	8008f38 <_sbrk_r>
 80085f4:	3001      	adds	r0, #1
 80085f6:	d1f2      	bne.n	80085de <sbrk_aligned+0x22>
 80085f8:	e7ef      	b.n	80085da <sbrk_aligned+0x1e>
 80085fa:	bf00      	nop
 80085fc:	20004a78 	.word	0x20004a78

08008600 <_malloc_r>:
 8008600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008604:	1ccd      	adds	r5, r1, #3
 8008606:	f025 0503 	bic.w	r5, r5, #3
 800860a:	3508      	adds	r5, #8
 800860c:	2d0c      	cmp	r5, #12
 800860e:	bf38      	it	cc
 8008610:	250c      	movcc	r5, #12
 8008612:	2d00      	cmp	r5, #0
 8008614:	4606      	mov	r6, r0
 8008616:	db01      	blt.n	800861c <_malloc_r+0x1c>
 8008618:	42a9      	cmp	r1, r5
 800861a:	d904      	bls.n	8008626 <_malloc_r+0x26>
 800861c:	230c      	movs	r3, #12
 800861e:	6033      	str	r3, [r6, #0]
 8008620:	2000      	movs	r0, #0
 8008622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008626:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80086fc <_malloc_r+0xfc>
 800862a:	f000 f869 	bl	8008700 <__malloc_lock>
 800862e:	f8d8 3000 	ldr.w	r3, [r8]
 8008632:	461c      	mov	r4, r3
 8008634:	bb44      	cbnz	r4, 8008688 <_malloc_r+0x88>
 8008636:	4629      	mov	r1, r5
 8008638:	4630      	mov	r0, r6
 800863a:	f7ff ffbf 	bl	80085bc <sbrk_aligned>
 800863e:	1c43      	adds	r3, r0, #1
 8008640:	4604      	mov	r4, r0
 8008642:	d158      	bne.n	80086f6 <_malloc_r+0xf6>
 8008644:	f8d8 4000 	ldr.w	r4, [r8]
 8008648:	4627      	mov	r7, r4
 800864a:	2f00      	cmp	r7, #0
 800864c:	d143      	bne.n	80086d6 <_malloc_r+0xd6>
 800864e:	2c00      	cmp	r4, #0
 8008650:	d04b      	beq.n	80086ea <_malloc_r+0xea>
 8008652:	6823      	ldr	r3, [r4, #0]
 8008654:	4639      	mov	r1, r7
 8008656:	4630      	mov	r0, r6
 8008658:	eb04 0903 	add.w	r9, r4, r3
 800865c:	f000 fc6c 	bl	8008f38 <_sbrk_r>
 8008660:	4581      	cmp	r9, r0
 8008662:	d142      	bne.n	80086ea <_malloc_r+0xea>
 8008664:	6821      	ldr	r1, [r4, #0]
 8008666:	1a6d      	subs	r5, r5, r1
 8008668:	4629      	mov	r1, r5
 800866a:	4630      	mov	r0, r6
 800866c:	f7ff ffa6 	bl	80085bc <sbrk_aligned>
 8008670:	3001      	adds	r0, #1
 8008672:	d03a      	beq.n	80086ea <_malloc_r+0xea>
 8008674:	6823      	ldr	r3, [r4, #0]
 8008676:	442b      	add	r3, r5
 8008678:	6023      	str	r3, [r4, #0]
 800867a:	f8d8 3000 	ldr.w	r3, [r8]
 800867e:	685a      	ldr	r2, [r3, #4]
 8008680:	bb62      	cbnz	r2, 80086dc <_malloc_r+0xdc>
 8008682:	f8c8 7000 	str.w	r7, [r8]
 8008686:	e00f      	b.n	80086a8 <_malloc_r+0xa8>
 8008688:	6822      	ldr	r2, [r4, #0]
 800868a:	1b52      	subs	r2, r2, r5
 800868c:	d420      	bmi.n	80086d0 <_malloc_r+0xd0>
 800868e:	2a0b      	cmp	r2, #11
 8008690:	d917      	bls.n	80086c2 <_malloc_r+0xc2>
 8008692:	1961      	adds	r1, r4, r5
 8008694:	42a3      	cmp	r3, r4
 8008696:	6025      	str	r5, [r4, #0]
 8008698:	bf18      	it	ne
 800869a:	6059      	strne	r1, [r3, #4]
 800869c:	6863      	ldr	r3, [r4, #4]
 800869e:	bf08      	it	eq
 80086a0:	f8c8 1000 	streq.w	r1, [r8]
 80086a4:	5162      	str	r2, [r4, r5]
 80086a6:	604b      	str	r3, [r1, #4]
 80086a8:	4630      	mov	r0, r6
 80086aa:	f000 f82f 	bl	800870c <__malloc_unlock>
 80086ae:	f104 000b 	add.w	r0, r4, #11
 80086b2:	1d23      	adds	r3, r4, #4
 80086b4:	f020 0007 	bic.w	r0, r0, #7
 80086b8:	1ac2      	subs	r2, r0, r3
 80086ba:	bf1c      	itt	ne
 80086bc:	1a1b      	subne	r3, r3, r0
 80086be:	50a3      	strne	r3, [r4, r2]
 80086c0:	e7af      	b.n	8008622 <_malloc_r+0x22>
 80086c2:	6862      	ldr	r2, [r4, #4]
 80086c4:	42a3      	cmp	r3, r4
 80086c6:	bf0c      	ite	eq
 80086c8:	f8c8 2000 	streq.w	r2, [r8]
 80086cc:	605a      	strne	r2, [r3, #4]
 80086ce:	e7eb      	b.n	80086a8 <_malloc_r+0xa8>
 80086d0:	4623      	mov	r3, r4
 80086d2:	6864      	ldr	r4, [r4, #4]
 80086d4:	e7ae      	b.n	8008634 <_malloc_r+0x34>
 80086d6:	463c      	mov	r4, r7
 80086d8:	687f      	ldr	r7, [r7, #4]
 80086da:	e7b6      	b.n	800864a <_malloc_r+0x4a>
 80086dc:	461a      	mov	r2, r3
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	42a3      	cmp	r3, r4
 80086e2:	d1fb      	bne.n	80086dc <_malloc_r+0xdc>
 80086e4:	2300      	movs	r3, #0
 80086e6:	6053      	str	r3, [r2, #4]
 80086e8:	e7de      	b.n	80086a8 <_malloc_r+0xa8>
 80086ea:	230c      	movs	r3, #12
 80086ec:	6033      	str	r3, [r6, #0]
 80086ee:	4630      	mov	r0, r6
 80086f0:	f000 f80c 	bl	800870c <__malloc_unlock>
 80086f4:	e794      	b.n	8008620 <_malloc_r+0x20>
 80086f6:	6005      	str	r5, [r0, #0]
 80086f8:	e7d6      	b.n	80086a8 <_malloc_r+0xa8>
 80086fa:	bf00      	nop
 80086fc:	20004a7c 	.word	0x20004a7c

08008700 <__malloc_lock>:
 8008700:	4801      	ldr	r0, [pc, #4]	@ (8008708 <__malloc_lock+0x8>)
 8008702:	f7ff bf00 	b.w	8008506 <__retarget_lock_acquire_recursive>
 8008706:	bf00      	nop
 8008708:	20004a74 	.word	0x20004a74

0800870c <__malloc_unlock>:
 800870c:	4801      	ldr	r0, [pc, #4]	@ (8008714 <__malloc_unlock+0x8>)
 800870e:	f7ff befb 	b.w	8008508 <__retarget_lock_release_recursive>
 8008712:	bf00      	nop
 8008714:	20004a74 	.word	0x20004a74

08008718 <__sfputc_r>:
 8008718:	6893      	ldr	r3, [r2, #8]
 800871a:	3b01      	subs	r3, #1
 800871c:	2b00      	cmp	r3, #0
 800871e:	b410      	push	{r4}
 8008720:	6093      	str	r3, [r2, #8]
 8008722:	da08      	bge.n	8008736 <__sfputc_r+0x1e>
 8008724:	6994      	ldr	r4, [r2, #24]
 8008726:	42a3      	cmp	r3, r4
 8008728:	db01      	blt.n	800872e <__sfputc_r+0x16>
 800872a:	290a      	cmp	r1, #10
 800872c:	d103      	bne.n	8008736 <__sfputc_r+0x1e>
 800872e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008732:	f000 bb6d 	b.w	8008e10 <__swbuf_r>
 8008736:	6813      	ldr	r3, [r2, #0]
 8008738:	1c58      	adds	r0, r3, #1
 800873a:	6010      	str	r0, [r2, #0]
 800873c:	7019      	strb	r1, [r3, #0]
 800873e:	4608      	mov	r0, r1
 8008740:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008744:	4770      	bx	lr

08008746 <__sfputs_r>:
 8008746:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008748:	4606      	mov	r6, r0
 800874a:	460f      	mov	r7, r1
 800874c:	4614      	mov	r4, r2
 800874e:	18d5      	adds	r5, r2, r3
 8008750:	42ac      	cmp	r4, r5
 8008752:	d101      	bne.n	8008758 <__sfputs_r+0x12>
 8008754:	2000      	movs	r0, #0
 8008756:	e007      	b.n	8008768 <__sfputs_r+0x22>
 8008758:	f814 1b01 	ldrb.w	r1, [r4], #1
 800875c:	463a      	mov	r2, r7
 800875e:	4630      	mov	r0, r6
 8008760:	f7ff ffda 	bl	8008718 <__sfputc_r>
 8008764:	1c43      	adds	r3, r0, #1
 8008766:	d1f3      	bne.n	8008750 <__sfputs_r+0xa>
 8008768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800876c <_vfiprintf_r>:
 800876c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008770:	460d      	mov	r5, r1
 8008772:	b09d      	sub	sp, #116	@ 0x74
 8008774:	4614      	mov	r4, r2
 8008776:	4698      	mov	r8, r3
 8008778:	4606      	mov	r6, r0
 800877a:	b118      	cbz	r0, 8008784 <_vfiprintf_r+0x18>
 800877c:	6a03      	ldr	r3, [r0, #32]
 800877e:	b90b      	cbnz	r3, 8008784 <_vfiprintf_r+0x18>
 8008780:	f7ff fd66 	bl	8008250 <__sinit>
 8008784:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008786:	07d9      	lsls	r1, r3, #31
 8008788:	d405      	bmi.n	8008796 <_vfiprintf_r+0x2a>
 800878a:	89ab      	ldrh	r3, [r5, #12]
 800878c:	059a      	lsls	r2, r3, #22
 800878e:	d402      	bmi.n	8008796 <_vfiprintf_r+0x2a>
 8008790:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008792:	f7ff feb8 	bl	8008506 <__retarget_lock_acquire_recursive>
 8008796:	89ab      	ldrh	r3, [r5, #12]
 8008798:	071b      	lsls	r3, r3, #28
 800879a:	d501      	bpl.n	80087a0 <_vfiprintf_r+0x34>
 800879c:	692b      	ldr	r3, [r5, #16]
 800879e:	b99b      	cbnz	r3, 80087c8 <_vfiprintf_r+0x5c>
 80087a0:	4629      	mov	r1, r5
 80087a2:	4630      	mov	r0, r6
 80087a4:	f000 fb72 	bl	8008e8c <__swsetup_r>
 80087a8:	b170      	cbz	r0, 80087c8 <_vfiprintf_r+0x5c>
 80087aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087ac:	07dc      	lsls	r4, r3, #31
 80087ae:	d504      	bpl.n	80087ba <_vfiprintf_r+0x4e>
 80087b0:	f04f 30ff 	mov.w	r0, #4294967295
 80087b4:	b01d      	add	sp, #116	@ 0x74
 80087b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ba:	89ab      	ldrh	r3, [r5, #12]
 80087bc:	0598      	lsls	r0, r3, #22
 80087be:	d4f7      	bmi.n	80087b0 <_vfiprintf_r+0x44>
 80087c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087c2:	f7ff fea1 	bl	8008508 <__retarget_lock_release_recursive>
 80087c6:	e7f3      	b.n	80087b0 <_vfiprintf_r+0x44>
 80087c8:	2300      	movs	r3, #0
 80087ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80087cc:	2320      	movs	r3, #32
 80087ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80087d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80087d6:	2330      	movs	r3, #48	@ 0x30
 80087d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008988 <_vfiprintf_r+0x21c>
 80087dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80087e0:	f04f 0901 	mov.w	r9, #1
 80087e4:	4623      	mov	r3, r4
 80087e6:	469a      	mov	sl, r3
 80087e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087ec:	b10a      	cbz	r2, 80087f2 <_vfiprintf_r+0x86>
 80087ee:	2a25      	cmp	r2, #37	@ 0x25
 80087f0:	d1f9      	bne.n	80087e6 <_vfiprintf_r+0x7a>
 80087f2:	ebba 0b04 	subs.w	fp, sl, r4
 80087f6:	d00b      	beq.n	8008810 <_vfiprintf_r+0xa4>
 80087f8:	465b      	mov	r3, fp
 80087fa:	4622      	mov	r2, r4
 80087fc:	4629      	mov	r1, r5
 80087fe:	4630      	mov	r0, r6
 8008800:	f7ff ffa1 	bl	8008746 <__sfputs_r>
 8008804:	3001      	adds	r0, #1
 8008806:	f000 80a7 	beq.w	8008958 <_vfiprintf_r+0x1ec>
 800880a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800880c:	445a      	add	r2, fp
 800880e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008810:	f89a 3000 	ldrb.w	r3, [sl]
 8008814:	2b00      	cmp	r3, #0
 8008816:	f000 809f 	beq.w	8008958 <_vfiprintf_r+0x1ec>
 800881a:	2300      	movs	r3, #0
 800881c:	f04f 32ff 	mov.w	r2, #4294967295
 8008820:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008824:	f10a 0a01 	add.w	sl, sl, #1
 8008828:	9304      	str	r3, [sp, #16]
 800882a:	9307      	str	r3, [sp, #28]
 800882c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008830:	931a      	str	r3, [sp, #104]	@ 0x68
 8008832:	4654      	mov	r4, sl
 8008834:	2205      	movs	r2, #5
 8008836:	f814 1b01 	ldrb.w	r1, [r4], #1
 800883a:	4853      	ldr	r0, [pc, #332]	@ (8008988 <_vfiprintf_r+0x21c>)
 800883c:	f7f7 fcd8 	bl	80001f0 <memchr>
 8008840:	9a04      	ldr	r2, [sp, #16]
 8008842:	b9d8      	cbnz	r0, 800887c <_vfiprintf_r+0x110>
 8008844:	06d1      	lsls	r1, r2, #27
 8008846:	bf44      	itt	mi
 8008848:	2320      	movmi	r3, #32
 800884a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800884e:	0713      	lsls	r3, r2, #28
 8008850:	bf44      	itt	mi
 8008852:	232b      	movmi	r3, #43	@ 0x2b
 8008854:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008858:	f89a 3000 	ldrb.w	r3, [sl]
 800885c:	2b2a      	cmp	r3, #42	@ 0x2a
 800885e:	d015      	beq.n	800888c <_vfiprintf_r+0x120>
 8008860:	9a07      	ldr	r2, [sp, #28]
 8008862:	4654      	mov	r4, sl
 8008864:	2000      	movs	r0, #0
 8008866:	f04f 0c0a 	mov.w	ip, #10
 800886a:	4621      	mov	r1, r4
 800886c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008870:	3b30      	subs	r3, #48	@ 0x30
 8008872:	2b09      	cmp	r3, #9
 8008874:	d94b      	bls.n	800890e <_vfiprintf_r+0x1a2>
 8008876:	b1b0      	cbz	r0, 80088a6 <_vfiprintf_r+0x13a>
 8008878:	9207      	str	r2, [sp, #28]
 800887a:	e014      	b.n	80088a6 <_vfiprintf_r+0x13a>
 800887c:	eba0 0308 	sub.w	r3, r0, r8
 8008880:	fa09 f303 	lsl.w	r3, r9, r3
 8008884:	4313      	orrs	r3, r2
 8008886:	9304      	str	r3, [sp, #16]
 8008888:	46a2      	mov	sl, r4
 800888a:	e7d2      	b.n	8008832 <_vfiprintf_r+0xc6>
 800888c:	9b03      	ldr	r3, [sp, #12]
 800888e:	1d19      	adds	r1, r3, #4
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	9103      	str	r1, [sp, #12]
 8008894:	2b00      	cmp	r3, #0
 8008896:	bfbb      	ittet	lt
 8008898:	425b      	neglt	r3, r3
 800889a:	f042 0202 	orrlt.w	r2, r2, #2
 800889e:	9307      	strge	r3, [sp, #28]
 80088a0:	9307      	strlt	r3, [sp, #28]
 80088a2:	bfb8      	it	lt
 80088a4:	9204      	strlt	r2, [sp, #16]
 80088a6:	7823      	ldrb	r3, [r4, #0]
 80088a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80088aa:	d10a      	bne.n	80088c2 <_vfiprintf_r+0x156>
 80088ac:	7863      	ldrb	r3, [r4, #1]
 80088ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80088b0:	d132      	bne.n	8008918 <_vfiprintf_r+0x1ac>
 80088b2:	9b03      	ldr	r3, [sp, #12]
 80088b4:	1d1a      	adds	r2, r3, #4
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	9203      	str	r2, [sp, #12]
 80088ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80088be:	3402      	adds	r4, #2
 80088c0:	9305      	str	r3, [sp, #20]
 80088c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008998 <_vfiprintf_r+0x22c>
 80088c6:	7821      	ldrb	r1, [r4, #0]
 80088c8:	2203      	movs	r2, #3
 80088ca:	4650      	mov	r0, sl
 80088cc:	f7f7 fc90 	bl	80001f0 <memchr>
 80088d0:	b138      	cbz	r0, 80088e2 <_vfiprintf_r+0x176>
 80088d2:	9b04      	ldr	r3, [sp, #16]
 80088d4:	eba0 000a 	sub.w	r0, r0, sl
 80088d8:	2240      	movs	r2, #64	@ 0x40
 80088da:	4082      	lsls	r2, r0
 80088dc:	4313      	orrs	r3, r2
 80088de:	3401      	adds	r4, #1
 80088e0:	9304      	str	r3, [sp, #16]
 80088e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088e6:	4829      	ldr	r0, [pc, #164]	@ (800898c <_vfiprintf_r+0x220>)
 80088e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80088ec:	2206      	movs	r2, #6
 80088ee:	f7f7 fc7f 	bl	80001f0 <memchr>
 80088f2:	2800      	cmp	r0, #0
 80088f4:	d03f      	beq.n	8008976 <_vfiprintf_r+0x20a>
 80088f6:	4b26      	ldr	r3, [pc, #152]	@ (8008990 <_vfiprintf_r+0x224>)
 80088f8:	bb1b      	cbnz	r3, 8008942 <_vfiprintf_r+0x1d6>
 80088fa:	9b03      	ldr	r3, [sp, #12]
 80088fc:	3307      	adds	r3, #7
 80088fe:	f023 0307 	bic.w	r3, r3, #7
 8008902:	3308      	adds	r3, #8
 8008904:	9303      	str	r3, [sp, #12]
 8008906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008908:	443b      	add	r3, r7
 800890a:	9309      	str	r3, [sp, #36]	@ 0x24
 800890c:	e76a      	b.n	80087e4 <_vfiprintf_r+0x78>
 800890e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008912:	460c      	mov	r4, r1
 8008914:	2001      	movs	r0, #1
 8008916:	e7a8      	b.n	800886a <_vfiprintf_r+0xfe>
 8008918:	2300      	movs	r3, #0
 800891a:	3401      	adds	r4, #1
 800891c:	9305      	str	r3, [sp, #20]
 800891e:	4619      	mov	r1, r3
 8008920:	f04f 0c0a 	mov.w	ip, #10
 8008924:	4620      	mov	r0, r4
 8008926:	f810 2b01 	ldrb.w	r2, [r0], #1
 800892a:	3a30      	subs	r2, #48	@ 0x30
 800892c:	2a09      	cmp	r2, #9
 800892e:	d903      	bls.n	8008938 <_vfiprintf_r+0x1cc>
 8008930:	2b00      	cmp	r3, #0
 8008932:	d0c6      	beq.n	80088c2 <_vfiprintf_r+0x156>
 8008934:	9105      	str	r1, [sp, #20]
 8008936:	e7c4      	b.n	80088c2 <_vfiprintf_r+0x156>
 8008938:	fb0c 2101 	mla	r1, ip, r1, r2
 800893c:	4604      	mov	r4, r0
 800893e:	2301      	movs	r3, #1
 8008940:	e7f0      	b.n	8008924 <_vfiprintf_r+0x1b8>
 8008942:	ab03      	add	r3, sp, #12
 8008944:	9300      	str	r3, [sp, #0]
 8008946:	462a      	mov	r2, r5
 8008948:	4b12      	ldr	r3, [pc, #72]	@ (8008994 <_vfiprintf_r+0x228>)
 800894a:	a904      	add	r1, sp, #16
 800894c:	4630      	mov	r0, r6
 800894e:	f3af 8000 	nop.w
 8008952:	4607      	mov	r7, r0
 8008954:	1c78      	adds	r0, r7, #1
 8008956:	d1d6      	bne.n	8008906 <_vfiprintf_r+0x19a>
 8008958:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800895a:	07d9      	lsls	r1, r3, #31
 800895c:	d405      	bmi.n	800896a <_vfiprintf_r+0x1fe>
 800895e:	89ab      	ldrh	r3, [r5, #12]
 8008960:	059a      	lsls	r2, r3, #22
 8008962:	d402      	bmi.n	800896a <_vfiprintf_r+0x1fe>
 8008964:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008966:	f7ff fdcf 	bl	8008508 <__retarget_lock_release_recursive>
 800896a:	89ab      	ldrh	r3, [r5, #12]
 800896c:	065b      	lsls	r3, r3, #25
 800896e:	f53f af1f 	bmi.w	80087b0 <_vfiprintf_r+0x44>
 8008972:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008974:	e71e      	b.n	80087b4 <_vfiprintf_r+0x48>
 8008976:	ab03      	add	r3, sp, #12
 8008978:	9300      	str	r3, [sp, #0]
 800897a:	462a      	mov	r2, r5
 800897c:	4b05      	ldr	r3, [pc, #20]	@ (8008994 <_vfiprintf_r+0x228>)
 800897e:	a904      	add	r1, sp, #16
 8008980:	4630      	mov	r0, r6
 8008982:	f000 f879 	bl	8008a78 <_printf_i>
 8008986:	e7e4      	b.n	8008952 <_vfiprintf_r+0x1e6>
 8008988:	08009118 	.word	0x08009118
 800898c:	08009122 	.word	0x08009122
 8008990:	00000000 	.word	0x00000000
 8008994:	08008747 	.word	0x08008747
 8008998:	0800911e 	.word	0x0800911e

0800899c <_printf_common>:
 800899c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089a0:	4616      	mov	r6, r2
 80089a2:	4698      	mov	r8, r3
 80089a4:	688a      	ldr	r2, [r1, #8]
 80089a6:	690b      	ldr	r3, [r1, #16]
 80089a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80089ac:	4293      	cmp	r3, r2
 80089ae:	bfb8      	it	lt
 80089b0:	4613      	movlt	r3, r2
 80089b2:	6033      	str	r3, [r6, #0]
 80089b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80089b8:	4607      	mov	r7, r0
 80089ba:	460c      	mov	r4, r1
 80089bc:	b10a      	cbz	r2, 80089c2 <_printf_common+0x26>
 80089be:	3301      	adds	r3, #1
 80089c0:	6033      	str	r3, [r6, #0]
 80089c2:	6823      	ldr	r3, [r4, #0]
 80089c4:	0699      	lsls	r1, r3, #26
 80089c6:	bf42      	ittt	mi
 80089c8:	6833      	ldrmi	r3, [r6, #0]
 80089ca:	3302      	addmi	r3, #2
 80089cc:	6033      	strmi	r3, [r6, #0]
 80089ce:	6825      	ldr	r5, [r4, #0]
 80089d0:	f015 0506 	ands.w	r5, r5, #6
 80089d4:	d106      	bne.n	80089e4 <_printf_common+0x48>
 80089d6:	f104 0a19 	add.w	sl, r4, #25
 80089da:	68e3      	ldr	r3, [r4, #12]
 80089dc:	6832      	ldr	r2, [r6, #0]
 80089de:	1a9b      	subs	r3, r3, r2
 80089e0:	42ab      	cmp	r3, r5
 80089e2:	dc26      	bgt.n	8008a32 <_printf_common+0x96>
 80089e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80089e8:	6822      	ldr	r2, [r4, #0]
 80089ea:	3b00      	subs	r3, #0
 80089ec:	bf18      	it	ne
 80089ee:	2301      	movne	r3, #1
 80089f0:	0692      	lsls	r2, r2, #26
 80089f2:	d42b      	bmi.n	8008a4c <_printf_common+0xb0>
 80089f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80089f8:	4641      	mov	r1, r8
 80089fa:	4638      	mov	r0, r7
 80089fc:	47c8      	blx	r9
 80089fe:	3001      	adds	r0, #1
 8008a00:	d01e      	beq.n	8008a40 <_printf_common+0xa4>
 8008a02:	6823      	ldr	r3, [r4, #0]
 8008a04:	6922      	ldr	r2, [r4, #16]
 8008a06:	f003 0306 	and.w	r3, r3, #6
 8008a0a:	2b04      	cmp	r3, #4
 8008a0c:	bf02      	ittt	eq
 8008a0e:	68e5      	ldreq	r5, [r4, #12]
 8008a10:	6833      	ldreq	r3, [r6, #0]
 8008a12:	1aed      	subeq	r5, r5, r3
 8008a14:	68a3      	ldr	r3, [r4, #8]
 8008a16:	bf0c      	ite	eq
 8008a18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a1c:	2500      	movne	r5, #0
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	bfc4      	itt	gt
 8008a22:	1a9b      	subgt	r3, r3, r2
 8008a24:	18ed      	addgt	r5, r5, r3
 8008a26:	2600      	movs	r6, #0
 8008a28:	341a      	adds	r4, #26
 8008a2a:	42b5      	cmp	r5, r6
 8008a2c:	d11a      	bne.n	8008a64 <_printf_common+0xc8>
 8008a2e:	2000      	movs	r0, #0
 8008a30:	e008      	b.n	8008a44 <_printf_common+0xa8>
 8008a32:	2301      	movs	r3, #1
 8008a34:	4652      	mov	r2, sl
 8008a36:	4641      	mov	r1, r8
 8008a38:	4638      	mov	r0, r7
 8008a3a:	47c8      	blx	r9
 8008a3c:	3001      	adds	r0, #1
 8008a3e:	d103      	bne.n	8008a48 <_printf_common+0xac>
 8008a40:	f04f 30ff 	mov.w	r0, #4294967295
 8008a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a48:	3501      	adds	r5, #1
 8008a4a:	e7c6      	b.n	80089da <_printf_common+0x3e>
 8008a4c:	18e1      	adds	r1, r4, r3
 8008a4e:	1c5a      	adds	r2, r3, #1
 8008a50:	2030      	movs	r0, #48	@ 0x30
 8008a52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008a56:	4422      	add	r2, r4
 8008a58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008a5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008a60:	3302      	adds	r3, #2
 8008a62:	e7c7      	b.n	80089f4 <_printf_common+0x58>
 8008a64:	2301      	movs	r3, #1
 8008a66:	4622      	mov	r2, r4
 8008a68:	4641      	mov	r1, r8
 8008a6a:	4638      	mov	r0, r7
 8008a6c:	47c8      	blx	r9
 8008a6e:	3001      	adds	r0, #1
 8008a70:	d0e6      	beq.n	8008a40 <_printf_common+0xa4>
 8008a72:	3601      	adds	r6, #1
 8008a74:	e7d9      	b.n	8008a2a <_printf_common+0x8e>
	...

08008a78 <_printf_i>:
 8008a78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a7c:	7e0f      	ldrb	r7, [r1, #24]
 8008a7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008a80:	2f78      	cmp	r7, #120	@ 0x78
 8008a82:	4691      	mov	r9, r2
 8008a84:	4680      	mov	r8, r0
 8008a86:	460c      	mov	r4, r1
 8008a88:	469a      	mov	sl, r3
 8008a8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008a8e:	d807      	bhi.n	8008aa0 <_printf_i+0x28>
 8008a90:	2f62      	cmp	r7, #98	@ 0x62
 8008a92:	d80a      	bhi.n	8008aaa <_printf_i+0x32>
 8008a94:	2f00      	cmp	r7, #0
 8008a96:	f000 80d2 	beq.w	8008c3e <_printf_i+0x1c6>
 8008a9a:	2f58      	cmp	r7, #88	@ 0x58
 8008a9c:	f000 80b9 	beq.w	8008c12 <_printf_i+0x19a>
 8008aa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008aa4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008aa8:	e03a      	b.n	8008b20 <_printf_i+0xa8>
 8008aaa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008aae:	2b15      	cmp	r3, #21
 8008ab0:	d8f6      	bhi.n	8008aa0 <_printf_i+0x28>
 8008ab2:	a101      	add	r1, pc, #4	@ (adr r1, 8008ab8 <_printf_i+0x40>)
 8008ab4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ab8:	08008b11 	.word	0x08008b11
 8008abc:	08008b25 	.word	0x08008b25
 8008ac0:	08008aa1 	.word	0x08008aa1
 8008ac4:	08008aa1 	.word	0x08008aa1
 8008ac8:	08008aa1 	.word	0x08008aa1
 8008acc:	08008aa1 	.word	0x08008aa1
 8008ad0:	08008b25 	.word	0x08008b25
 8008ad4:	08008aa1 	.word	0x08008aa1
 8008ad8:	08008aa1 	.word	0x08008aa1
 8008adc:	08008aa1 	.word	0x08008aa1
 8008ae0:	08008aa1 	.word	0x08008aa1
 8008ae4:	08008c25 	.word	0x08008c25
 8008ae8:	08008b4f 	.word	0x08008b4f
 8008aec:	08008bdf 	.word	0x08008bdf
 8008af0:	08008aa1 	.word	0x08008aa1
 8008af4:	08008aa1 	.word	0x08008aa1
 8008af8:	08008c47 	.word	0x08008c47
 8008afc:	08008aa1 	.word	0x08008aa1
 8008b00:	08008b4f 	.word	0x08008b4f
 8008b04:	08008aa1 	.word	0x08008aa1
 8008b08:	08008aa1 	.word	0x08008aa1
 8008b0c:	08008be7 	.word	0x08008be7
 8008b10:	6833      	ldr	r3, [r6, #0]
 8008b12:	1d1a      	adds	r2, r3, #4
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	6032      	str	r2, [r6, #0]
 8008b18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b20:	2301      	movs	r3, #1
 8008b22:	e09d      	b.n	8008c60 <_printf_i+0x1e8>
 8008b24:	6833      	ldr	r3, [r6, #0]
 8008b26:	6820      	ldr	r0, [r4, #0]
 8008b28:	1d19      	adds	r1, r3, #4
 8008b2a:	6031      	str	r1, [r6, #0]
 8008b2c:	0606      	lsls	r6, r0, #24
 8008b2e:	d501      	bpl.n	8008b34 <_printf_i+0xbc>
 8008b30:	681d      	ldr	r5, [r3, #0]
 8008b32:	e003      	b.n	8008b3c <_printf_i+0xc4>
 8008b34:	0645      	lsls	r5, r0, #25
 8008b36:	d5fb      	bpl.n	8008b30 <_printf_i+0xb8>
 8008b38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008b3c:	2d00      	cmp	r5, #0
 8008b3e:	da03      	bge.n	8008b48 <_printf_i+0xd0>
 8008b40:	232d      	movs	r3, #45	@ 0x2d
 8008b42:	426d      	negs	r5, r5
 8008b44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b48:	4859      	ldr	r0, [pc, #356]	@ (8008cb0 <_printf_i+0x238>)
 8008b4a:	230a      	movs	r3, #10
 8008b4c:	e011      	b.n	8008b72 <_printf_i+0xfa>
 8008b4e:	6821      	ldr	r1, [r4, #0]
 8008b50:	6833      	ldr	r3, [r6, #0]
 8008b52:	0608      	lsls	r0, r1, #24
 8008b54:	f853 5b04 	ldr.w	r5, [r3], #4
 8008b58:	d402      	bmi.n	8008b60 <_printf_i+0xe8>
 8008b5a:	0649      	lsls	r1, r1, #25
 8008b5c:	bf48      	it	mi
 8008b5e:	b2ad      	uxthmi	r5, r5
 8008b60:	2f6f      	cmp	r7, #111	@ 0x6f
 8008b62:	4853      	ldr	r0, [pc, #332]	@ (8008cb0 <_printf_i+0x238>)
 8008b64:	6033      	str	r3, [r6, #0]
 8008b66:	bf14      	ite	ne
 8008b68:	230a      	movne	r3, #10
 8008b6a:	2308      	moveq	r3, #8
 8008b6c:	2100      	movs	r1, #0
 8008b6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008b72:	6866      	ldr	r6, [r4, #4]
 8008b74:	60a6      	str	r6, [r4, #8]
 8008b76:	2e00      	cmp	r6, #0
 8008b78:	bfa2      	ittt	ge
 8008b7a:	6821      	ldrge	r1, [r4, #0]
 8008b7c:	f021 0104 	bicge.w	r1, r1, #4
 8008b80:	6021      	strge	r1, [r4, #0]
 8008b82:	b90d      	cbnz	r5, 8008b88 <_printf_i+0x110>
 8008b84:	2e00      	cmp	r6, #0
 8008b86:	d04b      	beq.n	8008c20 <_printf_i+0x1a8>
 8008b88:	4616      	mov	r6, r2
 8008b8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b8e:	fb03 5711 	mls	r7, r3, r1, r5
 8008b92:	5dc7      	ldrb	r7, [r0, r7]
 8008b94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b98:	462f      	mov	r7, r5
 8008b9a:	42bb      	cmp	r3, r7
 8008b9c:	460d      	mov	r5, r1
 8008b9e:	d9f4      	bls.n	8008b8a <_printf_i+0x112>
 8008ba0:	2b08      	cmp	r3, #8
 8008ba2:	d10b      	bne.n	8008bbc <_printf_i+0x144>
 8008ba4:	6823      	ldr	r3, [r4, #0]
 8008ba6:	07df      	lsls	r7, r3, #31
 8008ba8:	d508      	bpl.n	8008bbc <_printf_i+0x144>
 8008baa:	6923      	ldr	r3, [r4, #16]
 8008bac:	6861      	ldr	r1, [r4, #4]
 8008bae:	4299      	cmp	r1, r3
 8008bb0:	bfde      	ittt	le
 8008bb2:	2330      	movle	r3, #48	@ 0x30
 8008bb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008bb8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008bbc:	1b92      	subs	r2, r2, r6
 8008bbe:	6122      	str	r2, [r4, #16]
 8008bc0:	f8cd a000 	str.w	sl, [sp]
 8008bc4:	464b      	mov	r3, r9
 8008bc6:	aa03      	add	r2, sp, #12
 8008bc8:	4621      	mov	r1, r4
 8008bca:	4640      	mov	r0, r8
 8008bcc:	f7ff fee6 	bl	800899c <_printf_common>
 8008bd0:	3001      	adds	r0, #1
 8008bd2:	d14a      	bne.n	8008c6a <_printf_i+0x1f2>
 8008bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008bd8:	b004      	add	sp, #16
 8008bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bde:	6823      	ldr	r3, [r4, #0]
 8008be0:	f043 0320 	orr.w	r3, r3, #32
 8008be4:	6023      	str	r3, [r4, #0]
 8008be6:	4833      	ldr	r0, [pc, #204]	@ (8008cb4 <_printf_i+0x23c>)
 8008be8:	2778      	movs	r7, #120	@ 0x78
 8008bea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008bee:	6823      	ldr	r3, [r4, #0]
 8008bf0:	6831      	ldr	r1, [r6, #0]
 8008bf2:	061f      	lsls	r7, r3, #24
 8008bf4:	f851 5b04 	ldr.w	r5, [r1], #4
 8008bf8:	d402      	bmi.n	8008c00 <_printf_i+0x188>
 8008bfa:	065f      	lsls	r7, r3, #25
 8008bfc:	bf48      	it	mi
 8008bfe:	b2ad      	uxthmi	r5, r5
 8008c00:	6031      	str	r1, [r6, #0]
 8008c02:	07d9      	lsls	r1, r3, #31
 8008c04:	bf44      	itt	mi
 8008c06:	f043 0320 	orrmi.w	r3, r3, #32
 8008c0a:	6023      	strmi	r3, [r4, #0]
 8008c0c:	b11d      	cbz	r5, 8008c16 <_printf_i+0x19e>
 8008c0e:	2310      	movs	r3, #16
 8008c10:	e7ac      	b.n	8008b6c <_printf_i+0xf4>
 8008c12:	4827      	ldr	r0, [pc, #156]	@ (8008cb0 <_printf_i+0x238>)
 8008c14:	e7e9      	b.n	8008bea <_printf_i+0x172>
 8008c16:	6823      	ldr	r3, [r4, #0]
 8008c18:	f023 0320 	bic.w	r3, r3, #32
 8008c1c:	6023      	str	r3, [r4, #0]
 8008c1e:	e7f6      	b.n	8008c0e <_printf_i+0x196>
 8008c20:	4616      	mov	r6, r2
 8008c22:	e7bd      	b.n	8008ba0 <_printf_i+0x128>
 8008c24:	6833      	ldr	r3, [r6, #0]
 8008c26:	6825      	ldr	r5, [r4, #0]
 8008c28:	6961      	ldr	r1, [r4, #20]
 8008c2a:	1d18      	adds	r0, r3, #4
 8008c2c:	6030      	str	r0, [r6, #0]
 8008c2e:	062e      	lsls	r6, r5, #24
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	d501      	bpl.n	8008c38 <_printf_i+0x1c0>
 8008c34:	6019      	str	r1, [r3, #0]
 8008c36:	e002      	b.n	8008c3e <_printf_i+0x1c6>
 8008c38:	0668      	lsls	r0, r5, #25
 8008c3a:	d5fb      	bpl.n	8008c34 <_printf_i+0x1bc>
 8008c3c:	8019      	strh	r1, [r3, #0]
 8008c3e:	2300      	movs	r3, #0
 8008c40:	6123      	str	r3, [r4, #16]
 8008c42:	4616      	mov	r6, r2
 8008c44:	e7bc      	b.n	8008bc0 <_printf_i+0x148>
 8008c46:	6833      	ldr	r3, [r6, #0]
 8008c48:	1d1a      	adds	r2, r3, #4
 8008c4a:	6032      	str	r2, [r6, #0]
 8008c4c:	681e      	ldr	r6, [r3, #0]
 8008c4e:	6862      	ldr	r2, [r4, #4]
 8008c50:	2100      	movs	r1, #0
 8008c52:	4630      	mov	r0, r6
 8008c54:	f7f7 facc 	bl	80001f0 <memchr>
 8008c58:	b108      	cbz	r0, 8008c5e <_printf_i+0x1e6>
 8008c5a:	1b80      	subs	r0, r0, r6
 8008c5c:	6060      	str	r0, [r4, #4]
 8008c5e:	6863      	ldr	r3, [r4, #4]
 8008c60:	6123      	str	r3, [r4, #16]
 8008c62:	2300      	movs	r3, #0
 8008c64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c68:	e7aa      	b.n	8008bc0 <_printf_i+0x148>
 8008c6a:	6923      	ldr	r3, [r4, #16]
 8008c6c:	4632      	mov	r2, r6
 8008c6e:	4649      	mov	r1, r9
 8008c70:	4640      	mov	r0, r8
 8008c72:	47d0      	blx	sl
 8008c74:	3001      	adds	r0, #1
 8008c76:	d0ad      	beq.n	8008bd4 <_printf_i+0x15c>
 8008c78:	6823      	ldr	r3, [r4, #0]
 8008c7a:	079b      	lsls	r3, r3, #30
 8008c7c:	d413      	bmi.n	8008ca6 <_printf_i+0x22e>
 8008c7e:	68e0      	ldr	r0, [r4, #12]
 8008c80:	9b03      	ldr	r3, [sp, #12]
 8008c82:	4298      	cmp	r0, r3
 8008c84:	bfb8      	it	lt
 8008c86:	4618      	movlt	r0, r3
 8008c88:	e7a6      	b.n	8008bd8 <_printf_i+0x160>
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	4632      	mov	r2, r6
 8008c8e:	4649      	mov	r1, r9
 8008c90:	4640      	mov	r0, r8
 8008c92:	47d0      	blx	sl
 8008c94:	3001      	adds	r0, #1
 8008c96:	d09d      	beq.n	8008bd4 <_printf_i+0x15c>
 8008c98:	3501      	adds	r5, #1
 8008c9a:	68e3      	ldr	r3, [r4, #12]
 8008c9c:	9903      	ldr	r1, [sp, #12]
 8008c9e:	1a5b      	subs	r3, r3, r1
 8008ca0:	42ab      	cmp	r3, r5
 8008ca2:	dcf2      	bgt.n	8008c8a <_printf_i+0x212>
 8008ca4:	e7eb      	b.n	8008c7e <_printf_i+0x206>
 8008ca6:	2500      	movs	r5, #0
 8008ca8:	f104 0619 	add.w	r6, r4, #25
 8008cac:	e7f5      	b.n	8008c9a <_printf_i+0x222>
 8008cae:	bf00      	nop
 8008cb0:	08009129 	.word	0x08009129
 8008cb4:	0800913a 	.word	0x0800913a

08008cb8 <__sflush_r>:
 8008cb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cc0:	0716      	lsls	r6, r2, #28
 8008cc2:	4605      	mov	r5, r0
 8008cc4:	460c      	mov	r4, r1
 8008cc6:	d454      	bmi.n	8008d72 <__sflush_r+0xba>
 8008cc8:	684b      	ldr	r3, [r1, #4]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	dc02      	bgt.n	8008cd4 <__sflush_r+0x1c>
 8008cce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	dd48      	ble.n	8008d66 <__sflush_r+0xae>
 8008cd4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008cd6:	2e00      	cmp	r6, #0
 8008cd8:	d045      	beq.n	8008d66 <__sflush_r+0xae>
 8008cda:	2300      	movs	r3, #0
 8008cdc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008ce0:	682f      	ldr	r7, [r5, #0]
 8008ce2:	6a21      	ldr	r1, [r4, #32]
 8008ce4:	602b      	str	r3, [r5, #0]
 8008ce6:	d030      	beq.n	8008d4a <__sflush_r+0x92>
 8008ce8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008cea:	89a3      	ldrh	r3, [r4, #12]
 8008cec:	0759      	lsls	r1, r3, #29
 8008cee:	d505      	bpl.n	8008cfc <__sflush_r+0x44>
 8008cf0:	6863      	ldr	r3, [r4, #4]
 8008cf2:	1ad2      	subs	r2, r2, r3
 8008cf4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008cf6:	b10b      	cbz	r3, 8008cfc <__sflush_r+0x44>
 8008cf8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008cfa:	1ad2      	subs	r2, r2, r3
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d00:	6a21      	ldr	r1, [r4, #32]
 8008d02:	4628      	mov	r0, r5
 8008d04:	47b0      	blx	r6
 8008d06:	1c43      	adds	r3, r0, #1
 8008d08:	89a3      	ldrh	r3, [r4, #12]
 8008d0a:	d106      	bne.n	8008d1a <__sflush_r+0x62>
 8008d0c:	6829      	ldr	r1, [r5, #0]
 8008d0e:	291d      	cmp	r1, #29
 8008d10:	d82b      	bhi.n	8008d6a <__sflush_r+0xb2>
 8008d12:	4a2a      	ldr	r2, [pc, #168]	@ (8008dbc <__sflush_r+0x104>)
 8008d14:	410a      	asrs	r2, r1
 8008d16:	07d6      	lsls	r6, r2, #31
 8008d18:	d427      	bmi.n	8008d6a <__sflush_r+0xb2>
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	6062      	str	r2, [r4, #4]
 8008d1e:	04d9      	lsls	r1, r3, #19
 8008d20:	6922      	ldr	r2, [r4, #16]
 8008d22:	6022      	str	r2, [r4, #0]
 8008d24:	d504      	bpl.n	8008d30 <__sflush_r+0x78>
 8008d26:	1c42      	adds	r2, r0, #1
 8008d28:	d101      	bne.n	8008d2e <__sflush_r+0x76>
 8008d2a:	682b      	ldr	r3, [r5, #0]
 8008d2c:	b903      	cbnz	r3, 8008d30 <__sflush_r+0x78>
 8008d2e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008d30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d32:	602f      	str	r7, [r5, #0]
 8008d34:	b1b9      	cbz	r1, 8008d66 <__sflush_r+0xae>
 8008d36:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d3a:	4299      	cmp	r1, r3
 8008d3c:	d002      	beq.n	8008d44 <__sflush_r+0x8c>
 8008d3e:	4628      	mov	r0, r5
 8008d40:	f7ff fbf2 	bl	8008528 <_free_r>
 8008d44:	2300      	movs	r3, #0
 8008d46:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d48:	e00d      	b.n	8008d66 <__sflush_r+0xae>
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	4628      	mov	r0, r5
 8008d4e:	47b0      	blx	r6
 8008d50:	4602      	mov	r2, r0
 8008d52:	1c50      	adds	r0, r2, #1
 8008d54:	d1c9      	bne.n	8008cea <__sflush_r+0x32>
 8008d56:	682b      	ldr	r3, [r5, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d0c6      	beq.n	8008cea <__sflush_r+0x32>
 8008d5c:	2b1d      	cmp	r3, #29
 8008d5e:	d001      	beq.n	8008d64 <__sflush_r+0xac>
 8008d60:	2b16      	cmp	r3, #22
 8008d62:	d11e      	bne.n	8008da2 <__sflush_r+0xea>
 8008d64:	602f      	str	r7, [r5, #0]
 8008d66:	2000      	movs	r0, #0
 8008d68:	e022      	b.n	8008db0 <__sflush_r+0xf8>
 8008d6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d6e:	b21b      	sxth	r3, r3
 8008d70:	e01b      	b.n	8008daa <__sflush_r+0xf2>
 8008d72:	690f      	ldr	r7, [r1, #16]
 8008d74:	2f00      	cmp	r7, #0
 8008d76:	d0f6      	beq.n	8008d66 <__sflush_r+0xae>
 8008d78:	0793      	lsls	r3, r2, #30
 8008d7a:	680e      	ldr	r6, [r1, #0]
 8008d7c:	bf08      	it	eq
 8008d7e:	694b      	ldreq	r3, [r1, #20]
 8008d80:	600f      	str	r7, [r1, #0]
 8008d82:	bf18      	it	ne
 8008d84:	2300      	movne	r3, #0
 8008d86:	eba6 0807 	sub.w	r8, r6, r7
 8008d8a:	608b      	str	r3, [r1, #8]
 8008d8c:	f1b8 0f00 	cmp.w	r8, #0
 8008d90:	dde9      	ble.n	8008d66 <__sflush_r+0xae>
 8008d92:	6a21      	ldr	r1, [r4, #32]
 8008d94:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008d96:	4643      	mov	r3, r8
 8008d98:	463a      	mov	r2, r7
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	47b0      	blx	r6
 8008d9e:	2800      	cmp	r0, #0
 8008da0:	dc08      	bgt.n	8008db4 <__sflush_r+0xfc>
 8008da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008da6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008daa:	81a3      	strh	r3, [r4, #12]
 8008dac:	f04f 30ff 	mov.w	r0, #4294967295
 8008db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008db4:	4407      	add	r7, r0
 8008db6:	eba8 0800 	sub.w	r8, r8, r0
 8008dba:	e7e7      	b.n	8008d8c <__sflush_r+0xd4>
 8008dbc:	dfbffffe 	.word	0xdfbffffe

08008dc0 <_fflush_r>:
 8008dc0:	b538      	push	{r3, r4, r5, lr}
 8008dc2:	690b      	ldr	r3, [r1, #16]
 8008dc4:	4605      	mov	r5, r0
 8008dc6:	460c      	mov	r4, r1
 8008dc8:	b913      	cbnz	r3, 8008dd0 <_fflush_r+0x10>
 8008dca:	2500      	movs	r5, #0
 8008dcc:	4628      	mov	r0, r5
 8008dce:	bd38      	pop	{r3, r4, r5, pc}
 8008dd0:	b118      	cbz	r0, 8008dda <_fflush_r+0x1a>
 8008dd2:	6a03      	ldr	r3, [r0, #32]
 8008dd4:	b90b      	cbnz	r3, 8008dda <_fflush_r+0x1a>
 8008dd6:	f7ff fa3b 	bl	8008250 <__sinit>
 8008dda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d0f3      	beq.n	8008dca <_fflush_r+0xa>
 8008de2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008de4:	07d0      	lsls	r0, r2, #31
 8008de6:	d404      	bmi.n	8008df2 <_fflush_r+0x32>
 8008de8:	0599      	lsls	r1, r3, #22
 8008dea:	d402      	bmi.n	8008df2 <_fflush_r+0x32>
 8008dec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008dee:	f7ff fb8a 	bl	8008506 <__retarget_lock_acquire_recursive>
 8008df2:	4628      	mov	r0, r5
 8008df4:	4621      	mov	r1, r4
 8008df6:	f7ff ff5f 	bl	8008cb8 <__sflush_r>
 8008dfa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008dfc:	07da      	lsls	r2, r3, #31
 8008dfe:	4605      	mov	r5, r0
 8008e00:	d4e4      	bmi.n	8008dcc <_fflush_r+0xc>
 8008e02:	89a3      	ldrh	r3, [r4, #12]
 8008e04:	059b      	lsls	r3, r3, #22
 8008e06:	d4e1      	bmi.n	8008dcc <_fflush_r+0xc>
 8008e08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e0a:	f7ff fb7d 	bl	8008508 <__retarget_lock_release_recursive>
 8008e0e:	e7dd      	b.n	8008dcc <_fflush_r+0xc>

08008e10 <__swbuf_r>:
 8008e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e12:	460e      	mov	r6, r1
 8008e14:	4614      	mov	r4, r2
 8008e16:	4605      	mov	r5, r0
 8008e18:	b118      	cbz	r0, 8008e22 <__swbuf_r+0x12>
 8008e1a:	6a03      	ldr	r3, [r0, #32]
 8008e1c:	b90b      	cbnz	r3, 8008e22 <__swbuf_r+0x12>
 8008e1e:	f7ff fa17 	bl	8008250 <__sinit>
 8008e22:	69a3      	ldr	r3, [r4, #24]
 8008e24:	60a3      	str	r3, [r4, #8]
 8008e26:	89a3      	ldrh	r3, [r4, #12]
 8008e28:	071a      	lsls	r2, r3, #28
 8008e2a:	d501      	bpl.n	8008e30 <__swbuf_r+0x20>
 8008e2c:	6923      	ldr	r3, [r4, #16]
 8008e2e:	b943      	cbnz	r3, 8008e42 <__swbuf_r+0x32>
 8008e30:	4621      	mov	r1, r4
 8008e32:	4628      	mov	r0, r5
 8008e34:	f000 f82a 	bl	8008e8c <__swsetup_r>
 8008e38:	b118      	cbz	r0, 8008e42 <__swbuf_r+0x32>
 8008e3a:	f04f 37ff 	mov.w	r7, #4294967295
 8008e3e:	4638      	mov	r0, r7
 8008e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e42:	6823      	ldr	r3, [r4, #0]
 8008e44:	6922      	ldr	r2, [r4, #16]
 8008e46:	1a98      	subs	r0, r3, r2
 8008e48:	6963      	ldr	r3, [r4, #20]
 8008e4a:	b2f6      	uxtb	r6, r6
 8008e4c:	4283      	cmp	r3, r0
 8008e4e:	4637      	mov	r7, r6
 8008e50:	dc05      	bgt.n	8008e5e <__swbuf_r+0x4e>
 8008e52:	4621      	mov	r1, r4
 8008e54:	4628      	mov	r0, r5
 8008e56:	f7ff ffb3 	bl	8008dc0 <_fflush_r>
 8008e5a:	2800      	cmp	r0, #0
 8008e5c:	d1ed      	bne.n	8008e3a <__swbuf_r+0x2a>
 8008e5e:	68a3      	ldr	r3, [r4, #8]
 8008e60:	3b01      	subs	r3, #1
 8008e62:	60a3      	str	r3, [r4, #8]
 8008e64:	6823      	ldr	r3, [r4, #0]
 8008e66:	1c5a      	adds	r2, r3, #1
 8008e68:	6022      	str	r2, [r4, #0]
 8008e6a:	701e      	strb	r6, [r3, #0]
 8008e6c:	6962      	ldr	r2, [r4, #20]
 8008e6e:	1c43      	adds	r3, r0, #1
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d004      	beq.n	8008e7e <__swbuf_r+0x6e>
 8008e74:	89a3      	ldrh	r3, [r4, #12]
 8008e76:	07db      	lsls	r3, r3, #31
 8008e78:	d5e1      	bpl.n	8008e3e <__swbuf_r+0x2e>
 8008e7a:	2e0a      	cmp	r6, #10
 8008e7c:	d1df      	bne.n	8008e3e <__swbuf_r+0x2e>
 8008e7e:	4621      	mov	r1, r4
 8008e80:	4628      	mov	r0, r5
 8008e82:	f7ff ff9d 	bl	8008dc0 <_fflush_r>
 8008e86:	2800      	cmp	r0, #0
 8008e88:	d0d9      	beq.n	8008e3e <__swbuf_r+0x2e>
 8008e8a:	e7d6      	b.n	8008e3a <__swbuf_r+0x2a>

08008e8c <__swsetup_r>:
 8008e8c:	b538      	push	{r3, r4, r5, lr}
 8008e8e:	4b29      	ldr	r3, [pc, #164]	@ (8008f34 <__swsetup_r+0xa8>)
 8008e90:	4605      	mov	r5, r0
 8008e92:	6818      	ldr	r0, [r3, #0]
 8008e94:	460c      	mov	r4, r1
 8008e96:	b118      	cbz	r0, 8008ea0 <__swsetup_r+0x14>
 8008e98:	6a03      	ldr	r3, [r0, #32]
 8008e9a:	b90b      	cbnz	r3, 8008ea0 <__swsetup_r+0x14>
 8008e9c:	f7ff f9d8 	bl	8008250 <__sinit>
 8008ea0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ea4:	0719      	lsls	r1, r3, #28
 8008ea6:	d422      	bmi.n	8008eee <__swsetup_r+0x62>
 8008ea8:	06da      	lsls	r2, r3, #27
 8008eaa:	d407      	bmi.n	8008ebc <__swsetup_r+0x30>
 8008eac:	2209      	movs	r2, #9
 8008eae:	602a      	str	r2, [r5, #0]
 8008eb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008eb4:	81a3      	strh	r3, [r4, #12]
 8008eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8008eba:	e033      	b.n	8008f24 <__swsetup_r+0x98>
 8008ebc:	0758      	lsls	r0, r3, #29
 8008ebe:	d512      	bpl.n	8008ee6 <__swsetup_r+0x5a>
 8008ec0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ec2:	b141      	cbz	r1, 8008ed6 <__swsetup_r+0x4a>
 8008ec4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ec8:	4299      	cmp	r1, r3
 8008eca:	d002      	beq.n	8008ed2 <__swsetup_r+0x46>
 8008ecc:	4628      	mov	r0, r5
 8008ece:	f7ff fb2b 	bl	8008528 <_free_r>
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ed6:	89a3      	ldrh	r3, [r4, #12]
 8008ed8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008edc:	81a3      	strh	r3, [r4, #12]
 8008ede:	2300      	movs	r3, #0
 8008ee0:	6063      	str	r3, [r4, #4]
 8008ee2:	6923      	ldr	r3, [r4, #16]
 8008ee4:	6023      	str	r3, [r4, #0]
 8008ee6:	89a3      	ldrh	r3, [r4, #12]
 8008ee8:	f043 0308 	orr.w	r3, r3, #8
 8008eec:	81a3      	strh	r3, [r4, #12]
 8008eee:	6923      	ldr	r3, [r4, #16]
 8008ef0:	b94b      	cbnz	r3, 8008f06 <__swsetup_r+0x7a>
 8008ef2:	89a3      	ldrh	r3, [r4, #12]
 8008ef4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008ef8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008efc:	d003      	beq.n	8008f06 <__swsetup_r+0x7a>
 8008efe:	4621      	mov	r1, r4
 8008f00:	4628      	mov	r0, r5
 8008f02:	f000 f84f 	bl	8008fa4 <__smakebuf_r>
 8008f06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f0a:	f013 0201 	ands.w	r2, r3, #1
 8008f0e:	d00a      	beq.n	8008f26 <__swsetup_r+0x9a>
 8008f10:	2200      	movs	r2, #0
 8008f12:	60a2      	str	r2, [r4, #8]
 8008f14:	6962      	ldr	r2, [r4, #20]
 8008f16:	4252      	negs	r2, r2
 8008f18:	61a2      	str	r2, [r4, #24]
 8008f1a:	6922      	ldr	r2, [r4, #16]
 8008f1c:	b942      	cbnz	r2, 8008f30 <__swsetup_r+0xa4>
 8008f1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008f22:	d1c5      	bne.n	8008eb0 <__swsetup_r+0x24>
 8008f24:	bd38      	pop	{r3, r4, r5, pc}
 8008f26:	0799      	lsls	r1, r3, #30
 8008f28:	bf58      	it	pl
 8008f2a:	6962      	ldrpl	r2, [r4, #20]
 8008f2c:	60a2      	str	r2, [r4, #8]
 8008f2e:	e7f4      	b.n	8008f1a <__swsetup_r+0x8e>
 8008f30:	2000      	movs	r0, #0
 8008f32:	e7f7      	b.n	8008f24 <__swsetup_r+0x98>
 8008f34:	2000001c 	.word	0x2000001c

08008f38 <_sbrk_r>:
 8008f38:	b538      	push	{r3, r4, r5, lr}
 8008f3a:	4d06      	ldr	r5, [pc, #24]	@ (8008f54 <_sbrk_r+0x1c>)
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	4604      	mov	r4, r0
 8008f40:	4608      	mov	r0, r1
 8008f42:	602b      	str	r3, [r5, #0]
 8008f44:	f7f8 fc04 	bl	8001750 <_sbrk>
 8008f48:	1c43      	adds	r3, r0, #1
 8008f4a:	d102      	bne.n	8008f52 <_sbrk_r+0x1a>
 8008f4c:	682b      	ldr	r3, [r5, #0]
 8008f4e:	b103      	cbz	r3, 8008f52 <_sbrk_r+0x1a>
 8008f50:	6023      	str	r3, [r4, #0]
 8008f52:	bd38      	pop	{r3, r4, r5, pc}
 8008f54:	20004a70 	.word	0x20004a70

08008f58 <__swhatbuf_r>:
 8008f58:	b570      	push	{r4, r5, r6, lr}
 8008f5a:	460c      	mov	r4, r1
 8008f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f60:	2900      	cmp	r1, #0
 8008f62:	b096      	sub	sp, #88	@ 0x58
 8008f64:	4615      	mov	r5, r2
 8008f66:	461e      	mov	r6, r3
 8008f68:	da0d      	bge.n	8008f86 <__swhatbuf_r+0x2e>
 8008f6a:	89a3      	ldrh	r3, [r4, #12]
 8008f6c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008f70:	f04f 0100 	mov.w	r1, #0
 8008f74:	bf14      	ite	ne
 8008f76:	2340      	movne	r3, #64	@ 0x40
 8008f78:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008f7c:	2000      	movs	r0, #0
 8008f7e:	6031      	str	r1, [r6, #0]
 8008f80:	602b      	str	r3, [r5, #0]
 8008f82:	b016      	add	sp, #88	@ 0x58
 8008f84:	bd70      	pop	{r4, r5, r6, pc}
 8008f86:	466a      	mov	r2, sp
 8008f88:	f000 f848 	bl	800901c <_fstat_r>
 8008f8c:	2800      	cmp	r0, #0
 8008f8e:	dbec      	blt.n	8008f6a <__swhatbuf_r+0x12>
 8008f90:	9901      	ldr	r1, [sp, #4]
 8008f92:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008f96:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008f9a:	4259      	negs	r1, r3
 8008f9c:	4159      	adcs	r1, r3
 8008f9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008fa2:	e7eb      	b.n	8008f7c <__swhatbuf_r+0x24>

08008fa4 <__smakebuf_r>:
 8008fa4:	898b      	ldrh	r3, [r1, #12]
 8008fa6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fa8:	079d      	lsls	r5, r3, #30
 8008faa:	4606      	mov	r6, r0
 8008fac:	460c      	mov	r4, r1
 8008fae:	d507      	bpl.n	8008fc0 <__smakebuf_r+0x1c>
 8008fb0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008fb4:	6023      	str	r3, [r4, #0]
 8008fb6:	6123      	str	r3, [r4, #16]
 8008fb8:	2301      	movs	r3, #1
 8008fba:	6163      	str	r3, [r4, #20]
 8008fbc:	b003      	add	sp, #12
 8008fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fc0:	ab01      	add	r3, sp, #4
 8008fc2:	466a      	mov	r2, sp
 8008fc4:	f7ff ffc8 	bl	8008f58 <__swhatbuf_r>
 8008fc8:	9f00      	ldr	r7, [sp, #0]
 8008fca:	4605      	mov	r5, r0
 8008fcc:	4639      	mov	r1, r7
 8008fce:	4630      	mov	r0, r6
 8008fd0:	f7ff fb16 	bl	8008600 <_malloc_r>
 8008fd4:	b948      	cbnz	r0, 8008fea <__smakebuf_r+0x46>
 8008fd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fda:	059a      	lsls	r2, r3, #22
 8008fdc:	d4ee      	bmi.n	8008fbc <__smakebuf_r+0x18>
 8008fde:	f023 0303 	bic.w	r3, r3, #3
 8008fe2:	f043 0302 	orr.w	r3, r3, #2
 8008fe6:	81a3      	strh	r3, [r4, #12]
 8008fe8:	e7e2      	b.n	8008fb0 <__smakebuf_r+0xc>
 8008fea:	89a3      	ldrh	r3, [r4, #12]
 8008fec:	6020      	str	r0, [r4, #0]
 8008fee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ff2:	81a3      	strh	r3, [r4, #12]
 8008ff4:	9b01      	ldr	r3, [sp, #4]
 8008ff6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008ffa:	b15b      	cbz	r3, 8009014 <__smakebuf_r+0x70>
 8008ffc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009000:	4630      	mov	r0, r6
 8009002:	f000 f81d 	bl	8009040 <_isatty_r>
 8009006:	b128      	cbz	r0, 8009014 <__smakebuf_r+0x70>
 8009008:	89a3      	ldrh	r3, [r4, #12]
 800900a:	f023 0303 	bic.w	r3, r3, #3
 800900e:	f043 0301 	orr.w	r3, r3, #1
 8009012:	81a3      	strh	r3, [r4, #12]
 8009014:	89a3      	ldrh	r3, [r4, #12]
 8009016:	431d      	orrs	r5, r3
 8009018:	81a5      	strh	r5, [r4, #12]
 800901a:	e7cf      	b.n	8008fbc <__smakebuf_r+0x18>

0800901c <_fstat_r>:
 800901c:	b538      	push	{r3, r4, r5, lr}
 800901e:	4d07      	ldr	r5, [pc, #28]	@ (800903c <_fstat_r+0x20>)
 8009020:	2300      	movs	r3, #0
 8009022:	4604      	mov	r4, r0
 8009024:	4608      	mov	r0, r1
 8009026:	4611      	mov	r1, r2
 8009028:	602b      	str	r3, [r5, #0]
 800902a:	f7f8 fb68 	bl	80016fe <_fstat>
 800902e:	1c43      	adds	r3, r0, #1
 8009030:	d102      	bne.n	8009038 <_fstat_r+0x1c>
 8009032:	682b      	ldr	r3, [r5, #0]
 8009034:	b103      	cbz	r3, 8009038 <_fstat_r+0x1c>
 8009036:	6023      	str	r3, [r4, #0]
 8009038:	bd38      	pop	{r3, r4, r5, pc}
 800903a:	bf00      	nop
 800903c:	20004a70 	.word	0x20004a70

08009040 <_isatty_r>:
 8009040:	b538      	push	{r3, r4, r5, lr}
 8009042:	4d06      	ldr	r5, [pc, #24]	@ (800905c <_isatty_r+0x1c>)
 8009044:	2300      	movs	r3, #0
 8009046:	4604      	mov	r4, r0
 8009048:	4608      	mov	r0, r1
 800904a:	602b      	str	r3, [r5, #0]
 800904c:	f7f8 fb67 	bl	800171e <_isatty>
 8009050:	1c43      	adds	r3, r0, #1
 8009052:	d102      	bne.n	800905a <_isatty_r+0x1a>
 8009054:	682b      	ldr	r3, [r5, #0]
 8009056:	b103      	cbz	r3, 800905a <_isatty_r+0x1a>
 8009058:	6023      	str	r3, [r4, #0]
 800905a:	bd38      	pop	{r3, r4, r5, pc}
 800905c:	20004a70 	.word	0x20004a70

08009060 <_init>:
 8009060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009062:	bf00      	nop
 8009064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009066:	bc08      	pop	{r3}
 8009068:	469e      	mov	lr, r3
 800906a:	4770      	bx	lr

0800906c <_fini>:
 800906c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800906e:	bf00      	nop
 8009070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009072:	bc08      	pop	{r3}
 8009074:	469e      	mov	lr, r3
 8009076:	4770      	bx	lr
