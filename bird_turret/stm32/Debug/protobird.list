
protobird.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f28  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080090d8  080090d8  0000a0d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091ac  080091ac  0000b06c  2**0
                  CONTENTS
  4 .ARM          00000008  080091ac  080091ac  0000a1ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091b4  080091b4  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091b4  080091b4  0000a1b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080091b8  080091b8  0000a1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080091bc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b06c  2**0
                  CONTENTS
 10 .bss          00004a10  2000006c  2000006c  0000b06c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004a7c  20004a7c  0000b06c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d4fb  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cfe  00000000  00000000  00028597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001820  00000000  00000000  0002c298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012bf  00000000  00000000  0002dab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027f9b  00000000  00000000  0002ed77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b387  00000000  00000000  00056d12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee307  00000000  00000000  00072099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001603a0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006e10  00000000  00000000  001603e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  001671f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080090c0 	.word	0x080090c0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	080090c0 	.word	0x080090c0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	4a07      	ldr	r2, [pc, #28]	@ (80005ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000590:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	4a06      	ldr	r2, [pc, #24]	@ (80005b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000596:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2280      	movs	r2, #128	@ 0x80
 800059c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000088 	.word	0x20000088
 80005b0:	20000128 	.word	0x20000128

080005b4 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t dir;
int phi, theta;
int __io_putchar(int ch){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, 0xFFFF);
 80005bc:	1d39      	adds	r1, r7, #4
 80005be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005c2:	2201      	movs	r2, #1
 80005c4:	4803      	ldr	r0, [pc, #12]	@ (80005d4 <__io_putchar+0x20>)
 80005c6:	f003 fe57 	bl	8004278 <HAL_UART_Transmit>
	return ch;
 80005ca:	687b      	ldr	r3, [r7, #4]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000628 	.word	0x20000628

080005d8 <__io_getchar>:
int __io_getchar(){
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	71fb      	strb	r3, [r7, #7]
	/* Clear the Overrun flag just before receiving the first character */
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 80005e2:	2300      	movs	r3, #0
 80005e4:	603b      	str	r3, [r7, #0]
 80005e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000620 <__io_getchar+0x48>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	603b      	str	r3, [r7, #0]
 80005ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <__io_getchar+0x48>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	685b      	ldr	r3, [r3, #4]
 80005f4:	603b      	str	r3, [r7, #0]
 80005f6:	683b      	ldr	r3, [r7, #0]
	/* Wait for reception of a character on the USART RX line and echo this
	* character on console */
	HAL_UART_Receive(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005f8:	1df9      	adds	r1, r7, #7
 80005fa:	f04f 33ff 	mov.w	r3, #4294967295
 80005fe:	2201      	movs	r2, #1
 8000600:	4807      	ldr	r0, [pc, #28]	@ (8000620 <__io_getchar+0x48>)
 8000602:	f003 fec4 	bl	800438e <HAL_UART_Receive>
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000606:	1df9      	adds	r1, r7, #7
 8000608:	f04f 33ff 	mov.w	r3, #4294967295
 800060c:	2201      	movs	r2, #1
 800060e:	4804      	ldr	r0, [pc, #16]	@ (8000620 <__io_getchar+0x48>)
 8000610:	f003 fe32 	bl	8004278 <HAL_UART_Transmit>
	return ch;
 8000614:	79fb      	ldrb	r3, [r7, #7]
}
 8000616:	4618      	mov	r0, r3
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20000628 	.word	0x20000628

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b5b0      	push	{r4, r5, r7, lr}
 8000626:	b0a2      	sub	sp, #136	@ 0x88
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062a:	f001 f8eb 	bl	8001804 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062e:	f000 f8c9 	bl	80007c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000632:	f000 fb05 	bl	8000c40 <MX_GPIO_Init>
  MX_ETH_Init();
 8000636:	f000 f943 	bl	80008c0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800063a:	f000 faa9 	bl	8000b90 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800063e:	f000 fad1 	bl	8000be4 <MX_USB_OTG_FS_PCD_Init>
  MX_UART5_Init();
 8000642:	f000 fa7b 	bl	8000b3c <MX_UART5_Init>
  MX_TIM2_Init();
 8000646:	f000 f989 	bl	800095c <MX_TIM2_Init>
  MX_TIM3_Init();
 800064a:	f000 f9ff 	bl	8000a4c <MX_TIM3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800064e:	f000 f923 	bl	8000898 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &dir, 1);
 8000652:	2201      	movs	r2, #1
 8000654:	494b      	ldr	r1, [pc, #300]	@ (8000784 <main+0x160>)
 8000656:	484c      	ldr	r0, [pc, #304]	@ (8000788 <main+0x164>)
 8000658:	f003 ff30 	bl	80044bc <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800065c:	2108      	movs	r1, #8
 800065e:	484b      	ldr	r0, [pc, #300]	@ (800078c <main+0x168>)
 8000660:	f002 fea4 	bl	80033ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000664:	210c      	movs	r1, #12
 8000666:	484a      	ldr	r0, [pc, #296]	@ (8000790 <main+0x16c>)
 8000668:	f002 fea0 	bl	80033ac <HAL_TIM_PWM_Start>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of phiDirSem */
  osSemaphoreDef(phiDirSem);
 800066c:	2300      	movs	r3, #0
 800066e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000672:	2300      	movs	r3, #0
 8000674:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  phiDirSemHandle = osSemaphoreCreate(osSemaphore(phiDirSem), 1);
 8000678:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800067c:	2101      	movs	r1, #1
 800067e:	4618      	mov	r0, r3
 8000680:	f005 fa28 	bl	8005ad4 <osSemaphoreCreate>
 8000684:	4603      	mov	r3, r0
 8000686:	4a43      	ldr	r2, [pc, #268]	@ (8000794 <main+0x170>)
 8000688:	6013      	str	r3, [r2, #0]

  /* definition and creation of thetaDirSem */
  osSemaphoreDef(thetaDirSem);
 800068a:	2300      	movs	r3, #0
 800068c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800068e:	2300      	movs	r3, #0
 8000690:	67fb      	str	r3, [r7, #124]	@ 0x7c
  thetaDirSemHandle = osSemaphoreCreate(osSemaphore(thetaDirSem), 1);
 8000692:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000696:	2101      	movs	r1, #1
 8000698:	4618      	mov	r0, r3
 800069a:	f005 fa1b 	bl	8005ad4 <osSemaphoreCreate>
 800069e:	4603      	mov	r3, r0
 80006a0:	4a3d      	ldr	r2, [pc, #244]	@ (8000798 <main+0x174>)
 80006a2:	6013      	str	r3, [r2, #0]

  /* definition and creation of triggerSem */
  osSemaphoreDef(triggerSem);
 80006a4:	2300      	movs	r3, #0
 80006a6:	673b      	str	r3, [r7, #112]	@ 0x70
 80006a8:	2300      	movs	r3, #0
 80006aa:	677b      	str	r3, [r7, #116]	@ 0x74
  triggerSemHandle = osSemaphoreCreate(osSemaphore(triggerSem), 1);
 80006ac:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80006b0:	2101      	movs	r1, #1
 80006b2:	4618      	mov	r0, r3
 80006b4:	f005 fa0e 	bl	8005ad4 <osSemaphoreCreate>
 80006b8:	4603      	mov	r3, r0
 80006ba:	4a38      	ldr	r2, [pc, #224]	@ (800079c <main+0x178>)
 80006bc:	6013      	str	r3, [r2, #0]

  /* definition and creation of trigendSem */
  osSemaphoreDef(trigendSem);
 80006be:	2300      	movs	r3, #0
 80006c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80006c2:	2300      	movs	r3, #0
 80006c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  trigendSemHandle = osSemaphoreCreate(osSemaphore(trigendSem), 1);
 80006c6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80006ca:	2101      	movs	r1, #1
 80006cc:	4618      	mov	r0, r3
 80006ce:	f005 fa01 	bl	8005ad4 <osSemaphoreCreate>
 80006d2:	4603      	mov	r3, r0
 80006d4:	4a32      	ldr	r2, [pc, #200]	@ (80007a0 <main+0x17c>)
 80006d6:	6013      	str	r3, [r2, #0]

  /* definition and creation of moveSem */
  osSemaphoreDef(moveSem);
 80006d8:	2300      	movs	r3, #0
 80006da:	663b      	str	r3, [r7, #96]	@ 0x60
 80006dc:	2300      	movs	r3, #0
 80006de:	667b      	str	r3, [r7, #100]	@ 0x64
  moveSemHandle = osSemaphoreCreate(osSemaphore(moveSem), 1);
 80006e0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80006e4:	2101      	movs	r1, #1
 80006e6:	4618      	mov	r0, r3
 80006e8:	f005 f9f4 	bl	8005ad4 <osSemaphoreCreate>
 80006ec:	4603      	mov	r3, r0
 80006ee:	4a2d      	ldr	r2, [pc, #180]	@ (80007a4 <main+0x180>)
 80006f0:	6013      	str	r3, [r2, #0]

  /* definition and creation of moveendSem */
  osSemaphoreDef(moveendSem);
 80006f2:	2300      	movs	r3, #0
 80006f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80006f6:	2300      	movs	r3, #0
 80006f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  moveendSemHandle = osSemaphoreCreate(osSemaphore(moveendSem), 1);
 80006fa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80006fe:	2101      	movs	r1, #1
 8000700:	4618      	mov	r0, r3
 8000702:	f005 f9e7 	bl	8005ad4 <osSemaphoreCreate>
 8000706:	4603      	mov	r3, r0
 8000708:	4a27      	ldr	r2, [pc, #156]	@ (80007a8 <main+0x184>)
 800070a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of uartTask */
  osThreadDef(uartTask, StartUartTask, osPriorityNormal, 0, 128);
 800070c:	4b27      	ldr	r3, [pc, #156]	@ (80007ac <main+0x188>)
 800070e:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000712:	461d      	mov	r5, r3
 8000714:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000716:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000718:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800071c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uartTaskHandle = osThreadCreate(osThread(uartTask), NULL);
 8000720:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f005 f974 	bl	8005a14 <osThreadCreate>
 800072c:	4603      	mov	r3, r0
 800072e:	4a20      	ldr	r2, [pc, #128]	@ (80007b0 <main+0x18c>)
 8000730:	6013      	str	r3, [r2, #0]

  /* definition and creation of motorTask */
  osThreadDef(motorTask, StartMotorTask, osPriorityNormal, 0, 128);
 8000732:	4b20      	ldr	r3, [pc, #128]	@ (80007b4 <main+0x190>)
 8000734:	f107 0420 	add.w	r4, r7, #32
 8000738:	461d      	mov	r5, r3
 800073a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800073c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800073e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000742:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorTaskHandle = osThreadCreate(osThread(motorTask), NULL);
 8000746:	f107 0320 	add.w	r3, r7, #32
 800074a:	2100      	movs	r1, #0
 800074c:	4618      	mov	r0, r3
 800074e:	f005 f961 	bl	8005a14 <osThreadCreate>
 8000752:	4603      	mov	r3, r0
 8000754:	4a18      	ldr	r2, [pc, #96]	@ (80007b8 <main+0x194>)
 8000756:	6013      	str	r3, [r2, #0]

  /* definition and creation of trigTask */
  osThreadDef(trigTask, StartTrigTask, osPriorityHigh, 0, 128);
 8000758:	4b18      	ldr	r3, [pc, #96]	@ (80007bc <main+0x198>)
 800075a:	1d3c      	adds	r4, r7, #4
 800075c:	461d      	mov	r5, r3
 800075e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000760:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000762:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000766:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  trigTaskHandle = osThreadCreate(osThread(trigTask), NULL);
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f005 f950 	bl	8005a14 <osThreadCreate>
 8000774:	4603      	mov	r3, r0
 8000776:	4a12      	ldr	r2, [pc, #72]	@ (80007c0 <main+0x19c>)
 8000778:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800077a:	f005 f944 	bl	8005a06 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800077e:	bf00      	nop
 8000780:	e7fd      	b.n	800077e <main+0x15a>
 8000782:	bf00      	nop
 8000784:	20000b78 	.word	0x20000b78
 8000788:	20000628 	.word	0x20000628
 800078c:	20000598 	.word	0x20000598
 8000790:	20000550 	.word	0x20000550
 8000794:	20000b60 	.word	0x20000b60
 8000798:	20000b64 	.word	0x20000b64
 800079c:	20000b68 	.word	0x20000b68
 80007a0:	20000b6c 	.word	0x20000b6c
 80007a4:	20000b70 	.word	0x20000b70
 80007a8:	20000b74 	.word	0x20000b74
 80007ac:	080090e4 	.word	0x080090e4
 80007b0:	20000b54 	.word	0x20000b54
 80007b4:	0800910c 	.word	0x0800910c
 80007b8:	20000b58 	.word	0x20000b58
 80007bc:	08009134 	.word	0x08009134
 80007c0:	20000b5c 	.word	0x20000b5c

080007c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b094      	sub	sp, #80	@ 0x50
 80007c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ca:	f107 0320 	add.w	r3, r7, #32
 80007ce:	2230      	movs	r2, #48	@ 0x30
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f007 fdf7 	bl	80083c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e8:	2300      	movs	r3, #0
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	4b28      	ldr	r3, [pc, #160]	@ (8000890 <SystemClock_Config+0xcc>)
 80007ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f0:	4a27      	ldr	r2, [pc, #156]	@ (8000890 <SystemClock_Config+0xcc>)
 80007f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80007f8:	4b25      	ldr	r3, [pc, #148]	@ (8000890 <SystemClock_Config+0xcc>)
 80007fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000804:	2300      	movs	r3, #0
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	4b22      	ldr	r3, [pc, #136]	@ (8000894 <SystemClock_Config+0xd0>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a21      	ldr	r2, [pc, #132]	@ (8000894 <SystemClock_Config+0xd0>)
 800080e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000812:	6013      	str	r3, [r2, #0]
 8000814:	4b1f      	ldr	r3, [pc, #124]	@ (8000894 <SystemClock_Config+0xd0>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000820:	2301      	movs	r3, #1
 8000822:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000824:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000828:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082a:	2302      	movs	r3, #2
 800082c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800082e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000832:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000834:	2304      	movs	r3, #4
 8000836:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000838:	23a8      	movs	r3, #168	@ 0xa8
 800083a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800083c:	2302      	movs	r3, #2
 800083e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000840:	2307      	movs	r3, #7
 8000842:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000844:	f107 0320 	add.w	r3, r7, #32
 8000848:	4618      	mov	r0, r3
 800084a:	f001 ffcb 	bl	80027e4 <HAL_RCC_OscConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000854:	f000 fbba 	bl	8000fcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000858:	230f      	movs	r3, #15
 800085a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085c:	2302      	movs	r3, #2
 800085e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000864:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000868:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800086a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800086e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000870:	f107 030c 	add.w	r3, r7, #12
 8000874:	2105      	movs	r1, #5
 8000876:	4618      	mov	r0, r3
 8000878:	f002 fa2c 	bl	8002cd4 <HAL_RCC_ClockConfig>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000882:	f000 fba3 	bl	8000fcc <Error_Handler>
  }
}
 8000886:	bf00      	nop
 8000888:	3750      	adds	r7, #80	@ 0x50
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40023800 	.word	0x40023800
 8000894:	40007000 	.word	0x40007000

08000898 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* UART5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800089c:	2200      	movs	r2, #0
 800089e:	2105      	movs	r1, #5
 80008a0:	2035      	movs	r0, #53	@ 0x35
 80008a2:	f001 f8cd 	bl	8001a40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART5_IRQn);
 80008a6:	2035      	movs	r0, #53	@ 0x35
 80008a8:	f001 f8e6 	bl	8001a78 <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2105      	movs	r1, #5
 80008b0:	2027      	movs	r0, #39	@ 0x27
 80008b2:	f001 f8c5 	bl	8001a40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 80008b6:	2027      	movs	r0, #39	@ 0x27
 80008b8:	f001 f8de 	bl	8001a78 <HAL_NVIC_EnableIRQ>
}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}

080008c0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000944 <MX_ETH_Init+0x84>)
 80008c6:	4a20      	ldr	r2, [pc, #128]	@ (8000948 <MX_ETH_Init+0x88>)
 80008c8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008ca:	4b20      	ldr	r3, [pc, #128]	@ (800094c <MX_ETH_Init+0x8c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008d0:	4b1e      	ldr	r3, [pc, #120]	@ (800094c <MX_ETH_Init+0x8c>)
 80008d2:	2280      	movs	r2, #128	@ 0x80
 80008d4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008d6:	4b1d      	ldr	r3, [pc, #116]	@ (800094c <MX_ETH_Init+0x8c>)
 80008d8:	22e1      	movs	r2, #225	@ 0xe1
 80008da:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008dc:	4b1b      	ldr	r3, [pc, #108]	@ (800094c <MX_ETH_Init+0x8c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008e2:	4b1a      	ldr	r3, [pc, #104]	@ (800094c <MX_ETH_Init+0x8c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008e8:	4b18      	ldr	r3, [pc, #96]	@ (800094c <MX_ETH_Init+0x8c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008ee:	4b15      	ldr	r3, [pc, #84]	@ (8000944 <MX_ETH_Init+0x84>)
 80008f0:	4a16      	ldr	r2, [pc, #88]	@ (800094c <MX_ETH_Init+0x8c>)
 80008f2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008f4:	4b13      	ldr	r3, [pc, #76]	@ (8000944 <MX_ETH_Init+0x84>)
 80008f6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80008fa:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008fc:	4b11      	ldr	r3, [pc, #68]	@ (8000944 <MX_ETH_Init+0x84>)
 80008fe:	4a14      	ldr	r2, [pc, #80]	@ (8000950 <MX_ETH_Init+0x90>)
 8000900:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000902:	4b10      	ldr	r3, [pc, #64]	@ (8000944 <MX_ETH_Init+0x84>)
 8000904:	4a13      	ldr	r2, [pc, #76]	@ (8000954 <MX_ETH_Init+0x94>)
 8000906:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000908:	4b0e      	ldr	r3, [pc, #56]	@ (8000944 <MX_ETH_Init+0x84>)
 800090a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800090e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000910:	480c      	ldr	r0, [pc, #48]	@ (8000944 <MX_ETH_Init+0x84>)
 8000912:	f001 f951 	bl	8001bb8 <HAL_ETH_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800091c:	f000 fb56 	bl	8000fcc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000920:	2238      	movs	r2, #56	@ 0x38
 8000922:	2100      	movs	r1, #0
 8000924:	480c      	ldr	r0, [pc, #48]	@ (8000958 <MX_ETH_Init+0x98>)
 8000926:	f007 fd4e 	bl	80083c6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800092a:	4b0b      	ldr	r3, [pc, #44]	@ (8000958 <MX_ETH_Init+0x98>)
 800092c:	2221      	movs	r2, #33	@ 0x21
 800092e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000930:	4b09      	ldr	r3, [pc, #36]	@ (8000958 <MX_ETH_Init+0x98>)
 8000932:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000936:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000938:	4b07      	ldr	r3, [pc, #28]	@ (8000958 <MX_ETH_Init+0x98>)
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	200004a0 	.word	0x200004a0
 8000948:	40028000 	.word	0x40028000
 800094c:	20000b84 	.word	0x20000b84
 8000950:	20000400 	.word	0x20000400
 8000954:	20000360 	.word	0x20000360
 8000958:	20000328 	.word	0x20000328

0800095c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08e      	sub	sp, #56	@ 0x38
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000962:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000970:	f107 0320 	add.w	r3, r7, #32
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
 8000988:	615a      	str	r2, [r3, #20]
 800098a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800098c:	4b2e      	ldr	r3, [pc, #184]	@ (8000a48 <MX_TIM2_Init+0xec>)
 800098e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000992:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 280-1;
 8000994:	4b2c      	ldr	r3, [pc, #176]	@ (8000a48 <MX_TIM2_Init+0xec>)
 8000996:	f240 1217 	movw	r2, #279	@ 0x117
 800099a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099c:	4b2a      	ldr	r3, [pc, #168]	@ (8000a48 <MX_TIM2_Init+0xec>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6000-1;
 80009a2:	4b29      	ldr	r3, [pc, #164]	@ (8000a48 <MX_TIM2_Init+0xec>)
 80009a4:	f241 726f 	movw	r2, #5999	@ 0x176f
 80009a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009aa:	4b27      	ldr	r3, [pc, #156]	@ (8000a48 <MX_TIM2_Init+0xec>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b0:	4b25      	ldr	r3, [pc, #148]	@ (8000a48 <MX_TIM2_Init+0xec>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009b6:	4824      	ldr	r0, [pc, #144]	@ (8000a48 <MX_TIM2_Init+0xec>)
 80009b8:	f002 fbde 	bl	8003178 <HAL_TIM_Base_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80009c2:	f000 fb03 	bl	8000fcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009d0:	4619      	mov	r1, r3
 80009d2:	481d      	ldr	r0, [pc, #116]	@ (8000a48 <MX_TIM2_Init+0xec>)
 80009d4:	f002 ff64 	bl	80038a0 <HAL_TIM_ConfigClockSource>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80009de:	f000 faf5 	bl	8000fcc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009e2:	4819      	ldr	r0, [pc, #100]	@ (8000a48 <MX_TIM2_Init+0xec>)
 80009e4:	f002 fc88 	bl	80032f8 <HAL_TIM_PWM_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80009ee:	f000 faed 	bl	8000fcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f2:	2300      	movs	r3, #0
 80009f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009fa:	f107 0320 	add.w	r3, r7, #32
 80009fe:	4619      	mov	r1, r3
 8000a00:	4811      	ldr	r0, [pc, #68]	@ (8000a48 <MX_TIM2_Init+0xec>)
 8000a02:	f003 fb59 	bl	80040b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000a0c:	f000 fade 	bl	8000fcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a10:	2360      	movs	r3, #96	@ 0x60
 8000a12:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 450-1;
 8000a14:	f240 13c1 	movw	r3, #449	@ 0x1c1
 8000a18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	220c      	movs	r2, #12
 8000a26:	4619      	mov	r1, r3
 8000a28:	4807      	ldr	r0, [pc, #28]	@ (8000a48 <MX_TIM2_Init+0xec>)
 8000a2a:	f002 fe77 	bl	800371c <HAL_TIM_PWM_ConfigChannel>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000a34:	f000 faca 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a38:	4803      	ldr	r0, [pc, #12]	@ (8000a48 <MX_TIM2_Init+0xec>)
 8000a3a:	f000 fbf5 	bl	8001228 <HAL_TIM_MspPostInit>

}
 8000a3e:	bf00      	nop
 8000a40:	3738      	adds	r7, #56	@ 0x38
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000550 	.word	0x20000550

08000a4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08e      	sub	sp, #56	@ 0x38
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a52:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a60:	f107 0320 	add.w	r3, r7, #32
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
 8000a78:	615a      	str	r2, [r3, #20]
 8000a7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a7c:	4b2d      	ldr	r3, [pc, #180]	@ (8000b34 <MX_TIM3_Init+0xe8>)
 8000a7e:	4a2e      	ldr	r2, [pc, #184]	@ (8000b38 <MX_TIM3_Init+0xec>)
 8000a80:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 280-1;
 8000a82:	4b2c      	ldr	r3, [pc, #176]	@ (8000b34 <MX_TIM3_Init+0xe8>)
 8000a84:	f240 1217 	movw	r2, #279	@ 0x117
 8000a88:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8a:	4b2a      	ldr	r3, [pc, #168]	@ (8000b34 <MX_TIM3_Init+0xe8>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6000-1;
 8000a90:	4b28      	ldr	r3, [pc, #160]	@ (8000b34 <MX_TIM3_Init+0xe8>)
 8000a92:	f241 726f 	movw	r2, #5999	@ 0x176f
 8000a96:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a98:	4b26      	ldr	r3, [pc, #152]	@ (8000b34 <MX_TIM3_Init+0xe8>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a9e:	4b25      	ldr	r3, [pc, #148]	@ (8000b34 <MX_TIM3_Init+0xe8>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000aa4:	4823      	ldr	r0, [pc, #140]	@ (8000b34 <MX_TIM3_Init+0xe8>)
 8000aa6:	f002 fb67 	bl	8003178 <HAL_TIM_Base_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000ab0:	f000 fa8c 	bl	8000fcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ab4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000aba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000abe:	4619      	mov	r1, r3
 8000ac0:	481c      	ldr	r0, [pc, #112]	@ (8000b34 <MX_TIM3_Init+0xe8>)
 8000ac2:	f002 feed 	bl	80038a0 <HAL_TIM_ConfigClockSource>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000acc:	f000 fa7e 	bl	8000fcc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ad0:	4818      	ldr	r0, [pc, #96]	@ (8000b34 <MX_TIM3_Init+0xe8>)
 8000ad2:	f002 fc11 	bl	80032f8 <HAL_TIM_PWM_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000adc:	f000 fa76 	bl	8000fcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ae8:	f107 0320 	add.w	r3, r7, #32
 8000aec:	4619      	mov	r1, r3
 8000aee:	4811      	ldr	r0, [pc, #68]	@ (8000b34 <MX_TIM3_Init+0xe8>)
 8000af0:	f003 fae2 	bl	80040b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000afa:	f000 fa67 	bl	8000fcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000afe:	2360      	movs	r3, #96	@ 0x60
 8000b00:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 450-1;
 8000b02:	f240 13c1 	movw	r3, #449	@ 0x1c1
 8000b06:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	2208      	movs	r2, #8
 8000b14:	4619      	mov	r1, r3
 8000b16:	4807      	ldr	r0, [pc, #28]	@ (8000b34 <MX_TIM3_Init+0xe8>)
 8000b18:	f002 fe00 	bl	800371c <HAL_TIM_PWM_ConfigChannel>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000b22:	f000 fa53 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b26:	4803      	ldr	r0, [pc, #12]	@ (8000b34 <MX_TIM3_Init+0xe8>)
 8000b28:	f000 fb7e 	bl	8001228 <HAL_TIM_MspPostInit>

}
 8000b2c:	bf00      	nop
 8000b2e:	3738      	adds	r7, #56	@ 0x38
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000598 	.word	0x20000598
 8000b38:	40000400 	.word	0x40000400

08000b3c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000b40:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <MX_UART5_Init+0x4c>)
 8000b42:	4a12      	ldr	r2, [pc, #72]	@ (8000b8c <MX_UART5_Init+0x50>)
 8000b44:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000b46:	4b10      	ldr	r3, [pc, #64]	@ (8000b88 <MX_UART5_Init+0x4c>)
 8000b48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b4c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <MX_UART5_Init+0x4c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	@ (8000b88 <MX_UART5_Init+0x4c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b88 <MX_UART5_Init+0x4c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000b60:	4b09      	ldr	r3, [pc, #36]	@ (8000b88 <MX_UART5_Init+0x4c>)
 8000b62:	220c      	movs	r2, #12
 8000b64:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b66:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <MX_UART5_Init+0x4c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <MX_UART5_Init+0x4c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000b72:	4805      	ldr	r0, [pc, #20]	@ (8000b88 <MX_UART5_Init+0x4c>)
 8000b74:	f003 fb30 	bl	80041d8 <HAL_UART_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000b7e:	f000 fa25 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200005e0 	.word	0x200005e0
 8000b8c:	40005000 	.word	0x40005000

08000b90 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b94:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <MX_USART3_UART_Init+0x4c>)
 8000b96:	4a12      	ldr	r2, [pc, #72]	@ (8000be0 <MX_USART3_UART_Init+0x50>)
 8000b98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b9a:	4b10      	ldr	r3, [pc, #64]	@ (8000bdc <MX_USART3_UART_Init+0x4c>)
 8000b9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ba0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bdc <MX_USART3_UART_Init+0x4c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bdc <MX_USART3_UART_Init+0x4c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	@ (8000bdc <MX_USART3_UART_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	@ (8000bdc <MX_USART3_UART_Init+0x4c>)
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bba:	4b08      	ldr	r3, [pc, #32]	@ (8000bdc <MX_USART3_UART_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <MX_USART3_UART_Init+0x4c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bc6:	4805      	ldr	r0, [pc, #20]	@ (8000bdc <MX_USART3_UART_Init+0x4c>)
 8000bc8:	f003 fb06 	bl	80041d8 <HAL_UART_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000bd2:	f000 f9fb 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000628 	.word	0x20000628
 8000be0:	40004800 	.word	0x40004800

08000be4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000be8:	4b14      	ldr	r3, [pc, #80]	@ (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000bee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000bf0:	4b12      	ldr	r3, [pc, #72]	@ (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bf2:	2204      	movs	r2, #4
 8000bf4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000bf6:	4b11      	ldr	r3, [pc, #68]	@ (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bf8:	2202      	movs	r2, #2
 8000bfa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c02:	4b0e      	ldr	r3, [pc, #56]	@ (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c04:	2202      	movs	r2, #2
 8000c06:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000c08:	4b0c      	ldr	r3, [pc, #48]	@ (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c14:	4b09      	ldr	r3, [pc, #36]	@ (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c1a:	4b08      	ldr	r3, [pc, #32]	@ (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c20:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c26:	4805      	ldr	r0, [pc, #20]	@ (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c28:	f001 fccd 	bl	80025c6 <HAL_PCD_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c32:	f000 f9cb 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000670 	.word	0x20000670

08000c40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08c      	sub	sp, #48	@ 0x30
 8000c44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c46:	f107 031c 	add.w	r3, r7, #28
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	61bb      	str	r3, [r7, #24]
 8000c5a:	4b4c      	ldr	r3, [pc, #304]	@ (8000d8c <MX_GPIO_Init+0x14c>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	4a4b      	ldr	r2, [pc, #300]	@ (8000d8c <MX_GPIO_Init+0x14c>)
 8000c60:	f043 0304 	orr.w	r3, r3, #4
 8000c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c66:	4b49      	ldr	r3, [pc, #292]	@ (8000d8c <MX_GPIO_Init+0x14c>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	f003 0304 	and.w	r3, r3, #4
 8000c6e:	61bb      	str	r3, [r7, #24]
 8000c70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	4b45      	ldr	r3, [pc, #276]	@ (8000d8c <MX_GPIO_Init+0x14c>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	4a44      	ldr	r2, [pc, #272]	@ (8000d8c <MX_GPIO_Init+0x14c>)
 8000c7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c82:	4b42      	ldr	r3, [pc, #264]	@ (8000d8c <MX_GPIO_Init+0x14c>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	4b3e      	ldr	r3, [pc, #248]	@ (8000d8c <MX_GPIO_Init+0x14c>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	4a3d      	ldr	r2, [pc, #244]	@ (8000d8c <MX_GPIO_Init+0x14c>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9e:	4b3b      	ldr	r3, [pc, #236]	@ (8000d8c <MX_GPIO_Init+0x14c>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	4b37      	ldr	r3, [pc, #220]	@ (8000d8c <MX_GPIO_Init+0x14c>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	4a36      	ldr	r2, [pc, #216]	@ (8000d8c <MX_GPIO_Init+0x14c>)
 8000cb4:	f043 0302 	orr.w	r3, r3, #2
 8000cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cba:	4b34      	ldr	r3, [pc, #208]	@ (8000d8c <MX_GPIO_Init+0x14c>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	4b30      	ldr	r3, [pc, #192]	@ (8000d8c <MX_GPIO_Init+0x14c>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cce:	4a2f      	ldr	r2, [pc, #188]	@ (8000d8c <MX_GPIO_Init+0x14c>)
 8000cd0:	f043 0308 	orr.w	r3, r3, #8
 8000cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd6:	4b2d      	ldr	r3, [pc, #180]	@ (8000d8c <MX_GPIO_Init+0x14c>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	f003 0308 	and.w	r3, r3, #8
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	4b29      	ldr	r3, [pc, #164]	@ (8000d8c <MX_GPIO_Init+0x14c>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	4a28      	ldr	r2, [pc, #160]	@ (8000d8c <MX_GPIO_Init+0x14c>)
 8000cec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf2:	4b26      	ldr	r3, [pc, #152]	@ (8000d8c <MX_GPIO_Init+0x14c>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000d04:	4822      	ldr	r0, [pc, #136]	@ (8000d90 <MX_GPIO_Init+0x150>)
 8000d06:	f001 fc2b 	bl	8002560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2140      	movs	r1, #64	@ 0x40
 8000d0e:	4821      	ldr	r0, [pc, #132]	@ (8000d94 <MX_GPIO_Init+0x154>)
 8000d10:	f001 fc26 	bl	8002560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d1a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d24:	f107 031c 	add.w	r3, r7, #28
 8000d28:	4619      	mov	r1, r3
 8000d2a:	481b      	ldr	r0, [pc, #108]	@ (8000d98 <MX_GPIO_Init+0x158>)
 8000d2c:	f001 fa6c 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000d30:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000d34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d36:	2301      	movs	r3, #1
 8000d38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d42:	f107 031c 	add.w	r3, r7, #28
 8000d46:	4619      	mov	r1, r3
 8000d48:	4811      	ldr	r0, [pc, #68]	@ (8000d90 <MX_GPIO_Init+0x150>)
 8000d4a:	f001 fa5d 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d4e:	2340      	movs	r3, #64	@ 0x40
 8000d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d52:	2301      	movs	r3, #1
 8000d54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	4619      	mov	r1, r3
 8000d64:	480b      	ldr	r0, [pc, #44]	@ (8000d94 <MX_GPIO_Init+0x154>)
 8000d66:	f001 fa4f 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d6a:	2380      	movs	r3, #128	@ 0x80
 8000d6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4805      	ldr	r0, [pc, #20]	@ (8000d94 <MX_GPIO_Init+0x154>)
 8000d7e:	f001 fa43 	bl	8002208 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d82:	bf00      	nop
 8000d84:	3730      	adds	r7, #48	@ 0x30
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40020400 	.word	0x40020400
 8000d94:	40021800 	.word	0x40021800
 8000d98:	40020800 	.word	0x40020800

08000d9c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <StartUartTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartUartTask */
void StartUartTask(void const * argument)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
#define MOVEOP 0
#define TRIGOP 1
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8000db8:	2101      	movs	r1, #1
 8000dba:	4833      	ldr	r0, [pc, #204]	@ (8000e88 <StartUartTask+0xd8>)
 8000dbc:	f001 fbe9 	bl	8002592 <HAL_GPIO_TogglePin>
//	  taskENTER_CRITICAL();
	  HAL_UART_Receive(&huart5, (uint8_t*)&dphi, 1, 0xffff);
 8000dc0:	f107 010e 	add.w	r1, r7, #14
 8000dc4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000dc8:	2201      	movs	r2, #1
 8000dca:	4830      	ldr	r0, [pc, #192]	@ (8000e8c <StartUartTask+0xdc>)
 8000dcc:	f003 fadf 	bl	800438e <HAL_UART_Receive>
	  HAL_UART_Receive(&huart5, (uint8_t*)&dtheta, 1, 0xffff);
 8000dd0:	f107 010d 	add.w	r1, r7, #13
 8000dd4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000dd8:	2201      	movs	r2, #1
 8000dda:	482c      	ldr	r0, [pc, #176]	@ (8000e8c <StartUartTask+0xdc>)
 8000ddc:	f003 fad7 	bl	800438e <HAL_UART_Receive>
	  HAL_UART_Receive(&huart5, (uint8_t*)&oper, 1, 0xffff);
 8000de0:	f107 010f 	add.w	r1, r7, #15
 8000de4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000de8:	2201      	movs	r2, #1
 8000dea:	4828      	ldr	r0, [pc, #160]	@ (8000e8c <StartUartTask+0xdc>)
 8000dec:	f003 facf 	bl	800438e <HAL_UART_Receive>
//	  taskEXIT_CRITICAL();
	  if(oper == MOVEOP){ // need to check boundary
 8000df0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d128      	bne.n	8000e4a <StartUartTask+0x9a>
		  osSemaphoreWait(phiDirSemHandle, osWaitForever);
 8000df8:	4b25      	ldr	r3, [pc, #148]	@ (8000e90 <StartUartTask+0xe0>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000e00:	4618      	mov	r0, r3
 8000e02:	f004 fe99 	bl	8005b38 <osSemaphoreWait>
		  phi += dphi;
 8000e06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	4b21      	ldr	r3, [pc, #132]	@ (8000e94 <StartUartTask+0xe4>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4413      	add	r3, r2
 8000e12:	4a20      	ldr	r2, [pc, #128]	@ (8000e94 <StartUartTask+0xe4>)
 8000e14:	6013      	str	r3, [r2, #0]
		  osSemaphoreRelease(phiDirSemHandle);
 8000e16:	4b1e      	ldr	r3, [pc, #120]	@ (8000e90 <StartUartTask+0xe0>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f004 feda 	bl	8005bd4 <osSemaphoreRelease>
		  osSemaphoreWait(thetaDirSemHandle, osWaitForever);
 8000e20:	4b1d      	ldr	r3, [pc, #116]	@ (8000e98 <StartUartTask+0xe8>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f04f 31ff 	mov.w	r1, #4294967295
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f004 fe85 	bl	8005b38 <osSemaphoreWait>
		  theta += dtheta;
 8000e2e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000e32:	461a      	mov	r2, r3
 8000e34:	4b19      	ldr	r3, [pc, #100]	@ (8000e9c <StartUartTask+0xec>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4413      	add	r3, r2
 8000e3a:	4a18      	ldr	r2, [pc, #96]	@ (8000e9c <StartUartTask+0xec>)
 8000e3c:	6013      	str	r3, [r2, #0]
		  osSemaphoreRelease(thetaDirSemHandle);
 8000e3e:	4b16      	ldr	r3, [pc, #88]	@ (8000e98 <StartUartTask+0xe8>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f004 fec6 	bl	8005bd4 <osSemaphoreRelease>
 8000e48:	e019      	b.n	8000e7e <StartUartTask+0xce>
		  // move
	  }
	  else if(oper == TRIGOP){
 8000e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d115      	bne.n	8000e7e <StartUartTask+0xce>
		  osSemaphoreRelease(triggerSemHandle);
 8000e52:	4b13      	ldr	r3, [pc, #76]	@ (8000ea0 <StartUartTask+0xf0>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f004 febc 	bl	8005bd4 <osSemaphoreRelease>
		  HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000e5c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e60:	4809      	ldr	r0, [pc, #36]	@ (8000e88 <StartUartTask+0xd8>)
 8000e62:	f001 fb96 	bl	8002592 <HAL_GPIO_TogglePin>
		  osSemaphoreWait(trigendSemHandle, osWaitForever);
 8000e66:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea4 <StartUartTask+0xf4>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f04f 31ff 	mov.w	r1, #4294967295
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f004 fe62 	bl	8005b38 <osSemaphoreWait>
		  HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000e74:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e78:	4803      	ldr	r0, [pc, #12]	@ (8000e88 <StartUartTask+0xd8>)
 8000e7a:	f001 fb8a 	bl	8002592 <HAL_GPIO_TogglePin>
	  }
	  HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8000e7e:	2101      	movs	r1, #1
 8000e80:	4801      	ldr	r0, [pc, #4]	@ (8000e88 <StartUartTask+0xd8>)
 8000e82:	f001 fb86 	bl	8002592 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8000e86:	e797      	b.n	8000db8 <StartUartTask+0x8>
 8000e88:	40020400 	.word	0x40020400
 8000e8c:	200005e0 	.word	0x200005e0
 8000e90:	20000b60 	.word	0x20000b60
 8000e94:	20000b7c 	.word	0x20000b7c
 8000e98:	20000b64 	.word	0x20000b64
 8000e9c:	20000b80 	.word	0x20000b80
 8000ea0:	20000b68 	.word	0x20000b68
 8000ea4:	20000b6c 	.word	0x20000b6c

08000ea8 <StartMotorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void const * argument)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorTask */
  const int PHICENTER = 450-1, THETACENTER = 450-1;
 8000eb0:	f240 13c1 	movw	r3, #449	@ 0x1c1
 8000eb4:	617b      	str	r3, [r7, #20]
 8000eb6:	f240 13c1 	movw	r3, #449	@ 0x1c1
 8000eba:	613b      	str	r3, [r7, #16]
//  int phipulse = PHICENTER, thetapulse = THETACENTER;
  int phioffset = 0, thetaoffset = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
//  	  osSemaphoreWait(moveSemHandle, osWaitForever);
	  HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8000ec4:	2180      	movs	r1, #128	@ 0x80
 8000ec6:	481a      	ldr	r0, [pc, #104]	@ (8000f30 <StartMotorTask+0x88>)
 8000ec8:	f001 fb63 	bl	8002592 <HAL_GPIO_TogglePin>
	  osSemaphoreWait(phiDirSemHandle, osWaitForever);
 8000ecc:	4b19      	ldr	r3, [pc, #100]	@ (8000f34 <StartMotorTask+0x8c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f004 fe2f 	bl	8005b38 <osSemaphoreWait>
	  phioffset = phi;
 8000eda:	4b17      	ldr	r3, [pc, #92]	@ (8000f38 <StartMotorTask+0x90>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	60fb      	str	r3, [r7, #12]
	  osSemaphoreRelease(phiDirSemHandle);
 8000ee0:	4b14      	ldr	r3, [pc, #80]	@ (8000f34 <StartMotorTask+0x8c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f004 fe75 	bl	8005bd4 <osSemaphoreRelease>
	  osSemaphoreWait(thetaDirSemHandle, osWaitForever);
 8000eea:	4b14      	ldr	r3, [pc, #80]	@ (8000f3c <StartMotorTask+0x94>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f004 fe20 	bl	8005b38 <osSemaphoreWait>
	  thetaoffset = theta;
 8000ef8:	4b11      	ldr	r3, [pc, #68]	@ (8000f40 <StartMotorTask+0x98>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	60bb      	str	r3, [r7, #8]
	  osSemaphoreRelease(thetaDirSemHandle);
 8000efe:	4b0f      	ldr	r3, [pc, #60]	@ (8000f3c <StartMotorTask+0x94>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f004 fe66 	bl	8005bd4 <osSemaphoreRelease>
	  TIM2->CCR4 = PHICENTER + phioffset;
 8000f08:	697a      	ldr	r2, [r7, #20]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	441a      	add	r2, r3
 8000f0e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f12:	641a      	str	r2, [r3, #64]	@ 0x40
	  TIM3->CCR3 = THETACENTER + thetaoffset;
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	441a      	add	r2, r3
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f44 <StartMotorTask+0x9c>)
 8000f1c:	63da      	str	r2, [r3, #60]	@ 0x3c
	  osDelay(5);
 8000f1e:	2005      	movs	r0, #5
 8000f20:	f004 fdc4 	bl	8005aac <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8000f24:	2180      	movs	r1, #128	@ 0x80
 8000f26:	4802      	ldr	r0, [pc, #8]	@ (8000f30 <StartMotorTask+0x88>)
 8000f28:	f001 fb33 	bl	8002592 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8000f2c:	bf00      	nop
 8000f2e:	e7c9      	b.n	8000ec4 <StartMotorTask+0x1c>
 8000f30:	40020400 	.word	0x40020400
 8000f34:	20000b60 	.word	0x20000b60
 8000f38:	20000b7c 	.word	0x20000b7c
 8000f3c:	20000b64 	.word	0x20000b64
 8000f40:	20000b80 	.word	0x20000b80
 8000f44:	40000400 	.word	0x40000400

08000f48 <StartTrigTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTrigTask */
void StartTrigTask(void const * argument)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTrigTask */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreWait(triggerSemHandle, osWaitForever);
 8000f50:	4b0f      	ldr	r3, [pc, #60]	@ (8000f90 <StartTrigTask+0x48>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f04f 31ff 	mov.w	r1, #4294967295
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f004 fded 	bl	8005b38 <osSemaphoreWait>
	HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000f5e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f62:	480c      	ldr	r0, [pc, #48]	@ (8000f94 <StartTrigTask+0x4c>)
 8000f64:	f001 fb15 	bl	8002592 <HAL_GPIO_TogglePin>
	printf("%d %d\r\n", phi, theta);
 8000f68:	4b0b      	ldr	r3, [pc, #44]	@ (8000f98 <StartTrigTask+0x50>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f9c <StartTrigTask+0x54>)
 8000f6e:	6812      	ldr	r2, [r2, #0]
 8000f70:	4619      	mov	r1, r3
 8000f72:	480b      	ldr	r0, [pc, #44]	@ (8000fa0 <StartTrigTask+0x58>)
 8000f74:	f007 f9d2 	bl	800831c <iprintf>
//    osDelay(16);
	HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000f78:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f7c:	4805      	ldr	r0, [pc, #20]	@ (8000f94 <StartTrigTask+0x4c>)
 8000f7e:	f001 fb08 	bl	8002592 <HAL_GPIO_TogglePin>
    osSemaphoreRelease(trigendSemHandle);
 8000f82:	4b08      	ldr	r3, [pc, #32]	@ (8000fa4 <StartTrigTask+0x5c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f004 fe24 	bl	8005bd4 <osSemaphoreRelease>
  {
 8000f8c:	bf00      	nop
 8000f8e:	e7df      	b.n	8000f50 <StartTrigTask+0x8>
 8000f90:	20000b68 	.word	0x20000b68
 8000f94:	40020400 	.word	0x40020400
 8000f98:	20000b7c 	.word	0x20000b7c
 8000f9c:	20000b80 	.word	0x20000b80
 8000fa0:	08009150 	.word	0x08009150
 8000fa4:	20000b6c 	.word	0x20000b6c

08000fa8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a04      	ldr	r2, [pc, #16]	@ (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d101      	bne.n	8000fbe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fba:	f000 fc45 	bl	8001848 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40001000 	.word	0x40001000

08000fcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd0:	b672      	cpsid	i
}
 8000fd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <Error_Handler+0x8>

08000fd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	607b      	str	r3, [r7, #4]
 8000fe2:	4b12      	ldr	r3, [pc, #72]	@ (800102c <HAL_MspInit+0x54>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe6:	4a11      	ldr	r2, [pc, #68]	@ (800102c <HAL_MspInit+0x54>)
 8000fe8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fee:	4b0f      	ldr	r3, [pc, #60]	@ (800102c <HAL_MspInit+0x54>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	603b      	str	r3, [r7, #0]
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800102c <HAL_MspInit+0x54>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001002:	4a0a      	ldr	r2, [pc, #40]	@ (800102c <HAL_MspInit+0x54>)
 8001004:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001008:	6413      	str	r3, [r2, #64]	@ 0x40
 800100a:	4b08      	ldr	r3, [pc, #32]	@ (800102c <HAL_MspInit+0x54>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	210f      	movs	r1, #15
 800101a:	f06f 0001 	mvn.w	r0, #1
 800101e:	f000 fd0f 	bl	8001a40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40023800 	.word	0x40023800

08001030 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08e      	sub	sp, #56	@ 0x38
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a55      	ldr	r2, [pc, #340]	@ (80011a4 <HAL_ETH_MspInit+0x174>)
 800104e:	4293      	cmp	r3, r2
 8001050:	f040 80a4 	bne.w	800119c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001054:	2300      	movs	r3, #0
 8001056:	623b      	str	r3, [r7, #32]
 8001058:	4b53      	ldr	r3, [pc, #332]	@ (80011a8 <HAL_ETH_MspInit+0x178>)
 800105a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105c:	4a52      	ldr	r2, [pc, #328]	@ (80011a8 <HAL_ETH_MspInit+0x178>)
 800105e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001062:	6313      	str	r3, [r2, #48]	@ 0x30
 8001064:	4b50      	ldr	r3, [pc, #320]	@ (80011a8 <HAL_ETH_MspInit+0x178>)
 8001066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001068:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800106c:	623b      	str	r3, [r7, #32]
 800106e:	6a3b      	ldr	r3, [r7, #32]
 8001070:	2300      	movs	r3, #0
 8001072:	61fb      	str	r3, [r7, #28]
 8001074:	4b4c      	ldr	r3, [pc, #304]	@ (80011a8 <HAL_ETH_MspInit+0x178>)
 8001076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001078:	4a4b      	ldr	r2, [pc, #300]	@ (80011a8 <HAL_ETH_MspInit+0x178>)
 800107a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800107e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001080:	4b49      	ldr	r3, [pc, #292]	@ (80011a8 <HAL_ETH_MspInit+0x178>)
 8001082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001084:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001088:	61fb      	str	r3, [r7, #28]
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	2300      	movs	r3, #0
 800108e:	61bb      	str	r3, [r7, #24]
 8001090:	4b45      	ldr	r3, [pc, #276]	@ (80011a8 <HAL_ETH_MspInit+0x178>)
 8001092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001094:	4a44      	ldr	r2, [pc, #272]	@ (80011a8 <HAL_ETH_MspInit+0x178>)
 8001096:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800109a:	6313      	str	r3, [r2, #48]	@ 0x30
 800109c:	4b42      	ldr	r3, [pc, #264]	@ (80011a8 <HAL_ETH_MspInit+0x178>)
 800109e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80010a4:	61bb      	str	r3, [r7, #24]
 80010a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	4b3e      	ldr	r3, [pc, #248]	@ (80011a8 <HAL_ETH_MspInit+0x178>)
 80010ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b0:	4a3d      	ldr	r2, [pc, #244]	@ (80011a8 <HAL_ETH_MspInit+0x178>)
 80010b2:	f043 0304 	orr.w	r3, r3, #4
 80010b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b8:	4b3b      	ldr	r3, [pc, #236]	@ (80011a8 <HAL_ETH_MspInit+0x178>)
 80010ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010bc:	f003 0304 	and.w	r3, r3, #4
 80010c0:	617b      	str	r3, [r7, #20]
 80010c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c4:	2300      	movs	r3, #0
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	4b37      	ldr	r3, [pc, #220]	@ (80011a8 <HAL_ETH_MspInit+0x178>)
 80010ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010cc:	4a36      	ldr	r2, [pc, #216]	@ (80011a8 <HAL_ETH_MspInit+0x178>)
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d4:	4b34      	ldr	r3, [pc, #208]	@ (80011a8 <HAL_ETH_MspInit+0x178>)
 80010d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	613b      	str	r3, [r7, #16]
 80010de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e0:	2300      	movs	r3, #0
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	4b30      	ldr	r3, [pc, #192]	@ (80011a8 <HAL_ETH_MspInit+0x178>)
 80010e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e8:	4a2f      	ldr	r2, [pc, #188]	@ (80011a8 <HAL_ETH_MspInit+0x178>)
 80010ea:	f043 0302 	orr.w	r3, r3, #2
 80010ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f0:	4b2d      	ldr	r3, [pc, #180]	@ (80011a8 <HAL_ETH_MspInit+0x178>)
 80010f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	4b29      	ldr	r3, [pc, #164]	@ (80011a8 <HAL_ETH_MspInit+0x178>)
 8001102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001104:	4a28      	ldr	r2, [pc, #160]	@ (80011a8 <HAL_ETH_MspInit+0x178>)
 8001106:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800110a:	6313      	str	r3, [r2, #48]	@ 0x30
 800110c:	4b26      	ldr	r3, [pc, #152]	@ (80011a8 <HAL_ETH_MspInit+0x178>)
 800110e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001118:	2332      	movs	r3, #50	@ 0x32
 800111a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	2302      	movs	r3, #2
 800111e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001124:	2303      	movs	r3, #3
 8001126:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001128:	230b      	movs	r3, #11
 800112a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800112c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001130:	4619      	mov	r1, r3
 8001132:	481e      	ldr	r0, [pc, #120]	@ (80011ac <HAL_ETH_MspInit+0x17c>)
 8001134:	f001 f868 	bl	8002208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001138:	2386      	movs	r3, #134	@ 0x86
 800113a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001144:	2303      	movs	r3, #3
 8001146:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001148:	230b      	movs	r3, #11
 800114a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001150:	4619      	mov	r1, r3
 8001152:	4817      	ldr	r0, [pc, #92]	@ (80011b0 <HAL_ETH_MspInit+0x180>)
 8001154:	f001 f858 	bl	8002208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001158:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800115c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001166:	2303      	movs	r3, #3
 8001168:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800116a:	230b      	movs	r3, #11
 800116c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800116e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001172:	4619      	mov	r1, r3
 8001174:	480f      	ldr	r0, [pc, #60]	@ (80011b4 <HAL_ETH_MspInit+0x184>)
 8001176:	f001 f847 	bl	8002208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800117a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800117e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001180:	2302      	movs	r3, #2
 8001182:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001188:	2303      	movs	r3, #3
 800118a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800118c:	230b      	movs	r3, #11
 800118e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001190:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001194:	4619      	mov	r1, r3
 8001196:	4808      	ldr	r0, [pc, #32]	@ (80011b8 <HAL_ETH_MspInit+0x188>)
 8001198:	f001 f836 	bl	8002208 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 800119c:	bf00      	nop
 800119e:	3738      	adds	r7, #56	@ 0x38
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40028000 	.word	0x40028000
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40020800 	.word	0x40020800
 80011b0:	40020000 	.word	0x40020000
 80011b4:	40020400 	.word	0x40020400
 80011b8:	40021800 	.word	0x40021800

080011bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011cc:	d10e      	bne.n	80011ec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	4b13      	ldr	r3, [pc, #76]	@ (8001220 <HAL_TIM_Base_MspInit+0x64>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d6:	4a12      	ldr	r2, [pc, #72]	@ (8001220 <HAL_TIM_Base_MspInit+0x64>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011de:	4b10      	ldr	r3, [pc, #64]	@ (8001220 <HAL_TIM_Base_MspInit+0x64>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80011ea:	e012      	b.n	8001212 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a0c      	ldr	r2, [pc, #48]	@ (8001224 <HAL_TIM_Base_MspInit+0x68>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d10d      	bne.n	8001212 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	4b09      	ldr	r3, [pc, #36]	@ (8001220 <HAL_TIM_Base_MspInit+0x64>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fe:	4a08      	ldr	r2, [pc, #32]	@ (8001220 <HAL_TIM_Base_MspInit+0x64>)
 8001200:	f043 0302 	orr.w	r3, r3, #2
 8001204:	6413      	str	r3, [r2, #64]	@ 0x40
 8001206:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <HAL_TIM_Base_MspInit+0x64>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]
}
 8001212:	bf00      	nop
 8001214:	3714      	adds	r7, #20
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800
 8001224:	40000400 	.word	0x40000400

08001228 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	@ 0x28
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001248:	d11e      	bne.n	8001288 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	4b22      	ldr	r3, [pc, #136]	@ (80012d8 <HAL_TIM_MspPostInit+0xb0>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	4a21      	ldr	r2, [pc, #132]	@ (80012d8 <HAL_TIM_MspPostInit+0xb0>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6313      	str	r3, [r2, #48]	@ 0x30
 800125a:	4b1f      	ldr	r3, [pc, #124]	@ (80012d8 <HAL_TIM_MspPostInit+0xb0>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001266:	2308      	movs	r3, #8
 8001268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126a:	2302      	movs	r3, #2
 800126c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001272:	2300      	movs	r3, #0
 8001274:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001276:	2301      	movs	r3, #1
 8001278:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	4619      	mov	r1, r3
 8001280:	4816      	ldr	r0, [pc, #88]	@ (80012dc <HAL_TIM_MspPostInit+0xb4>)
 8001282:	f000 ffc1 	bl	8002208 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001286:	e023      	b.n	80012d0 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a14      	ldr	r2, [pc, #80]	@ (80012e0 <HAL_TIM_MspPostInit+0xb8>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d11e      	bne.n	80012d0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	4b10      	ldr	r3, [pc, #64]	@ (80012d8 <HAL_TIM_MspPostInit+0xb0>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	4a0f      	ldr	r2, [pc, #60]	@ (80012d8 <HAL_TIM_MspPostInit+0xb0>)
 800129c:	f043 0304 	orr.w	r3, r3, #4
 80012a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a2:	4b0d      	ldr	r3, [pc, #52]	@ (80012d8 <HAL_TIM_MspPostInit+0xb0>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	f003 0304 	and.w	r3, r3, #4
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	2300      	movs	r3, #0
 80012be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012c0:	2302      	movs	r3, #2
 80012c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	4619      	mov	r1, r3
 80012ca:	4806      	ldr	r0, [pc, #24]	@ (80012e4 <HAL_TIM_MspPostInit+0xbc>)
 80012cc:	f000 ff9c 	bl	8002208 <HAL_GPIO_Init>
}
 80012d0:	bf00      	nop
 80012d2:	3728      	adds	r7, #40	@ 0x28
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40020000 	.word	0x40020000
 80012e0:	40000400 	.word	0x40000400
 80012e4:	40020800 	.word	0x40020800

080012e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08c      	sub	sp, #48	@ 0x30
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 031c 	add.w	r3, r7, #28
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a42      	ldr	r2, [pc, #264]	@ (8001410 <HAL_UART_MspInit+0x128>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d14b      	bne.n	80013a2 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	61bb      	str	r3, [r7, #24]
 800130e:	4b41      	ldr	r3, [pc, #260]	@ (8001414 <HAL_UART_MspInit+0x12c>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001312:	4a40      	ldr	r2, [pc, #256]	@ (8001414 <HAL_UART_MspInit+0x12c>)
 8001314:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001318:	6413      	str	r3, [r2, #64]	@ 0x40
 800131a:	4b3e      	ldr	r3, [pc, #248]	@ (8001414 <HAL_UART_MspInit+0x12c>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001322:	61bb      	str	r3, [r7, #24]
 8001324:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	4b3a      	ldr	r3, [pc, #232]	@ (8001414 <HAL_UART_MspInit+0x12c>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132e:	4a39      	ldr	r2, [pc, #228]	@ (8001414 <HAL_UART_MspInit+0x12c>)
 8001330:	f043 0304 	orr.w	r3, r3, #4
 8001334:	6313      	str	r3, [r2, #48]	@ 0x30
 8001336:	4b37      	ldr	r3, [pc, #220]	@ (8001414 <HAL_UART_MspInit+0x12c>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	f003 0304 	and.w	r3, r3, #4
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	4b33      	ldr	r3, [pc, #204]	@ (8001414 <HAL_UART_MspInit+0x12c>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	4a32      	ldr	r2, [pc, #200]	@ (8001414 <HAL_UART_MspInit+0x12c>)
 800134c:	f043 0308 	orr.w	r3, r3, #8
 8001350:	6313      	str	r3, [r2, #48]	@ 0x30
 8001352:	4b30      	ldr	r3, [pc, #192]	@ (8001414 <HAL_UART_MspInit+0x12c>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	f003 0308 	and.w	r3, r3, #8
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800135e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001362:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	2302      	movs	r3, #2
 8001366:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136c:	2303      	movs	r3, #3
 800136e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001370:	2308      	movs	r3, #8
 8001372:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001374:	f107 031c 	add.w	r3, r7, #28
 8001378:	4619      	mov	r1, r3
 800137a:	4827      	ldr	r0, [pc, #156]	@ (8001418 <HAL_UART_MspInit+0x130>)
 800137c:	f000 ff44 	bl	8002208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001380:	2304      	movs	r3, #4
 8001382:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001384:	2302      	movs	r3, #2
 8001386:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138c:	2303      	movs	r3, #3
 800138e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001390:	2308      	movs	r3, #8
 8001392:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001394:	f107 031c 	add.w	r3, r7, #28
 8001398:	4619      	mov	r1, r3
 800139a:	4820      	ldr	r0, [pc, #128]	@ (800141c <HAL_UART_MspInit+0x134>)
 800139c:	f000 ff34 	bl	8002208 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013a0:	e031      	b.n	8001406 <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART3)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001420 <HAL_UART_MspInit+0x138>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d12c      	bne.n	8001406 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	4b18      	ldr	r3, [pc, #96]	@ (8001414 <HAL_UART_MspInit+0x12c>)
 80013b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b4:	4a17      	ldr	r2, [pc, #92]	@ (8001414 <HAL_UART_MspInit+0x12c>)
 80013b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80013bc:	4b15      	ldr	r3, [pc, #84]	@ (8001414 <HAL_UART_MspInit+0x12c>)
 80013be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013c8:	2300      	movs	r3, #0
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	4b11      	ldr	r3, [pc, #68]	@ (8001414 <HAL_UART_MspInit+0x12c>)
 80013ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d0:	4a10      	ldr	r2, [pc, #64]	@ (8001414 <HAL_UART_MspInit+0x12c>)
 80013d2:	f043 0308 	orr.w	r3, r3, #8
 80013d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001414 <HAL_UART_MspInit+0x12c>)
 80013da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013dc:	f003 0308 	and.w	r3, r3, #8
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013e4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ea:	2302      	movs	r3, #2
 80013ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f2:	2303      	movs	r3, #3
 80013f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013f6:	2307      	movs	r3, #7
 80013f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013fa:	f107 031c 	add.w	r3, r7, #28
 80013fe:	4619      	mov	r1, r3
 8001400:	4806      	ldr	r0, [pc, #24]	@ (800141c <HAL_UART_MspInit+0x134>)
 8001402:	f000 ff01 	bl	8002208 <HAL_GPIO_Init>
}
 8001406:	bf00      	nop
 8001408:	3730      	adds	r7, #48	@ 0x30
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40005000 	.word	0x40005000
 8001414:	40023800 	.word	0x40023800
 8001418:	40020800 	.word	0x40020800
 800141c:	40020c00 	.word	0x40020c00
 8001420:	40004800 	.word	0x40004800

08001424 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	@ 0x28
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001444:	d13f      	bne.n	80014c6 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	4b21      	ldr	r3, [pc, #132]	@ (80014d0 <HAL_PCD_MspInit+0xac>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	4a20      	ldr	r2, [pc, #128]	@ (80014d0 <HAL_PCD_MspInit+0xac>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6313      	str	r3, [r2, #48]	@ 0x30
 8001456:	4b1e      	ldr	r3, [pc, #120]	@ (80014d0 <HAL_PCD_MspInit+0xac>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001462:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001470:	2303      	movs	r3, #3
 8001472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001474:	230a      	movs	r3, #10
 8001476:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	4619      	mov	r1, r3
 800147e:	4815      	ldr	r0, [pc, #84]	@ (80014d4 <HAL_PCD_MspInit+0xb0>)
 8001480:	f000 fec2 	bl	8002208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001484:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001488:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800148a:	2300      	movs	r3, #0
 800148c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001492:	f107 0314 	add.w	r3, r7, #20
 8001496:	4619      	mov	r1, r3
 8001498:	480e      	ldr	r0, [pc, #56]	@ (80014d4 <HAL_PCD_MspInit+0xb0>)
 800149a:	f000 feb5 	bl	8002208 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800149e:	4b0c      	ldr	r3, [pc, #48]	@ (80014d0 <HAL_PCD_MspInit+0xac>)
 80014a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014a2:	4a0b      	ldr	r2, [pc, #44]	@ (80014d0 <HAL_PCD_MspInit+0xac>)
 80014a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014a8:	6353      	str	r3, [r2, #52]	@ 0x34
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	4b08      	ldr	r3, [pc, #32]	@ (80014d0 <HAL_PCD_MspInit+0xac>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014b2:	4a07      	ldr	r2, [pc, #28]	@ (80014d0 <HAL_PCD_MspInit+0xac>)
 80014b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ba:	4b05      	ldr	r3, [pc, #20]	@ (80014d0 <HAL_PCD_MspInit+0xac>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80014c6:	bf00      	nop
 80014c8:	3728      	adds	r7, #40	@ 0x28
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40020000 	.word	0x40020000

080014d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08e      	sub	sp, #56	@ 0x38
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80014e0:	2300      	movs	r3, #0
 80014e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80014e4:	2300      	movs	r3, #0
 80014e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	4b33      	ldr	r3, [pc, #204]	@ (80015bc <HAL_InitTick+0xe4>)
 80014ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f0:	4a32      	ldr	r2, [pc, #200]	@ (80015bc <HAL_InitTick+0xe4>)
 80014f2:	f043 0310 	orr.w	r3, r3, #16
 80014f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80014f8:	4b30      	ldr	r3, [pc, #192]	@ (80015bc <HAL_InitTick+0xe4>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fc:	f003 0310 	and.w	r3, r3, #16
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001504:	f107 0210 	add.w	r2, r7, #16
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	4611      	mov	r1, r2
 800150e:	4618      	mov	r0, r3
 8001510:	f001 fe00 	bl	8003114 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001514:	6a3b      	ldr	r3, [r7, #32]
 8001516:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800151a:	2b00      	cmp	r3, #0
 800151c:	d103      	bne.n	8001526 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800151e:	f001 fdd1 	bl	80030c4 <HAL_RCC_GetPCLK1Freq>
 8001522:	6378      	str	r0, [r7, #52]	@ 0x34
 8001524:	e004      	b.n	8001530 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001526:	f001 fdcd 	bl	80030c4 <HAL_RCC_GetPCLK1Freq>
 800152a:	4603      	mov	r3, r0
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001532:	4a23      	ldr	r2, [pc, #140]	@ (80015c0 <HAL_InitTick+0xe8>)
 8001534:	fba2 2303 	umull	r2, r3, r2, r3
 8001538:	0c9b      	lsrs	r3, r3, #18
 800153a:	3b01      	subs	r3, #1
 800153c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800153e:	4b21      	ldr	r3, [pc, #132]	@ (80015c4 <HAL_InitTick+0xec>)
 8001540:	4a21      	ldr	r2, [pc, #132]	@ (80015c8 <HAL_InitTick+0xf0>)
 8001542:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001544:	4b1f      	ldr	r3, [pc, #124]	@ (80015c4 <HAL_InitTick+0xec>)
 8001546:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800154a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800154c:	4a1d      	ldr	r2, [pc, #116]	@ (80015c4 <HAL_InitTick+0xec>)
 800154e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001550:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001552:	4b1c      	ldr	r3, [pc, #112]	@ (80015c4 <HAL_InitTick+0xec>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001558:	4b1a      	ldr	r3, [pc, #104]	@ (80015c4 <HAL_InitTick+0xec>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155e:	4b19      	ldr	r3, [pc, #100]	@ (80015c4 <HAL_InitTick+0xec>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001564:	4817      	ldr	r0, [pc, #92]	@ (80015c4 <HAL_InitTick+0xec>)
 8001566:	f001 fe07 	bl	8003178 <HAL_TIM_Base_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001570:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001574:	2b00      	cmp	r3, #0
 8001576:	d11b      	bne.n	80015b0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001578:	4812      	ldr	r0, [pc, #72]	@ (80015c4 <HAL_InitTick+0xec>)
 800157a:	f001 fe4d 	bl	8003218 <HAL_TIM_Base_Start_IT>
 800157e:	4603      	mov	r3, r0
 8001580:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001584:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001588:	2b00      	cmp	r3, #0
 800158a:	d111      	bne.n	80015b0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800158c:	2036      	movs	r0, #54	@ 0x36
 800158e:	f000 fa73 	bl	8001a78 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2b0f      	cmp	r3, #15
 8001596:	d808      	bhi.n	80015aa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001598:	2200      	movs	r2, #0
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	2036      	movs	r0, #54	@ 0x36
 800159e:	f000 fa4f 	bl	8001a40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015a2:	4a0a      	ldr	r2, [pc, #40]	@ (80015cc <HAL_InitTick+0xf4>)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6013      	str	r3, [r2, #0]
 80015a8:	e002      	b.n	80015b0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80015b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3738      	adds	r7, #56	@ 0x38
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40023800 	.word	0x40023800
 80015c0:	431bde83 	.word	0x431bde83
 80015c4:	20000b8c 	.word	0x20000b8c
 80015c8:	40001000 	.word	0x40001000
 80015cc:	20000004 	.word	0x20000004

080015d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <NMI_Handler+0x4>

080015d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <HardFault_Handler+0x4>

080015e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <MemManage_Handler+0x4>

080015e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ec:	bf00      	nop
 80015ee:	e7fd      	b.n	80015ec <BusFault_Handler+0x4>

080015f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f4:	bf00      	nop
 80015f6:	e7fd      	b.n	80015f4 <UsageFault_Handler+0x4>

080015f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
	...

08001608 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800160c:	4802      	ldr	r0, [pc, #8]	@ (8001618 <USART3_IRQHandler+0x10>)
 800160e:	f002 ff7b 	bl	8004508 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000628 	.word	0x20000628

0800161c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001620:	4802      	ldr	r0, [pc, #8]	@ (800162c <UART5_IRQHandler+0x10>)
 8001622:	f002 ff71 	bl	8004508 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200005e0 	.word	0x200005e0

08001630 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001634:	4802      	ldr	r0, [pc, #8]	@ (8001640 <TIM6_DAC_IRQHandler+0x10>)
 8001636:	f001 ff81 	bl	800353c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000b8c 	.word	0x20000b8c

08001644 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	e00a      	b.n	800166c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001656:	f7fe ffbf 	bl	80005d8 <__io_getchar>
 800165a:	4601      	mov	r1, r0
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	1c5a      	adds	r2, r3, #1
 8001660:	60ba      	str	r2, [r7, #8]
 8001662:	b2ca      	uxtb	r2, r1
 8001664:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	3301      	adds	r3, #1
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	697a      	ldr	r2, [r7, #20]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	429a      	cmp	r2, r3
 8001672:	dbf0      	blt.n	8001656 <_read+0x12>
  }

  return len;
 8001674:	687b      	ldr	r3, [r7, #4]
}
 8001676:	4618      	mov	r0, r3
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b086      	sub	sp, #24
 8001682:	af00      	add	r7, sp, #0
 8001684:	60f8      	str	r0, [r7, #12]
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	e009      	b.n	80016a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	1c5a      	adds	r2, r3, #1
 8001694:	60ba      	str	r2, [r7, #8]
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f7fe ff8b 	bl	80005b4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	3301      	adds	r3, #1
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	dbf1      	blt.n	8001690 <_write+0x12>
  }
  return len;
 80016ac:	687b      	ldr	r3, [r7, #4]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <_close>:

int _close(int file)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016de:	605a      	str	r2, [r3, #4]
  return 0;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <_isatty>:

int _isatty(int file)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016f6:	2301      	movs	r3, #1
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
	...

08001720 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001728:	4a14      	ldr	r2, [pc, #80]	@ (800177c <_sbrk+0x5c>)
 800172a:	4b15      	ldr	r3, [pc, #84]	@ (8001780 <_sbrk+0x60>)
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001734:	4b13      	ldr	r3, [pc, #76]	@ (8001784 <_sbrk+0x64>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d102      	bne.n	8001742 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800173c:	4b11      	ldr	r3, [pc, #68]	@ (8001784 <_sbrk+0x64>)
 800173e:	4a12      	ldr	r2, [pc, #72]	@ (8001788 <_sbrk+0x68>)
 8001740:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001742:	4b10      	ldr	r3, [pc, #64]	@ (8001784 <_sbrk+0x64>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4413      	add	r3, r2
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	429a      	cmp	r2, r3
 800174e:	d207      	bcs.n	8001760 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001750:	f006 fede 	bl	8008510 <__errno>
 8001754:	4603      	mov	r3, r0
 8001756:	220c      	movs	r2, #12
 8001758:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800175a:	f04f 33ff 	mov.w	r3, #4294967295
 800175e:	e009      	b.n	8001774 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001760:	4b08      	ldr	r3, [pc, #32]	@ (8001784 <_sbrk+0x64>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001766:	4b07      	ldr	r3, [pc, #28]	@ (8001784 <_sbrk+0x64>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4413      	add	r3, r2
 800176e:	4a05      	ldr	r2, [pc, #20]	@ (8001784 <_sbrk+0x64>)
 8001770:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001772:	68fb      	ldr	r3, [r7, #12]
}
 8001774:	4618      	mov	r0, r3
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20030000 	.word	0x20030000
 8001780:	00000400 	.word	0x00000400
 8001784:	20000bd4 	.word	0x20000bd4
 8001788:	20004a80 	.word	0x20004a80

0800178c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001790:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <SystemInit+0x20>)
 8001792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001796:	4a05      	ldr	r2, [pc, #20]	@ (80017ac <SystemInit+0x20>)
 8001798:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800179c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80017b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017b4:	f7ff ffea 	bl	800178c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017b8:	480c      	ldr	r0, [pc, #48]	@ (80017ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017ba:	490d      	ldr	r1, [pc, #52]	@ (80017f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017bc:	4a0d      	ldr	r2, [pc, #52]	@ (80017f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c0:	e002      	b.n	80017c8 <LoopCopyDataInit>

080017c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017c6:	3304      	adds	r3, #4

080017c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017cc:	d3f9      	bcc.n	80017c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ce:	4a0a      	ldr	r2, [pc, #40]	@ (80017f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017d0:	4c0a      	ldr	r4, [pc, #40]	@ (80017fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80017d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d4:	e001      	b.n	80017da <LoopFillZerobss>

080017d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d8:	3204      	adds	r2, #4

080017da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017dc:	d3fb      	bcc.n	80017d6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80017de:	f006 fe9d 	bl	800851c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017e2:	f7fe ff1f 	bl	8000624 <main>
  bx  lr    
 80017e6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80017e8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80017ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80017f4:	080091bc 	.word	0x080091bc
  ldr r2, =_sbss
 80017f8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80017fc:	20004a7c 	.word	0x20004a7c

08001800 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001800:	e7fe      	b.n	8001800 <ADC_IRQHandler>
	...

08001804 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001808:	4b0e      	ldr	r3, [pc, #56]	@ (8001844 <HAL_Init+0x40>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a0d      	ldr	r2, [pc, #52]	@ (8001844 <HAL_Init+0x40>)
 800180e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001812:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001814:	4b0b      	ldr	r3, [pc, #44]	@ (8001844 <HAL_Init+0x40>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a0a      	ldr	r2, [pc, #40]	@ (8001844 <HAL_Init+0x40>)
 800181a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800181e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001820:	4b08      	ldr	r3, [pc, #32]	@ (8001844 <HAL_Init+0x40>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a07      	ldr	r2, [pc, #28]	@ (8001844 <HAL_Init+0x40>)
 8001826:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800182a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800182c:	2003      	movs	r0, #3
 800182e:	f000 f8fc 	bl	8001a2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001832:	200f      	movs	r0, #15
 8001834:	f7ff fe50 	bl	80014d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001838:	f7ff fbce 	bl	8000fd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40023c00 	.word	0x40023c00

08001848 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800184c:	4b06      	ldr	r3, [pc, #24]	@ (8001868 <HAL_IncTick+0x20>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	461a      	mov	r2, r3
 8001852:	4b06      	ldr	r3, [pc, #24]	@ (800186c <HAL_IncTick+0x24>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4413      	add	r3, r2
 8001858:	4a04      	ldr	r2, [pc, #16]	@ (800186c <HAL_IncTick+0x24>)
 800185a:	6013      	str	r3, [r2, #0]
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	20000008 	.word	0x20000008
 800186c:	20000bd8 	.word	0x20000bd8

08001870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  return uwTick;
 8001874:	4b03      	ldr	r3, [pc, #12]	@ (8001884 <HAL_GetTick+0x14>)
 8001876:	681b      	ldr	r3, [r3, #0]
}
 8001878:	4618      	mov	r0, r3
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	20000bd8 	.word	0x20000bd8

08001888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001890:	f7ff ffee 	bl	8001870 <HAL_GetTick>
 8001894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a0:	d005      	beq.n	80018ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018a2:	4b0a      	ldr	r3, [pc, #40]	@ (80018cc <HAL_Delay+0x44>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	461a      	mov	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4413      	add	r3, r2
 80018ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018ae:	bf00      	nop
 80018b0:	f7ff ffde 	bl	8001870 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d8f7      	bhi.n	80018b0 <HAL_Delay+0x28>
  {
  }
}
 80018c0:	bf00      	nop
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000008 	.word	0x20000008

080018d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001914 <__NVIC_SetPriorityGrouping+0x44>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018ec:	4013      	ands	r3, r2
 80018ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001902:	4a04      	ldr	r2, [pc, #16]	@ (8001914 <__NVIC_SetPriorityGrouping+0x44>)
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	60d3      	str	r3, [r2, #12]
}
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800191c:	4b04      	ldr	r3, [pc, #16]	@ (8001930 <__NVIC_GetPriorityGrouping+0x18>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	0a1b      	lsrs	r3, r3, #8
 8001922:	f003 0307 	and.w	r3, r3, #7
}
 8001926:	4618      	mov	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	2b00      	cmp	r3, #0
 8001944:	db0b      	blt.n	800195e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	f003 021f 	and.w	r2, r3, #31
 800194c:	4907      	ldr	r1, [pc, #28]	@ (800196c <__NVIC_EnableIRQ+0x38>)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	095b      	lsrs	r3, r3, #5
 8001954:	2001      	movs	r0, #1
 8001956:	fa00 f202 	lsl.w	r2, r0, r2
 800195a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	e000e100 	.word	0xe000e100

08001970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	6039      	str	r1, [r7, #0]
 800197a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001980:	2b00      	cmp	r3, #0
 8001982:	db0a      	blt.n	800199a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	b2da      	uxtb	r2, r3
 8001988:	490c      	ldr	r1, [pc, #48]	@ (80019bc <__NVIC_SetPriority+0x4c>)
 800198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198e:	0112      	lsls	r2, r2, #4
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	440b      	add	r3, r1
 8001994:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001998:	e00a      	b.n	80019b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	b2da      	uxtb	r2, r3
 800199e:	4908      	ldr	r1, [pc, #32]	@ (80019c0 <__NVIC_SetPriority+0x50>)
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	3b04      	subs	r3, #4
 80019a8:	0112      	lsls	r2, r2, #4
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	440b      	add	r3, r1
 80019ae:	761a      	strb	r2, [r3, #24]
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	e000e100 	.word	0xe000e100
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b089      	sub	sp, #36	@ 0x24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f1c3 0307 	rsb	r3, r3, #7
 80019de:	2b04      	cmp	r3, #4
 80019e0:	bf28      	it	cs
 80019e2:	2304      	movcs	r3, #4
 80019e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	3304      	adds	r3, #4
 80019ea:	2b06      	cmp	r3, #6
 80019ec:	d902      	bls.n	80019f4 <NVIC_EncodePriority+0x30>
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3b03      	subs	r3, #3
 80019f2:	e000      	b.n	80019f6 <NVIC_EncodePriority+0x32>
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f8:	f04f 32ff 	mov.w	r2, #4294967295
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43da      	mvns	r2, r3
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	401a      	ands	r2, r3
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	fa01 f303 	lsl.w	r3, r1, r3
 8001a16:	43d9      	mvns	r1, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a1c:	4313      	orrs	r3, r2
         );
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3724      	adds	r7, #36	@ 0x24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff ff4c 	bl	80018d0 <__NVIC_SetPriorityGrouping>
}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
 8001a4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a52:	f7ff ff61 	bl	8001918 <__NVIC_GetPriorityGrouping>
 8001a56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	68b9      	ldr	r1, [r7, #8]
 8001a5c:	6978      	ldr	r0, [r7, #20]
 8001a5e:	f7ff ffb1 	bl	80019c4 <NVIC_EncodePriority>
 8001a62:	4602      	mov	r2, r0
 8001a64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a68:	4611      	mov	r1, r2
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff ff80 	bl	8001970 <__NVIC_SetPriority>
}
 8001a70:	bf00      	nop
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff ff54 	bl	8001934 <__NVIC_EnableIRQ>
}
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aa0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001aa2:	f7ff fee5 	bl	8001870 <HAL_GetTick>
 8001aa6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d008      	beq.n	8001ac6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2280      	movs	r2, #128	@ 0x80
 8001ab8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e052      	b.n	8001b6c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f022 0216 	bic.w	r2, r2, #22
 8001ad4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	695a      	ldr	r2, [r3, #20]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ae4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d103      	bne.n	8001af6 <HAL_DMA_Abort+0x62>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d007      	beq.n	8001b06 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 0208 	bic.w	r2, r2, #8
 8001b04:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 0201 	bic.w	r2, r2, #1
 8001b14:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b16:	e013      	b.n	8001b40 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b18:	f7ff feaa 	bl	8001870 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b05      	cmp	r3, #5
 8001b24:	d90c      	bls.n	8001b40 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2220      	movs	r2, #32
 8001b2a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2203      	movs	r2, #3
 8001b30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e015      	b.n	8001b6c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1e4      	bne.n	8001b18 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b52:	223f      	movs	r2, #63	@ 0x3f
 8001b54:	409a      	lsls	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d004      	beq.n	8001b92 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2280      	movs	r2, #128	@ 0x80
 8001b8c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e00c      	b.n	8001bac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2205      	movs	r2, #5
 8001b96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 0201 	bic.w	r2, r2, #1
 8001ba8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e06c      	b.n	8001ca4 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d106      	bne.n	8001be2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2223      	movs	r2, #35	@ 0x23
 8001bd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff fa27 	bl	8001030 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	4b31      	ldr	r3, [pc, #196]	@ (8001cac <HAL_ETH_Init+0xf4>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bea:	4a30      	ldr	r2, [pc, #192]	@ (8001cac <HAL_ETH_Init+0xf4>)
 8001bec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bf0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bf2:	4b2e      	ldr	r3, [pc, #184]	@ (8001cac <HAL_ETH_Init+0xf4>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001bfe:	4b2c      	ldr	r3, [pc, #176]	@ (8001cb0 <HAL_ETH_Init+0xf8>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	4a2b      	ldr	r2, [pc, #172]	@ (8001cb0 <HAL_ETH_Init+0xf8>)
 8001c04:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001c08:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001c0a:	4b29      	ldr	r3, [pc, #164]	@ (8001cb0 <HAL_ETH_Init+0xf8>)
 8001c0c:	685a      	ldr	r2, [r3, #4]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	4927      	ldr	r1, [pc, #156]	@ (8001cb0 <HAL_ETH_Init+0xf8>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001c18:	4b25      	ldr	r3, [pc, #148]	@ (8001cb0 <HAL_ETH_Init+0xf8>)
 8001c1a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	6812      	ldr	r2, [r2, #0]
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c32:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c34:	f7ff fe1c 	bl	8001870 <HAL_GetTick>
 8001c38:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001c3a:	e011      	b.n	8001c60 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001c3c:	f7ff fe18 	bl	8001870 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001c4a:	d909      	bls.n	8001c60 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2204      	movs	r2, #4
 8001c50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	22e0      	movs	r2, #224	@ 0xe0
 8001c58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e021      	b.n	8001ca4 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1e4      	bne.n	8001c3c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f958 	bl	8001f28 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 f9ff 	bl	800207c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 fa55 	bl	800212e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f9bd 	bl	800200c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2210      	movs	r2, #16
 8001c9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40013800 	.word	0x40013800

08001cb4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	4b51      	ldr	r3, [pc, #324]	@ (8001e10 <ETH_SetMACConfig+0x15c>)
 8001cca:	4013      	ands	r3, r2
 8001ccc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	7c1b      	ldrb	r3, [r3, #16]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d102      	bne.n	8001cdc <ETH_SetMACConfig+0x28>
 8001cd6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001cda:	e000      	b.n	8001cde <ETH_SetMACConfig+0x2a>
 8001cdc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	7c5b      	ldrb	r3, [r3, #17]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d102      	bne.n	8001cec <ETH_SetMACConfig+0x38>
 8001ce6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001cea:	e000      	b.n	8001cee <ETH_SetMACConfig+0x3a>
 8001cec:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001cee:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001cf4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	7fdb      	ldrb	r3, [r3, #31]
 8001cfa:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001cfc:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001d02:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	7f92      	ldrb	r2, [r2, #30]
 8001d08:	2a00      	cmp	r2, #0
 8001d0a:	d102      	bne.n	8001d12 <ETH_SetMACConfig+0x5e>
 8001d0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d10:	e000      	b.n	8001d14 <ETH_SetMACConfig+0x60>
 8001d12:	2200      	movs	r2, #0
                        macconf->Speed |
 8001d14:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	7f1b      	ldrb	r3, [r3, #28]
 8001d1a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001d1c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001d22:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	791b      	ldrb	r3, [r3, #4]
 8001d28:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001d2a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001d32:	2a00      	cmp	r2, #0
 8001d34:	d102      	bne.n	8001d3c <ETH_SetMACConfig+0x88>
 8001d36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d3a:	e000      	b.n	8001d3e <ETH_SetMACConfig+0x8a>
 8001d3c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001d3e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	7bdb      	ldrb	r3, [r3, #15]
 8001d44:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001d46:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001d4c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001d54:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d56:	4313      	orrs	r3, r2
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d6e:	2001      	movs	r0, #1
 8001d70:	f7ff fd8a 	bl	8001888 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d92:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001d9a:	2a00      	cmp	r2, #0
 8001d9c:	d101      	bne.n	8001da2 <ETH_SetMACConfig+0xee>
 8001d9e:	2280      	movs	r2, #128	@ 0x80
 8001da0:	e000      	b.n	8001da4 <ETH_SetMACConfig+0xf0>
 8001da2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001da4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001daa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001db2:	2a01      	cmp	r2, #1
 8001db4:	d101      	bne.n	8001dba <ETH_SetMACConfig+0x106>
 8001db6:	2208      	movs	r2, #8
 8001db8:	e000      	b.n	8001dbc <ETH_SetMACConfig+0x108>
 8001dba:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001dbc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001dc4:	2a01      	cmp	r2, #1
 8001dc6:	d101      	bne.n	8001dcc <ETH_SetMACConfig+0x118>
 8001dc8:	2204      	movs	r2, #4
 8001dca:	e000      	b.n	8001dce <ETH_SetMACConfig+0x11a>
 8001dcc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001dce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001dd6:	2a01      	cmp	r2, #1
 8001dd8:	d101      	bne.n	8001dde <ETH_SetMACConfig+0x12a>
 8001dda:	2202      	movs	r2, #2
 8001ddc:	e000      	b.n	8001de0 <ETH_SetMACConfig+0x12c>
 8001dde:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001de0:	4313      	orrs	r3, r2
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001df8:	2001      	movs	r0, #1
 8001dfa:	f7ff fd45 	bl	8001888 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	619a      	str	r2, [r3, #24]
}
 8001e06:	bf00      	nop
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	ff20810f 	.word	0xff20810f

08001e14 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	4b3d      	ldr	r3, [pc, #244]	@ (8001f24 <ETH_SetDMAConfig+0x110>)
 8001e2e:	4013      	ands	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	7b1b      	ldrb	r3, [r3, #12]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d102      	bne.n	8001e40 <ETH_SetDMAConfig+0x2c>
 8001e3a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001e3e:	e000      	b.n	8001e42 <ETH_SetDMAConfig+0x2e>
 8001e40:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	7b5b      	ldrb	r3, [r3, #13]
 8001e46:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e48:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	7f52      	ldrb	r2, [r2, #29]
 8001e4e:	2a00      	cmp	r2, #0
 8001e50:	d102      	bne.n	8001e58 <ETH_SetDMAConfig+0x44>
 8001e52:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001e56:	e000      	b.n	8001e5a <ETH_SetDMAConfig+0x46>
 8001e58:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001e5a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	7b9b      	ldrb	r3, [r3, #14]
 8001e60:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001e62:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001e68:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	7f1b      	ldrb	r3, [r3, #28]
 8001e6e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001e70:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	7f9b      	ldrb	r3, [r3, #30]
 8001e76:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001e78:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001e7e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e86:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e98:	461a      	mov	r2, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001eaa:	2001      	movs	r0, #1
 8001eac:	f7ff fcec 	bl	8001888 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001eb8:	461a      	mov	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	791b      	ldrb	r3, [r3, #4]
 8001ec2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001ec8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001ece:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001ed4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001edc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001ede:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001ee6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001eec:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	6812      	ldr	r2, [r2, #0]
 8001ef2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ef6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001efa:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f08:	2001      	movs	r0, #1
 8001f0a:	f7ff fcbd 	bl	8001888 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f16:	461a      	mov	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6013      	str	r3, [r2, #0]
}
 8001f1c:	bf00      	nop
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	f8de3f23 	.word	0xf8de3f23

08001f28 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b0a6      	sub	sp, #152	@ 0x98
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001f30:	2301      	movs	r3, #1
 8001f32:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001f36:	2301      	movs	r3, #1
 8001f38:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001f40:	2300      	movs	r3, #0
 8001f42:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001f46:	2301      	movs	r3, #1
 8001f48:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001f52:	2301      	movs	r3, #1
 8001f54:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f64:	2300      	movs	r3, #0
 8001f66:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001f72:	2300      	movs	r3, #0
 8001f74:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001f84:	2300      	movs	r3, #0
 8001f86:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001f8a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001f90:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001f96:	2300      	movs	r3, #0
 8001f98:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001f9c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff fe86 	bl	8001cb4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001fac:	2301      	movs	r3, #1
 8001fae:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001fd8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fdc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001fde:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001fe2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001fe4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fe8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001fea:	2301      	movs	r3, #1
 8001fec:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001ff8:	f107 0308 	add.w	r3, r7, #8
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff ff08 	bl	8001e14 <ETH_SetDMAConfig>
}
 8002004:	bf00      	nop
 8002006:	3798      	adds	r7, #152	@ 0x98
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800200c:	b480      	push	{r7}
 800200e:	b087      	sub	sp, #28
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3305      	adds	r3, #5
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	021b      	lsls	r3, r3, #8
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	3204      	adds	r2, #4
 8002024:	7812      	ldrb	r2, [r2, #0]
 8002026:	4313      	orrs	r3, r2
 8002028:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	4b11      	ldr	r3, [pc, #68]	@ (8002074 <ETH_MACAddressConfig+0x68>)
 800202e:	4413      	add	r3, r2
 8002030:	461a      	mov	r2, r3
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	3303      	adds	r3, #3
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	061a      	lsls	r2, r3, #24
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	3302      	adds	r3, #2
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	041b      	lsls	r3, r3, #16
 8002046:	431a      	orrs	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3301      	adds	r3, #1
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	021b      	lsls	r3, r3, #8
 8002050:	4313      	orrs	r3, r2
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	7812      	ldrb	r2, [r2, #0]
 8002056:	4313      	orrs	r3, r2
 8002058:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	4b06      	ldr	r3, [pc, #24]	@ (8002078 <ETH_MACAddressConfig+0x6c>)
 800205e:	4413      	add	r3, r2
 8002060:	461a      	mov	r2, r3
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	6013      	str	r3, [r2, #0]
}
 8002066:	bf00      	nop
 8002068:	371c      	adds	r7, #28
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	40028040 	.word	0x40028040
 8002078:	40028044 	.word	0x40028044

0800207c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002084:	2300      	movs	r3, #0
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	e03e      	b.n	8002108 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68d9      	ldr	r1, [r3, #12]
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	4613      	mov	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	440b      	add	r3, r1
 800209a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	2200      	movs	r2, #0
 80020a6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	2200      	movs	r2, #0
 80020ac:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	2200      	movs	r2, #0
 80020b2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80020b4:	68b9      	ldr	r1, [r7, #8]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	3206      	adds	r2, #6
 80020bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d80c      	bhi.n	80020ec <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68d9      	ldr	r1, [r3, #12]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	1c5a      	adds	r2, r3, #1
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	440b      	add	r3, r1
 80020e4:	461a      	mov	r2, r3
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	e004      	b.n	80020f6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	461a      	mov	r2, r3
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	3301      	adds	r3, #1
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2b03      	cmp	r3, #3
 800210c:	d9bd      	bls.n	800208a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68da      	ldr	r2, [r3, #12]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002120:	611a      	str	r2, [r3, #16]
}
 8002122:	bf00      	nop
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800212e:	b480      	push	{r7}
 8002130:	b085      	sub	sp, #20
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002136:	2300      	movs	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	e046      	b.n	80021ca <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6919      	ldr	r1, [r3, #16]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	4613      	mov	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	440b      	add	r3, r1
 800214c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	2200      	movs	r2, #0
 8002158:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2200      	movs	r2, #0
 800215e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	2200      	movs	r2, #0
 8002164:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	2200      	movs	r2, #0
 800216a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	2200      	movs	r2, #0
 8002170:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002178:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8002180:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800218e:	68b9      	ldr	r1, [r7, #8]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	3212      	adds	r2, #18
 8002196:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2b02      	cmp	r3, #2
 800219e:	d80c      	bhi.n	80021ba <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6919      	ldr	r1, [r3, #16]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	1c5a      	adds	r2, r3, #1
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	440b      	add	r3, r1
 80021b2:	461a      	mov	r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	60da      	str	r2, [r3, #12]
 80021b8:	e004      	b.n	80021c4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	461a      	mov	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	3301      	adds	r3, #1
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2b03      	cmp	r3, #3
 80021ce:	d9b5      	bls.n	800213c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691a      	ldr	r2, [r3, #16]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021fa:	60da      	str	r2, [r3, #12]
}
 80021fc:	bf00      	nop
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002208:	b480      	push	{r7}
 800220a:	b089      	sub	sp, #36	@ 0x24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800221a:	2300      	movs	r3, #0
 800221c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
 8002222:	e177      	b.n	8002514 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002224:	2201      	movs	r2, #1
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	4013      	ands	r3, r2
 8002236:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	429a      	cmp	r2, r3
 800223e:	f040 8166 	bne.w	800250e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f003 0303 	and.w	r3, r3, #3
 800224a:	2b01      	cmp	r3, #1
 800224c:	d005      	beq.n	800225a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002256:	2b02      	cmp	r3, #2
 8002258:	d130      	bne.n	80022bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	2203      	movs	r2, #3
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43db      	mvns	r3, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4013      	ands	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	68da      	ldr	r2, [r3, #12]
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4313      	orrs	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002290:	2201      	movs	r2, #1
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4013      	ands	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	091b      	lsrs	r3, r3, #4
 80022a6:	f003 0201 	and.w	r2, r3, #1
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 0303 	and.w	r3, r3, #3
 80022c4:	2b03      	cmp	r3, #3
 80022c6:	d017      	beq.n	80022f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	2203      	movs	r2, #3
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 0303 	and.w	r3, r3, #3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d123      	bne.n	800234c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	08da      	lsrs	r2, r3, #3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3208      	adds	r2, #8
 800230c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002310:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	220f      	movs	r2, #15
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	691a      	ldr	r2, [r3, #16]
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	08da      	lsrs	r2, r3, #3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3208      	adds	r2, #8
 8002346:	69b9      	ldr	r1, [r7, #24]
 8002348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	2203      	movs	r2, #3
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	43db      	mvns	r3, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 0203 	and.w	r2, r3, #3
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4313      	orrs	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 80c0 	beq.w	800250e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	4b66      	ldr	r3, [pc, #408]	@ (800252c <HAL_GPIO_Init+0x324>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002396:	4a65      	ldr	r2, [pc, #404]	@ (800252c <HAL_GPIO_Init+0x324>)
 8002398:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800239c:	6453      	str	r3, [r2, #68]	@ 0x44
 800239e:	4b63      	ldr	r3, [pc, #396]	@ (800252c <HAL_GPIO_Init+0x324>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023aa:	4a61      	ldr	r2, [pc, #388]	@ (8002530 <HAL_GPIO_Init+0x328>)
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	089b      	lsrs	r3, r3, #2
 80023b0:	3302      	adds	r3, #2
 80023b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	220f      	movs	r2, #15
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4013      	ands	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a58      	ldr	r2, [pc, #352]	@ (8002534 <HAL_GPIO_Init+0x32c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d037      	beq.n	8002446 <HAL_GPIO_Init+0x23e>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a57      	ldr	r2, [pc, #348]	@ (8002538 <HAL_GPIO_Init+0x330>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d031      	beq.n	8002442 <HAL_GPIO_Init+0x23a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a56      	ldr	r2, [pc, #344]	@ (800253c <HAL_GPIO_Init+0x334>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d02b      	beq.n	800243e <HAL_GPIO_Init+0x236>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a55      	ldr	r2, [pc, #340]	@ (8002540 <HAL_GPIO_Init+0x338>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d025      	beq.n	800243a <HAL_GPIO_Init+0x232>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a54      	ldr	r2, [pc, #336]	@ (8002544 <HAL_GPIO_Init+0x33c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d01f      	beq.n	8002436 <HAL_GPIO_Init+0x22e>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a53      	ldr	r2, [pc, #332]	@ (8002548 <HAL_GPIO_Init+0x340>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d019      	beq.n	8002432 <HAL_GPIO_Init+0x22a>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a52      	ldr	r2, [pc, #328]	@ (800254c <HAL_GPIO_Init+0x344>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d013      	beq.n	800242e <HAL_GPIO_Init+0x226>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a51      	ldr	r2, [pc, #324]	@ (8002550 <HAL_GPIO_Init+0x348>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d00d      	beq.n	800242a <HAL_GPIO_Init+0x222>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a50      	ldr	r2, [pc, #320]	@ (8002554 <HAL_GPIO_Init+0x34c>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d007      	beq.n	8002426 <HAL_GPIO_Init+0x21e>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a4f      	ldr	r2, [pc, #316]	@ (8002558 <HAL_GPIO_Init+0x350>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d101      	bne.n	8002422 <HAL_GPIO_Init+0x21a>
 800241e:	2309      	movs	r3, #9
 8002420:	e012      	b.n	8002448 <HAL_GPIO_Init+0x240>
 8002422:	230a      	movs	r3, #10
 8002424:	e010      	b.n	8002448 <HAL_GPIO_Init+0x240>
 8002426:	2308      	movs	r3, #8
 8002428:	e00e      	b.n	8002448 <HAL_GPIO_Init+0x240>
 800242a:	2307      	movs	r3, #7
 800242c:	e00c      	b.n	8002448 <HAL_GPIO_Init+0x240>
 800242e:	2306      	movs	r3, #6
 8002430:	e00a      	b.n	8002448 <HAL_GPIO_Init+0x240>
 8002432:	2305      	movs	r3, #5
 8002434:	e008      	b.n	8002448 <HAL_GPIO_Init+0x240>
 8002436:	2304      	movs	r3, #4
 8002438:	e006      	b.n	8002448 <HAL_GPIO_Init+0x240>
 800243a:	2303      	movs	r3, #3
 800243c:	e004      	b.n	8002448 <HAL_GPIO_Init+0x240>
 800243e:	2302      	movs	r3, #2
 8002440:	e002      	b.n	8002448 <HAL_GPIO_Init+0x240>
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <HAL_GPIO_Init+0x240>
 8002446:	2300      	movs	r3, #0
 8002448:	69fa      	ldr	r2, [r7, #28]
 800244a:	f002 0203 	and.w	r2, r2, #3
 800244e:	0092      	lsls	r2, r2, #2
 8002450:	4093      	lsls	r3, r2
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4313      	orrs	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002458:	4935      	ldr	r1, [pc, #212]	@ (8002530 <HAL_GPIO_Init+0x328>)
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	089b      	lsrs	r3, r3, #2
 800245e:	3302      	adds	r3, #2
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002466:	4b3d      	ldr	r3, [pc, #244]	@ (800255c <HAL_GPIO_Init+0x354>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	43db      	mvns	r3, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4013      	ands	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	4313      	orrs	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800248a:	4a34      	ldr	r2, [pc, #208]	@ (800255c <HAL_GPIO_Init+0x354>)
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002490:	4b32      	ldr	r3, [pc, #200]	@ (800255c <HAL_GPIO_Init+0x354>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	43db      	mvns	r3, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4013      	ands	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d003      	beq.n	80024b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024b4:	4a29      	ldr	r2, [pc, #164]	@ (800255c <HAL_GPIO_Init+0x354>)
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024ba:	4b28      	ldr	r3, [pc, #160]	@ (800255c <HAL_GPIO_Init+0x354>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	43db      	mvns	r3, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4013      	ands	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	4313      	orrs	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024de:	4a1f      	ldr	r2, [pc, #124]	@ (800255c <HAL_GPIO_Init+0x354>)
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024e4:	4b1d      	ldr	r3, [pc, #116]	@ (800255c <HAL_GPIO_Init+0x354>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002508:	4a14      	ldr	r2, [pc, #80]	@ (800255c <HAL_GPIO_Init+0x354>)
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	3301      	adds	r3, #1
 8002512:	61fb      	str	r3, [r7, #28]
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	2b0f      	cmp	r3, #15
 8002518:	f67f ae84 	bls.w	8002224 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800251c:	bf00      	nop
 800251e:	bf00      	nop
 8002520:	3724      	adds	r7, #36	@ 0x24
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	40023800 	.word	0x40023800
 8002530:	40013800 	.word	0x40013800
 8002534:	40020000 	.word	0x40020000
 8002538:	40020400 	.word	0x40020400
 800253c:	40020800 	.word	0x40020800
 8002540:	40020c00 	.word	0x40020c00
 8002544:	40021000 	.word	0x40021000
 8002548:	40021400 	.word	0x40021400
 800254c:	40021800 	.word	0x40021800
 8002550:	40021c00 	.word	0x40021c00
 8002554:	40022000 	.word	0x40022000
 8002558:	40022400 	.word	0x40022400
 800255c:	40013c00 	.word	0x40013c00

08002560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	807b      	strh	r3, [r7, #2]
 800256c:	4613      	mov	r3, r2
 800256e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002570:	787b      	ldrb	r3, [r7, #1]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002576:	887a      	ldrh	r2, [r7, #2]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800257c:	e003      	b.n	8002586 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800257e:	887b      	ldrh	r3, [r7, #2]
 8002580:	041a      	lsls	r2, r3, #16
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	619a      	str	r2, [r3, #24]
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002592:	b480      	push	{r7}
 8002594:	b085      	sub	sp, #20
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
 800259a:	460b      	mov	r3, r1
 800259c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025a4:	887a      	ldrh	r2, [r7, #2]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4013      	ands	r3, r2
 80025aa:	041a      	lsls	r2, r3, #16
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	43d9      	mvns	r1, r3
 80025b0:	887b      	ldrh	r3, [r7, #2]
 80025b2:	400b      	ands	r3, r1
 80025b4:	431a      	orrs	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	619a      	str	r2, [r3, #24]
}
 80025ba:	bf00      	nop
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b086      	sub	sp, #24
 80025ca:	af02      	add	r7, sp, #8
 80025cc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e101      	b.n	80027dc <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d106      	bne.n	80025f8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7fe ff16 	bl	8001424 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2203      	movs	r2, #3
 80025fc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002606:	d102      	bne.n	800260e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f002 ff32 	bl	800547c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6818      	ldr	r0, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	7c1a      	ldrb	r2, [r3, #16]
 8002620:	f88d 2000 	strb.w	r2, [sp]
 8002624:	3304      	adds	r3, #4
 8002626:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002628:	f002 fec4 	bl	80053b4 <USB_CoreInit>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d005      	beq.n	800263e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2202      	movs	r2, #2
 8002636:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e0ce      	b.n	80027dc <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2100      	movs	r1, #0
 8002644:	4618      	mov	r0, r3
 8002646:	f002 ff2a 	bl	800549e <USB_SetCurrentMode>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d005      	beq.n	800265c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2202      	movs	r2, #2
 8002654:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e0bf      	b.n	80027dc <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800265c:	2300      	movs	r3, #0
 800265e:	73fb      	strb	r3, [r7, #15]
 8002660:	e04a      	b.n	80026f8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002662:	7bfa      	ldrb	r2, [r7, #15]
 8002664:	6879      	ldr	r1, [r7, #4]
 8002666:	4613      	mov	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	4413      	add	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	440b      	add	r3, r1
 8002670:	3315      	adds	r3, #21
 8002672:	2201      	movs	r2, #1
 8002674:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002676:	7bfa      	ldrb	r2, [r7, #15]
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	4613      	mov	r3, r2
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	4413      	add	r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	440b      	add	r3, r1
 8002684:	3314      	adds	r3, #20
 8002686:	7bfa      	ldrb	r2, [r7, #15]
 8002688:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800268a:	7bfa      	ldrb	r2, [r7, #15]
 800268c:	7bfb      	ldrb	r3, [r7, #15]
 800268e:	b298      	uxth	r0, r3
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	4613      	mov	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	4413      	add	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	440b      	add	r3, r1
 800269c:	332e      	adds	r3, #46	@ 0x2e
 800269e:	4602      	mov	r2, r0
 80026a0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026a2:	7bfa      	ldrb	r2, [r7, #15]
 80026a4:	6879      	ldr	r1, [r7, #4]
 80026a6:	4613      	mov	r3, r2
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	4413      	add	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	440b      	add	r3, r1
 80026b0:	3318      	adds	r3, #24
 80026b2:	2200      	movs	r2, #0
 80026b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026b6:	7bfa      	ldrb	r2, [r7, #15]
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	4613      	mov	r3, r2
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	4413      	add	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	440b      	add	r3, r1
 80026c4:	331c      	adds	r3, #28
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026ca:	7bfa      	ldrb	r2, [r7, #15]
 80026cc:	6879      	ldr	r1, [r7, #4]
 80026ce:	4613      	mov	r3, r2
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	4413      	add	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	440b      	add	r3, r1
 80026d8:	3320      	adds	r3, #32
 80026da:	2200      	movs	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026de:	7bfa      	ldrb	r2, [r7, #15]
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	4613      	mov	r3, r2
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	4413      	add	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	440b      	add	r3, r1
 80026ec:	3324      	adds	r3, #36	@ 0x24
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
 80026f4:	3301      	adds	r3, #1
 80026f6:	73fb      	strb	r3, [r7, #15]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	791b      	ldrb	r3, [r3, #4]
 80026fc:	7bfa      	ldrb	r2, [r7, #15]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d3af      	bcc.n	8002662 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002702:	2300      	movs	r3, #0
 8002704:	73fb      	strb	r3, [r7, #15]
 8002706:	e044      	b.n	8002792 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002708:	7bfa      	ldrb	r2, [r7, #15]
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	4613      	mov	r3, r2
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	4413      	add	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800271a:	2200      	movs	r2, #0
 800271c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800271e:	7bfa      	ldrb	r2, [r7, #15]
 8002720:	6879      	ldr	r1, [r7, #4]
 8002722:	4613      	mov	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	4413      	add	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	440b      	add	r3, r1
 800272c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002730:	7bfa      	ldrb	r2, [r7, #15]
 8002732:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002734:	7bfa      	ldrb	r2, [r7, #15]
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	4613      	mov	r3, r2
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	4413      	add	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002746:	2200      	movs	r2, #0
 8002748:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800274a:	7bfa      	ldrb	r2, [r7, #15]
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	4413      	add	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	440b      	add	r3, r1
 8002758:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002760:	7bfa      	ldrb	r2, [r7, #15]
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	4413      	add	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002772:	2200      	movs	r2, #0
 8002774:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002776:	7bfa      	ldrb	r2, [r7, #15]
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	4413      	add	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	440b      	add	r3, r1
 8002784:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800278c:	7bfb      	ldrb	r3, [r7, #15]
 800278e:	3301      	adds	r3, #1
 8002790:	73fb      	strb	r3, [r7, #15]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	791b      	ldrb	r3, [r3, #4]
 8002796:	7bfa      	ldrb	r2, [r7, #15]
 8002798:	429a      	cmp	r2, r3
 800279a:	d3b5      	bcc.n	8002708 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6818      	ldr	r0, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	7c1a      	ldrb	r2, [r3, #16]
 80027a4:	f88d 2000 	strb.w	r2, [sp]
 80027a8:	3304      	adds	r3, #4
 80027aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027ac:	f002 fec4 	bl	8005538 <USB_DevInit>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d005      	beq.n	80027c2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2202      	movs	r2, #2
 80027ba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e00c      	b.n	80027dc <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f003 f88c 	bl	80058f2 <USB_DevDisconnect>

  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e267      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d075      	beq.n	80028ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002802:	4b88      	ldr	r3, [pc, #544]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 030c 	and.w	r3, r3, #12
 800280a:	2b04      	cmp	r3, #4
 800280c:	d00c      	beq.n	8002828 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800280e:	4b85      	ldr	r3, [pc, #532]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002816:	2b08      	cmp	r3, #8
 8002818:	d112      	bne.n	8002840 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800281a:	4b82      	ldr	r3, [pc, #520]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002822:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002826:	d10b      	bne.n	8002840 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002828:	4b7e      	ldr	r3, [pc, #504]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d05b      	beq.n	80028ec <HAL_RCC_OscConfig+0x108>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d157      	bne.n	80028ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e242      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002848:	d106      	bne.n	8002858 <HAL_RCC_OscConfig+0x74>
 800284a:	4b76      	ldr	r3, [pc, #472]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a75      	ldr	r2, [pc, #468]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002850:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002854:	6013      	str	r3, [r2, #0]
 8002856:	e01d      	b.n	8002894 <HAL_RCC_OscConfig+0xb0>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002860:	d10c      	bne.n	800287c <HAL_RCC_OscConfig+0x98>
 8002862:	4b70      	ldr	r3, [pc, #448]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a6f      	ldr	r2, [pc, #444]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002868:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	4b6d      	ldr	r3, [pc, #436]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a6c      	ldr	r2, [pc, #432]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002874:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	e00b      	b.n	8002894 <HAL_RCC_OscConfig+0xb0>
 800287c:	4b69      	ldr	r3, [pc, #420]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a68      	ldr	r2, [pc, #416]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002882:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002886:	6013      	str	r3, [r2, #0]
 8002888:	4b66      	ldr	r3, [pc, #408]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a65      	ldr	r2, [pc, #404]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 800288e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002892:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d013      	beq.n	80028c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289c:	f7fe ffe8 	bl	8001870 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028a4:	f7fe ffe4 	bl	8001870 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b64      	cmp	r3, #100	@ 0x64
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e207      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b6:	4b5b      	ldr	r3, [pc, #364]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d0f0      	beq.n	80028a4 <HAL_RCC_OscConfig+0xc0>
 80028c2:	e014      	b.n	80028ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c4:	f7fe ffd4 	bl	8001870 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028cc:	f7fe ffd0 	bl	8001870 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b64      	cmp	r3, #100	@ 0x64
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e1f3      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028de:	4b51      	ldr	r3, [pc, #324]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f0      	bne.n	80028cc <HAL_RCC_OscConfig+0xe8>
 80028ea:	e000      	b.n	80028ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d063      	beq.n	80029c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028fa:	4b4a      	ldr	r3, [pc, #296]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 030c 	and.w	r3, r3, #12
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00b      	beq.n	800291e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002906:	4b47      	ldr	r3, [pc, #284]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800290e:	2b08      	cmp	r3, #8
 8002910:	d11c      	bne.n	800294c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002912:	4b44      	ldr	r3, [pc, #272]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d116      	bne.n	800294c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800291e:	4b41      	ldr	r3, [pc, #260]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d005      	beq.n	8002936 <HAL_RCC_OscConfig+0x152>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d001      	beq.n	8002936 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e1c7      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002936:	4b3b      	ldr	r3, [pc, #236]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	4937      	ldr	r1, [pc, #220]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002946:	4313      	orrs	r3, r2
 8002948:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800294a:	e03a      	b.n	80029c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d020      	beq.n	8002996 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002954:	4b34      	ldr	r3, [pc, #208]	@ (8002a28 <HAL_RCC_OscConfig+0x244>)
 8002956:	2201      	movs	r2, #1
 8002958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295a:	f7fe ff89 	bl	8001870 <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002962:	f7fe ff85 	bl	8001870 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e1a8      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002974:	4b2b      	ldr	r3, [pc, #172]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0f0      	beq.n	8002962 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002980:	4b28      	ldr	r3, [pc, #160]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	4925      	ldr	r1, [pc, #148]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002990:	4313      	orrs	r3, r2
 8002992:	600b      	str	r3, [r1, #0]
 8002994:	e015      	b.n	80029c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002996:	4b24      	ldr	r3, [pc, #144]	@ (8002a28 <HAL_RCC_OscConfig+0x244>)
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299c:	f7fe ff68 	bl	8001870 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029a4:	f7fe ff64 	bl	8001870 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e187      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f0      	bne.n	80029a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d036      	beq.n	8002a3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d016      	beq.n	8002a04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029d6:	4b15      	ldr	r3, [pc, #84]	@ (8002a2c <HAL_RCC_OscConfig+0x248>)
 80029d8:	2201      	movs	r2, #1
 80029da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029dc:	f7fe ff48 	bl	8001870 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029e4:	f7fe ff44 	bl	8001870 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e167      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 80029f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0f0      	beq.n	80029e4 <HAL_RCC_OscConfig+0x200>
 8002a02:	e01b      	b.n	8002a3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a04:	4b09      	ldr	r3, [pc, #36]	@ (8002a2c <HAL_RCC_OscConfig+0x248>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a0a:	f7fe ff31 	bl	8001870 <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a10:	e00e      	b.n	8002a30 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a12:	f7fe ff2d 	bl	8001870 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d907      	bls.n	8002a30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e150      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
 8002a24:	40023800 	.word	0x40023800
 8002a28:	42470000 	.word	0x42470000
 8002a2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a30:	4b88      	ldr	r3, [pc, #544]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002a32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1ea      	bne.n	8002a12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 8097 	beq.w	8002b78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a4e:	4b81      	ldr	r3, [pc, #516]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10f      	bne.n	8002a7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60bb      	str	r3, [r7, #8]
 8002a5e:	4b7d      	ldr	r3, [pc, #500]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a62:	4a7c      	ldr	r2, [pc, #496]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002a64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a68:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a6a:	4b7a      	ldr	r3, [pc, #488]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a72:	60bb      	str	r3, [r7, #8]
 8002a74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a76:	2301      	movs	r3, #1
 8002a78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a7a:	4b77      	ldr	r3, [pc, #476]	@ (8002c58 <HAL_RCC_OscConfig+0x474>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d118      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a86:	4b74      	ldr	r3, [pc, #464]	@ (8002c58 <HAL_RCC_OscConfig+0x474>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a73      	ldr	r2, [pc, #460]	@ (8002c58 <HAL_RCC_OscConfig+0x474>)
 8002a8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a92:	f7fe feed 	bl	8001870 <HAL_GetTick>
 8002a96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a98:	e008      	b.n	8002aac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a9a:	f7fe fee9 	bl	8001870 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e10c      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aac:	4b6a      	ldr	r3, [pc, #424]	@ (8002c58 <HAL_RCC_OscConfig+0x474>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d0f0      	beq.n	8002a9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d106      	bne.n	8002ace <HAL_RCC_OscConfig+0x2ea>
 8002ac0:	4b64      	ldr	r3, [pc, #400]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002ac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac4:	4a63      	ldr	r2, [pc, #396]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002ac6:	f043 0301 	orr.w	r3, r3, #1
 8002aca:	6713      	str	r3, [r2, #112]	@ 0x70
 8002acc:	e01c      	b.n	8002b08 <HAL_RCC_OscConfig+0x324>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	2b05      	cmp	r3, #5
 8002ad4:	d10c      	bne.n	8002af0 <HAL_RCC_OscConfig+0x30c>
 8002ad6:	4b5f      	ldr	r3, [pc, #380]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ada:	4a5e      	ldr	r2, [pc, #376]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002adc:	f043 0304 	orr.w	r3, r3, #4
 8002ae0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ae2:	4b5c      	ldr	r3, [pc, #368]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae6:	4a5b      	ldr	r2, [pc, #364]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002ae8:	f043 0301 	orr.w	r3, r3, #1
 8002aec:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aee:	e00b      	b.n	8002b08 <HAL_RCC_OscConfig+0x324>
 8002af0:	4b58      	ldr	r3, [pc, #352]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002af2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002af4:	4a57      	ldr	r2, [pc, #348]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002af6:	f023 0301 	bic.w	r3, r3, #1
 8002afa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002afc:	4b55      	ldr	r3, [pc, #340]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002afe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b00:	4a54      	ldr	r2, [pc, #336]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002b02:	f023 0304 	bic.w	r3, r3, #4
 8002b06:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d015      	beq.n	8002b3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b10:	f7fe feae 	bl	8001870 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b16:	e00a      	b.n	8002b2e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b18:	f7fe feaa 	bl	8001870 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e0cb      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b2e:	4b49      	ldr	r3, [pc, #292]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0ee      	beq.n	8002b18 <HAL_RCC_OscConfig+0x334>
 8002b3a:	e014      	b.n	8002b66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b3c:	f7fe fe98 	bl	8001870 <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b42:	e00a      	b.n	8002b5a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b44:	f7fe fe94 	bl	8001870 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e0b5      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b5a:	4b3e      	ldr	r3, [pc, #248]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1ee      	bne.n	8002b44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b66:	7dfb      	ldrb	r3, [r7, #23]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d105      	bne.n	8002b78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b6c:	4b39      	ldr	r3, [pc, #228]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b70:	4a38      	ldr	r2, [pc, #224]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002b72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b76:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 80a1 	beq.w	8002cc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b82:	4b34      	ldr	r3, [pc, #208]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 030c 	and.w	r3, r3, #12
 8002b8a:	2b08      	cmp	r3, #8
 8002b8c:	d05c      	beq.n	8002c48 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d141      	bne.n	8002c1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b96:	4b31      	ldr	r3, [pc, #196]	@ (8002c5c <HAL_RCC_OscConfig+0x478>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9c:	f7fe fe68 	bl	8001870 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ba4:	f7fe fe64 	bl	8001870 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e087      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb6:	4b27      	ldr	r3, [pc, #156]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1f0      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69da      	ldr	r2, [r3, #28]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd0:	019b      	lsls	r3, r3, #6
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd8:	085b      	lsrs	r3, r3, #1
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	041b      	lsls	r3, r3, #16
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be4:	061b      	lsls	r3, r3, #24
 8002be6:	491b      	ldr	r1, [pc, #108]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bec:	4b1b      	ldr	r3, [pc, #108]	@ (8002c5c <HAL_RCC_OscConfig+0x478>)
 8002bee:	2201      	movs	r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf2:	f7fe fe3d 	bl	8001870 <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bfa:	f7fe fe39 	bl	8001870 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e05c      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0c:	4b11      	ldr	r3, [pc, #68]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0f0      	beq.n	8002bfa <HAL_RCC_OscConfig+0x416>
 8002c18:	e054      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c1a:	4b10      	ldr	r3, [pc, #64]	@ (8002c5c <HAL_RCC_OscConfig+0x478>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c20:	f7fe fe26 	bl	8001870 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c28:	f7fe fe22 	bl	8001870 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e045      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c3a:	4b06      	ldr	r3, [pc, #24]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0x444>
 8002c46:	e03d      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d107      	bne.n	8002c60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e038      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
 8002c54:	40023800 	.word	0x40023800
 8002c58:	40007000 	.word	0x40007000
 8002c5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c60:	4b1b      	ldr	r3, [pc, #108]	@ (8002cd0 <HAL_RCC_OscConfig+0x4ec>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d028      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d121      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d11a      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c90:	4013      	ands	r3, r2
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d111      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca6:	085b      	lsrs	r3, r3, #1
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d107      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d001      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e000      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3718      	adds	r7, #24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40023800 	.word	0x40023800

08002cd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e0cc      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ce8:	4b68      	ldr	r3, [pc, #416]	@ (8002e8c <HAL_RCC_ClockConfig+0x1b8>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 030f 	and.w	r3, r3, #15
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d90c      	bls.n	8002d10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf6:	4b65      	ldr	r3, [pc, #404]	@ (8002e8c <HAL_RCC_ClockConfig+0x1b8>)
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfe:	4b63      	ldr	r3, [pc, #396]	@ (8002e8c <HAL_RCC_ClockConfig+0x1b8>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 030f 	and.w	r3, r3, #15
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d001      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e0b8      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d020      	beq.n	8002d5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d005      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d28:	4b59      	ldr	r3, [pc, #356]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	4a58      	ldr	r2, [pc, #352]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0308 	and.w	r3, r3, #8
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d005      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d40:	4b53      	ldr	r3, [pc, #332]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	4a52      	ldr	r2, [pc, #328]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d4c:	4b50      	ldr	r3, [pc, #320]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	494d      	ldr	r1, [pc, #308]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d044      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d107      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d72:	4b47      	ldr	r3, [pc, #284]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d119      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e07f      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d003      	beq.n	8002d92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d8e:	2b03      	cmp	r3, #3
 8002d90:	d107      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d92:	4b3f      	ldr	r3, [pc, #252]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d109      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e06f      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da2:	4b3b      	ldr	r3, [pc, #236]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e067      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002db2:	4b37      	ldr	r3, [pc, #220]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f023 0203 	bic.w	r2, r3, #3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	4934      	ldr	r1, [pc, #208]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dc4:	f7fe fd54 	bl	8001870 <HAL_GetTick>
 8002dc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dca:	e00a      	b.n	8002de2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dcc:	f7fe fd50 	bl	8001870 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e04f      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de2:	4b2b      	ldr	r3, [pc, #172]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 020c 	and.w	r2, r3, #12
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d1eb      	bne.n	8002dcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002df4:	4b25      	ldr	r3, [pc, #148]	@ (8002e8c <HAL_RCC_ClockConfig+0x1b8>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 030f 	and.w	r3, r3, #15
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d20c      	bcs.n	8002e1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e02:	4b22      	ldr	r3, [pc, #136]	@ (8002e8c <HAL_RCC_ClockConfig+0x1b8>)
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0a:	4b20      	ldr	r3, [pc, #128]	@ (8002e8c <HAL_RCC_ClockConfig+0x1b8>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 030f 	and.w	r3, r3, #15
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d001      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e032      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d008      	beq.n	8002e3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e28:	4b19      	ldr	r3, [pc, #100]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	4916      	ldr	r1, [pc, #88]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d009      	beq.n	8002e5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e46:	4b12      	ldr	r3, [pc, #72]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	490e      	ldr	r1, [pc, #56]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e5a:	f000 f821 	bl	8002ea0 <HAL_RCC_GetSysClockFreq>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	4b0b      	ldr	r3, [pc, #44]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	091b      	lsrs	r3, r3, #4
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	490a      	ldr	r1, [pc, #40]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c0>)
 8002e6c:	5ccb      	ldrb	r3, [r1, r3]
 8002e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e72:	4a09      	ldr	r2, [pc, #36]	@ (8002e98 <HAL_RCC_ClockConfig+0x1c4>)
 8002e74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e76:	4b09      	ldr	r3, [pc, #36]	@ (8002e9c <HAL_RCC_ClockConfig+0x1c8>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7fe fb2c 	bl	80014d8 <HAL_InitTick>

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40023c00 	.word	0x40023c00
 8002e90:	40023800 	.word	0x40023800
 8002e94:	08009160 	.word	0x08009160
 8002e98:	20000000 	.word	0x20000000
 8002e9c:	20000004 	.word	0x20000004

08002ea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ea4:	b094      	sub	sp, #80	@ 0x50
 8002ea6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	647b      	str	r3, [r7, #68]	@ 0x44
 8002eac:	2300      	movs	r3, #0
 8002eae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002eb8:	4b79      	ldr	r3, [pc, #484]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f003 030c 	and.w	r3, r3, #12
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d00d      	beq.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x40>
 8002ec4:	2b08      	cmp	r3, #8
 8002ec6:	f200 80e1 	bhi.w	800308c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x34>
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d003      	beq.n	8002eda <HAL_RCC_GetSysClockFreq+0x3a>
 8002ed2:	e0db      	b.n	800308c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ed4:	4b73      	ldr	r3, [pc, #460]	@ (80030a4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ed6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002ed8:	e0db      	b.n	8003092 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eda:	4b73      	ldr	r3, [pc, #460]	@ (80030a8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002edc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ede:	e0d8      	b.n	8003092 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ee0:	4b6f      	ldr	r3, [pc, #444]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ee8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eea:	4b6d      	ldr	r3, [pc, #436]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d063      	beq.n	8002fbe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ef6:	4b6a      	ldr	r3, [pc, #424]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	099b      	lsrs	r3, r3, #6
 8002efc:	2200      	movs	r2, #0
 8002efe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f00:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f08:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002f12:	4622      	mov	r2, r4
 8002f14:	462b      	mov	r3, r5
 8002f16:	f04f 0000 	mov.w	r0, #0
 8002f1a:	f04f 0100 	mov.w	r1, #0
 8002f1e:	0159      	lsls	r1, r3, #5
 8002f20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f24:	0150      	lsls	r0, r2, #5
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4621      	mov	r1, r4
 8002f2c:	1a51      	subs	r1, r2, r1
 8002f2e:	6139      	str	r1, [r7, #16]
 8002f30:	4629      	mov	r1, r5
 8002f32:	eb63 0301 	sbc.w	r3, r3, r1
 8002f36:	617b      	str	r3, [r7, #20]
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	f04f 0300 	mov.w	r3, #0
 8002f40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f44:	4659      	mov	r1, fp
 8002f46:	018b      	lsls	r3, r1, #6
 8002f48:	4651      	mov	r1, sl
 8002f4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f4e:	4651      	mov	r1, sl
 8002f50:	018a      	lsls	r2, r1, #6
 8002f52:	4651      	mov	r1, sl
 8002f54:	ebb2 0801 	subs.w	r8, r2, r1
 8002f58:	4659      	mov	r1, fp
 8002f5a:	eb63 0901 	sbc.w	r9, r3, r1
 8002f5e:	f04f 0200 	mov.w	r2, #0
 8002f62:	f04f 0300 	mov.w	r3, #0
 8002f66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f72:	4690      	mov	r8, r2
 8002f74:	4699      	mov	r9, r3
 8002f76:	4623      	mov	r3, r4
 8002f78:	eb18 0303 	adds.w	r3, r8, r3
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	462b      	mov	r3, r5
 8002f80:	eb49 0303 	adc.w	r3, r9, r3
 8002f84:	60fb      	str	r3, [r7, #12]
 8002f86:	f04f 0200 	mov.w	r2, #0
 8002f8a:	f04f 0300 	mov.w	r3, #0
 8002f8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f92:	4629      	mov	r1, r5
 8002f94:	024b      	lsls	r3, r1, #9
 8002f96:	4621      	mov	r1, r4
 8002f98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f9c:	4621      	mov	r1, r4
 8002f9e:	024a      	lsls	r2, r1, #9
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002faa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002fb0:	f7fd f96e 	bl	8000290 <__aeabi_uldivmod>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	4613      	mov	r3, r2
 8002fba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fbc:	e058      	b.n	8003070 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fbe:	4b38      	ldr	r3, [pc, #224]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	099b      	lsrs	r3, r3, #6
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	4611      	mov	r1, r2
 8002fca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fce:	623b      	str	r3, [r7, #32]
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fd4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fd8:	4642      	mov	r2, r8
 8002fda:	464b      	mov	r3, r9
 8002fdc:	f04f 0000 	mov.w	r0, #0
 8002fe0:	f04f 0100 	mov.w	r1, #0
 8002fe4:	0159      	lsls	r1, r3, #5
 8002fe6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fea:	0150      	lsls	r0, r2, #5
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4641      	mov	r1, r8
 8002ff2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ff6:	4649      	mov	r1, r9
 8002ff8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ffc:	f04f 0200 	mov.w	r2, #0
 8003000:	f04f 0300 	mov.w	r3, #0
 8003004:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003008:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800300c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003010:	ebb2 040a 	subs.w	r4, r2, sl
 8003014:	eb63 050b 	sbc.w	r5, r3, fp
 8003018:	f04f 0200 	mov.w	r2, #0
 800301c:	f04f 0300 	mov.w	r3, #0
 8003020:	00eb      	lsls	r3, r5, #3
 8003022:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003026:	00e2      	lsls	r2, r4, #3
 8003028:	4614      	mov	r4, r2
 800302a:	461d      	mov	r5, r3
 800302c:	4643      	mov	r3, r8
 800302e:	18e3      	adds	r3, r4, r3
 8003030:	603b      	str	r3, [r7, #0]
 8003032:	464b      	mov	r3, r9
 8003034:	eb45 0303 	adc.w	r3, r5, r3
 8003038:	607b      	str	r3, [r7, #4]
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003046:	4629      	mov	r1, r5
 8003048:	028b      	lsls	r3, r1, #10
 800304a:	4621      	mov	r1, r4
 800304c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003050:	4621      	mov	r1, r4
 8003052:	028a      	lsls	r2, r1, #10
 8003054:	4610      	mov	r0, r2
 8003056:	4619      	mov	r1, r3
 8003058:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800305a:	2200      	movs	r2, #0
 800305c:	61bb      	str	r3, [r7, #24]
 800305e:	61fa      	str	r2, [r7, #28]
 8003060:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003064:	f7fd f914 	bl	8000290 <__aeabi_uldivmod>
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	4613      	mov	r3, r2
 800306e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003070:	4b0b      	ldr	r3, [pc, #44]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	0c1b      	lsrs	r3, r3, #16
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	3301      	adds	r3, #1
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003080:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003082:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003084:	fbb2 f3f3 	udiv	r3, r2, r3
 8003088:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800308a:	e002      	b.n	8003092 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800308c:	4b05      	ldr	r3, [pc, #20]	@ (80030a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800308e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003090:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003092:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003094:	4618      	mov	r0, r3
 8003096:	3750      	adds	r7, #80	@ 0x50
 8003098:	46bd      	mov	sp, r7
 800309a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800309e:	bf00      	nop
 80030a0:	40023800 	.word	0x40023800
 80030a4:	00f42400 	.word	0x00f42400
 80030a8:	007a1200 	.word	0x007a1200

080030ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030b0:	4b03      	ldr	r3, [pc, #12]	@ (80030c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80030b2:	681b      	ldr	r3, [r3, #0]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	20000000 	.word	0x20000000

080030c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030c8:	f7ff fff0 	bl	80030ac <HAL_RCC_GetHCLKFreq>
 80030cc:	4602      	mov	r2, r0
 80030ce:	4b05      	ldr	r3, [pc, #20]	@ (80030e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	0a9b      	lsrs	r3, r3, #10
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	4903      	ldr	r1, [pc, #12]	@ (80030e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030da:	5ccb      	ldrb	r3, [r1, r3]
 80030dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40023800 	.word	0x40023800
 80030e8:	08009170 	.word	0x08009170

080030ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030f0:	f7ff ffdc 	bl	80030ac <HAL_RCC_GetHCLKFreq>
 80030f4:	4602      	mov	r2, r0
 80030f6:	4b05      	ldr	r3, [pc, #20]	@ (800310c <HAL_RCC_GetPCLK2Freq+0x20>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	0b5b      	lsrs	r3, r3, #13
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	4903      	ldr	r1, [pc, #12]	@ (8003110 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003102:	5ccb      	ldrb	r3, [r1, r3]
 8003104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003108:	4618      	mov	r0, r3
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40023800 	.word	0x40023800
 8003110:	08009170 	.word	0x08009170

08003114 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	220f      	movs	r2, #15
 8003122:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003124:	4b12      	ldr	r3, [pc, #72]	@ (8003170 <HAL_RCC_GetClockConfig+0x5c>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 0203 	and.w	r2, r3, #3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003130:	4b0f      	ldr	r3, [pc, #60]	@ (8003170 <HAL_RCC_GetClockConfig+0x5c>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800313c:	4b0c      	ldr	r3, [pc, #48]	@ (8003170 <HAL_RCC_GetClockConfig+0x5c>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003148:	4b09      	ldr	r3, [pc, #36]	@ (8003170 <HAL_RCC_GetClockConfig+0x5c>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	08db      	lsrs	r3, r3, #3
 800314e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003156:	4b07      	ldr	r3, [pc, #28]	@ (8003174 <HAL_RCC_GetClockConfig+0x60>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 020f 	and.w	r2, r3, #15
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	601a      	str	r2, [r3, #0]
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	40023800 	.word	0x40023800
 8003174:	40023c00 	.word	0x40023c00

08003178 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e041      	b.n	800320e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d106      	bne.n	80031a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7fe f80c 	bl	80011bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2202      	movs	r2, #2
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3304      	adds	r3, #4
 80031b4:	4619      	mov	r1, r3
 80031b6:	4610      	mov	r0, r2
 80031b8:	f000 fc62 	bl	8003a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
	...

08003218 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b01      	cmp	r3, #1
 800322a:	d001      	beq.n	8003230 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e04e      	b.n	80032ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2202      	movs	r2, #2
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68da      	ldr	r2, [r3, #12]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0201 	orr.w	r2, r2, #1
 8003246:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a23      	ldr	r2, [pc, #140]	@ (80032dc <HAL_TIM_Base_Start_IT+0xc4>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d022      	beq.n	8003298 <HAL_TIM_Base_Start_IT+0x80>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800325a:	d01d      	beq.n	8003298 <HAL_TIM_Base_Start_IT+0x80>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a1f      	ldr	r2, [pc, #124]	@ (80032e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d018      	beq.n	8003298 <HAL_TIM_Base_Start_IT+0x80>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a1e      	ldr	r2, [pc, #120]	@ (80032e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d013      	beq.n	8003298 <HAL_TIM_Base_Start_IT+0x80>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a1c      	ldr	r2, [pc, #112]	@ (80032e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d00e      	beq.n	8003298 <HAL_TIM_Base_Start_IT+0x80>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a1b      	ldr	r2, [pc, #108]	@ (80032ec <HAL_TIM_Base_Start_IT+0xd4>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d009      	beq.n	8003298 <HAL_TIM_Base_Start_IT+0x80>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a19      	ldr	r2, [pc, #100]	@ (80032f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d004      	beq.n	8003298 <HAL_TIM_Base_Start_IT+0x80>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a18      	ldr	r2, [pc, #96]	@ (80032f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d111      	bne.n	80032bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2b06      	cmp	r3, #6
 80032a8:	d010      	beq.n	80032cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f042 0201 	orr.w	r2, r2, #1
 80032b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ba:	e007      	b.n	80032cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f042 0201 	orr.w	r2, r2, #1
 80032ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	40010000 	.word	0x40010000
 80032e0:	40000400 	.word	0x40000400
 80032e4:	40000800 	.word	0x40000800
 80032e8:	40000c00 	.word	0x40000c00
 80032ec:	40010400 	.word	0x40010400
 80032f0:	40014000 	.word	0x40014000
 80032f4:	40001800 	.word	0x40001800

080032f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e041      	b.n	800338e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d106      	bne.n	8003324 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f839 	bl	8003396 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3304      	adds	r3, #4
 8003334:	4619      	mov	r1, r3
 8003336:	4610      	mov	r0, r2
 8003338:	f000 fba2 	bl	8003a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003396:	b480      	push	{r7}
 8003398:	b083      	sub	sp, #12
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
	...

080033ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d109      	bne.n	80033d0 <HAL_TIM_PWM_Start+0x24>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	bf14      	ite	ne
 80033c8:	2301      	movne	r3, #1
 80033ca:	2300      	moveq	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	e022      	b.n	8003416 <HAL_TIM_PWM_Start+0x6a>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d109      	bne.n	80033ea <HAL_TIM_PWM_Start+0x3e>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b01      	cmp	r3, #1
 80033e0:	bf14      	ite	ne
 80033e2:	2301      	movne	r3, #1
 80033e4:	2300      	moveq	r3, #0
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	e015      	b.n	8003416 <HAL_TIM_PWM_Start+0x6a>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d109      	bne.n	8003404 <HAL_TIM_PWM_Start+0x58>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	bf14      	ite	ne
 80033fc:	2301      	movne	r3, #1
 80033fe:	2300      	moveq	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	e008      	b.n	8003416 <HAL_TIM_PWM_Start+0x6a>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b01      	cmp	r3, #1
 800340e:	bf14      	ite	ne
 8003410:	2301      	movne	r3, #1
 8003412:	2300      	moveq	r3, #0
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e07c      	b.n	8003518 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d104      	bne.n	800342e <HAL_TIM_PWM_Start+0x82>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2202      	movs	r2, #2
 8003428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800342c:	e013      	b.n	8003456 <HAL_TIM_PWM_Start+0xaa>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	2b04      	cmp	r3, #4
 8003432:	d104      	bne.n	800343e <HAL_TIM_PWM_Start+0x92>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2202      	movs	r2, #2
 8003438:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800343c:	e00b      	b.n	8003456 <HAL_TIM_PWM_Start+0xaa>
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	2b08      	cmp	r3, #8
 8003442:	d104      	bne.n	800344e <HAL_TIM_PWM_Start+0xa2>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2202      	movs	r2, #2
 8003448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800344c:	e003      	b.n	8003456 <HAL_TIM_PWM_Start+0xaa>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2202      	movs	r2, #2
 8003452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2201      	movs	r2, #1
 800345c:	6839      	ldr	r1, [r7, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f000 fe04 	bl	800406c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a2d      	ldr	r2, [pc, #180]	@ (8003520 <HAL_TIM_PWM_Start+0x174>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d004      	beq.n	8003478 <HAL_TIM_PWM_Start+0xcc>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a2c      	ldr	r2, [pc, #176]	@ (8003524 <HAL_TIM_PWM_Start+0x178>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d101      	bne.n	800347c <HAL_TIM_PWM_Start+0xd0>
 8003478:	2301      	movs	r3, #1
 800347a:	e000      	b.n	800347e <HAL_TIM_PWM_Start+0xd2>
 800347c:	2300      	movs	r3, #0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d007      	beq.n	8003492 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003490:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a22      	ldr	r2, [pc, #136]	@ (8003520 <HAL_TIM_PWM_Start+0x174>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d022      	beq.n	80034e2 <HAL_TIM_PWM_Start+0x136>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034a4:	d01d      	beq.n	80034e2 <HAL_TIM_PWM_Start+0x136>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a1f      	ldr	r2, [pc, #124]	@ (8003528 <HAL_TIM_PWM_Start+0x17c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d018      	beq.n	80034e2 <HAL_TIM_PWM_Start+0x136>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a1d      	ldr	r2, [pc, #116]	@ (800352c <HAL_TIM_PWM_Start+0x180>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d013      	beq.n	80034e2 <HAL_TIM_PWM_Start+0x136>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a1c      	ldr	r2, [pc, #112]	@ (8003530 <HAL_TIM_PWM_Start+0x184>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d00e      	beq.n	80034e2 <HAL_TIM_PWM_Start+0x136>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a16      	ldr	r2, [pc, #88]	@ (8003524 <HAL_TIM_PWM_Start+0x178>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d009      	beq.n	80034e2 <HAL_TIM_PWM_Start+0x136>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a18      	ldr	r2, [pc, #96]	@ (8003534 <HAL_TIM_PWM_Start+0x188>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d004      	beq.n	80034e2 <HAL_TIM_PWM_Start+0x136>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a16      	ldr	r2, [pc, #88]	@ (8003538 <HAL_TIM_PWM_Start+0x18c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d111      	bne.n	8003506 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2b06      	cmp	r3, #6
 80034f2:	d010      	beq.n	8003516 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0201 	orr.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003504:	e007      	b.n	8003516 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f042 0201 	orr.w	r2, r2, #1
 8003514:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40010000 	.word	0x40010000
 8003524:	40010400 	.word	0x40010400
 8003528:	40000400 	.word	0x40000400
 800352c:	40000800 	.word	0x40000800
 8003530:	40000c00 	.word	0x40000c00
 8003534:	40014000 	.word	0x40014000
 8003538:	40001800 	.word	0x40001800

0800353c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d020      	beq.n	80035a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d01b      	beq.n	80035a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f06f 0202 	mvn.w	r2, #2
 8003570:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	f003 0303 	and.w	r3, r3, #3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 fa5b 	bl	8003a42 <HAL_TIM_IC_CaptureCallback>
 800358c:	e005      	b.n	800359a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 fa4d 	bl	8003a2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 fa5e 	bl	8003a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	f003 0304 	and.w	r3, r3, #4
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d020      	beq.n	80035ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f003 0304 	and.w	r3, r3, #4
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d01b      	beq.n	80035ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f06f 0204 	mvn.w	r2, #4
 80035bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2202      	movs	r2, #2
 80035c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 fa35 	bl	8003a42 <HAL_TIM_IC_CaptureCallback>
 80035d8:	e005      	b.n	80035e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 fa27 	bl	8003a2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 fa38 	bl	8003a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	f003 0308 	and.w	r3, r3, #8
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d020      	beq.n	8003638 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f003 0308 	and.w	r3, r3, #8
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d01b      	beq.n	8003638 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f06f 0208 	mvn.w	r2, #8
 8003608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2204      	movs	r2, #4
 800360e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	f003 0303 	and.w	r3, r3, #3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 fa0f 	bl	8003a42 <HAL_TIM_IC_CaptureCallback>
 8003624:	e005      	b.n	8003632 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 fa01 	bl	8003a2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 fa12 	bl	8003a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	f003 0310 	and.w	r3, r3, #16
 800363e:	2b00      	cmp	r3, #0
 8003640:	d020      	beq.n	8003684 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f003 0310 	and.w	r3, r3, #16
 8003648:	2b00      	cmp	r3, #0
 800364a:	d01b      	beq.n	8003684 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f06f 0210 	mvn.w	r2, #16
 8003654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2208      	movs	r2, #8
 800365a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f9e9 	bl	8003a42 <HAL_TIM_IC_CaptureCallback>
 8003670:	e005      	b.n	800367e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f9db 	bl	8003a2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 f9ec 	bl	8003a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00c      	beq.n	80036a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b00      	cmp	r3, #0
 8003696:	d007      	beq.n	80036a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f06f 0201 	mvn.w	r2, #1
 80036a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7fd fc80 	bl	8000fa8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00c      	beq.n	80036cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d007      	beq.n	80036cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80036c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 fd7c 	bl	80041c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00c      	beq.n	80036f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d007      	beq.n	80036f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80036e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f9bd 	bl	8003a6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	f003 0320 	and.w	r3, r3, #32
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00c      	beq.n	8003714 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f003 0320 	and.w	r3, r3, #32
 8003700:	2b00      	cmp	r3, #0
 8003702:	d007      	beq.n	8003714 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f06f 0220 	mvn.w	r2, #32
 800370c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 fd4e 	bl	80041b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003714:	bf00      	nop
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003728:	2300      	movs	r3, #0
 800372a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003732:	2b01      	cmp	r3, #1
 8003734:	d101      	bne.n	800373a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003736:	2302      	movs	r3, #2
 8003738:	e0ae      	b.n	8003898 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b0c      	cmp	r3, #12
 8003746:	f200 809f 	bhi.w	8003888 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800374a:	a201      	add	r2, pc, #4	@ (adr r2, 8003750 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800374c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003750:	08003785 	.word	0x08003785
 8003754:	08003889 	.word	0x08003889
 8003758:	08003889 	.word	0x08003889
 800375c:	08003889 	.word	0x08003889
 8003760:	080037c5 	.word	0x080037c5
 8003764:	08003889 	.word	0x08003889
 8003768:	08003889 	.word	0x08003889
 800376c:	08003889 	.word	0x08003889
 8003770:	08003807 	.word	0x08003807
 8003774:	08003889 	.word	0x08003889
 8003778:	08003889 	.word	0x08003889
 800377c:	08003889 	.word	0x08003889
 8003780:	08003847 	.word	0x08003847
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68b9      	ldr	r1, [r7, #8]
 800378a:	4618      	mov	r0, r3
 800378c:	f000 fa24 	bl	8003bd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	699a      	ldr	r2, [r3, #24]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f042 0208 	orr.w	r2, r2, #8
 800379e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	699a      	ldr	r2, [r3, #24]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0204 	bic.w	r2, r2, #4
 80037ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6999      	ldr	r1, [r3, #24]
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	691a      	ldr	r2, [r3, #16]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	619a      	str	r2, [r3, #24]
      break;
 80037c2:	e064      	b.n	800388e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68b9      	ldr	r1, [r7, #8]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 fa74 	bl	8003cb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	699a      	ldr	r2, [r3, #24]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	699a      	ldr	r2, [r3, #24]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6999      	ldr	r1, [r3, #24]
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	021a      	lsls	r2, r3, #8
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	430a      	orrs	r2, r1
 8003802:	619a      	str	r2, [r3, #24]
      break;
 8003804:	e043      	b.n	800388e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68b9      	ldr	r1, [r7, #8]
 800380c:	4618      	mov	r0, r3
 800380e:	f000 fac9 	bl	8003da4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	69da      	ldr	r2, [r3, #28]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f042 0208 	orr.w	r2, r2, #8
 8003820:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	69da      	ldr	r2, [r3, #28]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0204 	bic.w	r2, r2, #4
 8003830:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	69d9      	ldr	r1, [r3, #28]
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	691a      	ldr	r2, [r3, #16]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	61da      	str	r2, [r3, #28]
      break;
 8003844:	e023      	b.n	800388e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68b9      	ldr	r1, [r7, #8]
 800384c:	4618      	mov	r0, r3
 800384e:	f000 fb1d 	bl	8003e8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	69da      	ldr	r2, [r3, #28]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003860:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	69da      	ldr	r2, [r3, #28]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003870:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	69d9      	ldr	r1, [r3, #28]
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	021a      	lsls	r2, r3, #8
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	61da      	str	r2, [r3, #28]
      break;
 8003886:	e002      	b.n	800388e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	75fb      	strb	r3, [r7, #23]
      break;
 800388c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003896:	7dfb      	ldrb	r3, [r7, #23]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038aa:	2300      	movs	r3, #0
 80038ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d101      	bne.n	80038bc <HAL_TIM_ConfigClockSource+0x1c>
 80038b8:	2302      	movs	r3, #2
 80038ba:	e0b4      	b.n	8003a26 <HAL_TIM_ConfigClockSource+0x186>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2202      	movs	r2, #2
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80038da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80038e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038f4:	d03e      	beq.n	8003974 <HAL_TIM_ConfigClockSource+0xd4>
 80038f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038fa:	f200 8087 	bhi.w	8003a0c <HAL_TIM_ConfigClockSource+0x16c>
 80038fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003902:	f000 8086 	beq.w	8003a12 <HAL_TIM_ConfigClockSource+0x172>
 8003906:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800390a:	d87f      	bhi.n	8003a0c <HAL_TIM_ConfigClockSource+0x16c>
 800390c:	2b70      	cmp	r3, #112	@ 0x70
 800390e:	d01a      	beq.n	8003946 <HAL_TIM_ConfigClockSource+0xa6>
 8003910:	2b70      	cmp	r3, #112	@ 0x70
 8003912:	d87b      	bhi.n	8003a0c <HAL_TIM_ConfigClockSource+0x16c>
 8003914:	2b60      	cmp	r3, #96	@ 0x60
 8003916:	d050      	beq.n	80039ba <HAL_TIM_ConfigClockSource+0x11a>
 8003918:	2b60      	cmp	r3, #96	@ 0x60
 800391a:	d877      	bhi.n	8003a0c <HAL_TIM_ConfigClockSource+0x16c>
 800391c:	2b50      	cmp	r3, #80	@ 0x50
 800391e:	d03c      	beq.n	800399a <HAL_TIM_ConfigClockSource+0xfa>
 8003920:	2b50      	cmp	r3, #80	@ 0x50
 8003922:	d873      	bhi.n	8003a0c <HAL_TIM_ConfigClockSource+0x16c>
 8003924:	2b40      	cmp	r3, #64	@ 0x40
 8003926:	d058      	beq.n	80039da <HAL_TIM_ConfigClockSource+0x13a>
 8003928:	2b40      	cmp	r3, #64	@ 0x40
 800392a:	d86f      	bhi.n	8003a0c <HAL_TIM_ConfigClockSource+0x16c>
 800392c:	2b30      	cmp	r3, #48	@ 0x30
 800392e:	d064      	beq.n	80039fa <HAL_TIM_ConfigClockSource+0x15a>
 8003930:	2b30      	cmp	r3, #48	@ 0x30
 8003932:	d86b      	bhi.n	8003a0c <HAL_TIM_ConfigClockSource+0x16c>
 8003934:	2b20      	cmp	r3, #32
 8003936:	d060      	beq.n	80039fa <HAL_TIM_ConfigClockSource+0x15a>
 8003938:	2b20      	cmp	r3, #32
 800393a:	d867      	bhi.n	8003a0c <HAL_TIM_ConfigClockSource+0x16c>
 800393c:	2b00      	cmp	r3, #0
 800393e:	d05c      	beq.n	80039fa <HAL_TIM_ConfigClockSource+0x15a>
 8003940:	2b10      	cmp	r3, #16
 8003942:	d05a      	beq.n	80039fa <HAL_TIM_ConfigClockSource+0x15a>
 8003944:	e062      	b.n	8003a0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003956:	f000 fb69 	bl	800402c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003968:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	609a      	str	r2, [r3, #8]
      break;
 8003972:	e04f      	b.n	8003a14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003984:	f000 fb52 	bl	800402c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689a      	ldr	r2, [r3, #8]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003996:	609a      	str	r2, [r3, #8]
      break;
 8003998:	e03c      	b.n	8003a14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039a6:	461a      	mov	r2, r3
 80039a8:	f000 fac6 	bl	8003f38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2150      	movs	r1, #80	@ 0x50
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 fb1f 	bl	8003ff6 <TIM_ITRx_SetConfig>
      break;
 80039b8:	e02c      	b.n	8003a14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039c6:	461a      	mov	r2, r3
 80039c8:	f000 fae5 	bl	8003f96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2160      	movs	r1, #96	@ 0x60
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 fb0f 	bl	8003ff6 <TIM_ITRx_SetConfig>
      break;
 80039d8:	e01c      	b.n	8003a14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039e6:	461a      	mov	r2, r3
 80039e8:	f000 faa6 	bl	8003f38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2140      	movs	r1, #64	@ 0x40
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 faff 	bl	8003ff6 <TIM_ITRx_SetConfig>
      break;
 80039f8:	e00c      	b.n	8003a14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4619      	mov	r1, r3
 8003a04:	4610      	mov	r0, r2
 8003a06:	f000 faf6 	bl	8003ff6 <TIM_ITRx_SetConfig>
      break;
 8003a0a:	e003      	b.n	8003a14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a10:	e000      	b.n	8003a14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b083      	sub	sp, #12
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b083      	sub	sp, #12
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a4a:	bf00      	nop
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b083      	sub	sp, #12
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a72:	bf00      	nop
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
	...

08003a80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a46      	ldr	r2, [pc, #280]	@ (8003bac <TIM_Base_SetConfig+0x12c>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d013      	beq.n	8003ac0 <TIM_Base_SetConfig+0x40>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a9e:	d00f      	beq.n	8003ac0 <TIM_Base_SetConfig+0x40>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a43      	ldr	r2, [pc, #268]	@ (8003bb0 <TIM_Base_SetConfig+0x130>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d00b      	beq.n	8003ac0 <TIM_Base_SetConfig+0x40>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a42      	ldr	r2, [pc, #264]	@ (8003bb4 <TIM_Base_SetConfig+0x134>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d007      	beq.n	8003ac0 <TIM_Base_SetConfig+0x40>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a41      	ldr	r2, [pc, #260]	@ (8003bb8 <TIM_Base_SetConfig+0x138>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d003      	beq.n	8003ac0 <TIM_Base_SetConfig+0x40>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a40      	ldr	r2, [pc, #256]	@ (8003bbc <TIM_Base_SetConfig+0x13c>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d108      	bne.n	8003ad2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ac6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a35      	ldr	r2, [pc, #212]	@ (8003bac <TIM_Base_SetConfig+0x12c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d02b      	beq.n	8003b32 <TIM_Base_SetConfig+0xb2>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ae0:	d027      	beq.n	8003b32 <TIM_Base_SetConfig+0xb2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a32      	ldr	r2, [pc, #200]	@ (8003bb0 <TIM_Base_SetConfig+0x130>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d023      	beq.n	8003b32 <TIM_Base_SetConfig+0xb2>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a31      	ldr	r2, [pc, #196]	@ (8003bb4 <TIM_Base_SetConfig+0x134>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d01f      	beq.n	8003b32 <TIM_Base_SetConfig+0xb2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a30      	ldr	r2, [pc, #192]	@ (8003bb8 <TIM_Base_SetConfig+0x138>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d01b      	beq.n	8003b32 <TIM_Base_SetConfig+0xb2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a2f      	ldr	r2, [pc, #188]	@ (8003bbc <TIM_Base_SetConfig+0x13c>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d017      	beq.n	8003b32 <TIM_Base_SetConfig+0xb2>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a2e      	ldr	r2, [pc, #184]	@ (8003bc0 <TIM_Base_SetConfig+0x140>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d013      	beq.n	8003b32 <TIM_Base_SetConfig+0xb2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a2d      	ldr	r2, [pc, #180]	@ (8003bc4 <TIM_Base_SetConfig+0x144>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d00f      	beq.n	8003b32 <TIM_Base_SetConfig+0xb2>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a2c      	ldr	r2, [pc, #176]	@ (8003bc8 <TIM_Base_SetConfig+0x148>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d00b      	beq.n	8003b32 <TIM_Base_SetConfig+0xb2>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a2b      	ldr	r2, [pc, #172]	@ (8003bcc <TIM_Base_SetConfig+0x14c>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d007      	beq.n	8003b32 <TIM_Base_SetConfig+0xb2>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a2a      	ldr	r2, [pc, #168]	@ (8003bd0 <TIM_Base_SetConfig+0x150>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d003      	beq.n	8003b32 <TIM_Base_SetConfig+0xb2>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a29      	ldr	r2, [pc, #164]	@ (8003bd4 <TIM_Base_SetConfig+0x154>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d108      	bne.n	8003b44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a10      	ldr	r2, [pc, #64]	@ (8003bac <TIM_Base_SetConfig+0x12c>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d003      	beq.n	8003b78 <TIM_Base_SetConfig+0xf8>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a12      	ldr	r2, [pc, #72]	@ (8003bbc <TIM_Base_SetConfig+0x13c>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d103      	bne.n	8003b80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	691a      	ldr	r2, [r3, #16]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d105      	bne.n	8003b9e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	f023 0201 	bic.w	r2, r3, #1
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	611a      	str	r2, [r3, #16]
  }
}
 8003b9e:	bf00      	nop
 8003ba0:	3714      	adds	r7, #20
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	40010000 	.word	0x40010000
 8003bb0:	40000400 	.word	0x40000400
 8003bb4:	40000800 	.word	0x40000800
 8003bb8:	40000c00 	.word	0x40000c00
 8003bbc:	40010400 	.word	0x40010400
 8003bc0:	40014000 	.word	0x40014000
 8003bc4:	40014400 	.word	0x40014400
 8003bc8:	40014800 	.word	0x40014800
 8003bcc:	40001800 	.word	0x40001800
 8003bd0:	40001c00 	.word	0x40001c00
 8003bd4:	40002000 	.word	0x40002000

08003bd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b087      	sub	sp, #28
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	f023 0201 	bic.w	r2, r3, #1
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f023 0303 	bic.w	r3, r3, #3
 8003c0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f023 0302 	bic.w	r3, r3, #2
 8003c20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a20      	ldr	r2, [pc, #128]	@ (8003cb0 <TIM_OC1_SetConfig+0xd8>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d003      	beq.n	8003c3c <TIM_OC1_SetConfig+0x64>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a1f      	ldr	r2, [pc, #124]	@ (8003cb4 <TIM_OC1_SetConfig+0xdc>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d10c      	bne.n	8003c56 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	f023 0308 	bic.w	r3, r3, #8
 8003c42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f023 0304 	bic.w	r3, r3, #4
 8003c54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a15      	ldr	r2, [pc, #84]	@ (8003cb0 <TIM_OC1_SetConfig+0xd8>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d003      	beq.n	8003c66 <TIM_OC1_SetConfig+0x8e>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a14      	ldr	r2, [pc, #80]	@ (8003cb4 <TIM_OC1_SetConfig+0xdc>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d111      	bne.n	8003c8a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685a      	ldr	r2, [r3, #4]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	621a      	str	r2, [r3, #32]
}
 8003ca4:	bf00      	nop
 8003ca6:	371c      	adds	r7, #28
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	40010000 	.word	0x40010000
 8003cb4:	40010400 	.word	0x40010400

08003cb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b087      	sub	sp, #28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	f023 0210 	bic.w	r2, r3, #16
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	021b      	lsls	r3, r3, #8
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	f023 0320 	bic.w	r3, r3, #32
 8003d02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	011b      	lsls	r3, r3, #4
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a22      	ldr	r2, [pc, #136]	@ (8003d9c <TIM_OC2_SetConfig+0xe4>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d003      	beq.n	8003d20 <TIM_OC2_SetConfig+0x68>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a21      	ldr	r2, [pc, #132]	@ (8003da0 <TIM_OC2_SetConfig+0xe8>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d10d      	bne.n	8003d3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	011b      	lsls	r3, r3, #4
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a17      	ldr	r2, [pc, #92]	@ (8003d9c <TIM_OC2_SetConfig+0xe4>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d003      	beq.n	8003d4c <TIM_OC2_SetConfig+0x94>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a16      	ldr	r2, [pc, #88]	@ (8003da0 <TIM_OC2_SetConfig+0xe8>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d113      	bne.n	8003d74 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	621a      	str	r2, [r3, #32]
}
 8003d8e:	bf00      	nop
 8003d90:	371c      	adds	r7, #28
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	40010000 	.word	0x40010000
 8003da0:	40010400 	.word	0x40010400

08003da4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b087      	sub	sp, #28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f023 0303 	bic.w	r3, r3, #3
 8003dda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003dec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	021b      	lsls	r3, r3, #8
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a21      	ldr	r2, [pc, #132]	@ (8003e84 <TIM_OC3_SetConfig+0xe0>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d003      	beq.n	8003e0a <TIM_OC3_SetConfig+0x66>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a20      	ldr	r2, [pc, #128]	@ (8003e88 <TIM_OC3_SetConfig+0xe4>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d10d      	bne.n	8003e26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	021b      	lsls	r3, r3, #8
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a16      	ldr	r2, [pc, #88]	@ (8003e84 <TIM_OC3_SetConfig+0xe0>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d003      	beq.n	8003e36 <TIM_OC3_SetConfig+0x92>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a15      	ldr	r2, [pc, #84]	@ (8003e88 <TIM_OC3_SetConfig+0xe4>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d113      	bne.n	8003e5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	011b      	lsls	r3, r3, #4
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	011b      	lsls	r3, r3, #4
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	621a      	str	r2, [r3, #32]
}
 8003e78:	bf00      	nop
 8003e7a:	371c      	adds	r7, #28
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	40010000 	.word	0x40010000
 8003e88:	40010400 	.word	0x40010400

08003e8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b087      	sub	sp, #28
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	021b      	lsls	r3, r3, #8
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ed6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	031b      	lsls	r3, r3, #12
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a12      	ldr	r2, [pc, #72]	@ (8003f30 <TIM_OC4_SetConfig+0xa4>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d003      	beq.n	8003ef4 <TIM_OC4_SetConfig+0x68>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a11      	ldr	r2, [pc, #68]	@ (8003f34 <TIM_OC4_SetConfig+0xa8>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d109      	bne.n	8003f08 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003efa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	019b      	lsls	r3, r3, #6
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	621a      	str	r2, [r3, #32]
}
 8003f22:	bf00      	nop
 8003f24:	371c      	adds	r7, #28
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40010000 	.word	0x40010000
 8003f34:	40010400 	.word	0x40010400

08003f38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	f023 0201 	bic.w	r2, r3, #1
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	011b      	lsls	r3, r3, #4
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f023 030a 	bic.w	r3, r3, #10
 8003f74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	621a      	str	r2, [r3, #32]
}
 8003f8a:	bf00      	nop
 8003f8c:	371c      	adds	r7, #28
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b087      	sub	sp, #28
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	60f8      	str	r0, [r7, #12]
 8003f9e:	60b9      	str	r1, [r7, #8]
 8003fa0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	f023 0210 	bic.w	r2, r3, #16
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003fc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	031b      	lsls	r3, r3, #12
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003fd2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	011b      	lsls	r3, r3, #4
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	621a      	str	r2, [r3, #32]
}
 8003fea:	bf00      	nop
 8003fec:	371c      	adds	r7, #28
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b085      	sub	sp, #20
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
 8003ffe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800400c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	4313      	orrs	r3, r2
 8004014:	f043 0307 	orr.w	r3, r3, #7
 8004018:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	609a      	str	r2, [r3, #8]
}
 8004020:	bf00      	nop
 8004022:	3714      	adds	r7, #20
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800402c:	b480      	push	{r7}
 800402e:	b087      	sub	sp, #28
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
 8004038:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004046:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	021a      	lsls	r2, r3, #8
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	431a      	orrs	r2, r3
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	4313      	orrs	r3, r2
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	4313      	orrs	r3, r2
 8004058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	609a      	str	r2, [r3, #8]
}
 8004060:	bf00      	nop
 8004062:	371c      	adds	r7, #28
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800406c:	b480      	push	{r7}
 800406e:	b087      	sub	sp, #28
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	f003 031f 	and.w	r3, r3, #31
 800407e:	2201      	movs	r2, #1
 8004080:	fa02 f303 	lsl.w	r3, r2, r3
 8004084:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a1a      	ldr	r2, [r3, #32]
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	43db      	mvns	r3, r3
 800408e:	401a      	ands	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6a1a      	ldr	r2, [r3, #32]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	f003 031f 	and.w	r3, r3, #31
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	fa01 f303 	lsl.w	r3, r1, r3
 80040a4:	431a      	orrs	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	621a      	str	r2, [r3, #32]
}
 80040aa:	bf00      	nop
 80040ac:	371c      	adds	r7, #28
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
	...

080040b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d101      	bne.n	80040d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040cc:	2302      	movs	r3, #2
 80040ce:	e05a      	b.n	8004186 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2202      	movs	r2, #2
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	4313      	orrs	r3, r2
 8004100:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a21      	ldr	r2, [pc, #132]	@ (8004194 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d022      	beq.n	800415a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800411c:	d01d      	beq.n	800415a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a1d      	ldr	r2, [pc, #116]	@ (8004198 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d018      	beq.n	800415a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a1b      	ldr	r2, [pc, #108]	@ (800419c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d013      	beq.n	800415a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a1a      	ldr	r2, [pc, #104]	@ (80041a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d00e      	beq.n	800415a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a18      	ldr	r2, [pc, #96]	@ (80041a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d009      	beq.n	800415a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a17      	ldr	r2, [pc, #92]	@ (80041a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d004      	beq.n	800415a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a15      	ldr	r2, [pc, #84]	@ (80041ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d10c      	bne.n	8004174 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004160:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	68ba      	ldr	r2, [r7, #8]
 8004168:	4313      	orrs	r3, r2
 800416a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	40010000 	.word	0x40010000
 8004198:	40000400 	.word	0x40000400
 800419c:	40000800 	.word	0x40000800
 80041a0:	40000c00 	.word	0x40000c00
 80041a4:	40010400 	.word	0x40010400
 80041a8:	40014000 	.word	0x40014000
 80041ac:	40001800 	.word	0x40001800

080041b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e042      	b.n	8004270 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d106      	bne.n	8004204 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7fd f872 	bl	80012e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2224      	movs	r2, #36	@ 0x24
 8004208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800421a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 fe55 	bl	8004ecc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	691a      	ldr	r2, [r3, #16]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004230:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	695a      	ldr	r2, [r3, #20]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004240:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68da      	ldr	r2, [r3, #12]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004250:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2220      	movs	r2, #32
 800425c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2220      	movs	r2, #32
 8004264:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b08a      	sub	sp, #40	@ 0x28
 800427c:	af02      	add	r7, sp, #8
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	603b      	str	r3, [r7, #0]
 8004284:	4613      	mov	r3, r2
 8004286:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004288:	2300      	movs	r3, #0
 800428a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b20      	cmp	r3, #32
 8004296:	d175      	bne.n	8004384 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <HAL_UART_Transmit+0x2c>
 800429e:	88fb      	ldrh	r3, [r7, #6]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d101      	bne.n	80042a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e06e      	b.n	8004386 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2221      	movs	r2, #33	@ 0x21
 80042b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042b6:	f7fd fadb 	bl	8001870 <HAL_GetTick>
 80042ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	88fa      	ldrh	r2, [r7, #6]
 80042c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	88fa      	ldrh	r2, [r7, #6]
 80042c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042d0:	d108      	bne.n	80042e4 <HAL_UART_Transmit+0x6c>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d104      	bne.n	80042e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80042da:	2300      	movs	r3, #0
 80042dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	61bb      	str	r3, [r7, #24]
 80042e2:	e003      	b.n	80042ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042e8:	2300      	movs	r3, #0
 80042ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042ec:	e02e      	b.n	800434c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	2200      	movs	r2, #0
 80042f6:	2180      	movs	r1, #128	@ 0x80
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f000 fbb7 	bl	8004a6c <UART_WaitOnFlagUntilTimeout>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d005      	beq.n	8004310 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2220      	movs	r2, #32
 8004308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e03a      	b.n	8004386 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10b      	bne.n	800432e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	881b      	ldrh	r3, [r3, #0]
 800431a:	461a      	mov	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004324:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	3302      	adds	r3, #2
 800432a:	61bb      	str	r3, [r7, #24]
 800432c:	e007      	b.n	800433e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	781a      	ldrb	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	3301      	adds	r3, #1
 800433c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004342:	b29b      	uxth	r3, r3
 8004344:	3b01      	subs	r3, #1
 8004346:	b29a      	uxth	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004350:	b29b      	uxth	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1cb      	bne.n	80042ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	9300      	str	r3, [sp, #0]
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2200      	movs	r2, #0
 800435e:	2140      	movs	r1, #64	@ 0x40
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f000 fb83 	bl	8004a6c <UART_WaitOnFlagUntilTimeout>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d005      	beq.n	8004378 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2220      	movs	r2, #32
 8004370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e006      	b.n	8004386 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2220      	movs	r2, #32
 800437c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004380:	2300      	movs	r3, #0
 8004382:	e000      	b.n	8004386 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004384:	2302      	movs	r3, #2
  }
}
 8004386:	4618      	mov	r0, r3
 8004388:	3720      	adds	r7, #32
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b08a      	sub	sp, #40	@ 0x28
 8004392:	af02      	add	r7, sp, #8
 8004394:	60f8      	str	r0, [r7, #12]
 8004396:	60b9      	str	r1, [r7, #8]
 8004398:	603b      	str	r3, [r7, #0]
 800439a:	4613      	mov	r3, r2
 800439c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800439e:	2300      	movs	r3, #0
 80043a0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b20      	cmp	r3, #32
 80043ac:	f040 8081 	bne.w	80044b2 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d002      	beq.n	80043bc <HAL_UART_Receive+0x2e>
 80043b6:	88fb      	ldrh	r3, [r7, #6]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e079      	b.n	80044b4 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2222      	movs	r2, #34	@ 0x22
 80043ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043d4:	f7fd fa4c 	bl	8001870 <HAL_GetTick>
 80043d8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	88fa      	ldrh	r2, [r7, #6]
 80043de:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	88fa      	ldrh	r2, [r7, #6]
 80043e4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043ee:	d108      	bne.n	8004402 <HAL_UART_Receive+0x74>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d104      	bne.n	8004402 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80043f8:	2300      	movs	r3, #0
 80043fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	61bb      	str	r3, [r7, #24]
 8004400:	e003      	b.n	800440a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004406:	2300      	movs	r3, #0
 8004408:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800440a:	e047      	b.n	800449c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	9300      	str	r3, [sp, #0]
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	2200      	movs	r2, #0
 8004414:	2120      	movs	r1, #32
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f000 fb28 	bl	8004a6c <UART_WaitOnFlagUntilTimeout>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d005      	beq.n	800442e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2220      	movs	r2, #32
 8004426:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e042      	b.n	80044b4 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10c      	bne.n	800444e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	b29b      	uxth	r3, r3
 800443c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004440:	b29a      	uxth	r2, r3
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	3302      	adds	r3, #2
 800444a:	61bb      	str	r3, [r7, #24]
 800444c:	e01f      	b.n	800448e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004456:	d007      	beq.n	8004468 <HAL_UART_Receive+0xda>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10a      	bne.n	8004476 <HAL_UART_Receive+0xe8>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d106      	bne.n	8004476 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	b2da      	uxtb	r2, r3
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	701a      	strb	r2, [r3, #0]
 8004474:	e008      	b.n	8004488 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	b2db      	uxtb	r3, r3
 800447e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004482:	b2da      	uxtb	r2, r3
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	3301      	adds	r3, #1
 800448c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004492:	b29b      	uxth	r3, r3
 8004494:	3b01      	subs	r3, #1
 8004496:	b29a      	uxth	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1b2      	bne.n	800440c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2220      	movs	r2, #32
 80044aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80044ae:	2300      	movs	r3, #0
 80044b0:	e000      	b.n	80044b4 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80044b2:	2302      	movs	r3, #2
  }
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3720      	adds	r7, #32
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	4613      	mov	r3, r2
 80044c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b20      	cmp	r3, #32
 80044d4:	d112      	bne.n	80044fc <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d002      	beq.n	80044e2 <HAL_UART_Receive_IT+0x26>
 80044dc:	88fb      	ldrh	r3, [r7, #6]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e00b      	b.n	80044fe <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80044ec:	88fb      	ldrh	r3, [r7, #6]
 80044ee:	461a      	mov	r2, r3
 80044f0:	68b9      	ldr	r1, [r7, #8]
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f000 fb13 	bl	8004b1e <UART_Start_Receive_IT>
 80044f8:	4603      	mov	r3, r0
 80044fa:	e000      	b.n	80044fe <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80044fc:	2302      	movs	r3, #2
  }
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
	...

08004508 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b0ba      	sub	sp, #232	@ 0xe8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800452e:	2300      	movs	r3, #0
 8004530:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004534:	2300      	movs	r3, #0
 8004536:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800453a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800453e:	f003 030f 	and.w	r3, r3, #15
 8004542:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004546:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10f      	bne.n	800456e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800454e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004552:	f003 0320 	and.w	r3, r3, #32
 8004556:	2b00      	cmp	r3, #0
 8004558:	d009      	beq.n	800456e <HAL_UART_IRQHandler+0x66>
 800455a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800455e:	f003 0320 	and.w	r3, r3, #32
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 fbf2 	bl	8004d50 <UART_Receive_IT>
      return;
 800456c:	e25b      	b.n	8004a26 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800456e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004572:	2b00      	cmp	r3, #0
 8004574:	f000 80de 	beq.w	8004734 <HAL_UART_IRQHandler+0x22c>
 8004578:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	2b00      	cmp	r3, #0
 8004582:	d106      	bne.n	8004592 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004588:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 80d1 	beq.w	8004734 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00b      	beq.n	80045b6 <HAL_UART_IRQHandler+0xae>
 800459e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d005      	beq.n	80045b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ae:	f043 0201 	orr.w	r2, r3, #1
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045ba:	f003 0304 	and.w	r3, r3, #4
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00b      	beq.n	80045da <HAL_UART_IRQHandler+0xd2>
 80045c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d005      	beq.n	80045da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045d2:	f043 0202 	orr.w	r2, r3, #2
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00b      	beq.n	80045fe <HAL_UART_IRQHandler+0xf6>
 80045e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d005      	beq.n	80045fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f6:	f043 0204 	orr.w	r2, r3, #4
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80045fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004602:	f003 0308 	and.w	r3, r3, #8
 8004606:	2b00      	cmp	r3, #0
 8004608:	d011      	beq.n	800462e <HAL_UART_IRQHandler+0x126>
 800460a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800460e:	f003 0320 	and.w	r3, r3, #32
 8004612:	2b00      	cmp	r3, #0
 8004614:	d105      	bne.n	8004622 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004616:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d005      	beq.n	800462e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004626:	f043 0208 	orr.w	r2, r3, #8
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 81f2 	beq.w	8004a1c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800463c:	f003 0320 	and.w	r3, r3, #32
 8004640:	2b00      	cmp	r3, #0
 8004642:	d008      	beq.n	8004656 <HAL_UART_IRQHandler+0x14e>
 8004644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004648:	f003 0320 	and.w	r3, r3, #32
 800464c:	2b00      	cmp	r3, #0
 800464e:	d002      	beq.n	8004656 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 fb7d 	bl	8004d50 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004660:	2b40      	cmp	r3, #64	@ 0x40
 8004662:	bf0c      	ite	eq
 8004664:	2301      	moveq	r3, #1
 8004666:	2300      	movne	r3, #0
 8004668:	b2db      	uxtb	r3, r3
 800466a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004672:	f003 0308 	and.w	r3, r3, #8
 8004676:	2b00      	cmp	r3, #0
 8004678:	d103      	bne.n	8004682 <HAL_UART_IRQHandler+0x17a>
 800467a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800467e:	2b00      	cmp	r3, #0
 8004680:	d04f      	beq.n	8004722 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 fa85 	bl	8004b92 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004692:	2b40      	cmp	r3, #64	@ 0x40
 8004694:	d141      	bne.n	800471a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	3314      	adds	r3, #20
 800469c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80046a4:	e853 3f00 	ldrex	r3, [r3]
 80046a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80046ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80046b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	3314      	adds	r3, #20
 80046be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80046c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80046c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80046ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80046d2:	e841 2300 	strex	r3, r2, [r1]
 80046d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80046da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1d9      	bne.n	8004696 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d013      	beq.n	8004712 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ee:	4a7e      	ldr	r2, [pc, #504]	@ (80048e8 <HAL_UART_IRQHandler+0x3e0>)
 80046f0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7fd fa3c 	bl	8001b74 <HAL_DMA_Abort_IT>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d016      	beq.n	8004730 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004706:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800470c:	4610      	mov	r0, r2
 800470e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004710:	e00e      	b.n	8004730 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f994 	bl	8004a40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004718:	e00a      	b.n	8004730 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f990 	bl	8004a40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004720:	e006      	b.n	8004730 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f98c 	bl	8004a40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800472e:	e175      	b.n	8004a1c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004730:	bf00      	nop
    return;
 8004732:	e173      	b.n	8004a1c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004738:	2b01      	cmp	r3, #1
 800473a:	f040 814f 	bne.w	80049dc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800473e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004742:	f003 0310 	and.w	r3, r3, #16
 8004746:	2b00      	cmp	r3, #0
 8004748:	f000 8148 	beq.w	80049dc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800474c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004750:	f003 0310 	and.w	r3, r3, #16
 8004754:	2b00      	cmp	r3, #0
 8004756:	f000 8141 	beq.w	80049dc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800475a:	2300      	movs	r3, #0
 800475c:	60bb      	str	r3, [r7, #8]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	60bb      	str	r3, [r7, #8]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	60bb      	str	r3, [r7, #8]
 800476e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800477a:	2b40      	cmp	r3, #64	@ 0x40
 800477c:	f040 80b6 	bne.w	80048ec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800478c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 8145 	beq.w	8004a20 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800479a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800479e:	429a      	cmp	r2, r3
 80047a0:	f080 813e 	bcs.w	8004a20 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047b0:	69db      	ldr	r3, [r3, #28]
 80047b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047b6:	f000 8088 	beq.w	80048ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	330c      	adds	r3, #12
 80047c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80047c8:	e853 3f00 	ldrex	r3, [r3]
 80047cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80047d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80047d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	330c      	adds	r3, #12
 80047e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80047e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80047ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80047f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80047f6:	e841 2300 	strex	r3, r2, [r1]
 80047fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80047fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1d9      	bne.n	80047ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	3314      	adds	r3, #20
 800480c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004810:	e853 3f00 	ldrex	r3, [r3]
 8004814:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004816:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004818:	f023 0301 	bic.w	r3, r3, #1
 800481c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	3314      	adds	r3, #20
 8004826:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800482a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800482e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004830:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004832:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004836:	e841 2300 	strex	r3, r2, [r1]
 800483a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800483c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1e1      	bne.n	8004806 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	3314      	adds	r3, #20
 8004848:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800484c:	e853 3f00 	ldrex	r3, [r3]
 8004850:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004852:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004854:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004858:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	3314      	adds	r3, #20
 8004862:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004866:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004868:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800486c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800486e:	e841 2300 	strex	r3, r2, [r1]
 8004872:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004874:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1e3      	bne.n	8004842 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2220      	movs	r2, #32
 800487e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	330c      	adds	r3, #12
 800488e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004890:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004892:	e853 3f00 	ldrex	r3, [r3]
 8004896:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004898:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800489a:	f023 0310 	bic.w	r3, r3, #16
 800489e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	330c      	adds	r3, #12
 80048a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80048ac:	65ba      	str	r2, [r7, #88]	@ 0x58
 80048ae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80048b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80048b4:	e841 2300 	strex	r3, r2, [r1]
 80048b8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80048ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1e3      	bne.n	8004888 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7fd f8e5 	bl	8001a94 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2202      	movs	r2, #2
 80048ce:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048d8:	b29b      	uxth	r3, r3
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	b29b      	uxth	r3, r3
 80048de:	4619      	mov	r1, r3
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 f8b7 	bl	8004a54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048e6:	e09b      	b.n	8004a20 <HAL_UART_IRQHandler+0x518>
 80048e8:	08004c59 	.word	0x08004c59
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004900:	b29b      	uxth	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	f000 808e 	beq.w	8004a24 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004908:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 8089 	beq.w	8004a24 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	330c      	adds	r3, #12
 8004918:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800491c:	e853 3f00 	ldrex	r3, [r3]
 8004920:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004924:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004928:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	330c      	adds	r3, #12
 8004932:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004936:	647a      	str	r2, [r7, #68]	@ 0x44
 8004938:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800493c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800493e:	e841 2300 	strex	r3, r2, [r1]
 8004942:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004944:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1e3      	bne.n	8004912 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	3314      	adds	r3, #20
 8004950:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004954:	e853 3f00 	ldrex	r3, [r3]
 8004958:	623b      	str	r3, [r7, #32]
   return(result);
 800495a:	6a3b      	ldr	r3, [r7, #32]
 800495c:	f023 0301 	bic.w	r3, r3, #1
 8004960:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	3314      	adds	r3, #20
 800496a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800496e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004970:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004972:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004974:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004976:	e841 2300 	strex	r3, r2, [r1]
 800497a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800497c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1e3      	bne.n	800494a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2220      	movs	r2, #32
 8004986:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	330c      	adds	r3, #12
 8004996:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	e853 3f00 	ldrex	r3, [r3]
 800499e:	60fb      	str	r3, [r7, #12]
   return(result);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f023 0310 	bic.w	r3, r3, #16
 80049a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	330c      	adds	r3, #12
 80049b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80049b4:	61fa      	str	r2, [r7, #28]
 80049b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b8:	69b9      	ldr	r1, [r7, #24]
 80049ba:	69fa      	ldr	r2, [r7, #28]
 80049bc:	e841 2300 	strex	r3, r2, [r1]
 80049c0:	617b      	str	r3, [r7, #20]
   return(result);
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1e3      	bne.n	8004990 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2202      	movs	r2, #2
 80049cc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80049d2:	4619      	mov	r1, r3
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 f83d 	bl	8004a54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049da:	e023      	b.n	8004a24 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d009      	beq.n	80049fc <HAL_UART_IRQHandler+0x4f4>
 80049e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d003      	beq.n	80049fc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 f943 	bl	8004c80 <UART_Transmit_IT>
    return;
 80049fa:	e014      	b.n	8004a26 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80049fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00e      	beq.n	8004a26 <HAL_UART_IRQHandler+0x51e>
 8004a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d008      	beq.n	8004a26 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 f983 	bl	8004d20 <UART_EndTransmit_IT>
    return;
 8004a1a:	e004      	b.n	8004a26 <HAL_UART_IRQHandler+0x51e>
    return;
 8004a1c:	bf00      	nop
 8004a1e:	e002      	b.n	8004a26 <HAL_UART_IRQHandler+0x51e>
      return;
 8004a20:	bf00      	nop
 8004a22:	e000      	b.n	8004a26 <HAL_UART_IRQHandler+0x51e>
      return;
 8004a24:	bf00      	nop
  }
}
 8004a26:	37e8      	adds	r7, #232	@ 0xe8
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	603b      	str	r3, [r7, #0]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a7c:	e03b      	b.n	8004af6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a7e:	6a3b      	ldr	r3, [r7, #32]
 8004a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a84:	d037      	beq.n	8004af6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a86:	f7fc fef3 	bl	8001870 <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	6a3a      	ldr	r2, [r7, #32]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d302      	bcc.n	8004a9c <UART_WaitOnFlagUntilTimeout+0x30>
 8004a96:	6a3b      	ldr	r3, [r7, #32]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d101      	bne.n	8004aa0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e03a      	b.n	8004b16 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	f003 0304 	and.w	r3, r3, #4
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d023      	beq.n	8004af6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	2b80      	cmp	r3, #128	@ 0x80
 8004ab2:	d020      	beq.n	8004af6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2b40      	cmp	r3, #64	@ 0x40
 8004ab8:	d01d      	beq.n	8004af6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0308 	and.w	r3, r3, #8
 8004ac4:	2b08      	cmp	r3, #8
 8004ac6:	d116      	bne.n	8004af6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004ac8:	2300      	movs	r3, #0
 8004aca:	617b      	str	r3, [r7, #20]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f000 f857 	bl	8004b92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2208      	movs	r2, #8
 8004ae8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e00f      	b.n	8004b16 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	4013      	ands	r3, r2
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	bf0c      	ite	eq
 8004b06:	2301      	moveq	r3, #1
 8004b08:	2300      	movne	r3, #0
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	79fb      	ldrb	r3, [r7, #7]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d0b4      	beq.n	8004a7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3718      	adds	r7, #24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b085      	sub	sp, #20
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	60f8      	str	r0, [r7, #12]
 8004b26:	60b9      	str	r1, [r7, #8]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	88fa      	ldrh	r2, [r7, #6]
 8004b36:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	88fa      	ldrh	r2, [r7, #6]
 8004b3c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2222      	movs	r2, #34	@ 0x22
 8004b48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d007      	beq.n	8004b64 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68da      	ldr	r2, [r3, #12]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b62:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	695a      	ldr	r2, [r3, #20]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 0201 	orr.w	r2, r2, #1
 8004b72:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68da      	ldr	r2, [r3, #12]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0220 	orr.w	r2, r2, #32
 8004b82:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b095      	sub	sp, #84	@ 0x54
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	330c      	adds	r3, #12
 8004ba0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ba4:	e853 3f00 	ldrex	r3, [r3]
 8004ba8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	330c      	adds	r3, #12
 8004bb8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004bba:	643a      	str	r2, [r7, #64]	@ 0x40
 8004bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004bc0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004bc2:	e841 2300 	strex	r3, r2, [r1]
 8004bc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1e5      	bne.n	8004b9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	3314      	adds	r3, #20
 8004bd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd6:	6a3b      	ldr	r3, [r7, #32]
 8004bd8:	e853 3f00 	ldrex	r3, [r3]
 8004bdc:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	f023 0301 	bic.w	r3, r3, #1
 8004be4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	3314      	adds	r3, #20
 8004bec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004bee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004bf4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bf6:	e841 2300 	strex	r3, r2, [r1]
 8004bfa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1e5      	bne.n	8004bce <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d119      	bne.n	8004c3e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	330c      	adds	r3, #12
 8004c10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	e853 3f00 	ldrex	r3, [r3]
 8004c18:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	f023 0310 	bic.w	r3, r3, #16
 8004c20:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	330c      	adds	r3, #12
 8004c28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c2a:	61ba      	str	r2, [r7, #24]
 8004c2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2e:	6979      	ldr	r1, [r7, #20]
 8004c30:	69ba      	ldr	r2, [r7, #24]
 8004c32:	e841 2300 	strex	r3, r2, [r1]
 8004c36:	613b      	str	r3, [r7, #16]
   return(result);
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1e5      	bne.n	8004c0a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2220      	movs	r2, #32
 8004c42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004c4c:	bf00      	nop
 8004c4e:	3754      	adds	r7, #84	@ 0x54
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f7ff fee4 	bl	8004a40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c78:	bf00      	nop
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b21      	cmp	r3, #33	@ 0x21
 8004c92:	d13e      	bne.n	8004d12 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c9c:	d114      	bne.n	8004cc8 <UART_Transmit_IT+0x48>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d110      	bne.n	8004cc8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	881b      	ldrh	r3, [r3, #0]
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	1c9a      	adds	r2, r3, #2
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	621a      	str	r2, [r3, #32]
 8004cc6:	e008      	b.n	8004cda <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	1c59      	adds	r1, r3, #1
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	6211      	str	r1, [r2, #32]
 8004cd2:	781a      	ldrb	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10f      	bne.n	8004d0e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68da      	ldr	r2, [r3, #12]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004cfc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68da      	ldr	r2, [r3, #12]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d0c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	e000      	b.n	8004d14 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d12:	2302      	movs	r3, #2
  }
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3714      	adds	r7, #20
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68da      	ldr	r2, [r3, #12]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d36:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f7ff fe73 	bl	8004a2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3708      	adds	r7, #8
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b08c      	sub	sp, #48	@ 0x30
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b22      	cmp	r3, #34	@ 0x22
 8004d62:	f040 80ae 	bne.w	8004ec2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d6e:	d117      	bne.n	8004da0 <UART_Receive_IT+0x50>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d113      	bne.n	8004da0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d80:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d92:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d98:	1c9a      	adds	r2, r3, #2
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	629a      	str	r2, [r3, #40]	@ 0x28
 8004d9e:	e026      	b.n	8004dee <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004da6:	2300      	movs	r3, #0
 8004da8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004db2:	d007      	beq.n	8004dc4 <UART_Receive_IT+0x74>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10a      	bne.n	8004dd2 <UART_Receive_IT+0x82>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d106      	bne.n	8004dd2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	b2da      	uxtb	r2, r3
 8004dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dce:	701a      	strb	r2, [r3, #0]
 8004dd0:	e008      	b.n	8004de4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dde:	b2da      	uxtb	r2, r3
 8004de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004de2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de8:	1c5a      	adds	r2, r3, #1
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	3b01      	subs	r3, #1
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d15d      	bne.n	8004ebe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68da      	ldr	r2, [r3, #12]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 0220 	bic.w	r2, r2, #32
 8004e10:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68da      	ldr	r2, [r3, #12]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e20:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	695a      	ldr	r2, [r3, #20]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f022 0201 	bic.w	r2, r2, #1
 8004e30:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2220      	movs	r2, #32
 8004e36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d135      	bne.n	8004eb4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	330c      	adds	r3, #12
 8004e54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	e853 3f00 	ldrex	r3, [r3]
 8004e5c:	613b      	str	r3, [r7, #16]
   return(result);
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	f023 0310 	bic.w	r3, r3, #16
 8004e64:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	330c      	adds	r3, #12
 8004e6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e6e:	623a      	str	r2, [r7, #32]
 8004e70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e72:	69f9      	ldr	r1, [r7, #28]
 8004e74:	6a3a      	ldr	r2, [r7, #32]
 8004e76:	e841 2300 	strex	r3, r2, [r1]
 8004e7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1e5      	bne.n	8004e4e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0310 	and.w	r3, r3, #16
 8004e8c:	2b10      	cmp	r3, #16
 8004e8e:	d10a      	bne.n	8004ea6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e90:	2300      	movs	r3, #0
 8004e92:	60fb      	str	r3, [r7, #12]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	60fb      	str	r3, [r7, #12]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004eaa:	4619      	mov	r1, r3
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f7ff fdd1 	bl	8004a54 <HAL_UARTEx_RxEventCallback>
 8004eb2:	e002      	b.n	8004eba <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f7fb ff71 	bl	8000d9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	e002      	b.n	8004ec4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	e000      	b.n	8004ec4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004ec2:	2302      	movs	r3, #2
  }
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3730      	adds	r7, #48	@ 0x30
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ecc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ed0:	b0c0      	sub	sp, #256	@ 0x100
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee8:	68d9      	ldr	r1, [r3, #12]
 8004eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	ea40 0301 	orr.w	r3, r0, r1
 8004ef4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004efa:	689a      	ldr	r2, [r3, #8]
 8004efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	431a      	orrs	r2, r3
 8004f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004f24:	f021 010c 	bic.w	r1, r1, #12
 8004f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004f32:	430b      	orrs	r3, r1
 8004f34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f46:	6999      	ldr	r1, [r3, #24]
 8004f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	ea40 0301 	orr.w	r3, r0, r1
 8004f52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	4b8f      	ldr	r3, [pc, #572]	@ (8005198 <UART_SetConfig+0x2cc>)
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d005      	beq.n	8004f6c <UART_SetConfig+0xa0>
 8004f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	4b8d      	ldr	r3, [pc, #564]	@ (800519c <UART_SetConfig+0x2d0>)
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d104      	bne.n	8004f76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f6c:	f7fe f8be 	bl	80030ec <HAL_RCC_GetPCLK2Freq>
 8004f70:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004f74:	e003      	b.n	8004f7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f76:	f7fe f8a5 	bl	80030c4 <HAL_RCC_GetPCLK1Freq>
 8004f7a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f88:	f040 810c 	bne.w	80051a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f90:	2200      	movs	r2, #0
 8004f92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004f96:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004f9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004f9e:	4622      	mov	r2, r4
 8004fa0:	462b      	mov	r3, r5
 8004fa2:	1891      	adds	r1, r2, r2
 8004fa4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004fa6:	415b      	adcs	r3, r3
 8004fa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004faa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004fae:	4621      	mov	r1, r4
 8004fb0:	eb12 0801 	adds.w	r8, r2, r1
 8004fb4:	4629      	mov	r1, r5
 8004fb6:	eb43 0901 	adc.w	r9, r3, r1
 8004fba:	f04f 0200 	mov.w	r2, #0
 8004fbe:	f04f 0300 	mov.w	r3, #0
 8004fc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fce:	4690      	mov	r8, r2
 8004fd0:	4699      	mov	r9, r3
 8004fd2:	4623      	mov	r3, r4
 8004fd4:	eb18 0303 	adds.w	r3, r8, r3
 8004fd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004fdc:	462b      	mov	r3, r5
 8004fde:	eb49 0303 	adc.w	r3, r9, r3
 8004fe2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004ff2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004ff6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	18db      	adds	r3, r3, r3
 8004ffe:	653b      	str	r3, [r7, #80]	@ 0x50
 8005000:	4613      	mov	r3, r2
 8005002:	eb42 0303 	adc.w	r3, r2, r3
 8005006:	657b      	str	r3, [r7, #84]	@ 0x54
 8005008:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800500c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005010:	f7fb f93e 	bl	8000290 <__aeabi_uldivmod>
 8005014:	4602      	mov	r2, r0
 8005016:	460b      	mov	r3, r1
 8005018:	4b61      	ldr	r3, [pc, #388]	@ (80051a0 <UART_SetConfig+0x2d4>)
 800501a:	fba3 2302 	umull	r2, r3, r3, r2
 800501e:	095b      	lsrs	r3, r3, #5
 8005020:	011c      	lsls	r4, r3, #4
 8005022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005026:	2200      	movs	r2, #0
 8005028:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800502c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005030:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005034:	4642      	mov	r2, r8
 8005036:	464b      	mov	r3, r9
 8005038:	1891      	adds	r1, r2, r2
 800503a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800503c:	415b      	adcs	r3, r3
 800503e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005040:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005044:	4641      	mov	r1, r8
 8005046:	eb12 0a01 	adds.w	sl, r2, r1
 800504a:	4649      	mov	r1, r9
 800504c:	eb43 0b01 	adc.w	fp, r3, r1
 8005050:	f04f 0200 	mov.w	r2, #0
 8005054:	f04f 0300 	mov.w	r3, #0
 8005058:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800505c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005060:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005064:	4692      	mov	sl, r2
 8005066:	469b      	mov	fp, r3
 8005068:	4643      	mov	r3, r8
 800506a:	eb1a 0303 	adds.w	r3, sl, r3
 800506e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005072:	464b      	mov	r3, r9
 8005074:	eb4b 0303 	adc.w	r3, fp, r3
 8005078:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800507c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005088:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800508c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005090:	460b      	mov	r3, r1
 8005092:	18db      	adds	r3, r3, r3
 8005094:	643b      	str	r3, [r7, #64]	@ 0x40
 8005096:	4613      	mov	r3, r2
 8005098:	eb42 0303 	adc.w	r3, r2, r3
 800509c:	647b      	str	r3, [r7, #68]	@ 0x44
 800509e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80050a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80050a6:	f7fb f8f3 	bl	8000290 <__aeabi_uldivmod>
 80050aa:	4602      	mov	r2, r0
 80050ac:	460b      	mov	r3, r1
 80050ae:	4611      	mov	r1, r2
 80050b0:	4b3b      	ldr	r3, [pc, #236]	@ (80051a0 <UART_SetConfig+0x2d4>)
 80050b2:	fba3 2301 	umull	r2, r3, r3, r1
 80050b6:	095b      	lsrs	r3, r3, #5
 80050b8:	2264      	movs	r2, #100	@ 0x64
 80050ba:	fb02 f303 	mul.w	r3, r2, r3
 80050be:	1acb      	subs	r3, r1, r3
 80050c0:	00db      	lsls	r3, r3, #3
 80050c2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80050c6:	4b36      	ldr	r3, [pc, #216]	@ (80051a0 <UART_SetConfig+0x2d4>)
 80050c8:	fba3 2302 	umull	r2, r3, r3, r2
 80050cc:	095b      	lsrs	r3, r3, #5
 80050ce:	005b      	lsls	r3, r3, #1
 80050d0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80050d4:	441c      	add	r4, r3
 80050d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050da:	2200      	movs	r2, #0
 80050dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80050e0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80050e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80050e8:	4642      	mov	r2, r8
 80050ea:	464b      	mov	r3, r9
 80050ec:	1891      	adds	r1, r2, r2
 80050ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80050f0:	415b      	adcs	r3, r3
 80050f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80050f8:	4641      	mov	r1, r8
 80050fa:	1851      	adds	r1, r2, r1
 80050fc:	6339      	str	r1, [r7, #48]	@ 0x30
 80050fe:	4649      	mov	r1, r9
 8005100:	414b      	adcs	r3, r1
 8005102:	637b      	str	r3, [r7, #52]	@ 0x34
 8005104:	f04f 0200 	mov.w	r2, #0
 8005108:	f04f 0300 	mov.w	r3, #0
 800510c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005110:	4659      	mov	r1, fp
 8005112:	00cb      	lsls	r3, r1, #3
 8005114:	4651      	mov	r1, sl
 8005116:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800511a:	4651      	mov	r1, sl
 800511c:	00ca      	lsls	r2, r1, #3
 800511e:	4610      	mov	r0, r2
 8005120:	4619      	mov	r1, r3
 8005122:	4603      	mov	r3, r0
 8005124:	4642      	mov	r2, r8
 8005126:	189b      	adds	r3, r3, r2
 8005128:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800512c:	464b      	mov	r3, r9
 800512e:	460a      	mov	r2, r1
 8005130:	eb42 0303 	adc.w	r3, r2, r3
 8005134:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005144:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005148:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800514c:	460b      	mov	r3, r1
 800514e:	18db      	adds	r3, r3, r3
 8005150:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005152:	4613      	mov	r3, r2
 8005154:	eb42 0303 	adc.w	r3, r2, r3
 8005158:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800515a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800515e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005162:	f7fb f895 	bl	8000290 <__aeabi_uldivmod>
 8005166:	4602      	mov	r2, r0
 8005168:	460b      	mov	r3, r1
 800516a:	4b0d      	ldr	r3, [pc, #52]	@ (80051a0 <UART_SetConfig+0x2d4>)
 800516c:	fba3 1302 	umull	r1, r3, r3, r2
 8005170:	095b      	lsrs	r3, r3, #5
 8005172:	2164      	movs	r1, #100	@ 0x64
 8005174:	fb01 f303 	mul.w	r3, r1, r3
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	3332      	adds	r3, #50	@ 0x32
 800517e:	4a08      	ldr	r2, [pc, #32]	@ (80051a0 <UART_SetConfig+0x2d4>)
 8005180:	fba2 2303 	umull	r2, r3, r2, r3
 8005184:	095b      	lsrs	r3, r3, #5
 8005186:	f003 0207 	and.w	r2, r3, #7
 800518a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4422      	add	r2, r4
 8005192:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005194:	e106      	b.n	80053a4 <UART_SetConfig+0x4d8>
 8005196:	bf00      	nop
 8005198:	40011000 	.word	0x40011000
 800519c:	40011400 	.word	0x40011400
 80051a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051a8:	2200      	movs	r2, #0
 80051aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80051ae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80051b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80051b6:	4642      	mov	r2, r8
 80051b8:	464b      	mov	r3, r9
 80051ba:	1891      	adds	r1, r2, r2
 80051bc:	6239      	str	r1, [r7, #32]
 80051be:	415b      	adcs	r3, r3
 80051c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80051c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051c6:	4641      	mov	r1, r8
 80051c8:	1854      	adds	r4, r2, r1
 80051ca:	4649      	mov	r1, r9
 80051cc:	eb43 0501 	adc.w	r5, r3, r1
 80051d0:	f04f 0200 	mov.w	r2, #0
 80051d4:	f04f 0300 	mov.w	r3, #0
 80051d8:	00eb      	lsls	r3, r5, #3
 80051da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051de:	00e2      	lsls	r2, r4, #3
 80051e0:	4614      	mov	r4, r2
 80051e2:	461d      	mov	r5, r3
 80051e4:	4643      	mov	r3, r8
 80051e6:	18e3      	adds	r3, r4, r3
 80051e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80051ec:	464b      	mov	r3, r9
 80051ee:	eb45 0303 	adc.w	r3, r5, r3
 80051f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80051f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005202:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005206:	f04f 0200 	mov.w	r2, #0
 800520a:	f04f 0300 	mov.w	r3, #0
 800520e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005212:	4629      	mov	r1, r5
 8005214:	008b      	lsls	r3, r1, #2
 8005216:	4621      	mov	r1, r4
 8005218:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800521c:	4621      	mov	r1, r4
 800521e:	008a      	lsls	r2, r1, #2
 8005220:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005224:	f7fb f834 	bl	8000290 <__aeabi_uldivmod>
 8005228:	4602      	mov	r2, r0
 800522a:	460b      	mov	r3, r1
 800522c:	4b60      	ldr	r3, [pc, #384]	@ (80053b0 <UART_SetConfig+0x4e4>)
 800522e:	fba3 2302 	umull	r2, r3, r3, r2
 8005232:	095b      	lsrs	r3, r3, #5
 8005234:	011c      	lsls	r4, r3, #4
 8005236:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800523a:	2200      	movs	r2, #0
 800523c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005240:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005244:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005248:	4642      	mov	r2, r8
 800524a:	464b      	mov	r3, r9
 800524c:	1891      	adds	r1, r2, r2
 800524e:	61b9      	str	r1, [r7, #24]
 8005250:	415b      	adcs	r3, r3
 8005252:	61fb      	str	r3, [r7, #28]
 8005254:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005258:	4641      	mov	r1, r8
 800525a:	1851      	adds	r1, r2, r1
 800525c:	6139      	str	r1, [r7, #16]
 800525e:	4649      	mov	r1, r9
 8005260:	414b      	adcs	r3, r1
 8005262:	617b      	str	r3, [r7, #20]
 8005264:	f04f 0200 	mov.w	r2, #0
 8005268:	f04f 0300 	mov.w	r3, #0
 800526c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005270:	4659      	mov	r1, fp
 8005272:	00cb      	lsls	r3, r1, #3
 8005274:	4651      	mov	r1, sl
 8005276:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800527a:	4651      	mov	r1, sl
 800527c:	00ca      	lsls	r2, r1, #3
 800527e:	4610      	mov	r0, r2
 8005280:	4619      	mov	r1, r3
 8005282:	4603      	mov	r3, r0
 8005284:	4642      	mov	r2, r8
 8005286:	189b      	adds	r3, r3, r2
 8005288:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800528c:	464b      	mov	r3, r9
 800528e:	460a      	mov	r2, r1
 8005290:	eb42 0303 	adc.w	r3, r2, r3
 8005294:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80052a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80052a4:	f04f 0200 	mov.w	r2, #0
 80052a8:	f04f 0300 	mov.w	r3, #0
 80052ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80052b0:	4649      	mov	r1, r9
 80052b2:	008b      	lsls	r3, r1, #2
 80052b4:	4641      	mov	r1, r8
 80052b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052ba:	4641      	mov	r1, r8
 80052bc:	008a      	lsls	r2, r1, #2
 80052be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80052c2:	f7fa ffe5 	bl	8000290 <__aeabi_uldivmod>
 80052c6:	4602      	mov	r2, r0
 80052c8:	460b      	mov	r3, r1
 80052ca:	4611      	mov	r1, r2
 80052cc:	4b38      	ldr	r3, [pc, #224]	@ (80053b0 <UART_SetConfig+0x4e4>)
 80052ce:	fba3 2301 	umull	r2, r3, r3, r1
 80052d2:	095b      	lsrs	r3, r3, #5
 80052d4:	2264      	movs	r2, #100	@ 0x64
 80052d6:	fb02 f303 	mul.w	r3, r2, r3
 80052da:	1acb      	subs	r3, r1, r3
 80052dc:	011b      	lsls	r3, r3, #4
 80052de:	3332      	adds	r3, #50	@ 0x32
 80052e0:	4a33      	ldr	r2, [pc, #204]	@ (80053b0 <UART_SetConfig+0x4e4>)
 80052e2:	fba2 2303 	umull	r2, r3, r2, r3
 80052e6:	095b      	lsrs	r3, r3, #5
 80052e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052ec:	441c      	add	r4, r3
 80052ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052f2:	2200      	movs	r2, #0
 80052f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80052f6:	677a      	str	r2, [r7, #116]	@ 0x74
 80052f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80052fc:	4642      	mov	r2, r8
 80052fe:	464b      	mov	r3, r9
 8005300:	1891      	adds	r1, r2, r2
 8005302:	60b9      	str	r1, [r7, #8]
 8005304:	415b      	adcs	r3, r3
 8005306:	60fb      	str	r3, [r7, #12]
 8005308:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800530c:	4641      	mov	r1, r8
 800530e:	1851      	adds	r1, r2, r1
 8005310:	6039      	str	r1, [r7, #0]
 8005312:	4649      	mov	r1, r9
 8005314:	414b      	adcs	r3, r1
 8005316:	607b      	str	r3, [r7, #4]
 8005318:	f04f 0200 	mov.w	r2, #0
 800531c:	f04f 0300 	mov.w	r3, #0
 8005320:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005324:	4659      	mov	r1, fp
 8005326:	00cb      	lsls	r3, r1, #3
 8005328:	4651      	mov	r1, sl
 800532a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800532e:	4651      	mov	r1, sl
 8005330:	00ca      	lsls	r2, r1, #3
 8005332:	4610      	mov	r0, r2
 8005334:	4619      	mov	r1, r3
 8005336:	4603      	mov	r3, r0
 8005338:	4642      	mov	r2, r8
 800533a:	189b      	adds	r3, r3, r2
 800533c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800533e:	464b      	mov	r3, r9
 8005340:	460a      	mov	r2, r1
 8005342:	eb42 0303 	adc.w	r3, r2, r3
 8005346:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	663b      	str	r3, [r7, #96]	@ 0x60
 8005352:	667a      	str	r2, [r7, #100]	@ 0x64
 8005354:	f04f 0200 	mov.w	r2, #0
 8005358:	f04f 0300 	mov.w	r3, #0
 800535c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005360:	4649      	mov	r1, r9
 8005362:	008b      	lsls	r3, r1, #2
 8005364:	4641      	mov	r1, r8
 8005366:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800536a:	4641      	mov	r1, r8
 800536c:	008a      	lsls	r2, r1, #2
 800536e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005372:	f7fa ff8d 	bl	8000290 <__aeabi_uldivmod>
 8005376:	4602      	mov	r2, r0
 8005378:	460b      	mov	r3, r1
 800537a:	4b0d      	ldr	r3, [pc, #52]	@ (80053b0 <UART_SetConfig+0x4e4>)
 800537c:	fba3 1302 	umull	r1, r3, r3, r2
 8005380:	095b      	lsrs	r3, r3, #5
 8005382:	2164      	movs	r1, #100	@ 0x64
 8005384:	fb01 f303 	mul.w	r3, r1, r3
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	011b      	lsls	r3, r3, #4
 800538c:	3332      	adds	r3, #50	@ 0x32
 800538e:	4a08      	ldr	r2, [pc, #32]	@ (80053b0 <UART_SetConfig+0x4e4>)
 8005390:	fba2 2303 	umull	r2, r3, r2, r3
 8005394:	095b      	lsrs	r3, r3, #5
 8005396:	f003 020f 	and.w	r2, r3, #15
 800539a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4422      	add	r2, r4
 80053a2:	609a      	str	r2, [r3, #8]
}
 80053a4:	bf00      	nop
 80053a6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80053aa:	46bd      	mov	sp, r7
 80053ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053b0:	51eb851f 	.word	0x51eb851f

080053b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053b4:	b084      	sub	sp, #16
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b084      	sub	sp, #16
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
 80053be:	f107 001c 	add.w	r0, r7, #28
 80053c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053c6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d123      	bne.n	8005416 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80053e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80053f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d105      	bne.n	800540a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 faa0 	bl	8005950 <USB_CoreReset>
 8005410:	4603      	mov	r3, r0
 8005412:	73fb      	strb	r3, [r7, #15]
 8005414:	e01b      	b.n	800544e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 fa94 	bl	8005950 <USB_CoreReset>
 8005428:	4603      	mov	r3, r0
 800542a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800542c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005430:	2b00      	cmp	r3, #0
 8005432:	d106      	bne.n	8005442 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005438:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005440:	e005      	b.n	800544e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005446:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800544e:	7fbb      	ldrb	r3, [r7, #30]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d10b      	bne.n	800546c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f043 0206 	orr.w	r2, r3, #6
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f043 0220 	orr.w	r2, r3, #32
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800546c:	7bfb      	ldrb	r3, [r7, #15]
}
 800546e:	4618      	mov	r0, r3
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005478:	b004      	add	sp, #16
 800547a:	4770      	bx	lr

0800547c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f023 0201 	bic.w	r2, r3, #1
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr

0800549e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800549e:	b580      	push	{r7, lr}
 80054a0:	b084      	sub	sp, #16
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
 80054a6:	460b      	mov	r3, r1
 80054a8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80054aa:	2300      	movs	r3, #0
 80054ac:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80054ba:	78fb      	ldrb	r3, [r7, #3]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d115      	bne.n	80054ec <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80054cc:	200a      	movs	r0, #10
 80054ce:	f7fc f9db 	bl	8001888 <HAL_Delay>
      ms += 10U;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	330a      	adds	r3, #10
 80054d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 fa2b 	bl	8005934 <USB_GetMode>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d01e      	beq.n	8005522 <USB_SetCurrentMode+0x84>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2bc7      	cmp	r3, #199	@ 0xc7
 80054e8:	d9f0      	bls.n	80054cc <USB_SetCurrentMode+0x2e>
 80054ea:	e01a      	b.n	8005522 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80054ec:	78fb      	ldrb	r3, [r7, #3]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d115      	bne.n	800551e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80054fe:	200a      	movs	r0, #10
 8005500:	f7fc f9c2 	bl	8001888 <HAL_Delay>
      ms += 10U;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	330a      	adds	r3, #10
 8005508:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 fa12 	bl	8005934 <USB_GetMode>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d005      	beq.n	8005522 <USB_SetCurrentMode+0x84>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2bc7      	cmp	r3, #199	@ 0xc7
 800551a:	d9f0      	bls.n	80054fe <USB_SetCurrentMode+0x60>
 800551c:	e001      	b.n	8005522 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e005      	b.n	800552e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2bc8      	cmp	r3, #200	@ 0xc8
 8005526:	d101      	bne.n	800552c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e000      	b.n	800552e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
	...

08005538 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005538:	b084      	sub	sp, #16
 800553a:	b580      	push	{r7, lr}
 800553c:	b086      	sub	sp, #24
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
 8005542:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005546:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800554a:	2300      	movs	r3, #0
 800554c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005552:	2300      	movs	r3, #0
 8005554:	613b      	str	r3, [r7, #16]
 8005556:	e009      	b.n	800556c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	3340      	adds	r3, #64	@ 0x40
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4413      	add	r3, r2
 8005562:	2200      	movs	r2, #0
 8005564:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	3301      	adds	r3, #1
 800556a:	613b      	str	r3, [r7, #16]
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	2b0e      	cmp	r3, #14
 8005570:	d9f2      	bls.n	8005558 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005572:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005576:	2b00      	cmp	r3, #0
 8005578:	d11c      	bne.n	80055b4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005588:	f043 0302 	orr.w	r3, r3, #2
 800558c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005592:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800559e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055aa:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	639a      	str	r2, [r3, #56]	@ 0x38
 80055b2:	e00b      	b.n	80055cc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055b8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055c4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80055d2:	461a      	mov	r2, r3
 80055d4:	2300      	movs	r3, #0
 80055d6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055d8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d10d      	bne.n	80055fc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80055e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d104      	bne.n	80055f2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80055e8:	2100      	movs	r1, #0
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f968 	bl	80058c0 <USB_SetDevSpeed>
 80055f0:	e008      	b.n	8005604 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80055f2:	2101      	movs	r1, #1
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 f963 	bl	80058c0 <USB_SetDevSpeed>
 80055fa:	e003      	b.n	8005604 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80055fc:	2103      	movs	r1, #3
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f95e 	bl	80058c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005604:	2110      	movs	r1, #16
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 f8fa 	bl	8005800 <USB_FlushTxFifo>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f924 	bl	8005864 <USB_FlushRxFifo>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800562c:	461a      	mov	r2, r3
 800562e:	2300      	movs	r3, #0
 8005630:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005638:	461a      	mov	r2, r3
 800563a:	2300      	movs	r3, #0
 800563c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005644:	461a      	mov	r2, r3
 8005646:	2300      	movs	r3, #0
 8005648:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800564a:	2300      	movs	r3, #0
 800564c:	613b      	str	r3, [r7, #16]
 800564e:	e043      	b.n	80056d8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	4413      	add	r3, r2
 8005658:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005662:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005666:	d118      	bne.n	800569a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10a      	bne.n	8005684 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	015a      	lsls	r2, r3, #5
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	4413      	add	r3, r2
 8005676:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800567a:	461a      	mov	r2, r3
 800567c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005680:	6013      	str	r3, [r2, #0]
 8005682:	e013      	b.n	80056ac <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	015a      	lsls	r2, r3, #5
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4413      	add	r3, r2
 800568c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005690:	461a      	mov	r2, r3
 8005692:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005696:	6013      	str	r3, [r2, #0]
 8005698:	e008      	b.n	80056ac <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	015a      	lsls	r2, r3, #5
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	4413      	add	r3, r2
 80056a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056a6:	461a      	mov	r2, r3
 80056a8:	2300      	movs	r3, #0
 80056aa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	015a      	lsls	r2, r3, #5
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	4413      	add	r3, r2
 80056b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056b8:	461a      	mov	r2, r3
 80056ba:	2300      	movs	r3, #0
 80056bc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056ca:	461a      	mov	r2, r3
 80056cc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80056d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	3301      	adds	r3, #1
 80056d6:	613b      	str	r3, [r7, #16]
 80056d8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80056dc:	461a      	mov	r2, r3
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d3b5      	bcc.n	8005650 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056e4:	2300      	movs	r3, #0
 80056e6:	613b      	str	r3, [r7, #16]
 80056e8:	e043      	b.n	8005772 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005700:	d118      	bne.n	8005734 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10a      	bne.n	800571e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	4413      	add	r3, r2
 8005710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005714:	461a      	mov	r2, r3
 8005716:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800571a:	6013      	str	r3, [r2, #0]
 800571c:	e013      	b.n	8005746 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	015a      	lsls	r2, r3, #5
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	4413      	add	r3, r2
 8005726:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800572a:	461a      	mov	r2, r3
 800572c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005730:	6013      	str	r3, [r2, #0]
 8005732:	e008      	b.n	8005746 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	4413      	add	r3, r2
 800573c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005740:	461a      	mov	r2, r3
 8005742:	2300      	movs	r3, #0
 8005744:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	015a      	lsls	r2, r3, #5
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	4413      	add	r3, r2
 800574e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005752:	461a      	mov	r2, r3
 8005754:	2300      	movs	r3, #0
 8005756:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	4413      	add	r3, r2
 8005760:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005764:	461a      	mov	r2, r3
 8005766:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800576a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	3301      	adds	r3, #1
 8005770:	613b      	str	r3, [r7, #16]
 8005772:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005776:	461a      	mov	r2, r3
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	4293      	cmp	r3, r2
 800577c:	d3b5      	bcc.n	80056ea <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800578c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005790:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800579e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80057a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d105      	bne.n	80057b4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	f043 0210 	orr.w	r2, r3, #16
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	699a      	ldr	r2, [r3, #24]
 80057b8:	4b10      	ldr	r3, [pc, #64]	@ (80057fc <USB_DevInit+0x2c4>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80057c0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d005      	beq.n	80057d4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	f043 0208 	orr.w	r2, r3, #8
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80057d4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d107      	bne.n	80057ec <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80057e4:	f043 0304 	orr.w	r3, r3, #4
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80057ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3718      	adds	r7, #24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057f8:	b004      	add	sp, #16
 80057fa:	4770      	bx	lr
 80057fc:	803c3800 	.word	0x803c3800

08005800 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800580a:	2300      	movs	r3, #0
 800580c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	3301      	adds	r3, #1
 8005812:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800581a:	d901      	bls.n	8005820 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	e01b      	b.n	8005858 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	2b00      	cmp	r3, #0
 8005826:	daf2      	bge.n	800580e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005828:	2300      	movs	r3, #0
 800582a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	019b      	lsls	r3, r3, #6
 8005830:	f043 0220 	orr.w	r2, r3, #32
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	3301      	adds	r3, #1
 800583c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005844:	d901      	bls.n	800584a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e006      	b.n	8005858 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	f003 0320 	and.w	r3, r3, #32
 8005852:	2b20      	cmp	r3, #32
 8005854:	d0f0      	beq.n	8005838 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3714      	adds	r7, #20
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800586c:	2300      	movs	r3, #0
 800586e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	3301      	adds	r3, #1
 8005874:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800587c:	d901      	bls.n	8005882 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e018      	b.n	80058b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	2b00      	cmp	r3, #0
 8005888:	daf2      	bge.n	8005870 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800588a:	2300      	movs	r3, #0
 800588c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2210      	movs	r2, #16
 8005892:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	3301      	adds	r3, #1
 8005898:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058a0:	d901      	bls.n	80058a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e006      	b.n	80058b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	f003 0310 	and.w	r3, r3, #16
 80058ae:	2b10      	cmp	r3, #16
 80058b0:	d0f0      	beq.n	8005894 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3714      	adds	r7, #20
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	460b      	mov	r3, r1
 80058ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	78fb      	ldrb	r3, [r7, #3]
 80058da:	68f9      	ldr	r1, [r7, #12]
 80058dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80058e0:	4313      	orrs	r3, r2
 80058e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3714      	adds	r7, #20
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b085      	sub	sp, #20
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800590c:	f023 0303 	bic.w	r3, r3, #3
 8005910:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005920:	f043 0302 	orr.w	r3, r3, #2
 8005924:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3714      	adds	r7, #20
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	695b      	ldr	r3, [r3, #20]
 8005940:	f003 0301 	and.w	r3, r3, #1
}
 8005944:	4618      	mov	r0, r3
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005958:	2300      	movs	r3, #0
 800595a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	3301      	adds	r3, #1
 8005960:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005968:	d901      	bls.n	800596e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e01b      	b.n	80059a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	2b00      	cmp	r3, #0
 8005974:	daf2      	bge.n	800595c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005976:	2300      	movs	r3, #0
 8005978:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	f043 0201 	orr.w	r2, r3, #1
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	3301      	adds	r3, #1
 800598a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005992:	d901      	bls.n	8005998 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e006      	b.n	80059a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d0f0      	beq.n	8005986 <USB_CoreReset+0x36>

  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3714      	adds	r7, #20
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b085      	sub	sp, #20
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	4603      	mov	r3, r0
 80059ba:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80059bc:	2300      	movs	r3, #0
 80059be:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80059c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059c4:	2b84      	cmp	r3, #132	@ 0x84
 80059c6:	d005      	beq.n	80059d4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80059c8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4413      	add	r3, r2
 80059d0:	3303      	adds	r3, #3
 80059d2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80059d4:	68fb      	ldr	r3, [r7, #12]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr

080059e2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b083      	sub	sp, #12
 80059e6:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059e8:	f3ef 8305 	mrs	r3, IPSR
 80059ec:	607b      	str	r3, [r7, #4]
  return(result);
 80059ee:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	bf14      	ite	ne
 80059f4:	2301      	movne	r3, #1
 80059f6:	2300      	moveq	r3, #0
 80059f8:	b2db      	uxtb	r3, r3
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005a0a:	f001 f941 	bl	8006c90 <vTaskStartScheduler>
  
  return osOK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a16:	b089      	sub	sp, #36	@ 0x24
 8005a18:	af04      	add	r7, sp, #16
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d020      	beq.n	8005a68 <osThreadCreate+0x54>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d01c      	beq.n	8005a68 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685c      	ldr	r4, [r3, #4]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	691e      	ldr	r6, [r3, #16]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a40:	4618      	mov	r0, r3
 8005a42:	f7ff ffb6 	bl	80059b2 <makeFreeRtosPriority>
 8005a46:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	695b      	ldr	r3, [r3, #20]
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a50:	9202      	str	r2, [sp, #8]
 8005a52:	9301      	str	r3, [sp, #4]
 8005a54:	9100      	str	r1, [sp, #0]
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	4632      	mov	r2, r6
 8005a5a:	4629      	mov	r1, r5
 8005a5c:	4620      	mov	r0, r4
 8005a5e:	f000 ff31 	bl	80068c4 <xTaskCreateStatic>
 8005a62:	4603      	mov	r3, r0
 8005a64:	60fb      	str	r3, [r7, #12]
 8005a66:	e01c      	b.n	8005aa2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685c      	ldr	r4, [r3, #4]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a74:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7ff ff98 	bl	80059b2 <makeFreeRtosPriority>
 8005a82:	4602      	mov	r2, r0
 8005a84:	f107 030c 	add.w	r3, r7, #12
 8005a88:	9301      	str	r3, [sp, #4]
 8005a8a:	9200      	str	r2, [sp, #0]
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	4632      	mov	r2, r6
 8005a90:	4629      	mov	r1, r5
 8005a92:	4620      	mov	r0, r4
 8005a94:	f000 ff76 	bl	8006984 <xTaskCreate>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d001      	beq.n	8005aa2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	e000      	b.n	8005aa4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3714      	adds	r7, #20
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005aac <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d001      	beq.n	8005ac2 <osDelay+0x16>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	e000      	b.n	8005ac4 <osDelay+0x18>
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f001 f8ad 	bl	8006c24 <vTaskDelay>
  
  return osOK;
 8005aca:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3710      	adds	r7, #16
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b086      	sub	sp, #24
 8005ad8:	af02      	add	r7, sp, #8
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00f      	beq.n	8005b06 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d10a      	bne.n	8005b02 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	2203      	movs	r2, #3
 8005af2:	9200      	str	r2, [sp, #0]
 8005af4:	2200      	movs	r2, #0
 8005af6:	2100      	movs	r1, #0
 8005af8:	2001      	movs	r0, #1
 8005afa:	f000 f9bf 	bl	8005e7c <xQueueGenericCreateStatic>
 8005afe:	4603      	mov	r3, r0
 8005b00:	e016      	b.n	8005b30 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005b02:	2300      	movs	r3, #0
 8005b04:	e014      	b.n	8005b30 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d110      	bne.n	8005b2e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8005b0c:	2203      	movs	r2, #3
 8005b0e:	2100      	movs	r1, #0
 8005b10:	2001      	movs	r0, #1
 8005b12:	f000 fa30 	bl	8005f76 <xQueueGenericCreate>
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d005      	beq.n	8005b2a <osSemaphoreCreate+0x56>
 8005b1e:	2300      	movs	r3, #0
 8005b20:	2200      	movs	r2, #0
 8005b22:	2100      	movs	r1, #0
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f000 fa81 	bl	800602c <xQueueGenericSend>
      return sema;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	e000      	b.n	8005b30 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005b2e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3710      	adds	r7, #16
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005b42:	2300      	movs	r3, #0
 8005b44:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d101      	bne.n	8005b50 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005b4c:	2380      	movs	r3, #128	@ 0x80
 8005b4e:	e03a      	b.n	8005bc6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005b50:	2300      	movs	r3, #0
 8005b52:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b5a:	d103      	bne.n	8005b64 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b60:	60fb      	str	r3, [r7, #12]
 8005b62:	e009      	b.n	8005b78 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d006      	beq.n	8005b78 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d101      	bne.n	8005b78 <osSemaphoreWait+0x40>
      ticks = 1;
 8005b74:	2301      	movs	r3, #1
 8005b76:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005b78:	f7ff ff33 	bl	80059e2 <inHandlerMode>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d017      	beq.n	8005bb2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005b82:	f107 0308 	add.w	r3, r7, #8
 8005b86:	461a      	mov	r2, r3
 8005b88:	2100      	movs	r1, #0
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 fcf0 	bl	8006570 <xQueueReceiveFromISR>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d001      	beq.n	8005b9a <osSemaphoreWait+0x62>
      return osErrorOS;
 8005b96:	23ff      	movs	r3, #255	@ 0xff
 8005b98:	e015      	b.n	8005bc6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d011      	beq.n	8005bc4 <osSemaphoreWait+0x8c>
 8005ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8005bd0 <osSemaphoreWait+0x98>)
 8005ba2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ba6:	601a      	str	r2, [r3, #0]
 8005ba8:	f3bf 8f4f 	dsb	sy
 8005bac:	f3bf 8f6f 	isb	sy
 8005bb0:	e008      	b.n	8005bc4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005bb2:	68f9      	ldr	r1, [r7, #12]
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 fbcb 	bl	8006350 <xQueueSemaphoreTake>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d001      	beq.n	8005bc4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005bc0:	23ff      	movs	r3, #255	@ 0xff
 8005bc2:	e000      	b.n	8005bc6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	e000ed04 	.word	0xe000ed04

08005bd4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005be0:	2300      	movs	r3, #0
 8005be2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005be4:	f7ff fefd 	bl	80059e2 <inHandlerMode>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d016      	beq.n	8005c1c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005bee:	f107 0308 	add.w	r3, r7, #8
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 fb1b 	bl	8006230 <xQueueGiveFromISR>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d001      	beq.n	8005c04 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005c00:	23ff      	movs	r3, #255	@ 0xff
 8005c02:	e017      	b.n	8005c34 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d013      	beq.n	8005c32 <osSemaphoreRelease+0x5e>
 8005c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8005c3c <osSemaphoreRelease+0x68>)
 8005c0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c10:	601a      	str	r2, [r3, #0]
 8005c12:	f3bf 8f4f 	dsb	sy
 8005c16:	f3bf 8f6f 	isb	sy
 8005c1a:	e00a      	b.n	8005c32 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	2200      	movs	r2, #0
 8005c20:	2100      	movs	r1, #0
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 fa02 	bl	800602c <xQueueGenericSend>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d001      	beq.n	8005c32 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8005c2e:	23ff      	movs	r3, #255	@ 0xff
 8005c30:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8005c32:	68fb      	ldr	r3, [r7, #12]
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3710      	adds	r7, #16
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	e000ed04 	.word	0xe000ed04

08005c40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f103 0208 	add.w	r2, r3, #8
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f04f 32ff 	mov.w	r2, #4294967295
 8005c58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f103 0208 	add.w	r2, r3, #8
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f103 0208 	add.w	r2, r3, #8
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005c8e:	bf00      	nop
 8005c90:	370c      	adds	r7, #12
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b085      	sub	sp, #20
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
 8005ca2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	689a      	ldr	r2, [r3, #8]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	683a      	ldr	r2, [r7, #0]
 8005cbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	683a      	ldr	r2, [r7, #0]
 8005cc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	1c5a      	adds	r2, r3, #1
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	601a      	str	r2, [r3, #0]
}
 8005cd6:	bf00      	nop
 8005cd8:	3714      	adds	r7, #20
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ce2:	b480      	push	{r7}
 8005ce4:	b085      	sub	sp, #20
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
 8005cea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf8:	d103      	bne.n	8005d02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	60fb      	str	r3, [r7, #12]
 8005d00:	e00c      	b.n	8005d1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	3308      	adds	r3, #8
 8005d06:	60fb      	str	r3, [r7, #12]
 8005d08:	e002      	b.n	8005d10 <vListInsert+0x2e>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	60fb      	str	r3, [r7, #12]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68ba      	ldr	r2, [r7, #8]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d2f6      	bcs.n	8005d0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	683a      	ldr	r2, [r7, #0]
 8005d2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	683a      	ldr	r2, [r7, #0]
 8005d36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	1c5a      	adds	r2, r3, #1
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	601a      	str	r2, [r3, #0]
}
 8005d48:	bf00      	nop
 8005d4a:	3714      	adds	r7, #20
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	6892      	ldr	r2, [r2, #8]
 8005d6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	6852      	ldr	r2, [r2, #4]
 8005d74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d103      	bne.n	8005d88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	689a      	ldr	r2, [r3, #8]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	1e5a      	subs	r2, r3, #1
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3714      	adds	r7, #20
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10b      	bne.n	8005dd4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc0:	f383 8811 	msr	BASEPRI, r3
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005dce:	bf00      	nop
 8005dd0:	bf00      	nop
 8005dd2:	e7fd      	b.n	8005dd0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005dd4:	f001 fed0 	bl	8007b78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005de0:	68f9      	ldr	r1, [r7, #12]
 8005de2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005de4:	fb01 f303 	mul.w	r3, r1, r3
 8005de8:	441a      	add	r2, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e04:	3b01      	subs	r3, #1
 8005e06:	68f9      	ldr	r1, [r7, #12]
 8005e08:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005e0a:	fb01 f303 	mul.w	r3, r1, r3
 8005e0e:	441a      	add	r2, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	22ff      	movs	r2, #255	@ 0xff
 8005e18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	22ff      	movs	r2, #255	@ 0xff
 8005e20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d114      	bne.n	8005e54 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d01a      	beq.n	8005e68 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	3310      	adds	r3, #16
 8005e36:	4618      	mov	r0, r3
 8005e38:	f001 f984 	bl	8007144 <xTaskRemoveFromEventList>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d012      	beq.n	8005e68 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005e42:	4b0d      	ldr	r3, [pc, #52]	@ (8005e78 <xQueueGenericReset+0xd0>)
 8005e44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e48:	601a      	str	r2, [r3, #0]
 8005e4a:	f3bf 8f4f 	dsb	sy
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	e009      	b.n	8005e68 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	3310      	adds	r3, #16
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7ff fef1 	bl	8005c40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	3324      	adds	r3, #36	@ 0x24
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7ff feec 	bl	8005c40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005e68:	f001 feb8 	bl	8007bdc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005e6c:	2301      	movs	r3, #1
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	e000ed04 	.word	0xe000ed04

08005e7c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b08e      	sub	sp, #56	@ 0x38
 8005e80:	af02      	add	r7, sp, #8
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]
 8005e88:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10b      	bne.n	8005ea8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e94:	f383 8811 	msr	BASEPRI, r3
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005ea2:	bf00      	nop
 8005ea4:	bf00      	nop
 8005ea6:	e7fd      	b.n	8005ea4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10b      	bne.n	8005ec6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eb2:	f383 8811 	msr	BASEPRI, r3
 8005eb6:	f3bf 8f6f 	isb	sy
 8005eba:	f3bf 8f4f 	dsb	sy
 8005ebe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005ec0:	bf00      	nop
 8005ec2:	bf00      	nop
 8005ec4:	e7fd      	b.n	8005ec2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d002      	beq.n	8005ed2 <xQueueGenericCreateStatic+0x56>
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d001      	beq.n	8005ed6 <xQueueGenericCreateStatic+0x5a>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e000      	b.n	8005ed8 <xQueueGenericCreateStatic+0x5c>
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10b      	bne.n	8005ef4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee0:	f383 8811 	msr	BASEPRI, r3
 8005ee4:	f3bf 8f6f 	isb	sy
 8005ee8:	f3bf 8f4f 	dsb	sy
 8005eec:	623b      	str	r3, [r7, #32]
}
 8005eee:	bf00      	nop
 8005ef0:	bf00      	nop
 8005ef2:	e7fd      	b.n	8005ef0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d102      	bne.n	8005f00 <xQueueGenericCreateStatic+0x84>
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d101      	bne.n	8005f04 <xQueueGenericCreateStatic+0x88>
 8005f00:	2301      	movs	r3, #1
 8005f02:	e000      	b.n	8005f06 <xQueueGenericCreateStatic+0x8a>
 8005f04:	2300      	movs	r3, #0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10b      	bne.n	8005f22 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f0e:	f383 8811 	msr	BASEPRI, r3
 8005f12:	f3bf 8f6f 	isb	sy
 8005f16:	f3bf 8f4f 	dsb	sy
 8005f1a:	61fb      	str	r3, [r7, #28]
}
 8005f1c:	bf00      	nop
 8005f1e:	bf00      	nop
 8005f20:	e7fd      	b.n	8005f1e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005f22:	2348      	movs	r3, #72	@ 0x48
 8005f24:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	2b48      	cmp	r3, #72	@ 0x48
 8005f2a:	d00b      	beq.n	8005f44 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f30:	f383 8811 	msr	BASEPRI, r3
 8005f34:	f3bf 8f6f 	isb	sy
 8005f38:	f3bf 8f4f 	dsb	sy
 8005f3c:	61bb      	str	r3, [r7, #24]
}
 8005f3e:	bf00      	nop
 8005f40:	bf00      	nop
 8005f42:	e7fd      	b.n	8005f40 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005f44:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00d      	beq.n	8005f6c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f58:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	4613      	mov	r3, r2
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	68b9      	ldr	r1, [r7, #8]
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f000 f840 	bl	8005fec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3730      	adds	r7, #48	@ 0x30
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b08a      	sub	sp, #40	@ 0x28
 8005f7a:	af02      	add	r7, sp, #8
 8005f7c:	60f8      	str	r0, [r7, #12]
 8005f7e:	60b9      	str	r1, [r7, #8]
 8005f80:	4613      	mov	r3, r2
 8005f82:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d10b      	bne.n	8005fa2 <xQueueGenericCreate+0x2c>
	__asm volatile
 8005f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f8e:	f383 8811 	msr	BASEPRI, r3
 8005f92:	f3bf 8f6f 	isb	sy
 8005f96:	f3bf 8f4f 	dsb	sy
 8005f9a:	613b      	str	r3, [r7, #16]
}
 8005f9c:	bf00      	nop
 8005f9e:	bf00      	nop
 8005fa0:	e7fd      	b.n	8005f9e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	68ba      	ldr	r2, [r7, #8]
 8005fa6:	fb02 f303 	mul.w	r3, r2, r3
 8005faa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	3348      	adds	r3, #72	@ 0x48
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f001 ff03 	bl	8007dbc <pvPortMalloc>
 8005fb6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d011      	beq.n	8005fe2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	3348      	adds	r3, #72	@ 0x48
 8005fc6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005fd0:	79fa      	ldrb	r2, [r7, #7]
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	68b9      	ldr	r1, [r7, #8]
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f000 f805 	bl	8005fec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005fe2:	69bb      	ldr	r3, [r7, #24]
	}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3720      	adds	r7, #32
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]
 8005ff8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d103      	bne.n	8006008 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	69ba      	ldr	r2, [r7, #24]
 8006004:	601a      	str	r2, [r3, #0]
 8006006:	e002      	b.n	800600e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	68ba      	ldr	r2, [r7, #8]
 8006018:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800601a:	2101      	movs	r1, #1
 800601c:	69b8      	ldr	r0, [r7, #24]
 800601e:	f7ff fec3 	bl	8005da8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006022:	bf00      	nop
 8006024:	3710      	adds	r7, #16
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
	...

0800602c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b08e      	sub	sp, #56	@ 0x38
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
 8006038:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800603a:	2300      	movs	r3, #0
 800603c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006044:	2b00      	cmp	r3, #0
 8006046:	d10b      	bne.n	8006060 <xQueueGenericSend+0x34>
	__asm volatile
 8006048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800604c:	f383 8811 	msr	BASEPRI, r3
 8006050:	f3bf 8f6f 	isb	sy
 8006054:	f3bf 8f4f 	dsb	sy
 8006058:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800605a:	bf00      	nop
 800605c:	bf00      	nop
 800605e:	e7fd      	b.n	800605c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d103      	bne.n	800606e <xQueueGenericSend+0x42>
 8006066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <xQueueGenericSend+0x46>
 800606e:	2301      	movs	r3, #1
 8006070:	e000      	b.n	8006074 <xQueueGenericSend+0x48>
 8006072:	2300      	movs	r3, #0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d10b      	bne.n	8006090 <xQueueGenericSend+0x64>
	__asm volatile
 8006078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800607c:	f383 8811 	msr	BASEPRI, r3
 8006080:	f3bf 8f6f 	isb	sy
 8006084:	f3bf 8f4f 	dsb	sy
 8006088:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800608a:	bf00      	nop
 800608c:	bf00      	nop
 800608e:	e7fd      	b.n	800608c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	2b02      	cmp	r3, #2
 8006094:	d103      	bne.n	800609e <xQueueGenericSend+0x72>
 8006096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800609a:	2b01      	cmp	r3, #1
 800609c:	d101      	bne.n	80060a2 <xQueueGenericSend+0x76>
 800609e:	2301      	movs	r3, #1
 80060a0:	e000      	b.n	80060a4 <xQueueGenericSend+0x78>
 80060a2:	2300      	movs	r3, #0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d10b      	bne.n	80060c0 <xQueueGenericSend+0x94>
	__asm volatile
 80060a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ac:	f383 8811 	msr	BASEPRI, r3
 80060b0:	f3bf 8f6f 	isb	sy
 80060b4:	f3bf 8f4f 	dsb	sy
 80060b8:	623b      	str	r3, [r7, #32]
}
 80060ba:	bf00      	nop
 80060bc:	bf00      	nop
 80060be:	e7fd      	b.n	80060bc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060c0:	f001 fa06 	bl	80074d0 <xTaskGetSchedulerState>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d102      	bne.n	80060d0 <xQueueGenericSend+0xa4>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d101      	bne.n	80060d4 <xQueueGenericSend+0xa8>
 80060d0:	2301      	movs	r3, #1
 80060d2:	e000      	b.n	80060d6 <xQueueGenericSend+0xaa>
 80060d4:	2300      	movs	r3, #0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10b      	bne.n	80060f2 <xQueueGenericSend+0xc6>
	__asm volatile
 80060da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060de:	f383 8811 	msr	BASEPRI, r3
 80060e2:	f3bf 8f6f 	isb	sy
 80060e6:	f3bf 8f4f 	dsb	sy
 80060ea:	61fb      	str	r3, [r7, #28]
}
 80060ec:	bf00      	nop
 80060ee:	bf00      	nop
 80060f0:	e7fd      	b.n	80060ee <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80060f2:	f001 fd41 	bl	8007b78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80060f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060fe:	429a      	cmp	r2, r3
 8006100:	d302      	bcc.n	8006108 <xQueueGenericSend+0xdc>
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	2b02      	cmp	r3, #2
 8006106:	d129      	bne.n	800615c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006108:	683a      	ldr	r2, [r7, #0]
 800610a:	68b9      	ldr	r1, [r7, #8]
 800610c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800610e:	f000 fac9 	bl	80066a4 <prvCopyDataToQueue>
 8006112:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006118:	2b00      	cmp	r3, #0
 800611a:	d010      	beq.n	800613e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800611c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611e:	3324      	adds	r3, #36	@ 0x24
 8006120:	4618      	mov	r0, r3
 8006122:	f001 f80f 	bl	8007144 <xTaskRemoveFromEventList>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d013      	beq.n	8006154 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800612c:	4b3f      	ldr	r3, [pc, #252]	@ (800622c <xQueueGenericSend+0x200>)
 800612e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006132:	601a      	str	r2, [r3, #0]
 8006134:	f3bf 8f4f 	dsb	sy
 8006138:	f3bf 8f6f 	isb	sy
 800613c:	e00a      	b.n	8006154 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800613e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006140:	2b00      	cmp	r3, #0
 8006142:	d007      	beq.n	8006154 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006144:	4b39      	ldr	r3, [pc, #228]	@ (800622c <xQueueGenericSend+0x200>)
 8006146:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800614a:	601a      	str	r2, [r3, #0]
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006154:	f001 fd42 	bl	8007bdc <vPortExitCritical>
				return pdPASS;
 8006158:	2301      	movs	r3, #1
 800615a:	e063      	b.n	8006224 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d103      	bne.n	800616a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006162:	f001 fd3b 	bl	8007bdc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006166:	2300      	movs	r3, #0
 8006168:	e05c      	b.n	8006224 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800616a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800616c:	2b00      	cmp	r3, #0
 800616e:	d106      	bne.n	800617e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006170:	f107 0314 	add.w	r3, r7, #20
 8006174:	4618      	mov	r0, r3
 8006176:	f001 f849 	bl	800720c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800617a:	2301      	movs	r3, #1
 800617c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800617e:	f001 fd2d 	bl	8007bdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006182:	f000 fdef 	bl	8006d64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006186:	f001 fcf7 	bl	8007b78 <vPortEnterCritical>
 800618a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800618c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006190:	b25b      	sxtb	r3, r3
 8006192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006196:	d103      	bne.n	80061a0 <xQueueGenericSend+0x174>
 8006198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619a:	2200      	movs	r2, #0
 800619c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80061a6:	b25b      	sxtb	r3, r3
 80061a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ac:	d103      	bne.n	80061b6 <xQueueGenericSend+0x18a>
 80061ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061b6:	f001 fd11 	bl	8007bdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061ba:	1d3a      	adds	r2, r7, #4
 80061bc:	f107 0314 	add.w	r3, r7, #20
 80061c0:	4611      	mov	r1, r2
 80061c2:	4618      	mov	r0, r3
 80061c4:	f001 f838 	bl	8007238 <xTaskCheckForTimeOut>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d124      	bne.n	8006218 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80061ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061d0:	f000 fb60 	bl	8006894 <prvIsQueueFull>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d018      	beq.n	800620c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80061da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061dc:	3310      	adds	r3, #16
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	4611      	mov	r1, r2
 80061e2:	4618      	mov	r0, r3
 80061e4:	f000 ff88 	bl	80070f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80061e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061ea:	f000 faeb 	bl	80067c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80061ee:	f000 fdc7 	bl	8006d80 <xTaskResumeAll>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f47f af7c 	bne.w	80060f2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80061fa:	4b0c      	ldr	r3, [pc, #48]	@ (800622c <xQueueGenericSend+0x200>)
 80061fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006200:	601a      	str	r2, [r3, #0]
 8006202:	f3bf 8f4f 	dsb	sy
 8006206:	f3bf 8f6f 	isb	sy
 800620a:	e772      	b.n	80060f2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800620c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800620e:	f000 fad9 	bl	80067c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006212:	f000 fdb5 	bl	8006d80 <xTaskResumeAll>
 8006216:	e76c      	b.n	80060f2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006218:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800621a:	f000 fad3 	bl	80067c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800621e:	f000 fdaf 	bl	8006d80 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006222:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006224:	4618      	mov	r0, r3
 8006226:	3738      	adds	r7, #56	@ 0x38
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	e000ed04 	.word	0xe000ed04

08006230 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b08e      	sub	sp, #56	@ 0x38
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800623e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006240:	2b00      	cmp	r3, #0
 8006242:	d10b      	bne.n	800625c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006248:	f383 8811 	msr	BASEPRI, r3
 800624c:	f3bf 8f6f 	isb	sy
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	623b      	str	r3, [r7, #32]
}
 8006256:	bf00      	nop
 8006258:	bf00      	nop
 800625a:	e7fd      	b.n	8006258 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800625c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800625e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00b      	beq.n	800627c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8006264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006268:	f383 8811 	msr	BASEPRI, r3
 800626c:	f3bf 8f6f 	isb	sy
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	61fb      	str	r3, [r7, #28]
}
 8006276:	bf00      	nop
 8006278:	bf00      	nop
 800627a:	e7fd      	b.n	8006278 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800627c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d103      	bne.n	800628c <xQueueGiveFromISR+0x5c>
 8006284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d101      	bne.n	8006290 <xQueueGiveFromISR+0x60>
 800628c:	2301      	movs	r3, #1
 800628e:	e000      	b.n	8006292 <xQueueGiveFromISR+0x62>
 8006290:	2300      	movs	r3, #0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10b      	bne.n	80062ae <xQueueGiveFromISR+0x7e>
	__asm volatile
 8006296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800629a:	f383 8811 	msr	BASEPRI, r3
 800629e:	f3bf 8f6f 	isb	sy
 80062a2:	f3bf 8f4f 	dsb	sy
 80062a6:	61bb      	str	r3, [r7, #24]
}
 80062a8:	bf00      	nop
 80062aa:	bf00      	nop
 80062ac:	e7fd      	b.n	80062aa <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80062ae:	f001 fd43 	bl	8007d38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80062b2:	f3ef 8211 	mrs	r2, BASEPRI
 80062b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ba:	f383 8811 	msr	BASEPRI, r3
 80062be:	f3bf 8f6f 	isb	sy
 80062c2:	f3bf 8f4f 	dsb	sy
 80062c6:	617a      	str	r2, [r7, #20]
 80062c8:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80062ca:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80062cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062d2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80062d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062da:	429a      	cmp	r2, r3
 80062dc:	d22b      	bcs.n	8006336 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80062de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80062e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ea:	1c5a      	adds	r2, r3, #1
 80062ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ee:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80062f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80062f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f8:	d112      	bne.n	8006320 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d016      	beq.n	8006330 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006304:	3324      	adds	r3, #36	@ 0x24
 8006306:	4618      	mov	r0, r3
 8006308:	f000 ff1c 	bl	8007144 <xTaskRemoveFromEventList>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00e      	beq.n	8006330 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00b      	beq.n	8006330 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	2201      	movs	r2, #1
 800631c:	601a      	str	r2, [r3, #0]
 800631e:	e007      	b.n	8006330 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006320:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006324:	3301      	adds	r3, #1
 8006326:	b2db      	uxtb	r3, r3
 8006328:	b25a      	sxtb	r2, r3
 800632a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800632c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006330:	2301      	movs	r3, #1
 8006332:	637b      	str	r3, [r7, #52]	@ 0x34
 8006334:	e001      	b.n	800633a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006336:	2300      	movs	r3, #0
 8006338:	637b      	str	r3, [r7, #52]	@ 0x34
 800633a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800633c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006344:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006348:	4618      	mov	r0, r3
 800634a:	3738      	adds	r7, #56	@ 0x38
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b08e      	sub	sp, #56	@ 0x38
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800635a:	2300      	movs	r3, #0
 800635c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006362:	2300      	movs	r3, #0
 8006364:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006368:	2b00      	cmp	r3, #0
 800636a:	d10b      	bne.n	8006384 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800636c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006370:	f383 8811 	msr	BASEPRI, r3
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	f3bf 8f4f 	dsb	sy
 800637c:	623b      	str	r3, [r7, #32]
}
 800637e:	bf00      	nop
 8006380:	bf00      	nop
 8006382:	e7fd      	b.n	8006380 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00b      	beq.n	80063a4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800638c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006390:	f383 8811 	msr	BASEPRI, r3
 8006394:	f3bf 8f6f 	isb	sy
 8006398:	f3bf 8f4f 	dsb	sy
 800639c:	61fb      	str	r3, [r7, #28]
}
 800639e:	bf00      	nop
 80063a0:	bf00      	nop
 80063a2:	e7fd      	b.n	80063a0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063a4:	f001 f894 	bl	80074d0 <xTaskGetSchedulerState>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d102      	bne.n	80063b4 <xQueueSemaphoreTake+0x64>
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d101      	bne.n	80063b8 <xQueueSemaphoreTake+0x68>
 80063b4:	2301      	movs	r3, #1
 80063b6:	e000      	b.n	80063ba <xQueueSemaphoreTake+0x6a>
 80063b8:	2300      	movs	r3, #0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10b      	bne.n	80063d6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80063be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c2:	f383 8811 	msr	BASEPRI, r3
 80063c6:	f3bf 8f6f 	isb	sy
 80063ca:	f3bf 8f4f 	dsb	sy
 80063ce:	61bb      	str	r3, [r7, #24]
}
 80063d0:	bf00      	nop
 80063d2:	bf00      	nop
 80063d4:	e7fd      	b.n	80063d2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063d6:	f001 fbcf 	bl	8007b78 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80063da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063de:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80063e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d024      	beq.n	8006430 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80063e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e8:	1e5a      	subs	r2, r3, #1
 80063ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ec:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d104      	bne.n	8006400 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80063f6:	f001 fa17 	bl	8007828 <pvTaskIncrementMutexHeldCount>
 80063fa:	4602      	mov	r2, r0
 80063fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063fe:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00f      	beq.n	8006428 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800640a:	3310      	adds	r3, #16
 800640c:	4618      	mov	r0, r3
 800640e:	f000 fe99 	bl	8007144 <xTaskRemoveFromEventList>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d007      	beq.n	8006428 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006418:	4b54      	ldr	r3, [pc, #336]	@ (800656c <xQueueSemaphoreTake+0x21c>)
 800641a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800641e:	601a      	str	r2, [r3, #0]
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006428:	f001 fbd8 	bl	8007bdc <vPortExitCritical>
				return pdPASS;
 800642c:	2301      	movs	r3, #1
 800642e:	e098      	b.n	8006562 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d112      	bne.n	800645c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00b      	beq.n	8006454 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800643c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006440:	f383 8811 	msr	BASEPRI, r3
 8006444:	f3bf 8f6f 	isb	sy
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	617b      	str	r3, [r7, #20]
}
 800644e:	bf00      	nop
 8006450:	bf00      	nop
 8006452:	e7fd      	b.n	8006450 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006454:	f001 fbc2 	bl	8007bdc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006458:	2300      	movs	r3, #0
 800645a:	e082      	b.n	8006562 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800645c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800645e:	2b00      	cmp	r3, #0
 8006460:	d106      	bne.n	8006470 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006462:	f107 030c 	add.w	r3, r7, #12
 8006466:	4618      	mov	r0, r3
 8006468:	f000 fed0 	bl	800720c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800646c:	2301      	movs	r3, #1
 800646e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006470:	f001 fbb4 	bl	8007bdc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006474:	f000 fc76 	bl	8006d64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006478:	f001 fb7e 	bl	8007b78 <vPortEnterCritical>
 800647c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800647e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006482:	b25b      	sxtb	r3, r3
 8006484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006488:	d103      	bne.n	8006492 <xQueueSemaphoreTake+0x142>
 800648a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800648c:	2200      	movs	r2, #0
 800648e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006494:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006498:	b25b      	sxtb	r3, r3
 800649a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800649e:	d103      	bne.n	80064a8 <xQueueSemaphoreTake+0x158>
 80064a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80064a8:	f001 fb98 	bl	8007bdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064ac:	463a      	mov	r2, r7
 80064ae:	f107 030c 	add.w	r3, r7, #12
 80064b2:	4611      	mov	r1, r2
 80064b4:	4618      	mov	r0, r3
 80064b6:	f000 febf 	bl	8007238 <xTaskCheckForTimeOut>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d132      	bne.n	8006526 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80064c2:	f000 f9d1 	bl	8006868 <prvIsQueueEmpty>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d026      	beq.n	800651a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80064cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d109      	bne.n	80064e8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80064d4:	f001 fb50 	bl	8007b78 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80064d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	4618      	mov	r0, r3
 80064de:	f001 f815 	bl	800750c <xTaskPriorityInherit>
 80064e2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80064e4:	f001 fb7a 	bl	8007bdc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80064e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ea:	3324      	adds	r3, #36	@ 0x24
 80064ec:	683a      	ldr	r2, [r7, #0]
 80064ee:	4611      	mov	r1, r2
 80064f0:	4618      	mov	r0, r3
 80064f2:	f000 fe01 	bl	80070f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80064f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80064f8:	f000 f964 	bl	80067c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80064fc:	f000 fc40 	bl	8006d80 <xTaskResumeAll>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	f47f af67 	bne.w	80063d6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006508:	4b18      	ldr	r3, [pc, #96]	@ (800656c <xQueueSemaphoreTake+0x21c>)
 800650a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800650e:	601a      	str	r2, [r3, #0]
 8006510:	f3bf 8f4f 	dsb	sy
 8006514:	f3bf 8f6f 	isb	sy
 8006518:	e75d      	b.n	80063d6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800651a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800651c:	f000 f952 	bl	80067c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006520:	f000 fc2e 	bl	8006d80 <xTaskResumeAll>
 8006524:	e757      	b.n	80063d6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006526:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006528:	f000 f94c 	bl	80067c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800652c:	f000 fc28 	bl	8006d80 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006530:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006532:	f000 f999 	bl	8006868 <prvIsQueueEmpty>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	f43f af4c 	beq.w	80063d6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800653e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00d      	beq.n	8006560 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006544:	f001 fb18 	bl	8007b78 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006548:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800654a:	f000 f893 	bl	8006674 <prvGetDisinheritPriorityAfterTimeout>
 800654e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006556:	4618      	mov	r0, r3
 8006558:	f001 f8d6 	bl	8007708 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800655c:	f001 fb3e 	bl	8007bdc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006560:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006562:	4618      	mov	r0, r3
 8006564:	3738      	adds	r7, #56	@ 0x38
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	e000ed04 	.word	0xe000ed04

08006570 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b08e      	sub	sp, #56	@ 0x38
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10b      	bne.n	800659e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800658a:	f383 8811 	msr	BASEPRI, r3
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f3bf 8f4f 	dsb	sy
 8006596:	623b      	str	r3, [r7, #32]
}
 8006598:	bf00      	nop
 800659a:	bf00      	nop
 800659c:	e7fd      	b.n	800659a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d103      	bne.n	80065ac <xQueueReceiveFromISR+0x3c>
 80065a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d101      	bne.n	80065b0 <xQueueReceiveFromISR+0x40>
 80065ac:	2301      	movs	r3, #1
 80065ae:	e000      	b.n	80065b2 <xQueueReceiveFromISR+0x42>
 80065b0:	2300      	movs	r3, #0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d10b      	bne.n	80065ce <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80065b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ba:	f383 8811 	msr	BASEPRI, r3
 80065be:	f3bf 8f6f 	isb	sy
 80065c2:	f3bf 8f4f 	dsb	sy
 80065c6:	61fb      	str	r3, [r7, #28]
}
 80065c8:	bf00      	nop
 80065ca:	bf00      	nop
 80065cc:	e7fd      	b.n	80065ca <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065ce:	f001 fbb3 	bl	8007d38 <vPortValidateInterruptPriority>
	__asm volatile
 80065d2:	f3ef 8211 	mrs	r2, BASEPRI
 80065d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065da:	f383 8811 	msr	BASEPRI, r3
 80065de:	f3bf 8f6f 	isb	sy
 80065e2:	f3bf 8f4f 	dsb	sy
 80065e6:	61ba      	str	r2, [r7, #24]
 80065e8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80065ea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80065ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065f2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d02f      	beq.n	800665a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80065fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006600:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006604:	68b9      	ldr	r1, [r7, #8]
 8006606:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006608:	f000 f8b6 	bl	8006778 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800660c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800660e:	1e5a      	subs	r2, r3, #1
 8006610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006612:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006614:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800661c:	d112      	bne.n	8006644 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800661e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d016      	beq.n	8006654 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006628:	3310      	adds	r3, #16
 800662a:	4618      	mov	r0, r3
 800662c:	f000 fd8a 	bl	8007144 <xTaskRemoveFromEventList>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00e      	beq.n	8006654 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00b      	beq.n	8006654 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	601a      	str	r2, [r3, #0]
 8006642:	e007      	b.n	8006654 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006644:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006648:	3301      	adds	r3, #1
 800664a:	b2db      	uxtb	r3, r3
 800664c:	b25a      	sxtb	r2, r3
 800664e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006650:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006654:	2301      	movs	r3, #1
 8006656:	637b      	str	r3, [r7, #52]	@ 0x34
 8006658:	e001      	b.n	800665e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800665a:	2300      	movs	r3, #0
 800665c:	637b      	str	r3, [r7, #52]	@ 0x34
 800665e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006660:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	f383 8811 	msr	BASEPRI, r3
}
 8006668:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800666a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800666c:	4618      	mov	r0, r3
 800666e:	3738      	adds	r7, #56	@ 0x38
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006680:	2b00      	cmp	r3, #0
 8006682:	d006      	beq.n	8006692 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f1c3 0307 	rsb	r3, r3, #7
 800668e:	60fb      	str	r3, [r7, #12]
 8006690:	e001      	b.n	8006696 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006692:	2300      	movs	r3, #0
 8006694:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006696:	68fb      	ldr	r3, [r7, #12]
	}
 8006698:	4618      	mov	r0, r3
 800669a:	3714      	adds	r7, #20
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b086      	sub	sp, #24
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80066b0:	2300      	movs	r3, #0
 80066b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10d      	bne.n	80066de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d14d      	bne.n	8006766 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	4618      	mov	r0, r3
 80066d0:	f000 ff92 	bl	80075f8 <xTaskPriorityDisinherit>
 80066d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2200      	movs	r2, #0
 80066da:	609a      	str	r2, [r3, #8]
 80066dc:	e043      	b.n	8006766 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d119      	bne.n	8006718 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6858      	ldr	r0, [r3, #4]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ec:	461a      	mov	r2, r3
 80066ee:	68b9      	ldr	r1, [r7, #8]
 80066f0:	f001 ff3b 	bl	800856a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066fc:	441a      	add	r2, r3
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	685a      	ldr	r2, [r3, #4]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	429a      	cmp	r2, r3
 800670c:	d32b      	bcc.n	8006766 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	605a      	str	r2, [r3, #4]
 8006716:	e026      	b.n	8006766 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	68d8      	ldr	r0, [r3, #12]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006720:	461a      	mov	r2, r3
 8006722:	68b9      	ldr	r1, [r7, #8]
 8006724:	f001 ff21 	bl	800856a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	68da      	ldr	r2, [r3, #12]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006730:	425b      	negs	r3, r3
 8006732:	441a      	add	r2, r3
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	68da      	ldr	r2, [r3, #12]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	429a      	cmp	r2, r3
 8006742:	d207      	bcs.n	8006754 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	689a      	ldr	r2, [r3, #8]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800674c:	425b      	negs	r3, r3
 800674e:	441a      	add	r2, r3
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2b02      	cmp	r3, #2
 8006758:	d105      	bne.n	8006766 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d002      	beq.n	8006766 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	3b01      	subs	r3, #1
 8006764:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	1c5a      	adds	r2, r3, #1
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800676e:	697b      	ldr	r3, [r7, #20]
}
 8006770:	4618      	mov	r0, r3
 8006772:	3718      	adds	r7, #24
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006786:	2b00      	cmp	r3, #0
 8006788:	d018      	beq.n	80067bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	68da      	ldr	r2, [r3, #12]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006792:	441a      	add	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	68da      	ldr	r2, [r3, #12]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d303      	bcc.n	80067ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	68d9      	ldr	r1, [r3, #12]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067b4:	461a      	mov	r2, r3
 80067b6:	6838      	ldr	r0, [r7, #0]
 80067b8:	f001 fed7 	bl	800856a <memcpy>
	}
}
 80067bc:	bf00      	nop
 80067be:	3708      	adds	r7, #8
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80067cc:	f001 f9d4 	bl	8007b78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80067d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067d8:	e011      	b.n	80067fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d012      	beq.n	8006808 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	3324      	adds	r3, #36	@ 0x24
 80067e6:	4618      	mov	r0, r3
 80067e8:	f000 fcac 	bl	8007144 <xTaskRemoveFromEventList>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80067f2:	f000 fd85 	bl	8007300 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80067f6:	7bfb      	ldrb	r3, [r7, #15]
 80067f8:	3b01      	subs	r3, #1
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006802:	2b00      	cmp	r3, #0
 8006804:	dce9      	bgt.n	80067da <prvUnlockQueue+0x16>
 8006806:	e000      	b.n	800680a <prvUnlockQueue+0x46>
					break;
 8006808:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	22ff      	movs	r2, #255	@ 0xff
 800680e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006812:	f001 f9e3 	bl	8007bdc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006816:	f001 f9af 	bl	8007b78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006820:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006822:	e011      	b.n	8006848 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d012      	beq.n	8006852 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	3310      	adds	r3, #16
 8006830:	4618      	mov	r0, r3
 8006832:	f000 fc87 	bl	8007144 <xTaskRemoveFromEventList>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d001      	beq.n	8006840 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800683c:	f000 fd60 	bl	8007300 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006840:	7bbb      	ldrb	r3, [r7, #14]
 8006842:	3b01      	subs	r3, #1
 8006844:	b2db      	uxtb	r3, r3
 8006846:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006848:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800684c:	2b00      	cmp	r3, #0
 800684e:	dce9      	bgt.n	8006824 <prvUnlockQueue+0x60>
 8006850:	e000      	b.n	8006854 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006852:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	22ff      	movs	r2, #255	@ 0xff
 8006858:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800685c:	f001 f9be 	bl	8007bdc <vPortExitCritical>
}
 8006860:	bf00      	nop
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006870:	f001 f982 	bl	8007b78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006878:	2b00      	cmp	r3, #0
 800687a:	d102      	bne.n	8006882 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800687c:	2301      	movs	r3, #1
 800687e:	60fb      	str	r3, [r7, #12]
 8006880:	e001      	b.n	8006886 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006882:	2300      	movs	r3, #0
 8006884:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006886:	f001 f9a9 	bl	8007bdc <vPortExitCritical>

	return xReturn;
 800688a:	68fb      	ldr	r3, [r7, #12]
}
 800688c:	4618      	mov	r0, r3
 800688e:	3710      	adds	r7, #16
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800689c:	f001 f96c 	bl	8007b78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d102      	bne.n	80068b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80068ac:	2301      	movs	r3, #1
 80068ae:	60fb      	str	r3, [r7, #12]
 80068b0:	e001      	b.n	80068b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80068b2:	2300      	movs	r3, #0
 80068b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80068b6:	f001 f991 	bl	8007bdc <vPortExitCritical>

	return xReturn;
 80068ba:	68fb      	ldr	r3, [r7, #12]
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3710      	adds	r7, #16
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b08e      	sub	sp, #56	@ 0x38
 80068c8:	af04      	add	r7, sp, #16
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]
 80068d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80068d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d10b      	bne.n	80068f0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80068d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068dc:	f383 8811 	msr	BASEPRI, r3
 80068e0:	f3bf 8f6f 	isb	sy
 80068e4:	f3bf 8f4f 	dsb	sy
 80068e8:	623b      	str	r3, [r7, #32]
}
 80068ea:	bf00      	nop
 80068ec:	bf00      	nop
 80068ee:	e7fd      	b.n	80068ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80068f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10b      	bne.n	800690e <xTaskCreateStatic+0x4a>
	__asm volatile
 80068f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068fa:	f383 8811 	msr	BASEPRI, r3
 80068fe:	f3bf 8f6f 	isb	sy
 8006902:	f3bf 8f4f 	dsb	sy
 8006906:	61fb      	str	r3, [r7, #28]
}
 8006908:	bf00      	nop
 800690a:	bf00      	nop
 800690c:	e7fd      	b.n	800690a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800690e:	23a0      	movs	r3, #160	@ 0xa0
 8006910:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	2ba0      	cmp	r3, #160	@ 0xa0
 8006916:	d00b      	beq.n	8006930 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800691c:	f383 8811 	msr	BASEPRI, r3
 8006920:	f3bf 8f6f 	isb	sy
 8006924:	f3bf 8f4f 	dsb	sy
 8006928:	61bb      	str	r3, [r7, #24]
}
 800692a:	bf00      	nop
 800692c:	bf00      	nop
 800692e:	e7fd      	b.n	800692c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006930:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006934:	2b00      	cmp	r3, #0
 8006936:	d01e      	beq.n	8006976 <xTaskCreateStatic+0xb2>
 8006938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800693a:	2b00      	cmp	r3, #0
 800693c:	d01b      	beq.n	8006976 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800693e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006940:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006944:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006946:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800694a:	2202      	movs	r2, #2
 800694c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006950:	2300      	movs	r3, #0
 8006952:	9303      	str	r3, [sp, #12]
 8006954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006956:	9302      	str	r3, [sp, #8]
 8006958:	f107 0314 	add.w	r3, r7, #20
 800695c:	9301      	str	r3, [sp, #4]
 800695e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006960:	9300      	str	r3, [sp, #0]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	68b9      	ldr	r1, [r7, #8]
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f000 f851 	bl	8006a10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800696e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006970:	f000 f8ee 	bl	8006b50 <prvAddNewTaskToReadyList>
 8006974:	e001      	b.n	800697a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006976:	2300      	movs	r3, #0
 8006978:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800697a:	697b      	ldr	r3, [r7, #20]
	}
 800697c:	4618      	mov	r0, r3
 800697e:	3728      	adds	r7, #40	@ 0x28
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006984:	b580      	push	{r7, lr}
 8006986:	b08c      	sub	sp, #48	@ 0x30
 8006988:	af04      	add	r7, sp, #16
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	603b      	str	r3, [r7, #0]
 8006990:	4613      	mov	r3, r2
 8006992:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006994:	88fb      	ldrh	r3, [r7, #6]
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	4618      	mov	r0, r3
 800699a:	f001 fa0f 	bl	8007dbc <pvPortMalloc>
 800699e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00e      	beq.n	80069c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80069a6:	20a0      	movs	r0, #160	@ 0xa0
 80069a8:	f001 fa08 	bl	8007dbc <pvPortMalloc>
 80069ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d003      	beq.n	80069bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80069ba:	e005      	b.n	80069c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80069bc:	6978      	ldr	r0, [r7, #20]
 80069be:	f001 facb 	bl	8007f58 <vPortFree>
 80069c2:	e001      	b.n	80069c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80069c4:	2300      	movs	r3, #0
 80069c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d017      	beq.n	80069fe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80069d6:	88fa      	ldrh	r2, [r7, #6]
 80069d8:	2300      	movs	r3, #0
 80069da:	9303      	str	r3, [sp, #12]
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	9302      	str	r3, [sp, #8]
 80069e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069e2:	9301      	str	r3, [sp, #4]
 80069e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069e6:	9300      	str	r3, [sp, #0]
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	68b9      	ldr	r1, [r7, #8]
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	f000 f80f 	bl	8006a10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069f2:	69f8      	ldr	r0, [r7, #28]
 80069f4:	f000 f8ac 	bl	8006b50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80069f8:	2301      	movs	r3, #1
 80069fa:	61bb      	str	r3, [r7, #24]
 80069fc:	e002      	b.n	8006a04 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80069fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006a02:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006a04:	69bb      	ldr	r3, [r7, #24]
	}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3720      	adds	r7, #32
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
	...

08006a10 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b088      	sub	sp, #32
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	607a      	str	r2, [r7, #4]
 8006a1c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	4413      	add	r3, r2
 8006a2e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	f023 0307 	bic.w	r3, r3, #7
 8006a36:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	f003 0307 	and.w	r3, r3, #7
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00b      	beq.n	8006a5a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8006a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a46:	f383 8811 	msr	BASEPRI, r3
 8006a4a:	f3bf 8f6f 	isb	sy
 8006a4e:	f3bf 8f4f 	dsb	sy
 8006a52:	617b      	str	r3, [r7, #20]
}
 8006a54:	bf00      	nop
 8006a56:	bf00      	nop
 8006a58:	e7fd      	b.n	8006a56 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d01f      	beq.n	8006aa0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a60:	2300      	movs	r3, #0
 8006a62:	61fb      	str	r3, [r7, #28]
 8006a64:	e012      	b.n	8006a8c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006a66:	68ba      	ldr	r2, [r7, #8]
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	7819      	ldrb	r1, [r3, #0]
 8006a6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	4413      	add	r3, r2
 8006a74:	3334      	adds	r3, #52	@ 0x34
 8006a76:	460a      	mov	r2, r1
 8006a78:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	4413      	add	r3, r2
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d006      	beq.n	8006a94 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	3301      	adds	r3, #1
 8006a8a:	61fb      	str	r3, [r7, #28]
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	2b0f      	cmp	r3, #15
 8006a90:	d9e9      	bls.n	8006a66 <prvInitialiseNewTask+0x56>
 8006a92:	e000      	b.n	8006a96 <prvInitialiseNewTask+0x86>
			{
				break;
 8006a94:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006a9e:	e003      	b.n	8006aa8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aaa:	2b06      	cmp	r3, #6
 8006aac:	d901      	bls.n	8006ab2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006aae:	2306      	movs	r3, #6
 8006ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ab6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006abc:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac6:	3304      	adds	r3, #4
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7ff f8d9 	bl	8005c80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad0:	3318      	adds	r3, #24
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7ff f8d4 	bl	8005c80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ada:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006adc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae0:	f1c3 0207 	rsb	r2, r3, #7
 8006ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006aec:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af0:	2200      	movs	r2, #0
 8006af2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b00:	334c      	adds	r3, #76	@ 0x4c
 8006b02:	224c      	movs	r2, #76	@ 0x4c
 8006b04:	2100      	movs	r1, #0
 8006b06:	4618      	mov	r0, r3
 8006b08:	f001 fc5d 	bl	80083c6 <memset>
 8006b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b0e:	4a0d      	ldr	r2, [pc, #52]	@ (8006b44 <prvInitialiseNewTask+0x134>)
 8006b10:	651a      	str	r2, [r3, #80]	@ 0x50
 8006b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b14:	4a0c      	ldr	r2, [pc, #48]	@ (8006b48 <prvInitialiseNewTask+0x138>)
 8006b16:	655a      	str	r2, [r3, #84]	@ 0x54
 8006b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b1a:	4a0c      	ldr	r2, [pc, #48]	@ (8006b4c <prvInitialiseNewTask+0x13c>)
 8006b1c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006b1e:	683a      	ldr	r2, [r7, #0]
 8006b20:	68f9      	ldr	r1, [r7, #12]
 8006b22:	69b8      	ldr	r0, [r7, #24]
 8006b24:	f000 fefa 	bl	800791c <pxPortInitialiseStack>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b2c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d002      	beq.n	8006b3a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b3a:	bf00      	nop
 8006b3c:	3720      	adds	r7, #32
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	20004930 	.word	0x20004930
 8006b48:	20004998 	.word	0x20004998
 8006b4c:	20004a00 	.word	0x20004a00

08006b50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006b58:	f001 f80e 	bl	8007b78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006b5c:	4b2a      	ldr	r3, [pc, #168]	@ (8006c08 <prvAddNewTaskToReadyList+0xb8>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	3301      	adds	r3, #1
 8006b62:	4a29      	ldr	r2, [pc, #164]	@ (8006c08 <prvAddNewTaskToReadyList+0xb8>)
 8006b64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006b66:	4b29      	ldr	r3, [pc, #164]	@ (8006c0c <prvAddNewTaskToReadyList+0xbc>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d109      	bne.n	8006b82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006b6e:	4a27      	ldr	r2, [pc, #156]	@ (8006c0c <prvAddNewTaskToReadyList+0xbc>)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006b74:	4b24      	ldr	r3, [pc, #144]	@ (8006c08 <prvAddNewTaskToReadyList+0xb8>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d110      	bne.n	8006b9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006b7c:	f000 fbe4 	bl	8007348 <prvInitialiseTaskLists>
 8006b80:	e00d      	b.n	8006b9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006b82:	4b23      	ldr	r3, [pc, #140]	@ (8006c10 <prvAddNewTaskToReadyList+0xc0>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d109      	bne.n	8006b9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006b8a:	4b20      	ldr	r3, [pc, #128]	@ (8006c0c <prvAddNewTaskToReadyList+0xbc>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d802      	bhi.n	8006b9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006b98:	4a1c      	ldr	r2, [pc, #112]	@ (8006c0c <prvAddNewTaskToReadyList+0xbc>)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006b9e:	4b1d      	ldr	r3, [pc, #116]	@ (8006c14 <prvAddNewTaskToReadyList+0xc4>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	4a1b      	ldr	r2, [pc, #108]	@ (8006c14 <prvAddNewTaskToReadyList+0xc4>)
 8006ba6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bac:	2201      	movs	r2, #1
 8006bae:	409a      	lsls	r2, r3
 8006bb0:	4b19      	ldr	r3, [pc, #100]	@ (8006c18 <prvAddNewTaskToReadyList+0xc8>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	4a18      	ldr	r2, [pc, #96]	@ (8006c18 <prvAddNewTaskToReadyList+0xc8>)
 8006bb8:	6013      	str	r3, [r2, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	4413      	add	r3, r2
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	4a15      	ldr	r2, [pc, #84]	@ (8006c1c <prvAddNewTaskToReadyList+0xcc>)
 8006bc8:	441a      	add	r2, r3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	3304      	adds	r3, #4
 8006bce:	4619      	mov	r1, r3
 8006bd0:	4610      	mov	r0, r2
 8006bd2:	f7ff f862 	bl	8005c9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006bd6:	f001 f801 	bl	8007bdc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006bda:	4b0d      	ldr	r3, [pc, #52]	@ (8006c10 <prvAddNewTaskToReadyList+0xc0>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00e      	beq.n	8006c00 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006be2:	4b0a      	ldr	r3, [pc, #40]	@ (8006c0c <prvAddNewTaskToReadyList+0xbc>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d207      	bcs.n	8006c00 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8006c20 <prvAddNewTaskToReadyList+0xd0>)
 8006bf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bf6:	601a      	str	r2, [r3, #0]
 8006bf8:	f3bf 8f4f 	dsb	sy
 8006bfc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c00:	bf00      	nop
 8006c02:	3708      	adds	r7, #8
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	20000cdc 	.word	0x20000cdc
 8006c0c:	20000bdc 	.word	0x20000bdc
 8006c10:	20000ce8 	.word	0x20000ce8
 8006c14:	20000cf8 	.word	0x20000cf8
 8006c18:	20000ce4 	.word	0x20000ce4
 8006c1c:	20000be0 	.word	0x20000be0
 8006c20:	e000ed04 	.word	0xe000ed04

08006c24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d018      	beq.n	8006c68 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006c36:	4b14      	ldr	r3, [pc, #80]	@ (8006c88 <vTaskDelay+0x64>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00b      	beq.n	8006c56 <vTaskDelay+0x32>
	__asm volatile
 8006c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c42:	f383 8811 	msr	BASEPRI, r3
 8006c46:	f3bf 8f6f 	isb	sy
 8006c4a:	f3bf 8f4f 	dsb	sy
 8006c4e:	60bb      	str	r3, [r7, #8]
}
 8006c50:	bf00      	nop
 8006c52:	bf00      	nop
 8006c54:	e7fd      	b.n	8006c52 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006c56:	f000 f885 	bl	8006d64 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006c5a:	2100      	movs	r1, #0
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 fdf7 	bl	8007850 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006c62:	f000 f88d 	bl	8006d80 <xTaskResumeAll>
 8006c66:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d107      	bne.n	8006c7e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006c6e:	4b07      	ldr	r3, [pc, #28]	@ (8006c8c <vTaskDelay+0x68>)
 8006c70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c74:	601a      	str	r2, [r3, #0]
 8006c76:	f3bf 8f4f 	dsb	sy
 8006c7a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c7e:	bf00      	nop
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	20000d04 	.word	0x20000d04
 8006c8c:	e000ed04 	.word	0xe000ed04

08006c90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b08a      	sub	sp, #40	@ 0x28
 8006c94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006c96:	2300      	movs	r3, #0
 8006c98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006c9e:	463a      	mov	r2, r7
 8006ca0:	1d39      	adds	r1, r7, #4
 8006ca2:	f107 0308 	add.w	r3, r7, #8
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f7f9 fc6a 	bl	8000580 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006cac:	6839      	ldr	r1, [r7, #0]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	9202      	str	r2, [sp, #8]
 8006cb4:	9301      	str	r3, [sp, #4]
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	9300      	str	r3, [sp, #0]
 8006cba:	2300      	movs	r3, #0
 8006cbc:	460a      	mov	r2, r1
 8006cbe:	4921      	ldr	r1, [pc, #132]	@ (8006d44 <vTaskStartScheduler+0xb4>)
 8006cc0:	4821      	ldr	r0, [pc, #132]	@ (8006d48 <vTaskStartScheduler+0xb8>)
 8006cc2:	f7ff fdff 	bl	80068c4 <xTaskCreateStatic>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	4a20      	ldr	r2, [pc, #128]	@ (8006d4c <vTaskStartScheduler+0xbc>)
 8006cca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8006d4c <vTaskStartScheduler+0xbc>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d002      	beq.n	8006cda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	617b      	str	r3, [r7, #20]
 8006cd8:	e001      	b.n	8006cde <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d11b      	bne.n	8006d1c <vTaskStartScheduler+0x8c>
	__asm volatile
 8006ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce8:	f383 8811 	msr	BASEPRI, r3
 8006cec:	f3bf 8f6f 	isb	sy
 8006cf0:	f3bf 8f4f 	dsb	sy
 8006cf4:	613b      	str	r3, [r7, #16]
}
 8006cf6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006cf8:	4b15      	ldr	r3, [pc, #84]	@ (8006d50 <vTaskStartScheduler+0xc0>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	334c      	adds	r3, #76	@ 0x4c
 8006cfe:	4a15      	ldr	r2, [pc, #84]	@ (8006d54 <vTaskStartScheduler+0xc4>)
 8006d00:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006d02:	4b15      	ldr	r3, [pc, #84]	@ (8006d58 <vTaskStartScheduler+0xc8>)
 8006d04:	f04f 32ff 	mov.w	r2, #4294967295
 8006d08:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006d0a:	4b14      	ldr	r3, [pc, #80]	@ (8006d5c <vTaskStartScheduler+0xcc>)
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006d10:	4b13      	ldr	r3, [pc, #76]	@ (8006d60 <vTaskStartScheduler+0xd0>)
 8006d12:	2200      	movs	r2, #0
 8006d14:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006d16:	f000 fe8b 	bl	8007a30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006d1a:	e00f      	b.n	8006d3c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d22:	d10b      	bne.n	8006d3c <vTaskStartScheduler+0xac>
	__asm volatile
 8006d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d28:	f383 8811 	msr	BASEPRI, r3
 8006d2c:	f3bf 8f6f 	isb	sy
 8006d30:	f3bf 8f4f 	dsb	sy
 8006d34:	60fb      	str	r3, [r7, #12]
}
 8006d36:	bf00      	nop
 8006d38:	bf00      	nop
 8006d3a:	e7fd      	b.n	8006d38 <vTaskStartScheduler+0xa8>
}
 8006d3c:	bf00      	nop
 8006d3e:	3718      	adds	r7, #24
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	08009158 	.word	0x08009158
 8006d48:	08007319 	.word	0x08007319
 8006d4c:	20000d00 	.word	0x20000d00
 8006d50:	20000bdc 	.word	0x20000bdc
 8006d54:	2000001c 	.word	0x2000001c
 8006d58:	20000cfc 	.word	0x20000cfc
 8006d5c:	20000ce8 	.word	0x20000ce8
 8006d60:	20000ce0 	.word	0x20000ce0

08006d64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006d64:	b480      	push	{r7}
 8006d66:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006d68:	4b04      	ldr	r3, [pc, #16]	@ (8006d7c <vTaskSuspendAll+0x18>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	4a03      	ldr	r2, [pc, #12]	@ (8006d7c <vTaskSuspendAll+0x18>)
 8006d70:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006d72:	bf00      	nop
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr
 8006d7c:	20000d04 	.word	0x20000d04

08006d80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006d86:	2300      	movs	r3, #0
 8006d88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006d8e:	4b42      	ldr	r3, [pc, #264]	@ (8006e98 <xTaskResumeAll+0x118>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d10b      	bne.n	8006dae <xTaskResumeAll+0x2e>
	__asm volatile
 8006d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d9a:	f383 8811 	msr	BASEPRI, r3
 8006d9e:	f3bf 8f6f 	isb	sy
 8006da2:	f3bf 8f4f 	dsb	sy
 8006da6:	603b      	str	r3, [r7, #0]
}
 8006da8:	bf00      	nop
 8006daa:	bf00      	nop
 8006dac:	e7fd      	b.n	8006daa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006dae:	f000 fee3 	bl	8007b78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006db2:	4b39      	ldr	r3, [pc, #228]	@ (8006e98 <xTaskResumeAll+0x118>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	3b01      	subs	r3, #1
 8006db8:	4a37      	ldr	r2, [pc, #220]	@ (8006e98 <xTaskResumeAll+0x118>)
 8006dba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dbc:	4b36      	ldr	r3, [pc, #216]	@ (8006e98 <xTaskResumeAll+0x118>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d161      	bne.n	8006e88 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006dc4:	4b35      	ldr	r3, [pc, #212]	@ (8006e9c <xTaskResumeAll+0x11c>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d05d      	beq.n	8006e88 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006dcc:	e02e      	b.n	8006e2c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dce:	4b34      	ldr	r3, [pc, #208]	@ (8006ea0 <xTaskResumeAll+0x120>)
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	3318      	adds	r3, #24
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7fe ffba 	bl	8005d54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	3304      	adds	r3, #4
 8006de4:	4618      	mov	r0, r3
 8006de6:	f7fe ffb5 	bl	8005d54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dee:	2201      	movs	r2, #1
 8006df0:	409a      	lsls	r2, r3
 8006df2:	4b2c      	ldr	r3, [pc, #176]	@ (8006ea4 <xTaskResumeAll+0x124>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	4a2a      	ldr	r2, [pc, #168]	@ (8006ea4 <xTaskResumeAll+0x124>)
 8006dfa:	6013      	str	r3, [r2, #0]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e00:	4613      	mov	r3, r2
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	4413      	add	r3, r2
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	4a27      	ldr	r2, [pc, #156]	@ (8006ea8 <xTaskResumeAll+0x128>)
 8006e0a:	441a      	add	r2, r3
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	3304      	adds	r3, #4
 8006e10:	4619      	mov	r1, r3
 8006e12:	4610      	mov	r0, r2
 8006e14:	f7fe ff41 	bl	8005c9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e1c:	4b23      	ldr	r3, [pc, #140]	@ (8006eac <xTaskResumeAll+0x12c>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d302      	bcc.n	8006e2c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006e26:	4b22      	ldr	r3, [pc, #136]	@ (8006eb0 <xTaskResumeAll+0x130>)
 8006e28:	2201      	movs	r2, #1
 8006e2a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e2c:	4b1c      	ldr	r3, [pc, #112]	@ (8006ea0 <xTaskResumeAll+0x120>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1cc      	bne.n	8006dce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d001      	beq.n	8006e3e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006e3a:	f000 fb29 	bl	8007490 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006e3e:	4b1d      	ldr	r3, [pc, #116]	@ (8006eb4 <xTaskResumeAll+0x134>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d010      	beq.n	8006e6c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006e4a:	f000 f837 	bl	8006ebc <xTaskIncrementTick>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d002      	beq.n	8006e5a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006e54:	4b16      	ldr	r3, [pc, #88]	@ (8006eb0 <xTaskResumeAll+0x130>)
 8006e56:	2201      	movs	r2, #1
 8006e58:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1f1      	bne.n	8006e4a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006e66:	4b13      	ldr	r3, [pc, #76]	@ (8006eb4 <xTaskResumeAll+0x134>)
 8006e68:	2200      	movs	r2, #0
 8006e6a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006e6c:	4b10      	ldr	r3, [pc, #64]	@ (8006eb0 <xTaskResumeAll+0x130>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d009      	beq.n	8006e88 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006e74:	2301      	movs	r3, #1
 8006e76:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006e78:	4b0f      	ldr	r3, [pc, #60]	@ (8006eb8 <xTaskResumeAll+0x138>)
 8006e7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e7e:	601a      	str	r2, [r3, #0]
 8006e80:	f3bf 8f4f 	dsb	sy
 8006e84:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e88:	f000 fea8 	bl	8007bdc <vPortExitCritical>

	return xAlreadyYielded;
 8006e8c:	68bb      	ldr	r3, [r7, #8]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	20000d04 	.word	0x20000d04
 8006e9c:	20000cdc 	.word	0x20000cdc
 8006ea0:	20000c9c 	.word	0x20000c9c
 8006ea4:	20000ce4 	.word	0x20000ce4
 8006ea8:	20000be0 	.word	0x20000be0
 8006eac:	20000bdc 	.word	0x20000bdc
 8006eb0:	20000cf0 	.word	0x20000cf0
 8006eb4:	20000cec 	.word	0x20000cec
 8006eb8:	e000ed04 	.word	0xe000ed04

08006ebc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b086      	sub	sp, #24
 8006ec0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ec6:	4b4f      	ldr	r3, [pc, #316]	@ (8007004 <xTaskIncrementTick+0x148>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f040 808f 	bne.w	8006fee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ed0:	4b4d      	ldr	r3, [pc, #308]	@ (8007008 <xTaskIncrementTick+0x14c>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ed8:	4a4b      	ldr	r2, [pc, #300]	@ (8007008 <xTaskIncrementTick+0x14c>)
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d121      	bne.n	8006f28 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006ee4:	4b49      	ldr	r3, [pc, #292]	@ (800700c <xTaskIncrementTick+0x150>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00b      	beq.n	8006f06 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef2:	f383 8811 	msr	BASEPRI, r3
 8006ef6:	f3bf 8f6f 	isb	sy
 8006efa:	f3bf 8f4f 	dsb	sy
 8006efe:	603b      	str	r3, [r7, #0]
}
 8006f00:	bf00      	nop
 8006f02:	bf00      	nop
 8006f04:	e7fd      	b.n	8006f02 <xTaskIncrementTick+0x46>
 8006f06:	4b41      	ldr	r3, [pc, #260]	@ (800700c <xTaskIncrementTick+0x150>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	60fb      	str	r3, [r7, #12]
 8006f0c:	4b40      	ldr	r3, [pc, #256]	@ (8007010 <xTaskIncrementTick+0x154>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a3e      	ldr	r2, [pc, #248]	@ (800700c <xTaskIncrementTick+0x150>)
 8006f12:	6013      	str	r3, [r2, #0]
 8006f14:	4a3e      	ldr	r2, [pc, #248]	@ (8007010 <xTaskIncrementTick+0x154>)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6013      	str	r3, [r2, #0]
 8006f1a:	4b3e      	ldr	r3, [pc, #248]	@ (8007014 <xTaskIncrementTick+0x158>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	3301      	adds	r3, #1
 8006f20:	4a3c      	ldr	r2, [pc, #240]	@ (8007014 <xTaskIncrementTick+0x158>)
 8006f22:	6013      	str	r3, [r2, #0]
 8006f24:	f000 fab4 	bl	8007490 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006f28:	4b3b      	ldr	r3, [pc, #236]	@ (8007018 <xTaskIncrementTick+0x15c>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	693a      	ldr	r2, [r7, #16]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d348      	bcc.n	8006fc4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f32:	4b36      	ldr	r3, [pc, #216]	@ (800700c <xTaskIncrementTick+0x150>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d104      	bne.n	8006f46 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f3c:	4b36      	ldr	r3, [pc, #216]	@ (8007018 <xTaskIncrementTick+0x15c>)
 8006f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f42:	601a      	str	r2, [r3, #0]
					break;
 8006f44:	e03e      	b.n	8006fc4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f46:	4b31      	ldr	r3, [pc, #196]	@ (800700c <xTaskIncrementTick+0x150>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006f56:	693a      	ldr	r2, [r7, #16]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d203      	bcs.n	8006f66 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006f5e:	4a2e      	ldr	r2, [pc, #184]	@ (8007018 <xTaskIncrementTick+0x15c>)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006f64:	e02e      	b.n	8006fc4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	3304      	adds	r3, #4
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7fe fef2 	bl	8005d54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d004      	beq.n	8006f82 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	3318      	adds	r3, #24
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f7fe fee9 	bl	8005d54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f86:	2201      	movs	r2, #1
 8006f88:	409a      	lsls	r2, r3
 8006f8a:	4b24      	ldr	r3, [pc, #144]	@ (800701c <xTaskIncrementTick+0x160>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	4a22      	ldr	r2, [pc, #136]	@ (800701c <xTaskIncrementTick+0x160>)
 8006f92:	6013      	str	r3, [r2, #0]
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f98:	4613      	mov	r3, r2
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	4413      	add	r3, r2
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	4a1f      	ldr	r2, [pc, #124]	@ (8007020 <xTaskIncrementTick+0x164>)
 8006fa2:	441a      	add	r2, r3
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	3304      	adds	r3, #4
 8006fa8:	4619      	mov	r1, r3
 8006faa:	4610      	mov	r0, r2
 8006fac:	f7fe fe75 	bl	8005c9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8007024 <xTaskIncrementTick+0x168>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d3b9      	bcc.n	8006f32 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fc2:	e7b6      	b.n	8006f32 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006fc4:	4b17      	ldr	r3, [pc, #92]	@ (8007024 <xTaskIncrementTick+0x168>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fca:	4915      	ldr	r1, [pc, #84]	@ (8007020 <xTaskIncrementTick+0x164>)
 8006fcc:	4613      	mov	r3, r2
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	4413      	add	r3, r2
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	440b      	add	r3, r1
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d901      	bls.n	8006fe0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006fe0:	4b11      	ldr	r3, [pc, #68]	@ (8007028 <xTaskIncrementTick+0x16c>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d007      	beq.n	8006ff8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	617b      	str	r3, [r7, #20]
 8006fec:	e004      	b.n	8006ff8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006fee:	4b0f      	ldr	r3, [pc, #60]	@ (800702c <xTaskIncrementTick+0x170>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	4a0d      	ldr	r2, [pc, #52]	@ (800702c <xTaskIncrementTick+0x170>)
 8006ff6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006ff8:	697b      	ldr	r3, [r7, #20]
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3718      	adds	r7, #24
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	20000d04 	.word	0x20000d04
 8007008:	20000ce0 	.word	0x20000ce0
 800700c:	20000c94 	.word	0x20000c94
 8007010:	20000c98 	.word	0x20000c98
 8007014:	20000cf4 	.word	0x20000cf4
 8007018:	20000cfc 	.word	0x20000cfc
 800701c:	20000ce4 	.word	0x20000ce4
 8007020:	20000be0 	.word	0x20000be0
 8007024:	20000bdc 	.word	0x20000bdc
 8007028:	20000cf0 	.word	0x20000cf0
 800702c:	20000cec 	.word	0x20000cec

08007030 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007030:	b480      	push	{r7}
 8007032:	b087      	sub	sp, #28
 8007034:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007036:	4b2a      	ldr	r3, [pc, #168]	@ (80070e0 <vTaskSwitchContext+0xb0>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d003      	beq.n	8007046 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800703e:	4b29      	ldr	r3, [pc, #164]	@ (80070e4 <vTaskSwitchContext+0xb4>)
 8007040:	2201      	movs	r2, #1
 8007042:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007044:	e045      	b.n	80070d2 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8007046:	4b27      	ldr	r3, [pc, #156]	@ (80070e4 <vTaskSwitchContext+0xb4>)
 8007048:	2200      	movs	r2, #0
 800704a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800704c:	4b26      	ldr	r3, [pc, #152]	@ (80070e8 <vTaskSwitchContext+0xb8>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	fab3 f383 	clz	r3, r3
 8007058:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800705a:	7afb      	ldrb	r3, [r7, #11]
 800705c:	f1c3 031f 	rsb	r3, r3, #31
 8007060:	617b      	str	r3, [r7, #20]
 8007062:	4922      	ldr	r1, [pc, #136]	@ (80070ec <vTaskSwitchContext+0xbc>)
 8007064:	697a      	ldr	r2, [r7, #20]
 8007066:	4613      	mov	r3, r2
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	4413      	add	r3, r2
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	440b      	add	r3, r1
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d10b      	bne.n	800708e <vTaskSwitchContext+0x5e>
	__asm volatile
 8007076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800707a:	f383 8811 	msr	BASEPRI, r3
 800707e:	f3bf 8f6f 	isb	sy
 8007082:	f3bf 8f4f 	dsb	sy
 8007086:	607b      	str	r3, [r7, #4]
}
 8007088:	bf00      	nop
 800708a:	bf00      	nop
 800708c:	e7fd      	b.n	800708a <vTaskSwitchContext+0x5a>
 800708e:	697a      	ldr	r2, [r7, #20]
 8007090:	4613      	mov	r3, r2
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	4413      	add	r3, r2
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	4a14      	ldr	r2, [pc, #80]	@ (80070ec <vTaskSwitchContext+0xbc>)
 800709a:	4413      	add	r3, r2
 800709c:	613b      	str	r3, [r7, #16]
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	685a      	ldr	r2, [r3, #4]
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	605a      	str	r2, [r3, #4]
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	685a      	ldr	r2, [r3, #4]
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	3308      	adds	r3, #8
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d104      	bne.n	80070be <vTaskSwitchContext+0x8e>
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	685a      	ldr	r2, [r3, #4]
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	605a      	str	r2, [r3, #4]
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	4a0a      	ldr	r2, [pc, #40]	@ (80070f0 <vTaskSwitchContext+0xc0>)
 80070c6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80070c8:	4b09      	ldr	r3, [pc, #36]	@ (80070f0 <vTaskSwitchContext+0xc0>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	334c      	adds	r3, #76	@ 0x4c
 80070ce:	4a09      	ldr	r2, [pc, #36]	@ (80070f4 <vTaskSwitchContext+0xc4>)
 80070d0:	6013      	str	r3, [r2, #0]
}
 80070d2:	bf00      	nop
 80070d4:	371c      	adds	r7, #28
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	20000d04 	.word	0x20000d04
 80070e4:	20000cf0 	.word	0x20000cf0
 80070e8:	20000ce4 	.word	0x20000ce4
 80070ec:	20000be0 	.word	0x20000be0
 80070f0:	20000bdc 	.word	0x20000bdc
 80070f4:	2000001c 	.word	0x2000001c

080070f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d10b      	bne.n	8007120 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800710c:	f383 8811 	msr	BASEPRI, r3
 8007110:	f3bf 8f6f 	isb	sy
 8007114:	f3bf 8f4f 	dsb	sy
 8007118:	60fb      	str	r3, [r7, #12]
}
 800711a:	bf00      	nop
 800711c:	bf00      	nop
 800711e:	e7fd      	b.n	800711c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007120:	4b07      	ldr	r3, [pc, #28]	@ (8007140 <vTaskPlaceOnEventList+0x48>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	3318      	adds	r3, #24
 8007126:	4619      	mov	r1, r3
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f7fe fdda 	bl	8005ce2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800712e:	2101      	movs	r1, #1
 8007130:	6838      	ldr	r0, [r7, #0]
 8007132:	f000 fb8d 	bl	8007850 <prvAddCurrentTaskToDelayedList>
}
 8007136:	bf00      	nop
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	20000bdc 	.word	0x20000bdc

08007144 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b086      	sub	sp, #24
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10b      	bne.n	8007172 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800715a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800715e:	f383 8811 	msr	BASEPRI, r3
 8007162:	f3bf 8f6f 	isb	sy
 8007166:	f3bf 8f4f 	dsb	sy
 800716a:	60fb      	str	r3, [r7, #12]
}
 800716c:	bf00      	nop
 800716e:	bf00      	nop
 8007170:	e7fd      	b.n	800716e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	3318      	adds	r3, #24
 8007176:	4618      	mov	r0, r3
 8007178:	f7fe fdec 	bl	8005d54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800717c:	4b1d      	ldr	r3, [pc, #116]	@ (80071f4 <xTaskRemoveFromEventList+0xb0>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d11c      	bne.n	80071be <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	3304      	adds	r3, #4
 8007188:	4618      	mov	r0, r3
 800718a:	f7fe fde3 	bl	8005d54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007192:	2201      	movs	r2, #1
 8007194:	409a      	lsls	r2, r3
 8007196:	4b18      	ldr	r3, [pc, #96]	@ (80071f8 <xTaskRemoveFromEventList+0xb4>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4313      	orrs	r3, r2
 800719c:	4a16      	ldr	r2, [pc, #88]	@ (80071f8 <xTaskRemoveFromEventList+0xb4>)
 800719e:	6013      	str	r3, [r2, #0]
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071a4:	4613      	mov	r3, r2
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4413      	add	r3, r2
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4a13      	ldr	r2, [pc, #76]	@ (80071fc <xTaskRemoveFromEventList+0xb8>)
 80071ae:	441a      	add	r2, r3
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	3304      	adds	r3, #4
 80071b4:	4619      	mov	r1, r3
 80071b6:	4610      	mov	r0, r2
 80071b8:	f7fe fd6f 	bl	8005c9a <vListInsertEnd>
 80071bc:	e005      	b.n	80071ca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	3318      	adds	r3, #24
 80071c2:	4619      	mov	r1, r3
 80071c4:	480e      	ldr	r0, [pc, #56]	@ (8007200 <xTaskRemoveFromEventList+0xbc>)
 80071c6:	f7fe fd68 	bl	8005c9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007204 <xTaskRemoveFromEventList+0xc0>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d905      	bls.n	80071e4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80071d8:	2301      	movs	r3, #1
 80071da:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80071dc:	4b0a      	ldr	r3, [pc, #40]	@ (8007208 <xTaskRemoveFromEventList+0xc4>)
 80071de:	2201      	movs	r2, #1
 80071e0:	601a      	str	r2, [r3, #0]
 80071e2:	e001      	b.n	80071e8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80071e4:	2300      	movs	r3, #0
 80071e6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80071e8:	697b      	ldr	r3, [r7, #20]
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3718      	adds	r7, #24
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	20000d04 	.word	0x20000d04
 80071f8:	20000ce4 	.word	0x20000ce4
 80071fc:	20000be0 	.word	0x20000be0
 8007200:	20000c9c 	.word	0x20000c9c
 8007204:	20000bdc 	.word	0x20000bdc
 8007208:	20000cf0 	.word	0x20000cf0

0800720c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007214:	4b06      	ldr	r3, [pc, #24]	@ (8007230 <vTaskInternalSetTimeOutState+0x24>)
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800721c:	4b05      	ldr	r3, [pc, #20]	@ (8007234 <vTaskInternalSetTimeOutState+0x28>)
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	605a      	str	r2, [r3, #4]
}
 8007224:	bf00      	nop
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr
 8007230:	20000cf4 	.word	0x20000cf4
 8007234:	20000ce0 	.word	0x20000ce0

08007238 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b088      	sub	sp, #32
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d10b      	bne.n	8007260 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800724c:	f383 8811 	msr	BASEPRI, r3
 8007250:	f3bf 8f6f 	isb	sy
 8007254:	f3bf 8f4f 	dsb	sy
 8007258:	613b      	str	r3, [r7, #16]
}
 800725a:	bf00      	nop
 800725c:	bf00      	nop
 800725e:	e7fd      	b.n	800725c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d10b      	bne.n	800727e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800726a:	f383 8811 	msr	BASEPRI, r3
 800726e:	f3bf 8f6f 	isb	sy
 8007272:	f3bf 8f4f 	dsb	sy
 8007276:	60fb      	str	r3, [r7, #12]
}
 8007278:	bf00      	nop
 800727a:	bf00      	nop
 800727c:	e7fd      	b.n	800727a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800727e:	f000 fc7b 	bl	8007b78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007282:	4b1d      	ldr	r3, [pc, #116]	@ (80072f8 <xTaskCheckForTimeOut+0xc0>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	69ba      	ldr	r2, [r7, #24]
 800728e:	1ad3      	subs	r3, r2, r3
 8007290:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800729a:	d102      	bne.n	80072a2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800729c:	2300      	movs	r3, #0
 800729e:	61fb      	str	r3, [r7, #28]
 80072a0:	e023      	b.n	80072ea <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	4b15      	ldr	r3, [pc, #84]	@ (80072fc <xTaskCheckForTimeOut+0xc4>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d007      	beq.n	80072be <xTaskCheckForTimeOut+0x86>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	69ba      	ldr	r2, [r7, #24]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d302      	bcc.n	80072be <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80072b8:	2301      	movs	r3, #1
 80072ba:	61fb      	str	r3, [r7, #28]
 80072bc:	e015      	b.n	80072ea <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	697a      	ldr	r2, [r7, #20]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d20b      	bcs.n	80072e0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	1ad2      	subs	r2, r2, r3
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f7ff ff99 	bl	800720c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80072da:	2300      	movs	r3, #0
 80072dc:	61fb      	str	r3, [r7, #28]
 80072de:	e004      	b.n	80072ea <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	2200      	movs	r2, #0
 80072e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80072e6:	2301      	movs	r3, #1
 80072e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80072ea:	f000 fc77 	bl	8007bdc <vPortExitCritical>

	return xReturn;
 80072ee:	69fb      	ldr	r3, [r7, #28]
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3720      	adds	r7, #32
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	20000ce0 	.word	0x20000ce0
 80072fc:	20000cf4 	.word	0x20000cf4

08007300 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007300:	b480      	push	{r7}
 8007302:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007304:	4b03      	ldr	r3, [pc, #12]	@ (8007314 <vTaskMissedYield+0x14>)
 8007306:	2201      	movs	r2, #1
 8007308:	601a      	str	r2, [r3, #0]
}
 800730a:	bf00      	nop
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr
 8007314:	20000cf0 	.word	0x20000cf0

08007318 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007320:	f000 f852 	bl	80073c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007324:	4b06      	ldr	r3, [pc, #24]	@ (8007340 <prvIdleTask+0x28>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	2b01      	cmp	r3, #1
 800732a:	d9f9      	bls.n	8007320 <prvIdleTask+0x8>
			{
				taskYIELD();
 800732c:	4b05      	ldr	r3, [pc, #20]	@ (8007344 <prvIdleTask+0x2c>)
 800732e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007332:	601a      	str	r2, [r3, #0]
 8007334:	f3bf 8f4f 	dsb	sy
 8007338:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800733c:	e7f0      	b.n	8007320 <prvIdleTask+0x8>
 800733e:	bf00      	nop
 8007340:	20000be0 	.word	0x20000be0
 8007344:	e000ed04 	.word	0xe000ed04

08007348 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800734e:	2300      	movs	r3, #0
 8007350:	607b      	str	r3, [r7, #4]
 8007352:	e00c      	b.n	800736e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	4613      	mov	r3, r2
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	4413      	add	r3, r2
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	4a12      	ldr	r2, [pc, #72]	@ (80073a8 <prvInitialiseTaskLists+0x60>)
 8007360:	4413      	add	r3, r2
 8007362:	4618      	mov	r0, r3
 8007364:	f7fe fc6c 	bl	8005c40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	3301      	adds	r3, #1
 800736c:	607b      	str	r3, [r7, #4]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2b06      	cmp	r3, #6
 8007372:	d9ef      	bls.n	8007354 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007374:	480d      	ldr	r0, [pc, #52]	@ (80073ac <prvInitialiseTaskLists+0x64>)
 8007376:	f7fe fc63 	bl	8005c40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800737a:	480d      	ldr	r0, [pc, #52]	@ (80073b0 <prvInitialiseTaskLists+0x68>)
 800737c:	f7fe fc60 	bl	8005c40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007380:	480c      	ldr	r0, [pc, #48]	@ (80073b4 <prvInitialiseTaskLists+0x6c>)
 8007382:	f7fe fc5d 	bl	8005c40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007386:	480c      	ldr	r0, [pc, #48]	@ (80073b8 <prvInitialiseTaskLists+0x70>)
 8007388:	f7fe fc5a 	bl	8005c40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800738c:	480b      	ldr	r0, [pc, #44]	@ (80073bc <prvInitialiseTaskLists+0x74>)
 800738e:	f7fe fc57 	bl	8005c40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007392:	4b0b      	ldr	r3, [pc, #44]	@ (80073c0 <prvInitialiseTaskLists+0x78>)
 8007394:	4a05      	ldr	r2, [pc, #20]	@ (80073ac <prvInitialiseTaskLists+0x64>)
 8007396:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007398:	4b0a      	ldr	r3, [pc, #40]	@ (80073c4 <prvInitialiseTaskLists+0x7c>)
 800739a:	4a05      	ldr	r2, [pc, #20]	@ (80073b0 <prvInitialiseTaskLists+0x68>)
 800739c:	601a      	str	r2, [r3, #0]
}
 800739e:	bf00      	nop
 80073a0:	3708      	adds	r7, #8
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	20000be0 	.word	0x20000be0
 80073ac:	20000c6c 	.word	0x20000c6c
 80073b0:	20000c80 	.word	0x20000c80
 80073b4:	20000c9c 	.word	0x20000c9c
 80073b8:	20000cb0 	.word	0x20000cb0
 80073bc:	20000cc8 	.word	0x20000cc8
 80073c0:	20000c94 	.word	0x20000c94
 80073c4:	20000c98 	.word	0x20000c98

080073c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073ce:	e019      	b.n	8007404 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80073d0:	f000 fbd2 	bl	8007b78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073d4:	4b10      	ldr	r3, [pc, #64]	@ (8007418 <prvCheckTasksWaitingTermination+0x50>)
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	3304      	adds	r3, #4
 80073e0:	4618      	mov	r0, r3
 80073e2:	f7fe fcb7 	bl	8005d54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80073e6:	4b0d      	ldr	r3, [pc, #52]	@ (800741c <prvCheckTasksWaitingTermination+0x54>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	3b01      	subs	r3, #1
 80073ec:	4a0b      	ldr	r2, [pc, #44]	@ (800741c <prvCheckTasksWaitingTermination+0x54>)
 80073ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80073f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007420 <prvCheckTasksWaitingTermination+0x58>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	3b01      	subs	r3, #1
 80073f6:	4a0a      	ldr	r2, [pc, #40]	@ (8007420 <prvCheckTasksWaitingTermination+0x58>)
 80073f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80073fa:	f000 fbef 	bl	8007bdc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f810 	bl	8007424 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007404:	4b06      	ldr	r3, [pc, #24]	@ (8007420 <prvCheckTasksWaitingTermination+0x58>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d1e1      	bne.n	80073d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800740c:	bf00      	nop
 800740e:	bf00      	nop
 8007410:	3708      	adds	r7, #8
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	20000cb0 	.word	0x20000cb0
 800741c:	20000cdc 	.word	0x20000cdc
 8007420:	20000cc4 	.word	0x20000cc4

08007424 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	334c      	adds	r3, #76	@ 0x4c
 8007430:	4618      	mov	r0, r3
 8007432:	f000 ffe1 	bl	80083f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800743c:	2b00      	cmp	r3, #0
 800743e:	d108      	bne.n	8007452 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007444:	4618      	mov	r0, r3
 8007446:	f000 fd87 	bl	8007f58 <vPortFree>
				vPortFree( pxTCB );
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 fd84 	bl	8007f58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007450:	e019      	b.n	8007486 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007458:	2b01      	cmp	r3, #1
 800745a:	d103      	bne.n	8007464 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 fd7b 	bl	8007f58 <vPortFree>
	}
 8007462:	e010      	b.n	8007486 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800746a:	2b02      	cmp	r3, #2
 800746c:	d00b      	beq.n	8007486 <prvDeleteTCB+0x62>
	__asm volatile
 800746e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007472:	f383 8811 	msr	BASEPRI, r3
 8007476:	f3bf 8f6f 	isb	sy
 800747a:	f3bf 8f4f 	dsb	sy
 800747e:	60fb      	str	r3, [r7, #12]
}
 8007480:	bf00      	nop
 8007482:	bf00      	nop
 8007484:	e7fd      	b.n	8007482 <prvDeleteTCB+0x5e>
	}
 8007486:	bf00      	nop
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
	...

08007490 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007496:	4b0c      	ldr	r3, [pc, #48]	@ (80074c8 <prvResetNextTaskUnblockTime+0x38>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d104      	bne.n	80074aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80074a0:	4b0a      	ldr	r3, [pc, #40]	@ (80074cc <prvResetNextTaskUnblockTime+0x3c>)
 80074a2:	f04f 32ff 	mov.w	r2, #4294967295
 80074a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80074a8:	e008      	b.n	80074bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074aa:	4b07      	ldr	r3, [pc, #28]	@ (80074c8 <prvResetNextTaskUnblockTime+0x38>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	4a04      	ldr	r2, [pc, #16]	@ (80074cc <prvResetNextTaskUnblockTime+0x3c>)
 80074ba:	6013      	str	r3, [r2, #0]
}
 80074bc:	bf00      	nop
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	20000c94 	.word	0x20000c94
 80074cc:	20000cfc 	.word	0x20000cfc

080074d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80074d6:	4b0b      	ldr	r3, [pc, #44]	@ (8007504 <xTaskGetSchedulerState+0x34>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d102      	bne.n	80074e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80074de:	2301      	movs	r3, #1
 80074e0:	607b      	str	r3, [r7, #4]
 80074e2:	e008      	b.n	80074f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074e4:	4b08      	ldr	r3, [pc, #32]	@ (8007508 <xTaskGetSchedulerState+0x38>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d102      	bne.n	80074f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80074ec:	2302      	movs	r3, #2
 80074ee:	607b      	str	r3, [r7, #4]
 80074f0:	e001      	b.n	80074f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80074f2:	2300      	movs	r3, #0
 80074f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80074f6:	687b      	ldr	r3, [r7, #4]
	}
 80074f8:	4618      	mov	r0, r3
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr
 8007504:	20000ce8 	.word	0x20000ce8
 8007508:	20000d04 	.word	0x20000d04

0800750c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007518:	2300      	movs	r3, #0
 800751a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d05e      	beq.n	80075e0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007526:	4b31      	ldr	r3, [pc, #196]	@ (80075ec <xTaskPriorityInherit+0xe0>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800752c:	429a      	cmp	r2, r3
 800752e:	d24e      	bcs.n	80075ce <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	699b      	ldr	r3, [r3, #24]
 8007534:	2b00      	cmp	r3, #0
 8007536:	db06      	blt.n	8007546 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007538:	4b2c      	ldr	r3, [pc, #176]	@ (80075ec <xTaskPriorityInherit+0xe0>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800753e:	f1c3 0207 	rsb	r2, r3, #7
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	6959      	ldr	r1, [r3, #20]
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800754e:	4613      	mov	r3, r2
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	4413      	add	r3, r2
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	4a26      	ldr	r2, [pc, #152]	@ (80075f0 <xTaskPriorityInherit+0xe4>)
 8007558:	4413      	add	r3, r2
 800755a:	4299      	cmp	r1, r3
 800755c:	d12f      	bne.n	80075be <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	3304      	adds	r3, #4
 8007562:	4618      	mov	r0, r3
 8007564:	f7fe fbf6 	bl	8005d54 <uxListRemove>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d10a      	bne.n	8007584 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007572:	2201      	movs	r2, #1
 8007574:	fa02 f303 	lsl.w	r3, r2, r3
 8007578:	43da      	mvns	r2, r3
 800757a:	4b1e      	ldr	r3, [pc, #120]	@ (80075f4 <xTaskPriorityInherit+0xe8>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4013      	ands	r3, r2
 8007580:	4a1c      	ldr	r2, [pc, #112]	@ (80075f4 <xTaskPriorityInherit+0xe8>)
 8007582:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007584:	4b19      	ldr	r3, [pc, #100]	@ (80075ec <xTaskPriorityInherit+0xe0>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007592:	2201      	movs	r2, #1
 8007594:	409a      	lsls	r2, r3
 8007596:	4b17      	ldr	r3, [pc, #92]	@ (80075f4 <xTaskPriorityInherit+0xe8>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4313      	orrs	r3, r2
 800759c:	4a15      	ldr	r2, [pc, #84]	@ (80075f4 <xTaskPriorityInherit+0xe8>)
 800759e:	6013      	str	r3, [r2, #0]
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075a4:	4613      	mov	r3, r2
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	4413      	add	r3, r2
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	4a10      	ldr	r2, [pc, #64]	@ (80075f0 <xTaskPriorityInherit+0xe4>)
 80075ae:	441a      	add	r2, r3
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	3304      	adds	r3, #4
 80075b4:	4619      	mov	r1, r3
 80075b6:	4610      	mov	r0, r2
 80075b8:	f7fe fb6f 	bl	8005c9a <vListInsertEnd>
 80075bc:	e004      	b.n	80075c8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80075be:	4b0b      	ldr	r3, [pc, #44]	@ (80075ec <xTaskPriorityInherit+0xe0>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80075c8:	2301      	movs	r3, #1
 80075ca:	60fb      	str	r3, [r7, #12]
 80075cc:	e008      	b.n	80075e0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075d2:	4b06      	ldr	r3, [pc, #24]	@ (80075ec <xTaskPriorityInherit+0xe0>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d8:	429a      	cmp	r2, r3
 80075da:	d201      	bcs.n	80075e0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80075dc:	2301      	movs	r3, #1
 80075de:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80075e0:	68fb      	ldr	r3, [r7, #12]
	}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3710      	adds	r7, #16
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	20000bdc 	.word	0x20000bdc
 80075f0:	20000be0 	.word	0x20000be0
 80075f4:	20000ce4 	.word	0x20000ce4

080075f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b086      	sub	sp, #24
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007604:	2300      	movs	r3, #0
 8007606:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d070      	beq.n	80076f0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800760e:	4b3b      	ldr	r3, [pc, #236]	@ (80076fc <xTaskPriorityDisinherit+0x104>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	693a      	ldr	r2, [r7, #16]
 8007614:	429a      	cmp	r2, r3
 8007616:	d00b      	beq.n	8007630 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800761c:	f383 8811 	msr	BASEPRI, r3
 8007620:	f3bf 8f6f 	isb	sy
 8007624:	f3bf 8f4f 	dsb	sy
 8007628:	60fb      	str	r3, [r7, #12]
}
 800762a:	bf00      	nop
 800762c:	bf00      	nop
 800762e:	e7fd      	b.n	800762c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10b      	bne.n	8007650 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800763c:	f383 8811 	msr	BASEPRI, r3
 8007640:	f3bf 8f6f 	isb	sy
 8007644:	f3bf 8f4f 	dsb	sy
 8007648:	60bb      	str	r3, [r7, #8]
}
 800764a:	bf00      	nop
 800764c:	bf00      	nop
 800764e:	e7fd      	b.n	800764c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007654:	1e5a      	subs	r2, r3, #1
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007662:	429a      	cmp	r2, r3
 8007664:	d044      	beq.n	80076f0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800766a:	2b00      	cmp	r3, #0
 800766c:	d140      	bne.n	80076f0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	3304      	adds	r3, #4
 8007672:	4618      	mov	r0, r3
 8007674:	f7fe fb6e 	bl	8005d54 <uxListRemove>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d115      	bne.n	80076aa <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007682:	491f      	ldr	r1, [pc, #124]	@ (8007700 <xTaskPriorityDisinherit+0x108>)
 8007684:	4613      	mov	r3, r2
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	4413      	add	r3, r2
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	440b      	add	r3, r1
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d10a      	bne.n	80076aa <xTaskPriorityDisinherit+0xb2>
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007698:	2201      	movs	r2, #1
 800769a:	fa02 f303 	lsl.w	r3, r2, r3
 800769e:	43da      	mvns	r2, r3
 80076a0:	4b18      	ldr	r3, [pc, #96]	@ (8007704 <xTaskPriorityDisinherit+0x10c>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4013      	ands	r3, r2
 80076a6:	4a17      	ldr	r2, [pc, #92]	@ (8007704 <xTaskPriorityDisinherit+0x10c>)
 80076a8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076b6:	f1c3 0207 	rsb	r2, r3, #7
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c2:	2201      	movs	r2, #1
 80076c4:	409a      	lsls	r2, r3
 80076c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007704 <xTaskPriorityDisinherit+0x10c>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	4a0d      	ldr	r2, [pc, #52]	@ (8007704 <xTaskPriorityDisinherit+0x10c>)
 80076ce:	6013      	str	r3, [r2, #0]
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076d4:	4613      	mov	r3, r2
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	4413      	add	r3, r2
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4a08      	ldr	r2, [pc, #32]	@ (8007700 <xTaskPriorityDisinherit+0x108>)
 80076de:	441a      	add	r2, r3
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	3304      	adds	r3, #4
 80076e4:	4619      	mov	r1, r3
 80076e6:	4610      	mov	r0, r2
 80076e8:	f7fe fad7 	bl	8005c9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80076ec:	2301      	movs	r3, #1
 80076ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80076f0:	697b      	ldr	r3, [r7, #20]
	}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3718      	adds	r7, #24
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	20000bdc 	.word	0x20000bdc
 8007700:	20000be0 	.word	0x20000be0
 8007704:	20000ce4 	.word	0x20000ce4

08007708 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007708:	b580      	push	{r7, lr}
 800770a:	b088      	sub	sp, #32
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007716:	2301      	movs	r3, #1
 8007718:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d079      	beq.n	8007814 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007724:	2b00      	cmp	r3, #0
 8007726:	d10b      	bne.n	8007740 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800772c:	f383 8811 	msr	BASEPRI, r3
 8007730:	f3bf 8f6f 	isb	sy
 8007734:	f3bf 8f4f 	dsb	sy
 8007738:	60fb      	str	r3, [r7, #12]
}
 800773a:	bf00      	nop
 800773c:	bf00      	nop
 800773e:	e7fd      	b.n	800773c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007744:	683a      	ldr	r2, [r7, #0]
 8007746:	429a      	cmp	r2, r3
 8007748:	d902      	bls.n	8007750 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	61fb      	str	r3, [r7, #28]
 800774e:	e002      	b.n	8007756 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007754:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800775a:	69fa      	ldr	r2, [r7, #28]
 800775c:	429a      	cmp	r2, r3
 800775e:	d059      	beq.n	8007814 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007764:	697a      	ldr	r2, [r7, #20]
 8007766:	429a      	cmp	r2, r3
 8007768:	d154      	bne.n	8007814 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800776a:	4b2c      	ldr	r3, [pc, #176]	@ (800781c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	69ba      	ldr	r2, [r7, #24]
 8007770:	429a      	cmp	r2, r3
 8007772:	d10b      	bne.n	800778c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007778:	f383 8811 	msr	BASEPRI, r3
 800777c:	f3bf 8f6f 	isb	sy
 8007780:	f3bf 8f4f 	dsb	sy
 8007784:	60bb      	str	r3, [r7, #8]
}
 8007786:	bf00      	nop
 8007788:	bf00      	nop
 800778a:	e7fd      	b.n	8007788 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800778c:	69bb      	ldr	r3, [r7, #24]
 800778e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007790:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	69fa      	ldr	r2, [r7, #28]
 8007796:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	699b      	ldr	r3, [r3, #24]
 800779c:	2b00      	cmp	r3, #0
 800779e:	db04      	blt.n	80077aa <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	f1c3 0207 	rsb	r2, r3, #7
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	6959      	ldr	r1, [r3, #20]
 80077ae:	693a      	ldr	r2, [r7, #16]
 80077b0:	4613      	mov	r3, r2
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	4413      	add	r3, r2
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	4a19      	ldr	r2, [pc, #100]	@ (8007820 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80077ba:	4413      	add	r3, r2
 80077bc:	4299      	cmp	r1, r3
 80077be:	d129      	bne.n	8007814 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	3304      	adds	r3, #4
 80077c4:	4618      	mov	r0, r3
 80077c6:	f7fe fac5 	bl	8005d54 <uxListRemove>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d10a      	bne.n	80077e6 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80077d0:	69bb      	ldr	r3, [r7, #24]
 80077d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077d4:	2201      	movs	r2, #1
 80077d6:	fa02 f303 	lsl.w	r3, r2, r3
 80077da:	43da      	mvns	r2, r3
 80077dc:	4b11      	ldr	r3, [pc, #68]	@ (8007824 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4013      	ands	r3, r2
 80077e2:	4a10      	ldr	r2, [pc, #64]	@ (8007824 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80077e4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ea:	2201      	movs	r2, #1
 80077ec:	409a      	lsls	r2, r3
 80077ee:	4b0d      	ldr	r3, [pc, #52]	@ (8007824 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4313      	orrs	r3, r2
 80077f4:	4a0b      	ldr	r2, [pc, #44]	@ (8007824 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80077f6:	6013      	str	r3, [r2, #0]
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077fc:	4613      	mov	r3, r2
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	4413      	add	r3, r2
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	4a06      	ldr	r2, [pc, #24]	@ (8007820 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007806:	441a      	add	r2, r3
 8007808:	69bb      	ldr	r3, [r7, #24]
 800780a:	3304      	adds	r3, #4
 800780c:	4619      	mov	r1, r3
 800780e:	4610      	mov	r0, r2
 8007810:	f7fe fa43 	bl	8005c9a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007814:	bf00      	nop
 8007816:	3720      	adds	r7, #32
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	20000bdc 	.word	0x20000bdc
 8007820:	20000be0 	.word	0x20000be0
 8007824:	20000ce4 	.word	0x20000ce4

08007828 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007828:	b480      	push	{r7}
 800782a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800782c:	4b07      	ldr	r3, [pc, #28]	@ (800784c <pvTaskIncrementMutexHeldCount+0x24>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d004      	beq.n	800783e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007834:	4b05      	ldr	r3, [pc, #20]	@ (800784c <pvTaskIncrementMutexHeldCount+0x24>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800783a:	3201      	adds	r2, #1
 800783c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800783e:	4b03      	ldr	r3, [pc, #12]	@ (800784c <pvTaskIncrementMutexHeldCount+0x24>)
 8007840:	681b      	ldr	r3, [r3, #0]
	}
 8007842:	4618      	mov	r0, r3
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr
 800784c:	20000bdc 	.word	0x20000bdc

08007850 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800785a:	4b29      	ldr	r3, [pc, #164]	@ (8007900 <prvAddCurrentTaskToDelayedList+0xb0>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007860:	4b28      	ldr	r3, [pc, #160]	@ (8007904 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	3304      	adds	r3, #4
 8007866:	4618      	mov	r0, r3
 8007868:	f7fe fa74 	bl	8005d54 <uxListRemove>
 800786c:	4603      	mov	r3, r0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10b      	bne.n	800788a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007872:	4b24      	ldr	r3, [pc, #144]	@ (8007904 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007878:	2201      	movs	r2, #1
 800787a:	fa02 f303 	lsl.w	r3, r2, r3
 800787e:	43da      	mvns	r2, r3
 8007880:	4b21      	ldr	r3, [pc, #132]	@ (8007908 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4013      	ands	r3, r2
 8007886:	4a20      	ldr	r2, [pc, #128]	@ (8007908 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007888:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007890:	d10a      	bne.n	80078a8 <prvAddCurrentTaskToDelayedList+0x58>
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d007      	beq.n	80078a8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007898:	4b1a      	ldr	r3, [pc, #104]	@ (8007904 <prvAddCurrentTaskToDelayedList+0xb4>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	3304      	adds	r3, #4
 800789e:	4619      	mov	r1, r3
 80078a0:	481a      	ldr	r0, [pc, #104]	@ (800790c <prvAddCurrentTaskToDelayedList+0xbc>)
 80078a2:	f7fe f9fa 	bl	8005c9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80078a6:	e026      	b.n	80078f6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80078a8:	68fa      	ldr	r2, [r7, #12]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4413      	add	r3, r2
 80078ae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80078b0:	4b14      	ldr	r3, [pc, #80]	@ (8007904 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68ba      	ldr	r2, [r7, #8]
 80078b6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80078b8:	68ba      	ldr	r2, [r7, #8]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d209      	bcs.n	80078d4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078c0:	4b13      	ldr	r3, [pc, #76]	@ (8007910 <prvAddCurrentTaskToDelayedList+0xc0>)
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	4b0f      	ldr	r3, [pc, #60]	@ (8007904 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	3304      	adds	r3, #4
 80078ca:	4619      	mov	r1, r3
 80078cc:	4610      	mov	r0, r2
 80078ce:	f7fe fa08 	bl	8005ce2 <vListInsert>
}
 80078d2:	e010      	b.n	80078f6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078d4:	4b0f      	ldr	r3, [pc, #60]	@ (8007914 <prvAddCurrentTaskToDelayedList+0xc4>)
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	4b0a      	ldr	r3, [pc, #40]	@ (8007904 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	3304      	adds	r3, #4
 80078de:	4619      	mov	r1, r3
 80078e0:	4610      	mov	r0, r2
 80078e2:	f7fe f9fe 	bl	8005ce2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80078e6:	4b0c      	ldr	r3, [pc, #48]	@ (8007918 <prvAddCurrentTaskToDelayedList+0xc8>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	68ba      	ldr	r2, [r7, #8]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d202      	bcs.n	80078f6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80078f0:	4a09      	ldr	r2, [pc, #36]	@ (8007918 <prvAddCurrentTaskToDelayedList+0xc8>)
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	6013      	str	r3, [r2, #0]
}
 80078f6:	bf00      	nop
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	20000ce0 	.word	0x20000ce0
 8007904:	20000bdc 	.word	0x20000bdc
 8007908:	20000ce4 	.word	0x20000ce4
 800790c:	20000cc8 	.word	0x20000cc8
 8007910:	20000c98 	.word	0x20000c98
 8007914:	20000c94 	.word	0x20000c94
 8007918:	20000cfc 	.word	0x20000cfc

0800791c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800791c:	b480      	push	{r7}
 800791e:	b085      	sub	sp, #20
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	3b04      	subs	r3, #4
 800792c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007934:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	3b04      	subs	r3, #4
 800793a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	f023 0201 	bic.w	r2, r3, #1
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	3b04      	subs	r3, #4
 800794a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800794c:	4a0c      	ldr	r2, [pc, #48]	@ (8007980 <pxPortInitialiseStack+0x64>)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	3b14      	subs	r3, #20
 8007956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	3b04      	subs	r3, #4
 8007962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f06f 0202 	mvn.w	r2, #2
 800796a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	3b20      	subs	r3, #32
 8007970:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007972:	68fb      	ldr	r3, [r7, #12]
}
 8007974:	4618      	mov	r0, r3
 8007976:	3714      	adds	r7, #20
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr
 8007980:	08007985 	.word	0x08007985

08007984 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007984:	b480      	push	{r7}
 8007986:	b085      	sub	sp, #20
 8007988:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800798a:	2300      	movs	r3, #0
 800798c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800798e:	4b13      	ldr	r3, [pc, #76]	@ (80079dc <prvTaskExitError+0x58>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007996:	d00b      	beq.n	80079b0 <prvTaskExitError+0x2c>
	__asm volatile
 8007998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800799c:	f383 8811 	msr	BASEPRI, r3
 80079a0:	f3bf 8f6f 	isb	sy
 80079a4:	f3bf 8f4f 	dsb	sy
 80079a8:	60fb      	str	r3, [r7, #12]
}
 80079aa:	bf00      	nop
 80079ac:	bf00      	nop
 80079ae:	e7fd      	b.n	80079ac <prvTaskExitError+0x28>
	__asm volatile
 80079b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079b4:	f383 8811 	msr	BASEPRI, r3
 80079b8:	f3bf 8f6f 	isb	sy
 80079bc:	f3bf 8f4f 	dsb	sy
 80079c0:	60bb      	str	r3, [r7, #8]
}
 80079c2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80079c4:	bf00      	nop
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d0fc      	beq.n	80079c6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80079cc:	bf00      	nop
 80079ce:	bf00      	nop
 80079d0:	3714      	adds	r7, #20
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	2000000c 	.word	0x2000000c

080079e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80079e0:	4b07      	ldr	r3, [pc, #28]	@ (8007a00 <pxCurrentTCBConst2>)
 80079e2:	6819      	ldr	r1, [r3, #0]
 80079e4:	6808      	ldr	r0, [r1, #0]
 80079e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ea:	f380 8809 	msr	PSP, r0
 80079ee:	f3bf 8f6f 	isb	sy
 80079f2:	f04f 0000 	mov.w	r0, #0
 80079f6:	f380 8811 	msr	BASEPRI, r0
 80079fa:	4770      	bx	lr
 80079fc:	f3af 8000 	nop.w

08007a00 <pxCurrentTCBConst2>:
 8007a00:	20000bdc 	.word	0x20000bdc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007a04:	bf00      	nop
 8007a06:	bf00      	nop

08007a08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007a08:	4808      	ldr	r0, [pc, #32]	@ (8007a2c <prvPortStartFirstTask+0x24>)
 8007a0a:	6800      	ldr	r0, [r0, #0]
 8007a0c:	6800      	ldr	r0, [r0, #0]
 8007a0e:	f380 8808 	msr	MSP, r0
 8007a12:	f04f 0000 	mov.w	r0, #0
 8007a16:	f380 8814 	msr	CONTROL, r0
 8007a1a:	b662      	cpsie	i
 8007a1c:	b661      	cpsie	f
 8007a1e:	f3bf 8f4f 	dsb	sy
 8007a22:	f3bf 8f6f 	isb	sy
 8007a26:	df00      	svc	0
 8007a28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007a2a:	bf00      	nop
 8007a2c:	e000ed08 	.word	0xe000ed08

08007a30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b086      	sub	sp, #24
 8007a34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007a36:	4b47      	ldr	r3, [pc, #284]	@ (8007b54 <xPortStartScheduler+0x124>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a47      	ldr	r2, [pc, #284]	@ (8007b58 <xPortStartScheduler+0x128>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d10b      	bne.n	8007a58 <xPortStartScheduler+0x28>
	__asm volatile
 8007a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a44:	f383 8811 	msr	BASEPRI, r3
 8007a48:	f3bf 8f6f 	isb	sy
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	613b      	str	r3, [r7, #16]
}
 8007a52:	bf00      	nop
 8007a54:	bf00      	nop
 8007a56:	e7fd      	b.n	8007a54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007a58:	4b3e      	ldr	r3, [pc, #248]	@ (8007b54 <xPortStartScheduler+0x124>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a3f      	ldr	r2, [pc, #252]	@ (8007b5c <xPortStartScheduler+0x12c>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d10b      	bne.n	8007a7a <xPortStartScheduler+0x4a>
	__asm volatile
 8007a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a66:	f383 8811 	msr	BASEPRI, r3
 8007a6a:	f3bf 8f6f 	isb	sy
 8007a6e:	f3bf 8f4f 	dsb	sy
 8007a72:	60fb      	str	r3, [r7, #12]
}
 8007a74:	bf00      	nop
 8007a76:	bf00      	nop
 8007a78:	e7fd      	b.n	8007a76 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007a7a:	4b39      	ldr	r3, [pc, #228]	@ (8007b60 <xPortStartScheduler+0x130>)
 8007a7c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	22ff      	movs	r2, #255	@ 0xff
 8007a8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007a94:	78fb      	ldrb	r3, [r7, #3]
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007a9c:	b2da      	uxtb	r2, r3
 8007a9e:	4b31      	ldr	r3, [pc, #196]	@ (8007b64 <xPortStartScheduler+0x134>)
 8007aa0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007aa2:	4b31      	ldr	r3, [pc, #196]	@ (8007b68 <xPortStartScheduler+0x138>)
 8007aa4:	2207      	movs	r2, #7
 8007aa6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007aa8:	e009      	b.n	8007abe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007aaa:	4b2f      	ldr	r3, [pc, #188]	@ (8007b68 <xPortStartScheduler+0x138>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	4a2d      	ldr	r2, [pc, #180]	@ (8007b68 <xPortStartScheduler+0x138>)
 8007ab2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ab4:	78fb      	ldrb	r3, [r7, #3]
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	005b      	lsls	r3, r3, #1
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007abe:	78fb      	ldrb	r3, [r7, #3]
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ac6:	2b80      	cmp	r3, #128	@ 0x80
 8007ac8:	d0ef      	beq.n	8007aaa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007aca:	4b27      	ldr	r3, [pc, #156]	@ (8007b68 <xPortStartScheduler+0x138>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f1c3 0307 	rsb	r3, r3, #7
 8007ad2:	2b04      	cmp	r3, #4
 8007ad4:	d00b      	beq.n	8007aee <xPortStartScheduler+0xbe>
	__asm volatile
 8007ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ada:	f383 8811 	msr	BASEPRI, r3
 8007ade:	f3bf 8f6f 	isb	sy
 8007ae2:	f3bf 8f4f 	dsb	sy
 8007ae6:	60bb      	str	r3, [r7, #8]
}
 8007ae8:	bf00      	nop
 8007aea:	bf00      	nop
 8007aec:	e7fd      	b.n	8007aea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007aee:	4b1e      	ldr	r3, [pc, #120]	@ (8007b68 <xPortStartScheduler+0x138>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	021b      	lsls	r3, r3, #8
 8007af4:	4a1c      	ldr	r2, [pc, #112]	@ (8007b68 <xPortStartScheduler+0x138>)
 8007af6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007af8:	4b1b      	ldr	r3, [pc, #108]	@ (8007b68 <xPortStartScheduler+0x138>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007b00:	4a19      	ldr	r2, [pc, #100]	@ (8007b68 <xPortStartScheduler+0x138>)
 8007b02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	b2da      	uxtb	r2, r3
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007b0c:	4b17      	ldr	r3, [pc, #92]	@ (8007b6c <xPortStartScheduler+0x13c>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a16      	ldr	r2, [pc, #88]	@ (8007b6c <xPortStartScheduler+0x13c>)
 8007b12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007b16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007b18:	4b14      	ldr	r3, [pc, #80]	@ (8007b6c <xPortStartScheduler+0x13c>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a13      	ldr	r2, [pc, #76]	@ (8007b6c <xPortStartScheduler+0x13c>)
 8007b1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007b22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007b24:	f000 f8da 	bl	8007cdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007b28:	4b11      	ldr	r3, [pc, #68]	@ (8007b70 <xPortStartScheduler+0x140>)
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007b2e:	f000 f8f9 	bl	8007d24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007b32:	4b10      	ldr	r3, [pc, #64]	@ (8007b74 <xPortStartScheduler+0x144>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a0f      	ldr	r2, [pc, #60]	@ (8007b74 <xPortStartScheduler+0x144>)
 8007b38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007b3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007b3e:	f7ff ff63 	bl	8007a08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007b42:	f7ff fa75 	bl	8007030 <vTaskSwitchContext>
	prvTaskExitError();
 8007b46:	f7ff ff1d 	bl	8007984 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007b4a:	2300      	movs	r3, #0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3718      	adds	r7, #24
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	e000ed00 	.word	0xe000ed00
 8007b58:	410fc271 	.word	0x410fc271
 8007b5c:	410fc270 	.word	0x410fc270
 8007b60:	e000e400 	.word	0xe000e400
 8007b64:	20000d08 	.word	0x20000d08
 8007b68:	20000d0c 	.word	0x20000d0c
 8007b6c:	e000ed20 	.word	0xe000ed20
 8007b70:	2000000c 	.word	0x2000000c
 8007b74:	e000ef34 	.word	0xe000ef34

08007b78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b82:	f383 8811 	msr	BASEPRI, r3
 8007b86:	f3bf 8f6f 	isb	sy
 8007b8a:	f3bf 8f4f 	dsb	sy
 8007b8e:	607b      	str	r3, [r7, #4]
}
 8007b90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007b92:	4b10      	ldr	r3, [pc, #64]	@ (8007bd4 <vPortEnterCritical+0x5c>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	3301      	adds	r3, #1
 8007b98:	4a0e      	ldr	r2, [pc, #56]	@ (8007bd4 <vPortEnterCritical+0x5c>)
 8007b9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8007bd4 <vPortEnterCritical+0x5c>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d110      	bne.n	8007bc6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8007bd8 <vPortEnterCritical+0x60>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00b      	beq.n	8007bc6 <vPortEnterCritical+0x4e>
	__asm volatile
 8007bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb2:	f383 8811 	msr	BASEPRI, r3
 8007bb6:	f3bf 8f6f 	isb	sy
 8007bba:	f3bf 8f4f 	dsb	sy
 8007bbe:	603b      	str	r3, [r7, #0]
}
 8007bc0:	bf00      	nop
 8007bc2:	bf00      	nop
 8007bc4:	e7fd      	b.n	8007bc2 <vPortEnterCritical+0x4a>
	}
}
 8007bc6:	bf00      	nop
 8007bc8:	370c      	adds	r7, #12
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop
 8007bd4:	2000000c 	.word	0x2000000c
 8007bd8:	e000ed04 	.word	0xe000ed04

08007bdc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007be2:	4b12      	ldr	r3, [pc, #72]	@ (8007c2c <vPortExitCritical+0x50>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d10b      	bne.n	8007c02 <vPortExitCritical+0x26>
	__asm volatile
 8007bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bee:	f383 8811 	msr	BASEPRI, r3
 8007bf2:	f3bf 8f6f 	isb	sy
 8007bf6:	f3bf 8f4f 	dsb	sy
 8007bfa:	607b      	str	r3, [r7, #4]
}
 8007bfc:	bf00      	nop
 8007bfe:	bf00      	nop
 8007c00:	e7fd      	b.n	8007bfe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007c02:	4b0a      	ldr	r3, [pc, #40]	@ (8007c2c <vPortExitCritical+0x50>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	3b01      	subs	r3, #1
 8007c08:	4a08      	ldr	r2, [pc, #32]	@ (8007c2c <vPortExitCritical+0x50>)
 8007c0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007c0c:	4b07      	ldr	r3, [pc, #28]	@ (8007c2c <vPortExitCritical+0x50>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d105      	bne.n	8007c20 <vPortExitCritical+0x44>
 8007c14:	2300      	movs	r3, #0
 8007c16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	f383 8811 	msr	BASEPRI, r3
}
 8007c1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007c20:	bf00      	nop
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr
 8007c2c:	2000000c 	.word	0x2000000c

08007c30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007c30:	f3ef 8009 	mrs	r0, PSP
 8007c34:	f3bf 8f6f 	isb	sy
 8007c38:	4b15      	ldr	r3, [pc, #84]	@ (8007c90 <pxCurrentTCBConst>)
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	f01e 0f10 	tst.w	lr, #16
 8007c40:	bf08      	it	eq
 8007c42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007c46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c4a:	6010      	str	r0, [r2, #0]
 8007c4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007c50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007c54:	f380 8811 	msr	BASEPRI, r0
 8007c58:	f3bf 8f4f 	dsb	sy
 8007c5c:	f3bf 8f6f 	isb	sy
 8007c60:	f7ff f9e6 	bl	8007030 <vTaskSwitchContext>
 8007c64:	f04f 0000 	mov.w	r0, #0
 8007c68:	f380 8811 	msr	BASEPRI, r0
 8007c6c:	bc09      	pop	{r0, r3}
 8007c6e:	6819      	ldr	r1, [r3, #0]
 8007c70:	6808      	ldr	r0, [r1, #0]
 8007c72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c76:	f01e 0f10 	tst.w	lr, #16
 8007c7a:	bf08      	it	eq
 8007c7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007c80:	f380 8809 	msr	PSP, r0
 8007c84:	f3bf 8f6f 	isb	sy
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	f3af 8000 	nop.w

08007c90 <pxCurrentTCBConst>:
 8007c90:	20000bdc 	.word	0x20000bdc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007c94:	bf00      	nop
 8007c96:	bf00      	nop

08007c98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ca2:	f383 8811 	msr	BASEPRI, r3
 8007ca6:	f3bf 8f6f 	isb	sy
 8007caa:	f3bf 8f4f 	dsb	sy
 8007cae:	607b      	str	r3, [r7, #4]
}
 8007cb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007cb2:	f7ff f903 	bl	8006ebc <xTaskIncrementTick>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d003      	beq.n	8007cc4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007cbc:	4b06      	ldr	r3, [pc, #24]	@ (8007cd8 <SysTick_Handler+0x40>)
 8007cbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cc2:	601a      	str	r2, [r3, #0]
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	f383 8811 	msr	BASEPRI, r3
}
 8007cce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007cd0:	bf00      	nop
 8007cd2:	3708      	adds	r7, #8
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	e000ed04 	.word	0xe000ed04

08007cdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007cdc:	b480      	push	{r7}
 8007cde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8007d10 <vPortSetupTimerInterrupt+0x34>)
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8007d14 <vPortSetupTimerInterrupt+0x38>)
 8007ce8:	2200      	movs	r2, #0
 8007cea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007cec:	4b0a      	ldr	r3, [pc, #40]	@ (8007d18 <vPortSetupTimerInterrupt+0x3c>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a0a      	ldr	r2, [pc, #40]	@ (8007d1c <vPortSetupTimerInterrupt+0x40>)
 8007cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8007cf6:	099b      	lsrs	r3, r3, #6
 8007cf8:	4a09      	ldr	r2, [pc, #36]	@ (8007d20 <vPortSetupTimerInterrupt+0x44>)
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007cfe:	4b04      	ldr	r3, [pc, #16]	@ (8007d10 <vPortSetupTimerInterrupt+0x34>)
 8007d00:	2207      	movs	r2, #7
 8007d02:	601a      	str	r2, [r3, #0]
}
 8007d04:	bf00      	nop
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr
 8007d0e:	bf00      	nop
 8007d10:	e000e010 	.word	0xe000e010
 8007d14:	e000e018 	.word	0xe000e018
 8007d18:	20000000 	.word	0x20000000
 8007d1c:	10624dd3 	.word	0x10624dd3
 8007d20:	e000e014 	.word	0xe000e014

08007d24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007d24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007d34 <vPortEnableVFP+0x10>
 8007d28:	6801      	ldr	r1, [r0, #0]
 8007d2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007d2e:	6001      	str	r1, [r0, #0]
 8007d30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007d32:	bf00      	nop
 8007d34:	e000ed88 	.word	0xe000ed88

08007d38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007d38:	b480      	push	{r7}
 8007d3a:	b085      	sub	sp, #20
 8007d3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007d3e:	f3ef 8305 	mrs	r3, IPSR
 8007d42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2b0f      	cmp	r3, #15
 8007d48:	d915      	bls.n	8007d76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007d4a:	4a18      	ldr	r2, [pc, #96]	@ (8007dac <vPortValidateInterruptPriority+0x74>)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	4413      	add	r3, r2
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007d54:	4b16      	ldr	r3, [pc, #88]	@ (8007db0 <vPortValidateInterruptPriority+0x78>)
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	7afa      	ldrb	r2, [r7, #11]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d20b      	bcs.n	8007d76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d62:	f383 8811 	msr	BASEPRI, r3
 8007d66:	f3bf 8f6f 	isb	sy
 8007d6a:	f3bf 8f4f 	dsb	sy
 8007d6e:	607b      	str	r3, [r7, #4]
}
 8007d70:	bf00      	nop
 8007d72:	bf00      	nop
 8007d74:	e7fd      	b.n	8007d72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007d76:	4b0f      	ldr	r3, [pc, #60]	@ (8007db4 <vPortValidateInterruptPriority+0x7c>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8007db8 <vPortValidateInterruptPriority+0x80>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d90b      	bls.n	8007d9e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d8a:	f383 8811 	msr	BASEPRI, r3
 8007d8e:	f3bf 8f6f 	isb	sy
 8007d92:	f3bf 8f4f 	dsb	sy
 8007d96:	603b      	str	r3, [r7, #0]
}
 8007d98:	bf00      	nop
 8007d9a:	bf00      	nop
 8007d9c:	e7fd      	b.n	8007d9a <vPortValidateInterruptPriority+0x62>
	}
 8007d9e:	bf00      	nop
 8007da0:	3714      	adds	r7, #20
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	e000e3f0 	.word	0xe000e3f0
 8007db0:	20000d08 	.word	0x20000d08
 8007db4:	e000ed0c 	.word	0xe000ed0c
 8007db8:	20000d0c 	.word	0x20000d0c

08007dbc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b08a      	sub	sp, #40	@ 0x28
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007dc8:	f7fe ffcc 	bl	8006d64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007dcc:	4b5c      	ldr	r3, [pc, #368]	@ (8007f40 <pvPortMalloc+0x184>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d101      	bne.n	8007dd8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007dd4:	f000 f924 	bl	8008020 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007dd8:	4b5a      	ldr	r3, [pc, #360]	@ (8007f44 <pvPortMalloc+0x188>)
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	4013      	ands	r3, r2
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f040 8095 	bne.w	8007f10 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d01e      	beq.n	8007e2a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007dec:	2208      	movs	r2, #8
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4413      	add	r3, r2
 8007df2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f003 0307 	and.w	r3, r3, #7
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d015      	beq.n	8007e2a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f023 0307 	bic.w	r3, r3, #7
 8007e04:	3308      	adds	r3, #8
 8007e06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f003 0307 	and.w	r3, r3, #7
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00b      	beq.n	8007e2a <pvPortMalloc+0x6e>
	__asm volatile
 8007e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e16:	f383 8811 	msr	BASEPRI, r3
 8007e1a:	f3bf 8f6f 	isb	sy
 8007e1e:	f3bf 8f4f 	dsb	sy
 8007e22:	617b      	str	r3, [r7, #20]
}
 8007e24:	bf00      	nop
 8007e26:	bf00      	nop
 8007e28:	e7fd      	b.n	8007e26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d06f      	beq.n	8007f10 <pvPortMalloc+0x154>
 8007e30:	4b45      	ldr	r3, [pc, #276]	@ (8007f48 <pvPortMalloc+0x18c>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d86a      	bhi.n	8007f10 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007e3a:	4b44      	ldr	r3, [pc, #272]	@ (8007f4c <pvPortMalloc+0x190>)
 8007e3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007e3e:	4b43      	ldr	r3, [pc, #268]	@ (8007f4c <pvPortMalloc+0x190>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e44:	e004      	b.n	8007e50 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d903      	bls.n	8007e62 <pvPortMalloc+0xa6>
 8007e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d1f1      	bne.n	8007e46 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007e62:	4b37      	ldr	r3, [pc, #220]	@ (8007f40 <pvPortMalloc+0x184>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d051      	beq.n	8007f10 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007e6c:	6a3b      	ldr	r3, [r7, #32]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2208      	movs	r2, #8
 8007e72:	4413      	add	r3, r2
 8007e74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	6a3b      	ldr	r3, [r7, #32]
 8007e7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e80:	685a      	ldr	r2, [r3, #4]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	1ad2      	subs	r2, r2, r3
 8007e86:	2308      	movs	r3, #8
 8007e88:	005b      	lsls	r3, r3, #1
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d920      	bls.n	8007ed0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007e8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4413      	add	r3, r2
 8007e94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	f003 0307 	and.w	r3, r3, #7
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d00b      	beq.n	8007eb8 <pvPortMalloc+0xfc>
	__asm volatile
 8007ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ea4:	f383 8811 	msr	BASEPRI, r3
 8007ea8:	f3bf 8f6f 	isb	sy
 8007eac:	f3bf 8f4f 	dsb	sy
 8007eb0:	613b      	str	r3, [r7, #16]
}
 8007eb2:	bf00      	nop
 8007eb4:	bf00      	nop
 8007eb6:	e7fd      	b.n	8007eb4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eba:	685a      	ldr	r2, [r3, #4]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	1ad2      	subs	r2, r2, r3
 8007ec0:	69bb      	ldr	r3, [r7, #24]
 8007ec2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007eca:	69b8      	ldr	r0, [r7, #24]
 8007ecc:	f000 f90a 	bl	80080e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8007f48 <pvPortMalloc+0x18c>)
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	4a1b      	ldr	r2, [pc, #108]	@ (8007f48 <pvPortMalloc+0x18c>)
 8007edc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ede:	4b1a      	ldr	r3, [pc, #104]	@ (8007f48 <pvPortMalloc+0x18c>)
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8007f50 <pvPortMalloc+0x194>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d203      	bcs.n	8007ef2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007eea:	4b17      	ldr	r3, [pc, #92]	@ (8007f48 <pvPortMalloc+0x18c>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a18      	ldr	r2, [pc, #96]	@ (8007f50 <pvPortMalloc+0x194>)
 8007ef0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef4:	685a      	ldr	r2, [r3, #4]
 8007ef6:	4b13      	ldr	r3, [pc, #76]	@ (8007f44 <pvPortMalloc+0x188>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	431a      	orrs	r2, r3
 8007efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007efe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f02:	2200      	movs	r2, #0
 8007f04:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007f06:	4b13      	ldr	r3, [pc, #76]	@ (8007f54 <pvPortMalloc+0x198>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	4a11      	ldr	r2, [pc, #68]	@ (8007f54 <pvPortMalloc+0x198>)
 8007f0e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007f10:	f7fe ff36 	bl	8006d80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	f003 0307 	and.w	r3, r3, #7
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00b      	beq.n	8007f36 <pvPortMalloc+0x17a>
	__asm volatile
 8007f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f22:	f383 8811 	msr	BASEPRI, r3
 8007f26:	f3bf 8f6f 	isb	sy
 8007f2a:	f3bf 8f4f 	dsb	sy
 8007f2e:	60fb      	str	r3, [r7, #12]
}
 8007f30:	bf00      	nop
 8007f32:	bf00      	nop
 8007f34:	e7fd      	b.n	8007f32 <pvPortMalloc+0x176>
	return pvReturn;
 8007f36:	69fb      	ldr	r3, [r7, #28]
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3728      	adds	r7, #40	@ 0x28
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	20004918 	.word	0x20004918
 8007f44:	2000492c 	.word	0x2000492c
 8007f48:	2000491c 	.word	0x2000491c
 8007f4c:	20004910 	.word	0x20004910
 8007f50:	20004920 	.word	0x20004920
 8007f54:	20004924 	.word	0x20004924

08007f58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b086      	sub	sp, #24
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d04f      	beq.n	800800a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007f6a:	2308      	movs	r3, #8
 8007f6c:	425b      	negs	r3, r3
 8007f6e:	697a      	ldr	r2, [r7, #20]
 8007f70:	4413      	add	r3, r2
 8007f72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	685a      	ldr	r2, [r3, #4]
 8007f7c:	4b25      	ldr	r3, [pc, #148]	@ (8008014 <vPortFree+0xbc>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4013      	ands	r3, r2
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d10b      	bne.n	8007f9e <vPortFree+0x46>
	__asm volatile
 8007f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f8a:	f383 8811 	msr	BASEPRI, r3
 8007f8e:	f3bf 8f6f 	isb	sy
 8007f92:	f3bf 8f4f 	dsb	sy
 8007f96:	60fb      	str	r3, [r7, #12]
}
 8007f98:	bf00      	nop
 8007f9a:	bf00      	nop
 8007f9c:	e7fd      	b.n	8007f9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00b      	beq.n	8007fbe <vPortFree+0x66>
	__asm volatile
 8007fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007faa:	f383 8811 	msr	BASEPRI, r3
 8007fae:	f3bf 8f6f 	isb	sy
 8007fb2:	f3bf 8f4f 	dsb	sy
 8007fb6:	60bb      	str	r3, [r7, #8]
}
 8007fb8:	bf00      	nop
 8007fba:	bf00      	nop
 8007fbc:	e7fd      	b.n	8007fba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	685a      	ldr	r2, [r3, #4]
 8007fc2:	4b14      	ldr	r3, [pc, #80]	@ (8008014 <vPortFree+0xbc>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4013      	ands	r3, r2
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d01e      	beq.n	800800a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d11a      	bne.n	800800a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	685a      	ldr	r2, [r3, #4]
 8007fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8008014 <vPortFree+0xbc>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	43db      	mvns	r3, r3
 8007fde:	401a      	ands	r2, r3
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007fe4:	f7fe febe 	bl	8006d64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	685a      	ldr	r2, [r3, #4]
 8007fec:	4b0a      	ldr	r3, [pc, #40]	@ (8008018 <vPortFree+0xc0>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	4a09      	ldr	r2, [pc, #36]	@ (8008018 <vPortFree+0xc0>)
 8007ff4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007ff6:	6938      	ldr	r0, [r7, #16]
 8007ff8:	f000 f874 	bl	80080e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007ffc:	4b07      	ldr	r3, [pc, #28]	@ (800801c <vPortFree+0xc4>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	3301      	adds	r3, #1
 8008002:	4a06      	ldr	r2, [pc, #24]	@ (800801c <vPortFree+0xc4>)
 8008004:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008006:	f7fe febb 	bl	8006d80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800800a:	bf00      	nop
 800800c:	3718      	adds	r7, #24
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	2000492c 	.word	0x2000492c
 8008018:	2000491c 	.word	0x2000491c
 800801c:	20004928 	.word	0x20004928

08008020 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008020:	b480      	push	{r7}
 8008022:	b085      	sub	sp, #20
 8008024:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008026:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800802a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800802c:	4b27      	ldr	r3, [pc, #156]	@ (80080cc <prvHeapInit+0xac>)
 800802e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f003 0307 	and.w	r3, r3, #7
 8008036:	2b00      	cmp	r3, #0
 8008038:	d00c      	beq.n	8008054 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	3307      	adds	r3, #7
 800803e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f023 0307 	bic.w	r3, r3, #7
 8008046:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008048:	68ba      	ldr	r2, [r7, #8]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	1ad3      	subs	r3, r2, r3
 800804e:	4a1f      	ldr	r2, [pc, #124]	@ (80080cc <prvHeapInit+0xac>)
 8008050:	4413      	add	r3, r2
 8008052:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008058:	4a1d      	ldr	r2, [pc, #116]	@ (80080d0 <prvHeapInit+0xb0>)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800805e:	4b1c      	ldr	r3, [pc, #112]	@ (80080d0 <prvHeapInit+0xb0>)
 8008060:	2200      	movs	r2, #0
 8008062:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	68ba      	ldr	r2, [r7, #8]
 8008068:	4413      	add	r3, r2
 800806a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800806c:	2208      	movs	r2, #8
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	1a9b      	subs	r3, r3, r2
 8008072:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f023 0307 	bic.w	r3, r3, #7
 800807a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	4a15      	ldr	r2, [pc, #84]	@ (80080d4 <prvHeapInit+0xb4>)
 8008080:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008082:	4b14      	ldr	r3, [pc, #80]	@ (80080d4 <prvHeapInit+0xb4>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2200      	movs	r2, #0
 8008088:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800808a:	4b12      	ldr	r3, [pc, #72]	@ (80080d4 <prvHeapInit+0xb4>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	2200      	movs	r2, #0
 8008090:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	1ad2      	subs	r2, r2, r3
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80080a0:	4b0c      	ldr	r3, [pc, #48]	@ (80080d4 <prvHeapInit+0xb4>)
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	4a0a      	ldr	r2, [pc, #40]	@ (80080d8 <prvHeapInit+0xb8>)
 80080ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	4a09      	ldr	r2, [pc, #36]	@ (80080dc <prvHeapInit+0xbc>)
 80080b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80080b8:	4b09      	ldr	r3, [pc, #36]	@ (80080e0 <prvHeapInit+0xc0>)
 80080ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80080be:	601a      	str	r2, [r3, #0]
}
 80080c0:	bf00      	nop
 80080c2:	3714      	adds	r7, #20
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr
 80080cc:	20000d10 	.word	0x20000d10
 80080d0:	20004910 	.word	0x20004910
 80080d4:	20004918 	.word	0x20004918
 80080d8:	20004920 	.word	0x20004920
 80080dc:	2000491c 	.word	0x2000491c
 80080e0:	2000492c 	.word	0x2000492c

080080e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80080e4:	b480      	push	{r7}
 80080e6:	b085      	sub	sp, #20
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80080ec:	4b28      	ldr	r3, [pc, #160]	@ (8008190 <prvInsertBlockIntoFreeList+0xac>)
 80080ee:	60fb      	str	r3, [r7, #12]
 80080f0:	e002      	b.n	80080f8 <prvInsertBlockIntoFreeList+0x14>
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	60fb      	str	r3, [r7, #12]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	429a      	cmp	r2, r3
 8008100:	d8f7      	bhi.n	80080f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	68ba      	ldr	r2, [r7, #8]
 800810c:	4413      	add	r3, r2
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	429a      	cmp	r2, r3
 8008112:	d108      	bne.n	8008126 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	685a      	ldr	r2, [r3, #4]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	441a      	add	r2, r3
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	68ba      	ldr	r2, [r7, #8]
 8008130:	441a      	add	r2, r3
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	429a      	cmp	r2, r3
 8008138:	d118      	bne.n	800816c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	4b15      	ldr	r3, [pc, #84]	@ (8008194 <prvInsertBlockIntoFreeList+0xb0>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	429a      	cmp	r2, r3
 8008144:	d00d      	beq.n	8008162 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	685a      	ldr	r2, [r3, #4]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	441a      	add	r2, r3
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	601a      	str	r2, [r3, #0]
 8008160:	e008      	b.n	8008174 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008162:	4b0c      	ldr	r3, [pc, #48]	@ (8008194 <prvInsertBlockIntoFreeList+0xb0>)
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	601a      	str	r2, [r3, #0]
 800816a:	e003      	b.n	8008174 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008174:	68fa      	ldr	r2, [r7, #12]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	429a      	cmp	r2, r3
 800817a:	d002      	beq.n	8008182 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008182:	bf00      	nop
 8008184:	3714      	adds	r7, #20
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr
 800818e:	bf00      	nop
 8008190:	20004910 	.word	0x20004910
 8008194:	20004918 	.word	0x20004918

08008198 <std>:
 8008198:	2300      	movs	r3, #0
 800819a:	b510      	push	{r4, lr}
 800819c:	4604      	mov	r4, r0
 800819e:	e9c0 3300 	strd	r3, r3, [r0]
 80081a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80081a6:	6083      	str	r3, [r0, #8]
 80081a8:	8181      	strh	r1, [r0, #12]
 80081aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80081ac:	81c2      	strh	r2, [r0, #14]
 80081ae:	6183      	str	r3, [r0, #24]
 80081b0:	4619      	mov	r1, r3
 80081b2:	2208      	movs	r2, #8
 80081b4:	305c      	adds	r0, #92	@ 0x5c
 80081b6:	f000 f906 	bl	80083c6 <memset>
 80081ba:	4b0d      	ldr	r3, [pc, #52]	@ (80081f0 <std+0x58>)
 80081bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80081be:	4b0d      	ldr	r3, [pc, #52]	@ (80081f4 <std+0x5c>)
 80081c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80081c2:	4b0d      	ldr	r3, [pc, #52]	@ (80081f8 <std+0x60>)
 80081c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80081c6:	4b0d      	ldr	r3, [pc, #52]	@ (80081fc <std+0x64>)
 80081c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80081ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008200 <std+0x68>)
 80081cc:	6224      	str	r4, [r4, #32]
 80081ce:	429c      	cmp	r4, r3
 80081d0:	d006      	beq.n	80081e0 <std+0x48>
 80081d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80081d6:	4294      	cmp	r4, r2
 80081d8:	d002      	beq.n	80081e0 <std+0x48>
 80081da:	33d0      	adds	r3, #208	@ 0xd0
 80081dc:	429c      	cmp	r4, r3
 80081de:	d105      	bne.n	80081ec <std+0x54>
 80081e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80081e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081e8:	f000 b9bc 	b.w	8008564 <__retarget_lock_init_recursive>
 80081ec:	bd10      	pop	{r4, pc}
 80081ee:	bf00      	nop
 80081f0:	08008341 	.word	0x08008341
 80081f4:	08008363 	.word	0x08008363
 80081f8:	0800839b 	.word	0x0800839b
 80081fc:	080083bf 	.word	0x080083bf
 8008200:	20004930 	.word	0x20004930

08008204 <stdio_exit_handler>:
 8008204:	4a02      	ldr	r2, [pc, #8]	@ (8008210 <stdio_exit_handler+0xc>)
 8008206:	4903      	ldr	r1, [pc, #12]	@ (8008214 <stdio_exit_handler+0x10>)
 8008208:	4803      	ldr	r0, [pc, #12]	@ (8008218 <stdio_exit_handler+0x14>)
 800820a:	f000 b869 	b.w	80082e0 <_fwalk_sglue>
 800820e:	bf00      	nop
 8008210:	20000010 	.word	0x20000010
 8008214:	08008e21 	.word	0x08008e21
 8008218:	20000020 	.word	0x20000020

0800821c <cleanup_stdio>:
 800821c:	6841      	ldr	r1, [r0, #4]
 800821e:	4b0c      	ldr	r3, [pc, #48]	@ (8008250 <cleanup_stdio+0x34>)
 8008220:	4299      	cmp	r1, r3
 8008222:	b510      	push	{r4, lr}
 8008224:	4604      	mov	r4, r0
 8008226:	d001      	beq.n	800822c <cleanup_stdio+0x10>
 8008228:	f000 fdfa 	bl	8008e20 <_fflush_r>
 800822c:	68a1      	ldr	r1, [r4, #8]
 800822e:	4b09      	ldr	r3, [pc, #36]	@ (8008254 <cleanup_stdio+0x38>)
 8008230:	4299      	cmp	r1, r3
 8008232:	d002      	beq.n	800823a <cleanup_stdio+0x1e>
 8008234:	4620      	mov	r0, r4
 8008236:	f000 fdf3 	bl	8008e20 <_fflush_r>
 800823a:	68e1      	ldr	r1, [r4, #12]
 800823c:	4b06      	ldr	r3, [pc, #24]	@ (8008258 <cleanup_stdio+0x3c>)
 800823e:	4299      	cmp	r1, r3
 8008240:	d004      	beq.n	800824c <cleanup_stdio+0x30>
 8008242:	4620      	mov	r0, r4
 8008244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008248:	f000 bdea 	b.w	8008e20 <_fflush_r>
 800824c:	bd10      	pop	{r4, pc}
 800824e:	bf00      	nop
 8008250:	20004930 	.word	0x20004930
 8008254:	20004998 	.word	0x20004998
 8008258:	20004a00 	.word	0x20004a00

0800825c <global_stdio_init.part.0>:
 800825c:	b510      	push	{r4, lr}
 800825e:	4b0b      	ldr	r3, [pc, #44]	@ (800828c <global_stdio_init.part.0+0x30>)
 8008260:	4c0b      	ldr	r4, [pc, #44]	@ (8008290 <global_stdio_init.part.0+0x34>)
 8008262:	4a0c      	ldr	r2, [pc, #48]	@ (8008294 <global_stdio_init.part.0+0x38>)
 8008264:	601a      	str	r2, [r3, #0]
 8008266:	4620      	mov	r0, r4
 8008268:	2200      	movs	r2, #0
 800826a:	2104      	movs	r1, #4
 800826c:	f7ff ff94 	bl	8008198 <std>
 8008270:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008274:	2201      	movs	r2, #1
 8008276:	2109      	movs	r1, #9
 8008278:	f7ff ff8e 	bl	8008198 <std>
 800827c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008280:	2202      	movs	r2, #2
 8008282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008286:	2112      	movs	r1, #18
 8008288:	f7ff bf86 	b.w	8008198 <std>
 800828c:	20004a68 	.word	0x20004a68
 8008290:	20004930 	.word	0x20004930
 8008294:	08008205 	.word	0x08008205

08008298 <__sfp_lock_acquire>:
 8008298:	4801      	ldr	r0, [pc, #4]	@ (80082a0 <__sfp_lock_acquire+0x8>)
 800829a:	f000 b964 	b.w	8008566 <__retarget_lock_acquire_recursive>
 800829e:	bf00      	nop
 80082a0:	20004a71 	.word	0x20004a71

080082a4 <__sfp_lock_release>:
 80082a4:	4801      	ldr	r0, [pc, #4]	@ (80082ac <__sfp_lock_release+0x8>)
 80082a6:	f000 b95f 	b.w	8008568 <__retarget_lock_release_recursive>
 80082aa:	bf00      	nop
 80082ac:	20004a71 	.word	0x20004a71

080082b0 <__sinit>:
 80082b0:	b510      	push	{r4, lr}
 80082b2:	4604      	mov	r4, r0
 80082b4:	f7ff fff0 	bl	8008298 <__sfp_lock_acquire>
 80082b8:	6a23      	ldr	r3, [r4, #32]
 80082ba:	b11b      	cbz	r3, 80082c4 <__sinit+0x14>
 80082bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082c0:	f7ff bff0 	b.w	80082a4 <__sfp_lock_release>
 80082c4:	4b04      	ldr	r3, [pc, #16]	@ (80082d8 <__sinit+0x28>)
 80082c6:	6223      	str	r3, [r4, #32]
 80082c8:	4b04      	ldr	r3, [pc, #16]	@ (80082dc <__sinit+0x2c>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d1f5      	bne.n	80082bc <__sinit+0xc>
 80082d0:	f7ff ffc4 	bl	800825c <global_stdio_init.part.0>
 80082d4:	e7f2      	b.n	80082bc <__sinit+0xc>
 80082d6:	bf00      	nop
 80082d8:	0800821d 	.word	0x0800821d
 80082dc:	20004a68 	.word	0x20004a68

080082e0 <_fwalk_sglue>:
 80082e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082e4:	4607      	mov	r7, r0
 80082e6:	4688      	mov	r8, r1
 80082e8:	4614      	mov	r4, r2
 80082ea:	2600      	movs	r6, #0
 80082ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082f0:	f1b9 0901 	subs.w	r9, r9, #1
 80082f4:	d505      	bpl.n	8008302 <_fwalk_sglue+0x22>
 80082f6:	6824      	ldr	r4, [r4, #0]
 80082f8:	2c00      	cmp	r4, #0
 80082fa:	d1f7      	bne.n	80082ec <_fwalk_sglue+0xc>
 80082fc:	4630      	mov	r0, r6
 80082fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008302:	89ab      	ldrh	r3, [r5, #12]
 8008304:	2b01      	cmp	r3, #1
 8008306:	d907      	bls.n	8008318 <_fwalk_sglue+0x38>
 8008308:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800830c:	3301      	adds	r3, #1
 800830e:	d003      	beq.n	8008318 <_fwalk_sglue+0x38>
 8008310:	4629      	mov	r1, r5
 8008312:	4638      	mov	r0, r7
 8008314:	47c0      	blx	r8
 8008316:	4306      	orrs	r6, r0
 8008318:	3568      	adds	r5, #104	@ 0x68
 800831a:	e7e9      	b.n	80082f0 <_fwalk_sglue+0x10>

0800831c <iprintf>:
 800831c:	b40f      	push	{r0, r1, r2, r3}
 800831e:	b507      	push	{r0, r1, r2, lr}
 8008320:	4906      	ldr	r1, [pc, #24]	@ (800833c <iprintf+0x20>)
 8008322:	ab04      	add	r3, sp, #16
 8008324:	6808      	ldr	r0, [r1, #0]
 8008326:	f853 2b04 	ldr.w	r2, [r3], #4
 800832a:	6881      	ldr	r1, [r0, #8]
 800832c:	9301      	str	r3, [sp, #4]
 800832e:	f000 fa4d 	bl	80087cc <_vfiprintf_r>
 8008332:	b003      	add	sp, #12
 8008334:	f85d eb04 	ldr.w	lr, [sp], #4
 8008338:	b004      	add	sp, #16
 800833a:	4770      	bx	lr
 800833c:	2000001c 	.word	0x2000001c

08008340 <__sread>:
 8008340:	b510      	push	{r4, lr}
 8008342:	460c      	mov	r4, r1
 8008344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008348:	f000 f8be 	bl	80084c8 <_read_r>
 800834c:	2800      	cmp	r0, #0
 800834e:	bfab      	itete	ge
 8008350:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008352:	89a3      	ldrhlt	r3, [r4, #12]
 8008354:	181b      	addge	r3, r3, r0
 8008356:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800835a:	bfac      	ite	ge
 800835c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800835e:	81a3      	strhlt	r3, [r4, #12]
 8008360:	bd10      	pop	{r4, pc}

08008362 <__swrite>:
 8008362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008366:	461f      	mov	r7, r3
 8008368:	898b      	ldrh	r3, [r1, #12]
 800836a:	05db      	lsls	r3, r3, #23
 800836c:	4605      	mov	r5, r0
 800836e:	460c      	mov	r4, r1
 8008370:	4616      	mov	r6, r2
 8008372:	d505      	bpl.n	8008380 <__swrite+0x1e>
 8008374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008378:	2302      	movs	r3, #2
 800837a:	2200      	movs	r2, #0
 800837c:	f000 f892 	bl	80084a4 <_lseek_r>
 8008380:	89a3      	ldrh	r3, [r4, #12]
 8008382:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008386:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800838a:	81a3      	strh	r3, [r4, #12]
 800838c:	4632      	mov	r2, r6
 800838e:	463b      	mov	r3, r7
 8008390:	4628      	mov	r0, r5
 8008392:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008396:	f000 b8a9 	b.w	80084ec <_write_r>

0800839a <__sseek>:
 800839a:	b510      	push	{r4, lr}
 800839c:	460c      	mov	r4, r1
 800839e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083a2:	f000 f87f 	bl	80084a4 <_lseek_r>
 80083a6:	1c43      	adds	r3, r0, #1
 80083a8:	89a3      	ldrh	r3, [r4, #12]
 80083aa:	bf15      	itete	ne
 80083ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 80083ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80083b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80083b6:	81a3      	strheq	r3, [r4, #12]
 80083b8:	bf18      	it	ne
 80083ba:	81a3      	strhne	r3, [r4, #12]
 80083bc:	bd10      	pop	{r4, pc}

080083be <__sclose>:
 80083be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083c2:	f000 b809 	b.w	80083d8 <_close_r>

080083c6 <memset>:
 80083c6:	4402      	add	r2, r0
 80083c8:	4603      	mov	r3, r0
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d100      	bne.n	80083d0 <memset+0xa>
 80083ce:	4770      	bx	lr
 80083d0:	f803 1b01 	strb.w	r1, [r3], #1
 80083d4:	e7f9      	b.n	80083ca <memset+0x4>
	...

080083d8 <_close_r>:
 80083d8:	b538      	push	{r3, r4, r5, lr}
 80083da:	4d06      	ldr	r5, [pc, #24]	@ (80083f4 <_close_r+0x1c>)
 80083dc:	2300      	movs	r3, #0
 80083de:	4604      	mov	r4, r0
 80083e0:	4608      	mov	r0, r1
 80083e2:	602b      	str	r3, [r5, #0]
 80083e4:	f7f9 f967 	bl	80016b6 <_close>
 80083e8:	1c43      	adds	r3, r0, #1
 80083ea:	d102      	bne.n	80083f2 <_close_r+0x1a>
 80083ec:	682b      	ldr	r3, [r5, #0]
 80083ee:	b103      	cbz	r3, 80083f2 <_close_r+0x1a>
 80083f0:	6023      	str	r3, [r4, #0]
 80083f2:	bd38      	pop	{r3, r4, r5, pc}
 80083f4:	20004a6c 	.word	0x20004a6c

080083f8 <_reclaim_reent>:
 80083f8:	4b29      	ldr	r3, [pc, #164]	@ (80084a0 <_reclaim_reent+0xa8>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4283      	cmp	r3, r0
 80083fe:	b570      	push	{r4, r5, r6, lr}
 8008400:	4604      	mov	r4, r0
 8008402:	d04b      	beq.n	800849c <_reclaim_reent+0xa4>
 8008404:	69c3      	ldr	r3, [r0, #28]
 8008406:	b1ab      	cbz	r3, 8008434 <_reclaim_reent+0x3c>
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	b16b      	cbz	r3, 8008428 <_reclaim_reent+0x30>
 800840c:	2500      	movs	r5, #0
 800840e:	69e3      	ldr	r3, [r4, #28]
 8008410:	68db      	ldr	r3, [r3, #12]
 8008412:	5959      	ldr	r1, [r3, r5]
 8008414:	2900      	cmp	r1, #0
 8008416:	d13b      	bne.n	8008490 <_reclaim_reent+0x98>
 8008418:	3504      	adds	r5, #4
 800841a:	2d80      	cmp	r5, #128	@ 0x80
 800841c:	d1f7      	bne.n	800840e <_reclaim_reent+0x16>
 800841e:	69e3      	ldr	r3, [r4, #28]
 8008420:	4620      	mov	r0, r4
 8008422:	68d9      	ldr	r1, [r3, #12]
 8008424:	f000 f8b0 	bl	8008588 <_free_r>
 8008428:	69e3      	ldr	r3, [r4, #28]
 800842a:	6819      	ldr	r1, [r3, #0]
 800842c:	b111      	cbz	r1, 8008434 <_reclaim_reent+0x3c>
 800842e:	4620      	mov	r0, r4
 8008430:	f000 f8aa 	bl	8008588 <_free_r>
 8008434:	6961      	ldr	r1, [r4, #20]
 8008436:	b111      	cbz	r1, 800843e <_reclaim_reent+0x46>
 8008438:	4620      	mov	r0, r4
 800843a:	f000 f8a5 	bl	8008588 <_free_r>
 800843e:	69e1      	ldr	r1, [r4, #28]
 8008440:	b111      	cbz	r1, 8008448 <_reclaim_reent+0x50>
 8008442:	4620      	mov	r0, r4
 8008444:	f000 f8a0 	bl	8008588 <_free_r>
 8008448:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800844a:	b111      	cbz	r1, 8008452 <_reclaim_reent+0x5a>
 800844c:	4620      	mov	r0, r4
 800844e:	f000 f89b 	bl	8008588 <_free_r>
 8008452:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008454:	b111      	cbz	r1, 800845c <_reclaim_reent+0x64>
 8008456:	4620      	mov	r0, r4
 8008458:	f000 f896 	bl	8008588 <_free_r>
 800845c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800845e:	b111      	cbz	r1, 8008466 <_reclaim_reent+0x6e>
 8008460:	4620      	mov	r0, r4
 8008462:	f000 f891 	bl	8008588 <_free_r>
 8008466:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008468:	b111      	cbz	r1, 8008470 <_reclaim_reent+0x78>
 800846a:	4620      	mov	r0, r4
 800846c:	f000 f88c 	bl	8008588 <_free_r>
 8008470:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008472:	b111      	cbz	r1, 800847a <_reclaim_reent+0x82>
 8008474:	4620      	mov	r0, r4
 8008476:	f000 f887 	bl	8008588 <_free_r>
 800847a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800847c:	b111      	cbz	r1, 8008484 <_reclaim_reent+0x8c>
 800847e:	4620      	mov	r0, r4
 8008480:	f000 f882 	bl	8008588 <_free_r>
 8008484:	6a23      	ldr	r3, [r4, #32]
 8008486:	b14b      	cbz	r3, 800849c <_reclaim_reent+0xa4>
 8008488:	4620      	mov	r0, r4
 800848a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800848e:	4718      	bx	r3
 8008490:	680e      	ldr	r6, [r1, #0]
 8008492:	4620      	mov	r0, r4
 8008494:	f000 f878 	bl	8008588 <_free_r>
 8008498:	4631      	mov	r1, r6
 800849a:	e7bb      	b.n	8008414 <_reclaim_reent+0x1c>
 800849c:	bd70      	pop	{r4, r5, r6, pc}
 800849e:	bf00      	nop
 80084a0:	2000001c 	.word	0x2000001c

080084a4 <_lseek_r>:
 80084a4:	b538      	push	{r3, r4, r5, lr}
 80084a6:	4d07      	ldr	r5, [pc, #28]	@ (80084c4 <_lseek_r+0x20>)
 80084a8:	4604      	mov	r4, r0
 80084aa:	4608      	mov	r0, r1
 80084ac:	4611      	mov	r1, r2
 80084ae:	2200      	movs	r2, #0
 80084b0:	602a      	str	r2, [r5, #0]
 80084b2:	461a      	mov	r2, r3
 80084b4:	f7f9 f926 	bl	8001704 <_lseek>
 80084b8:	1c43      	adds	r3, r0, #1
 80084ba:	d102      	bne.n	80084c2 <_lseek_r+0x1e>
 80084bc:	682b      	ldr	r3, [r5, #0]
 80084be:	b103      	cbz	r3, 80084c2 <_lseek_r+0x1e>
 80084c0:	6023      	str	r3, [r4, #0]
 80084c2:	bd38      	pop	{r3, r4, r5, pc}
 80084c4:	20004a6c 	.word	0x20004a6c

080084c8 <_read_r>:
 80084c8:	b538      	push	{r3, r4, r5, lr}
 80084ca:	4d07      	ldr	r5, [pc, #28]	@ (80084e8 <_read_r+0x20>)
 80084cc:	4604      	mov	r4, r0
 80084ce:	4608      	mov	r0, r1
 80084d0:	4611      	mov	r1, r2
 80084d2:	2200      	movs	r2, #0
 80084d4:	602a      	str	r2, [r5, #0]
 80084d6:	461a      	mov	r2, r3
 80084d8:	f7f9 f8b4 	bl	8001644 <_read>
 80084dc:	1c43      	adds	r3, r0, #1
 80084de:	d102      	bne.n	80084e6 <_read_r+0x1e>
 80084e0:	682b      	ldr	r3, [r5, #0]
 80084e2:	b103      	cbz	r3, 80084e6 <_read_r+0x1e>
 80084e4:	6023      	str	r3, [r4, #0]
 80084e6:	bd38      	pop	{r3, r4, r5, pc}
 80084e8:	20004a6c 	.word	0x20004a6c

080084ec <_write_r>:
 80084ec:	b538      	push	{r3, r4, r5, lr}
 80084ee:	4d07      	ldr	r5, [pc, #28]	@ (800850c <_write_r+0x20>)
 80084f0:	4604      	mov	r4, r0
 80084f2:	4608      	mov	r0, r1
 80084f4:	4611      	mov	r1, r2
 80084f6:	2200      	movs	r2, #0
 80084f8:	602a      	str	r2, [r5, #0]
 80084fa:	461a      	mov	r2, r3
 80084fc:	f7f9 f8bf 	bl	800167e <_write>
 8008500:	1c43      	adds	r3, r0, #1
 8008502:	d102      	bne.n	800850a <_write_r+0x1e>
 8008504:	682b      	ldr	r3, [r5, #0]
 8008506:	b103      	cbz	r3, 800850a <_write_r+0x1e>
 8008508:	6023      	str	r3, [r4, #0]
 800850a:	bd38      	pop	{r3, r4, r5, pc}
 800850c:	20004a6c 	.word	0x20004a6c

08008510 <__errno>:
 8008510:	4b01      	ldr	r3, [pc, #4]	@ (8008518 <__errno+0x8>)
 8008512:	6818      	ldr	r0, [r3, #0]
 8008514:	4770      	bx	lr
 8008516:	bf00      	nop
 8008518:	2000001c 	.word	0x2000001c

0800851c <__libc_init_array>:
 800851c:	b570      	push	{r4, r5, r6, lr}
 800851e:	4d0d      	ldr	r5, [pc, #52]	@ (8008554 <__libc_init_array+0x38>)
 8008520:	4c0d      	ldr	r4, [pc, #52]	@ (8008558 <__libc_init_array+0x3c>)
 8008522:	1b64      	subs	r4, r4, r5
 8008524:	10a4      	asrs	r4, r4, #2
 8008526:	2600      	movs	r6, #0
 8008528:	42a6      	cmp	r6, r4
 800852a:	d109      	bne.n	8008540 <__libc_init_array+0x24>
 800852c:	4d0b      	ldr	r5, [pc, #44]	@ (800855c <__libc_init_array+0x40>)
 800852e:	4c0c      	ldr	r4, [pc, #48]	@ (8008560 <__libc_init_array+0x44>)
 8008530:	f000 fdc6 	bl	80090c0 <_init>
 8008534:	1b64      	subs	r4, r4, r5
 8008536:	10a4      	asrs	r4, r4, #2
 8008538:	2600      	movs	r6, #0
 800853a:	42a6      	cmp	r6, r4
 800853c:	d105      	bne.n	800854a <__libc_init_array+0x2e>
 800853e:	bd70      	pop	{r4, r5, r6, pc}
 8008540:	f855 3b04 	ldr.w	r3, [r5], #4
 8008544:	4798      	blx	r3
 8008546:	3601      	adds	r6, #1
 8008548:	e7ee      	b.n	8008528 <__libc_init_array+0xc>
 800854a:	f855 3b04 	ldr.w	r3, [r5], #4
 800854e:	4798      	blx	r3
 8008550:	3601      	adds	r6, #1
 8008552:	e7f2      	b.n	800853a <__libc_init_array+0x1e>
 8008554:	080091b4 	.word	0x080091b4
 8008558:	080091b4 	.word	0x080091b4
 800855c:	080091b4 	.word	0x080091b4
 8008560:	080091b8 	.word	0x080091b8

08008564 <__retarget_lock_init_recursive>:
 8008564:	4770      	bx	lr

08008566 <__retarget_lock_acquire_recursive>:
 8008566:	4770      	bx	lr

08008568 <__retarget_lock_release_recursive>:
 8008568:	4770      	bx	lr

0800856a <memcpy>:
 800856a:	440a      	add	r2, r1
 800856c:	4291      	cmp	r1, r2
 800856e:	f100 33ff 	add.w	r3, r0, #4294967295
 8008572:	d100      	bne.n	8008576 <memcpy+0xc>
 8008574:	4770      	bx	lr
 8008576:	b510      	push	{r4, lr}
 8008578:	f811 4b01 	ldrb.w	r4, [r1], #1
 800857c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008580:	4291      	cmp	r1, r2
 8008582:	d1f9      	bne.n	8008578 <memcpy+0xe>
 8008584:	bd10      	pop	{r4, pc}
	...

08008588 <_free_r>:
 8008588:	b538      	push	{r3, r4, r5, lr}
 800858a:	4605      	mov	r5, r0
 800858c:	2900      	cmp	r1, #0
 800858e:	d041      	beq.n	8008614 <_free_r+0x8c>
 8008590:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008594:	1f0c      	subs	r4, r1, #4
 8008596:	2b00      	cmp	r3, #0
 8008598:	bfb8      	it	lt
 800859a:	18e4      	addlt	r4, r4, r3
 800859c:	f000 f8e0 	bl	8008760 <__malloc_lock>
 80085a0:	4a1d      	ldr	r2, [pc, #116]	@ (8008618 <_free_r+0x90>)
 80085a2:	6813      	ldr	r3, [r2, #0]
 80085a4:	b933      	cbnz	r3, 80085b4 <_free_r+0x2c>
 80085a6:	6063      	str	r3, [r4, #4]
 80085a8:	6014      	str	r4, [r2, #0]
 80085aa:	4628      	mov	r0, r5
 80085ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085b0:	f000 b8dc 	b.w	800876c <__malloc_unlock>
 80085b4:	42a3      	cmp	r3, r4
 80085b6:	d908      	bls.n	80085ca <_free_r+0x42>
 80085b8:	6820      	ldr	r0, [r4, #0]
 80085ba:	1821      	adds	r1, r4, r0
 80085bc:	428b      	cmp	r3, r1
 80085be:	bf01      	itttt	eq
 80085c0:	6819      	ldreq	r1, [r3, #0]
 80085c2:	685b      	ldreq	r3, [r3, #4]
 80085c4:	1809      	addeq	r1, r1, r0
 80085c6:	6021      	streq	r1, [r4, #0]
 80085c8:	e7ed      	b.n	80085a6 <_free_r+0x1e>
 80085ca:	461a      	mov	r2, r3
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	b10b      	cbz	r3, 80085d4 <_free_r+0x4c>
 80085d0:	42a3      	cmp	r3, r4
 80085d2:	d9fa      	bls.n	80085ca <_free_r+0x42>
 80085d4:	6811      	ldr	r1, [r2, #0]
 80085d6:	1850      	adds	r0, r2, r1
 80085d8:	42a0      	cmp	r0, r4
 80085da:	d10b      	bne.n	80085f4 <_free_r+0x6c>
 80085dc:	6820      	ldr	r0, [r4, #0]
 80085de:	4401      	add	r1, r0
 80085e0:	1850      	adds	r0, r2, r1
 80085e2:	4283      	cmp	r3, r0
 80085e4:	6011      	str	r1, [r2, #0]
 80085e6:	d1e0      	bne.n	80085aa <_free_r+0x22>
 80085e8:	6818      	ldr	r0, [r3, #0]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	6053      	str	r3, [r2, #4]
 80085ee:	4408      	add	r0, r1
 80085f0:	6010      	str	r0, [r2, #0]
 80085f2:	e7da      	b.n	80085aa <_free_r+0x22>
 80085f4:	d902      	bls.n	80085fc <_free_r+0x74>
 80085f6:	230c      	movs	r3, #12
 80085f8:	602b      	str	r3, [r5, #0]
 80085fa:	e7d6      	b.n	80085aa <_free_r+0x22>
 80085fc:	6820      	ldr	r0, [r4, #0]
 80085fe:	1821      	adds	r1, r4, r0
 8008600:	428b      	cmp	r3, r1
 8008602:	bf04      	itt	eq
 8008604:	6819      	ldreq	r1, [r3, #0]
 8008606:	685b      	ldreq	r3, [r3, #4]
 8008608:	6063      	str	r3, [r4, #4]
 800860a:	bf04      	itt	eq
 800860c:	1809      	addeq	r1, r1, r0
 800860e:	6021      	streq	r1, [r4, #0]
 8008610:	6054      	str	r4, [r2, #4]
 8008612:	e7ca      	b.n	80085aa <_free_r+0x22>
 8008614:	bd38      	pop	{r3, r4, r5, pc}
 8008616:	bf00      	nop
 8008618:	20004a78 	.word	0x20004a78

0800861c <sbrk_aligned>:
 800861c:	b570      	push	{r4, r5, r6, lr}
 800861e:	4e0f      	ldr	r6, [pc, #60]	@ (800865c <sbrk_aligned+0x40>)
 8008620:	460c      	mov	r4, r1
 8008622:	6831      	ldr	r1, [r6, #0]
 8008624:	4605      	mov	r5, r0
 8008626:	b911      	cbnz	r1, 800862e <sbrk_aligned+0x12>
 8008628:	f000 fcb6 	bl	8008f98 <_sbrk_r>
 800862c:	6030      	str	r0, [r6, #0]
 800862e:	4621      	mov	r1, r4
 8008630:	4628      	mov	r0, r5
 8008632:	f000 fcb1 	bl	8008f98 <_sbrk_r>
 8008636:	1c43      	adds	r3, r0, #1
 8008638:	d103      	bne.n	8008642 <sbrk_aligned+0x26>
 800863a:	f04f 34ff 	mov.w	r4, #4294967295
 800863e:	4620      	mov	r0, r4
 8008640:	bd70      	pop	{r4, r5, r6, pc}
 8008642:	1cc4      	adds	r4, r0, #3
 8008644:	f024 0403 	bic.w	r4, r4, #3
 8008648:	42a0      	cmp	r0, r4
 800864a:	d0f8      	beq.n	800863e <sbrk_aligned+0x22>
 800864c:	1a21      	subs	r1, r4, r0
 800864e:	4628      	mov	r0, r5
 8008650:	f000 fca2 	bl	8008f98 <_sbrk_r>
 8008654:	3001      	adds	r0, #1
 8008656:	d1f2      	bne.n	800863e <sbrk_aligned+0x22>
 8008658:	e7ef      	b.n	800863a <sbrk_aligned+0x1e>
 800865a:	bf00      	nop
 800865c:	20004a74 	.word	0x20004a74

08008660 <_malloc_r>:
 8008660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008664:	1ccd      	adds	r5, r1, #3
 8008666:	f025 0503 	bic.w	r5, r5, #3
 800866a:	3508      	adds	r5, #8
 800866c:	2d0c      	cmp	r5, #12
 800866e:	bf38      	it	cc
 8008670:	250c      	movcc	r5, #12
 8008672:	2d00      	cmp	r5, #0
 8008674:	4606      	mov	r6, r0
 8008676:	db01      	blt.n	800867c <_malloc_r+0x1c>
 8008678:	42a9      	cmp	r1, r5
 800867a:	d904      	bls.n	8008686 <_malloc_r+0x26>
 800867c:	230c      	movs	r3, #12
 800867e:	6033      	str	r3, [r6, #0]
 8008680:	2000      	movs	r0, #0
 8008682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008686:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800875c <_malloc_r+0xfc>
 800868a:	f000 f869 	bl	8008760 <__malloc_lock>
 800868e:	f8d8 3000 	ldr.w	r3, [r8]
 8008692:	461c      	mov	r4, r3
 8008694:	bb44      	cbnz	r4, 80086e8 <_malloc_r+0x88>
 8008696:	4629      	mov	r1, r5
 8008698:	4630      	mov	r0, r6
 800869a:	f7ff ffbf 	bl	800861c <sbrk_aligned>
 800869e:	1c43      	adds	r3, r0, #1
 80086a0:	4604      	mov	r4, r0
 80086a2:	d158      	bne.n	8008756 <_malloc_r+0xf6>
 80086a4:	f8d8 4000 	ldr.w	r4, [r8]
 80086a8:	4627      	mov	r7, r4
 80086aa:	2f00      	cmp	r7, #0
 80086ac:	d143      	bne.n	8008736 <_malloc_r+0xd6>
 80086ae:	2c00      	cmp	r4, #0
 80086b0:	d04b      	beq.n	800874a <_malloc_r+0xea>
 80086b2:	6823      	ldr	r3, [r4, #0]
 80086b4:	4639      	mov	r1, r7
 80086b6:	4630      	mov	r0, r6
 80086b8:	eb04 0903 	add.w	r9, r4, r3
 80086bc:	f000 fc6c 	bl	8008f98 <_sbrk_r>
 80086c0:	4581      	cmp	r9, r0
 80086c2:	d142      	bne.n	800874a <_malloc_r+0xea>
 80086c4:	6821      	ldr	r1, [r4, #0]
 80086c6:	1a6d      	subs	r5, r5, r1
 80086c8:	4629      	mov	r1, r5
 80086ca:	4630      	mov	r0, r6
 80086cc:	f7ff ffa6 	bl	800861c <sbrk_aligned>
 80086d0:	3001      	adds	r0, #1
 80086d2:	d03a      	beq.n	800874a <_malloc_r+0xea>
 80086d4:	6823      	ldr	r3, [r4, #0]
 80086d6:	442b      	add	r3, r5
 80086d8:	6023      	str	r3, [r4, #0]
 80086da:	f8d8 3000 	ldr.w	r3, [r8]
 80086de:	685a      	ldr	r2, [r3, #4]
 80086e0:	bb62      	cbnz	r2, 800873c <_malloc_r+0xdc>
 80086e2:	f8c8 7000 	str.w	r7, [r8]
 80086e6:	e00f      	b.n	8008708 <_malloc_r+0xa8>
 80086e8:	6822      	ldr	r2, [r4, #0]
 80086ea:	1b52      	subs	r2, r2, r5
 80086ec:	d420      	bmi.n	8008730 <_malloc_r+0xd0>
 80086ee:	2a0b      	cmp	r2, #11
 80086f0:	d917      	bls.n	8008722 <_malloc_r+0xc2>
 80086f2:	1961      	adds	r1, r4, r5
 80086f4:	42a3      	cmp	r3, r4
 80086f6:	6025      	str	r5, [r4, #0]
 80086f8:	bf18      	it	ne
 80086fa:	6059      	strne	r1, [r3, #4]
 80086fc:	6863      	ldr	r3, [r4, #4]
 80086fe:	bf08      	it	eq
 8008700:	f8c8 1000 	streq.w	r1, [r8]
 8008704:	5162      	str	r2, [r4, r5]
 8008706:	604b      	str	r3, [r1, #4]
 8008708:	4630      	mov	r0, r6
 800870a:	f000 f82f 	bl	800876c <__malloc_unlock>
 800870e:	f104 000b 	add.w	r0, r4, #11
 8008712:	1d23      	adds	r3, r4, #4
 8008714:	f020 0007 	bic.w	r0, r0, #7
 8008718:	1ac2      	subs	r2, r0, r3
 800871a:	bf1c      	itt	ne
 800871c:	1a1b      	subne	r3, r3, r0
 800871e:	50a3      	strne	r3, [r4, r2]
 8008720:	e7af      	b.n	8008682 <_malloc_r+0x22>
 8008722:	6862      	ldr	r2, [r4, #4]
 8008724:	42a3      	cmp	r3, r4
 8008726:	bf0c      	ite	eq
 8008728:	f8c8 2000 	streq.w	r2, [r8]
 800872c:	605a      	strne	r2, [r3, #4]
 800872e:	e7eb      	b.n	8008708 <_malloc_r+0xa8>
 8008730:	4623      	mov	r3, r4
 8008732:	6864      	ldr	r4, [r4, #4]
 8008734:	e7ae      	b.n	8008694 <_malloc_r+0x34>
 8008736:	463c      	mov	r4, r7
 8008738:	687f      	ldr	r7, [r7, #4]
 800873a:	e7b6      	b.n	80086aa <_malloc_r+0x4a>
 800873c:	461a      	mov	r2, r3
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	42a3      	cmp	r3, r4
 8008742:	d1fb      	bne.n	800873c <_malloc_r+0xdc>
 8008744:	2300      	movs	r3, #0
 8008746:	6053      	str	r3, [r2, #4]
 8008748:	e7de      	b.n	8008708 <_malloc_r+0xa8>
 800874a:	230c      	movs	r3, #12
 800874c:	6033      	str	r3, [r6, #0]
 800874e:	4630      	mov	r0, r6
 8008750:	f000 f80c 	bl	800876c <__malloc_unlock>
 8008754:	e794      	b.n	8008680 <_malloc_r+0x20>
 8008756:	6005      	str	r5, [r0, #0]
 8008758:	e7d6      	b.n	8008708 <_malloc_r+0xa8>
 800875a:	bf00      	nop
 800875c:	20004a78 	.word	0x20004a78

08008760 <__malloc_lock>:
 8008760:	4801      	ldr	r0, [pc, #4]	@ (8008768 <__malloc_lock+0x8>)
 8008762:	f7ff bf00 	b.w	8008566 <__retarget_lock_acquire_recursive>
 8008766:	bf00      	nop
 8008768:	20004a70 	.word	0x20004a70

0800876c <__malloc_unlock>:
 800876c:	4801      	ldr	r0, [pc, #4]	@ (8008774 <__malloc_unlock+0x8>)
 800876e:	f7ff befb 	b.w	8008568 <__retarget_lock_release_recursive>
 8008772:	bf00      	nop
 8008774:	20004a70 	.word	0x20004a70

08008778 <__sfputc_r>:
 8008778:	6893      	ldr	r3, [r2, #8]
 800877a:	3b01      	subs	r3, #1
 800877c:	2b00      	cmp	r3, #0
 800877e:	b410      	push	{r4}
 8008780:	6093      	str	r3, [r2, #8]
 8008782:	da08      	bge.n	8008796 <__sfputc_r+0x1e>
 8008784:	6994      	ldr	r4, [r2, #24]
 8008786:	42a3      	cmp	r3, r4
 8008788:	db01      	blt.n	800878e <__sfputc_r+0x16>
 800878a:	290a      	cmp	r1, #10
 800878c:	d103      	bne.n	8008796 <__sfputc_r+0x1e>
 800878e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008792:	f000 bb6d 	b.w	8008e70 <__swbuf_r>
 8008796:	6813      	ldr	r3, [r2, #0]
 8008798:	1c58      	adds	r0, r3, #1
 800879a:	6010      	str	r0, [r2, #0]
 800879c:	7019      	strb	r1, [r3, #0]
 800879e:	4608      	mov	r0, r1
 80087a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087a4:	4770      	bx	lr

080087a6 <__sfputs_r>:
 80087a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087a8:	4606      	mov	r6, r0
 80087aa:	460f      	mov	r7, r1
 80087ac:	4614      	mov	r4, r2
 80087ae:	18d5      	adds	r5, r2, r3
 80087b0:	42ac      	cmp	r4, r5
 80087b2:	d101      	bne.n	80087b8 <__sfputs_r+0x12>
 80087b4:	2000      	movs	r0, #0
 80087b6:	e007      	b.n	80087c8 <__sfputs_r+0x22>
 80087b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087bc:	463a      	mov	r2, r7
 80087be:	4630      	mov	r0, r6
 80087c0:	f7ff ffda 	bl	8008778 <__sfputc_r>
 80087c4:	1c43      	adds	r3, r0, #1
 80087c6:	d1f3      	bne.n	80087b0 <__sfputs_r+0xa>
 80087c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080087cc <_vfiprintf_r>:
 80087cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d0:	460d      	mov	r5, r1
 80087d2:	b09d      	sub	sp, #116	@ 0x74
 80087d4:	4614      	mov	r4, r2
 80087d6:	4698      	mov	r8, r3
 80087d8:	4606      	mov	r6, r0
 80087da:	b118      	cbz	r0, 80087e4 <_vfiprintf_r+0x18>
 80087dc:	6a03      	ldr	r3, [r0, #32]
 80087de:	b90b      	cbnz	r3, 80087e4 <_vfiprintf_r+0x18>
 80087e0:	f7ff fd66 	bl	80082b0 <__sinit>
 80087e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087e6:	07d9      	lsls	r1, r3, #31
 80087e8:	d405      	bmi.n	80087f6 <_vfiprintf_r+0x2a>
 80087ea:	89ab      	ldrh	r3, [r5, #12]
 80087ec:	059a      	lsls	r2, r3, #22
 80087ee:	d402      	bmi.n	80087f6 <_vfiprintf_r+0x2a>
 80087f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087f2:	f7ff feb8 	bl	8008566 <__retarget_lock_acquire_recursive>
 80087f6:	89ab      	ldrh	r3, [r5, #12]
 80087f8:	071b      	lsls	r3, r3, #28
 80087fa:	d501      	bpl.n	8008800 <_vfiprintf_r+0x34>
 80087fc:	692b      	ldr	r3, [r5, #16]
 80087fe:	b99b      	cbnz	r3, 8008828 <_vfiprintf_r+0x5c>
 8008800:	4629      	mov	r1, r5
 8008802:	4630      	mov	r0, r6
 8008804:	f000 fb72 	bl	8008eec <__swsetup_r>
 8008808:	b170      	cbz	r0, 8008828 <_vfiprintf_r+0x5c>
 800880a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800880c:	07dc      	lsls	r4, r3, #31
 800880e:	d504      	bpl.n	800881a <_vfiprintf_r+0x4e>
 8008810:	f04f 30ff 	mov.w	r0, #4294967295
 8008814:	b01d      	add	sp, #116	@ 0x74
 8008816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800881a:	89ab      	ldrh	r3, [r5, #12]
 800881c:	0598      	lsls	r0, r3, #22
 800881e:	d4f7      	bmi.n	8008810 <_vfiprintf_r+0x44>
 8008820:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008822:	f7ff fea1 	bl	8008568 <__retarget_lock_release_recursive>
 8008826:	e7f3      	b.n	8008810 <_vfiprintf_r+0x44>
 8008828:	2300      	movs	r3, #0
 800882a:	9309      	str	r3, [sp, #36]	@ 0x24
 800882c:	2320      	movs	r3, #32
 800882e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008832:	f8cd 800c 	str.w	r8, [sp, #12]
 8008836:	2330      	movs	r3, #48	@ 0x30
 8008838:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80089e8 <_vfiprintf_r+0x21c>
 800883c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008840:	f04f 0901 	mov.w	r9, #1
 8008844:	4623      	mov	r3, r4
 8008846:	469a      	mov	sl, r3
 8008848:	f813 2b01 	ldrb.w	r2, [r3], #1
 800884c:	b10a      	cbz	r2, 8008852 <_vfiprintf_r+0x86>
 800884e:	2a25      	cmp	r2, #37	@ 0x25
 8008850:	d1f9      	bne.n	8008846 <_vfiprintf_r+0x7a>
 8008852:	ebba 0b04 	subs.w	fp, sl, r4
 8008856:	d00b      	beq.n	8008870 <_vfiprintf_r+0xa4>
 8008858:	465b      	mov	r3, fp
 800885a:	4622      	mov	r2, r4
 800885c:	4629      	mov	r1, r5
 800885e:	4630      	mov	r0, r6
 8008860:	f7ff ffa1 	bl	80087a6 <__sfputs_r>
 8008864:	3001      	adds	r0, #1
 8008866:	f000 80a7 	beq.w	80089b8 <_vfiprintf_r+0x1ec>
 800886a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800886c:	445a      	add	r2, fp
 800886e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008870:	f89a 3000 	ldrb.w	r3, [sl]
 8008874:	2b00      	cmp	r3, #0
 8008876:	f000 809f 	beq.w	80089b8 <_vfiprintf_r+0x1ec>
 800887a:	2300      	movs	r3, #0
 800887c:	f04f 32ff 	mov.w	r2, #4294967295
 8008880:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008884:	f10a 0a01 	add.w	sl, sl, #1
 8008888:	9304      	str	r3, [sp, #16]
 800888a:	9307      	str	r3, [sp, #28]
 800888c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008890:	931a      	str	r3, [sp, #104]	@ 0x68
 8008892:	4654      	mov	r4, sl
 8008894:	2205      	movs	r2, #5
 8008896:	f814 1b01 	ldrb.w	r1, [r4], #1
 800889a:	4853      	ldr	r0, [pc, #332]	@ (80089e8 <_vfiprintf_r+0x21c>)
 800889c:	f7f7 fca8 	bl	80001f0 <memchr>
 80088a0:	9a04      	ldr	r2, [sp, #16]
 80088a2:	b9d8      	cbnz	r0, 80088dc <_vfiprintf_r+0x110>
 80088a4:	06d1      	lsls	r1, r2, #27
 80088a6:	bf44      	itt	mi
 80088a8:	2320      	movmi	r3, #32
 80088aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088ae:	0713      	lsls	r3, r2, #28
 80088b0:	bf44      	itt	mi
 80088b2:	232b      	movmi	r3, #43	@ 0x2b
 80088b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088b8:	f89a 3000 	ldrb.w	r3, [sl]
 80088bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80088be:	d015      	beq.n	80088ec <_vfiprintf_r+0x120>
 80088c0:	9a07      	ldr	r2, [sp, #28]
 80088c2:	4654      	mov	r4, sl
 80088c4:	2000      	movs	r0, #0
 80088c6:	f04f 0c0a 	mov.w	ip, #10
 80088ca:	4621      	mov	r1, r4
 80088cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088d0:	3b30      	subs	r3, #48	@ 0x30
 80088d2:	2b09      	cmp	r3, #9
 80088d4:	d94b      	bls.n	800896e <_vfiprintf_r+0x1a2>
 80088d6:	b1b0      	cbz	r0, 8008906 <_vfiprintf_r+0x13a>
 80088d8:	9207      	str	r2, [sp, #28]
 80088da:	e014      	b.n	8008906 <_vfiprintf_r+0x13a>
 80088dc:	eba0 0308 	sub.w	r3, r0, r8
 80088e0:	fa09 f303 	lsl.w	r3, r9, r3
 80088e4:	4313      	orrs	r3, r2
 80088e6:	9304      	str	r3, [sp, #16]
 80088e8:	46a2      	mov	sl, r4
 80088ea:	e7d2      	b.n	8008892 <_vfiprintf_r+0xc6>
 80088ec:	9b03      	ldr	r3, [sp, #12]
 80088ee:	1d19      	adds	r1, r3, #4
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	9103      	str	r1, [sp, #12]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	bfbb      	ittet	lt
 80088f8:	425b      	neglt	r3, r3
 80088fa:	f042 0202 	orrlt.w	r2, r2, #2
 80088fe:	9307      	strge	r3, [sp, #28]
 8008900:	9307      	strlt	r3, [sp, #28]
 8008902:	bfb8      	it	lt
 8008904:	9204      	strlt	r2, [sp, #16]
 8008906:	7823      	ldrb	r3, [r4, #0]
 8008908:	2b2e      	cmp	r3, #46	@ 0x2e
 800890a:	d10a      	bne.n	8008922 <_vfiprintf_r+0x156>
 800890c:	7863      	ldrb	r3, [r4, #1]
 800890e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008910:	d132      	bne.n	8008978 <_vfiprintf_r+0x1ac>
 8008912:	9b03      	ldr	r3, [sp, #12]
 8008914:	1d1a      	adds	r2, r3, #4
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	9203      	str	r2, [sp, #12]
 800891a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800891e:	3402      	adds	r4, #2
 8008920:	9305      	str	r3, [sp, #20]
 8008922:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80089f8 <_vfiprintf_r+0x22c>
 8008926:	7821      	ldrb	r1, [r4, #0]
 8008928:	2203      	movs	r2, #3
 800892a:	4650      	mov	r0, sl
 800892c:	f7f7 fc60 	bl	80001f0 <memchr>
 8008930:	b138      	cbz	r0, 8008942 <_vfiprintf_r+0x176>
 8008932:	9b04      	ldr	r3, [sp, #16]
 8008934:	eba0 000a 	sub.w	r0, r0, sl
 8008938:	2240      	movs	r2, #64	@ 0x40
 800893a:	4082      	lsls	r2, r0
 800893c:	4313      	orrs	r3, r2
 800893e:	3401      	adds	r4, #1
 8008940:	9304      	str	r3, [sp, #16]
 8008942:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008946:	4829      	ldr	r0, [pc, #164]	@ (80089ec <_vfiprintf_r+0x220>)
 8008948:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800894c:	2206      	movs	r2, #6
 800894e:	f7f7 fc4f 	bl	80001f0 <memchr>
 8008952:	2800      	cmp	r0, #0
 8008954:	d03f      	beq.n	80089d6 <_vfiprintf_r+0x20a>
 8008956:	4b26      	ldr	r3, [pc, #152]	@ (80089f0 <_vfiprintf_r+0x224>)
 8008958:	bb1b      	cbnz	r3, 80089a2 <_vfiprintf_r+0x1d6>
 800895a:	9b03      	ldr	r3, [sp, #12]
 800895c:	3307      	adds	r3, #7
 800895e:	f023 0307 	bic.w	r3, r3, #7
 8008962:	3308      	adds	r3, #8
 8008964:	9303      	str	r3, [sp, #12]
 8008966:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008968:	443b      	add	r3, r7
 800896a:	9309      	str	r3, [sp, #36]	@ 0x24
 800896c:	e76a      	b.n	8008844 <_vfiprintf_r+0x78>
 800896e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008972:	460c      	mov	r4, r1
 8008974:	2001      	movs	r0, #1
 8008976:	e7a8      	b.n	80088ca <_vfiprintf_r+0xfe>
 8008978:	2300      	movs	r3, #0
 800897a:	3401      	adds	r4, #1
 800897c:	9305      	str	r3, [sp, #20]
 800897e:	4619      	mov	r1, r3
 8008980:	f04f 0c0a 	mov.w	ip, #10
 8008984:	4620      	mov	r0, r4
 8008986:	f810 2b01 	ldrb.w	r2, [r0], #1
 800898a:	3a30      	subs	r2, #48	@ 0x30
 800898c:	2a09      	cmp	r2, #9
 800898e:	d903      	bls.n	8008998 <_vfiprintf_r+0x1cc>
 8008990:	2b00      	cmp	r3, #0
 8008992:	d0c6      	beq.n	8008922 <_vfiprintf_r+0x156>
 8008994:	9105      	str	r1, [sp, #20]
 8008996:	e7c4      	b.n	8008922 <_vfiprintf_r+0x156>
 8008998:	fb0c 2101 	mla	r1, ip, r1, r2
 800899c:	4604      	mov	r4, r0
 800899e:	2301      	movs	r3, #1
 80089a0:	e7f0      	b.n	8008984 <_vfiprintf_r+0x1b8>
 80089a2:	ab03      	add	r3, sp, #12
 80089a4:	9300      	str	r3, [sp, #0]
 80089a6:	462a      	mov	r2, r5
 80089a8:	4b12      	ldr	r3, [pc, #72]	@ (80089f4 <_vfiprintf_r+0x228>)
 80089aa:	a904      	add	r1, sp, #16
 80089ac:	4630      	mov	r0, r6
 80089ae:	f3af 8000 	nop.w
 80089b2:	4607      	mov	r7, r0
 80089b4:	1c78      	adds	r0, r7, #1
 80089b6:	d1d6      	bne.n	8008966 <_vfiprintf_r+0x19a>
 80089b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80089ba:	07d9      	lsls	r1, r3, #31
 80089bc:	d405      	bmi.n	80089ca <_vfiprintf_r+0x1fe>
 80089be:	89ab      	ldrh	r3, [r5, #12]
 80089c0:	059a      	lsls	r2, r3, #22
 80089c2:	d402      	bmi.n	80089ca <_vfiprintf_r+0x1fe>
 80089c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80089c6:	f7ff fdcf 	bl	8008568 <__retarget_lock_release_recursive>
 80089ca:	89ab      	ldrh	r3, [r5, #12]
 80089cc:	065b      	lsls	r3, r3, #25
 80089ce:	f53f af1f 	bmi.w	8008810 <_vfiprintf_r+0x44>
 80089d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089d4:	e71e      	b.n	8008814 <_vfiprintf_r+0x48>
 80089d6:	ab03      	add	r3, sp, #12
 80089d8:	9300      	str	r3, [sp, #0]
 80089da:	462a      	mov	r2, r5
 80089dc:	4b05      	ldr	r3, [pc, #20]	@ (80089f4 <_vfiprintf_r+0x228>)
 80089de:	a904      	add	r1, sp, #16
 80089e0:	4630      	mov	r0, r6
 80089e2:	f000 f879 	bl	8008ad8 <_printf_i>
 80089e6:	e7e4      	b.n	80089b2 <_vfiprintf_r+0x1e6>
 80089e8:	08009178 	.word	0x08009178
 80089ec:	08009182 	.word	0x08009182
 80089f0:	00000000 	.word	0x00000000
 80089f4:	080087a7 	.word	0x080087a7
 80089f8:	0800917e 	.word	0x0800917e

080089fc <_printf_common>:
 80089fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a00:	4616      	mov	r6, r2
 8008a02:	4698      	mov	r8, r3
 8008a04:	688a      	ldr	r2, [r1, #8]
 8008a06:	690b      	ldr	r3, [r1, #16]
 8008a08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	bfb8      	it	lt
 8008a10:	4613      	movlt	r3, r2
 8008a12:	6033      	str	r3, [r6, #0]
 8008a14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008a18:	4607      	mov	r7, r0
 8008a1a:	460c      	mov	r4, r1
 8008a1c:	b10a      	cbz	r2, 8008a22 <_printf_common+0x26>
 8008a1e:	3301      	adds	r3, #1
 8008a20:	6033      	str	r3, [r6, #0]
 8008a22:	6823      	ldr	r3, [r4, #0]
 8008a24:	0699      	lsls	r1, r3, #26
 8008a26:	bf42      	ittt	mi
 8008a28:	6833      	ldrmi	r3, [r6, #0]
 8008a2a:	3302      	addmi	r3, #2
 8008a2c:	6033      	strmi	r3, [r6, #0]
 8008a2e:	6825      	ldr	r5, [r4, #0]
 8008a30:	f015 0506 	ands.w	r5, r5, #6
 8008a34:	d106      	bne.n	8008a44 <_printf_common+0x48>
 8008a36:	f104 0a19 	add.w	sl, r4, #25
 8008a3a:	68e3      	ldr	r3, [r4, #12]
 8008a3c:	6832      	ldr	r2, [r6, #0]
 8008a3e:	1a9b      	subs	r3, r3, r2
 8008a40:	42ab      	cmp	r3, r5
 8008a42:	dc26      	bgt.n	8008a92 <_printf_common+0x96>
 8008a44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008a48:	6822      	ldr	r2, [r4, #0]
 8008a4a:	3b00      	subs	r3, #0
 8008a4c:	bf18      	it	ne
 8008a4e:	2301      	movne	r3, #1
 8008a50:	0692      	lsls	r2, r2, #26
 8008a52:	d42b      	bmi.n	8008aac <_printf_common+0xb0>
 8008a54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008a58:	4641      	mov	r1, r8
 8008a5a:	4638      	mov	r0, r7
 8008a5c:	47c8      	blx	r9
 8008a5e:	3001      	adds	r0, #1
 8008a60:	d01e      	beq.n	8008aa0 <_printf_common+0xa4>
 8008a62:	6823      	ldr	r3, [r4, #0]
 8008a64:	6922      	ldr	r2, [r4, #16]
 8008a66:	f003 0306 	and.w	r3, r3, #6
 8008a6a:	2b04      	cmp	r3, #4
 8008a6c:	bf02      	ittt	eq
 8008a6e:	68e5      	ldreq	r5, [r4, #12]
 8008a70:	6833      	ldreq	r3, [r6, #0]
 8008a72:	1aed      	subeq	r5, r5, r3
 8008a74:	68a3      	ldr	r3, [r4, #8]
 8008a76:	bf0c      	ite	eq
 8008a78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a7c:	2500      	movne	r5, #0
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	bfc4      	itt	gt
 8008a82:	1a9b      	subgt	r3, r3, r2
 8008a84:	18ed      	addgt	r5, r5, r3
 8008a86:	2600      	movs	r6, #0
 8008a88:	341a      	adds	r4, #26
 8008a8a:	42b5      	cmp	r5, r6
 8008a8c:	d11a      	bne.n	8008ac4 <_printf_common+0xc8>
 8008a8e:	2000      	movs	r0, #0
 8008a90:	e008      	b.n	8008aa4 <_printf_common+0xa8>
 8008a92:	2301      	movs	r3, #1
 8008a94:	4652      	mov	r2, sl
 8008a96:	4641      	mov	r1, r8
 8008a98:	4638      	mov	r0, r7
 8008a9a:	47c8      	blx	r9
 8008a9c:	3001      	adds	r0, #1
 8008a9e:	d103      	bne.n	8008aa8 <_printf_common+0xac>
 8008aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aa8:	3501      	adds	r5, #1
 8008aaa:	e7c6      	b.n	8008a3a <_printf_common+0x3e>
 8008aac:	18e1      	adds	r1, r4, r3
 8008aae:	1c5a      	adds	r2, r3, #1
 8008ab0:	2030      	movs	r0, #48	@ 0x30
 8008ab2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008ab6:	4422      	add	r2, r4
 8008ab8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008abc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008ac0:	3302      	adds	r3, #2
 8008ac2:	e7c7      	b.n	8008a54 <_printf_common+0x58>
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	4622      	mov	r2, r4
 8008ac8:	4641      	mov	r1, r8
 8008aca:	4638      	mov	r0, r7
 8008acc:	47c8      	blx	r9
 8008ace:	3001      	adds	r0, #1
 8008ad0:	d0e6      	beq.n	8008aa0 <_printf_common+0xa4>
 8008ad2:	3601      	adds	r6, #1
 8008ad4:	e7d9      	b.n	8008a8a <_printf_common+0x8e>
	...

08008ad8 <_printf_i>:
 8008ad8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008adc:	7e0f      	ldrb	r7, [r1, #24]
 8008ade:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008ae0:	2f78      	cmp	r7, #120	@ 0x78
 8008ae2:	4691      	mov	r9, r2
 8008ae4:	4680      	mov	r8, r0
 8008ae6:	460c      	mov	r4, r1
 8008ae8:	469a      	mov	sl, r3
 8008aea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008aee:	d807      	bhi.n	8008b00 <_printf_i+0x28>
 8008af0:	2f62      	cmp	r7, #98	@ 0x62
 8008af2:	d80a      	bhi.n	8008b0a <_printf_i+0x32>
 8008af4:	2f00      	cmp	r7, #0
 8008af6:	f000 80d2 	beq.w	8008c9e <_printf_i+0x1c6>
 8008afa:	2f58      	cmp	r7, #88	@ 0x58
 8008afc:	f000 80b9 	beq.w	8008c72 <_printf_i+0x19a>
 8008b00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008b08:	e03a      	b.n	8008b80 <_printf_i+0xa8>
 8008b0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008b0e:	2b15      	cmp	r3, #21
 8008b10:	d8f6      	bhi.n	8008b00 <_printf_i+0x28>
 8008b12:	a101      	add	r1, pc, #4	@ (adr r1, 8008b18 <_printf_i+0x40>)
 8008b14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b18:	08008b71 	.word	0x08008b71
 8008b1c:	08008b85 	.word	0x08008b85
 8008b20:	08008b01 	.word	0x08008b01
 8008b24:	08008b01 	.word	0x08008b01
 8008b28:	08008b01 	.word	0x08008b01
 8008b2c:	08008b01 	.word	0x08008b01
 8008b30:	08008b85 	.word	0x08008b85
 8008b34:	08008b01 	.word	0x08008b01
 8008b38:	08008b01 	.word	0x08008b01
 8008b3c:	08008b01 	.word	0x08008b01
 8008b40:	08008b01 	.word	0x08008b01
 8008b44:	08008c85 	.word	0x08008c85
 8008b48:	08008baf 	.word	0x08008baf
 8008b4c:	08008c3f 	.word	0x08008c3f
 8008b50:	08008b01 	.word	0x08008b01
 8008b54:	08008b01 	.word	0x08008b01
 8008b58:	08008ca7 	.word	0x08008ca7
 8008b5c:	08008b01 	.word	0x08008b01
 8008b60:	08008baf 	.word	0x08008baf
 8008b64:	08008b01 	.word	0x08008b01
 8008b68:	08008b01 	.word	0x08008b01
 8008b6c:	08008c47 	.word	0x08008c47
 8008b70:	6833      	ldr	r3, [r6, #0]
 8008b72:	1d1a      	adds	r2, r3, #4
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	6032      	str	r2, [r6, #0]
 8008b78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b80:	2301      	movs	r3, #1
 8008b82:	e09d      	b.n	8008cc0 <_printf_i+0x1e8>
 8008b84:	6833      	ldr	r3, [r6, #0]
 8008b86:	6820      	ldr	r0, [r4, #0]
 8008b88:	1d19      	adds	r1, r3, #4
 8008b8a:	6031      	str	r1, [r6, #0]
 8008b8c:	0606      	lsls	r6, r0, #24
 8008b8e:	d501      	bpl.n	8008b94 <_printf_i+0xbc>
 8008b90:	681d      	ldr	r5, [r3, #0]
 8008b92:	e003      	b.n	8008b9c <_printf_i+0xc4>
 8008b94:	0645      	lsls	r5, r0, #25
 8008b96:	d5fb      	bpl.n	8008b90 <_printf_i+0xb8>
 8008b98:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008b9c:	2d00      	cmp	r5, #0
 8008b9e:	da03      	bge.n	8008ba8 <_printf_i+0xd0>
 8008ba0:	232d      	movs	r3, #45	@ 0x2d
 8008ba2:	426d      	negs	r5, r5
 8008ba4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ba8:	4859      	ldr	r0, [pc, #356]	@ (8008d10 <_printf_i+0x238>)
 8008baa:	230a      	movs	r3, #10
 8008bac:	e011      	b.n	8008bd2 <_printf_i+0xfa>
 8008bae:	6821      	ldr	r1, [r4, #0]
 8008bb0:	6833      	ldr	r3, [r6, #0]
 8008bb2:	0608      	lsls	r0, r1, #24
 8008bb4:	f853 5b04 	ldr.w	r5, [r3], #4
 8008bb8:	d402      	bmi.n	8008bc0 <_printf_i+0xe8>
 8008bba:	0649      	lsls	r1, r1, #25
 8008bbc:	bf48      	it	mi
 8008bbe:	b2ad      	uxthmi	r5, r5
 8008bc0:	2f6f      	cmp	r7, #111	@ 0x6f
 8008bc2:	4853      	ldr	r0, [pc, #332]	@ (8008d10 <_printf_i+0x238>)
 8008bc4:	6033      	str	r3, [r6, #0]
 8008bc6:	bf14      	ite	ne
 8008bc8:	230a      	movne	r3, #10
 8008bca:	2308      	moveq	r3, #8
 8008bcc:	2100      	movs	r1, #0
 8008bce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008bd2:	6866      	ldr	r6, [r4, #4]
 8008bd4:	60a6      	str	r6, [r4, #8]
 8008bd6:	2e00      	cmp	r6, #0
 8008bd8:	bfa2      	ittt	ge
 8008bda:	6821      	ldrge	r1, [r4, #0]
 8008bdc:	f021 0104 	bicge.w	r1, r1, #4
 8008be0:	6021      	strge	r1, [r4, #0]
 8008be2:	b90d      	cbnz	r5, 8008be8 <_printf_i+0x110>
 8008be4:	2e00      	cmp	r6, #0
 8008be6:	d04b      	beq.n	8008c80 <_printf_i+0x1a8>
 8008be8:	4616      	mov	r6, r2
 8008bea:	fbb5 f1f3 	udiv	r1, r5, r3
 8008bee:	fb03 5711 	mls	r7, r3, r1, r5
 8008bf2:	5dc7      	ldrb	r7, [r0, r7]
 8008bf4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008bf8:	462f      	mov	r7, r5
 8008bfa:	42bb      	cmp	r3, r7
 8008bfc:	460d      	mov	r5, r1
 8008bfe:	d9f4      	bls.n	8008bea <_printf_i+0x112>
 8008c00:	2b08      	cmp	r3, #8
 8008c02:	d10b      	bne.n	8008c1c <_printf_i+0x144>
 8008c04:	6823      	ldr	r3, [r4, #0]
 8008c06:	07df      	lsls	r7, r3, #31
 8008c08:	d508      	bpl.n	8008c1c <_printf_i+0x144>
 8008c0a:	6923      	ldr	r3, [r4, #16]
 8008c0c:	6861      	ldr	r1, [r4, #4]
 8008c0e:	4299      	cmp	r1, r3
 8008c10:	bfde      	ittt	le
 8008c12:	2330      	movle	r3, #48	@ 0x30
 8008c14:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008c18:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008c1c:	1b92      	subs	r2, r2, r6
 8008c1e:	6122      	str	r2, [r4, #16]
 8008c20:	f8cd a000 	str.w	sl, [sp]
 8008c24:	464b      	mov	r3, r9
 8008c26:	aa03      	add	r2, sp, #12
 8008c28:	4621      	mov	r1, r4
 8008c2a:	4640      	mov	r0, r8
 8008c2c:	f7ff fee6 	bl	80089fc <_printf_common>
 8008c30:	3001      	adds	r0, #1
 8008c32:	d14a      	bne.n	8008cca <_printf_i+0x1f2>
 8008c34:	f04f 30ff 	mov.w	r0, #4294967295
 8008c38:	b004      	add	sp, #16
 8008c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c3e:	6823      	ldr	r3, [r4, #0]
 8008c40:	f043 0320 	orr.w	r3, r3, #32
 8008c44:	6023      	str	r3, [r4, #0]
 8008c46:	4833      	ldr	r0, [pc, #204]	@ (8008d14 <_printf_i+0x23c>)
 8008c48:	2778      	movs	r7, #120	@ 0x78
 8008c4a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008c4e:	6823      	ldr	r3, [r4, #0]
 8008c50:	6831      	ldr	r1, [r6, #0]
 8008c52:	061f      	lsls	r7, r3, #24
 8008c54:	f851 5b04 	ldr.w	r5, [r1], #4
 8008c58:	d402      	bmi.n	8008c60 <_printf_i+0x188>
 8008c5a:	065f      	lsls	r7, r3, #25
 8008c5c:	bf48      	it	mi
 8008c5e:	b2ad      	uxthmi	r5, r5
 8008c60:	6031      	str	r1, [r6, #0]
 8008c62:	07d9      	lsls	r1, r3, #31
 8008c64:	bf44      	itt	mi
 8008c66:	f043 0320 	orrmi.w	r3, r3, #32
 8008c6a:	6023      	strmi	r3, [r4, #0]
 8008c6c:	b11d      	cbz	r5, 8008c76 <_printf_i+0x19e>
 8008c6e:	2310      	movs	r3, #16
 8008c70:	e7ac      	b.n	8008bcc <_printf_i+0xf4>
 8008c72:	4827      	ldr	r0, [pc, #156]	@ (8008d10 <_printf_i+0x238>)
 8008c74:	e7e9      	b.n	8008c4a <_printf_i+0x172>
 8008c76:	6823      	ldr	r3, [r4, #0]
 8008c78:	f023 0320 	bic.w	r3, r3, #32
 8008c7c:	6023      	str	r3, [r4, #0]
 8008c7e:	e7f6      	b.n	8008c6e <_printf_i+0x196>
 8008c80:	4616      	mov	r6, r2
 8008c82:	e7bd      	b.n	8008c00 <_printf_i+0x128>
 8008c84:	6833      	ldr	r3, [r6, #0]
 8008c86:	6825      	ldr	r5, [r4, #0]
 8008c88:	6961      	ldr	r1, [r4, #20]
 8008c8a:	1d18      	adds	r0, r3, #4
 8008c8c:	6030      	str	r0, [r6, #0]
 8008c8e:	062e      	lsls	r6, r5, #24
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	d501      	bpl.n	8008c98 <_printf_i+0x1c0>
 8008c94:	6019      	str	r1, [r3, #0]
 8008c96:	e002      	b.n	8008c9e <_printf_i+0x1c6>
 8008c98:	0668      	lsls	r0, r5, #25
 8008c9a:	d5fb      	bpl.n	8008c94 <_printf_i+0x1bc>
 8008c9c:	8019      	strh	r1, [r3, #0]
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	6123      	str	r3, [r4, #16]
 8008ca2:	4616      	mov	r6, r2
 8008ca4:	e7bc      	b.n	8008c20 <_printf_i+0x148>
 8008ca6:	6833      	ldr	r3, [r6, #0]
 8008ca8:	1d1a      	adds	r2, r3, #4
 8008caa:	6032      	str	r2, [r6, #0]
 8008cac:	681e      	ldr	r6, [r3, #0]
 8008cae:	6862      	ldr	r2, [r4, #4]
 8008cb0:	2100      	movs	r1, #0
 8008cb2:	4630      	mov	r0, r6
 8008cb4:	f7f7 fa9c 	bl	80001f0 <memchr>
 8008cb8:	b108      	cbz	r0, 8008cbe <_printf_i+0x1e6>
 8008cba:	1b80      	subs	r0, r0, r6
 8008cbc:	6060      	str	r0, [r4, #4]
 8008cbe:	6863      	ldr	r3, [r4, #4]
 8008cc0:	6123      	str	r3, [r4, #16]
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008cc8:	e7aa      	b.n	8008c20 <_printf_i+0x148>
 8008cca:	6923      	ldr	r3, [r4, #16]
 8008ccc:	4632      	mov	r2, r6
 8008cce:	4649      	mov	r1, r9
 8008cd0:	4640      	mov	r0, r8
 8008cd2:	47d0      	blx	sl
 8008cd4:	3001      	adds	r0, #1
 8008cd6:	d0ad      	beq.n	8008c34 <_printf_i+0x15c>
 8008cd8:	6823      	ldr	r3, [r4, #0]
 8008cda:	079b      	lsls	r3, r3, #30
 8008cdc:	d413      	bmi.n	8008d06 <_printf_i+0x22e>
 8008cde:	68e0      	ldr	r0, [r4, #12]
 8008ce0:	9b03      	ldr	r3, [sp, #12]
 8008ce2:	4298      	cmp	r0, r3
 8008ce4:	bfb8      	it	lt
 8008ce6:	4618      	movlt	r0, r3
 8008ce8:	e7a6      	b.n	8008c38 <_printf_i+0x160>
 8008cea:	2301      	movs	r3, #1
 8008cec:	4632      	mov	r2, r6
 8008cee:	4649      	mov	r1, r9
 8008cf0:	4640      	mov	r0, r8
 8008cf2:	47d0      	blx	sl
 8008cf4:	3001      	adds	r0, #1
 8008cf6:	d09d      	beq.n	8008c34 <_printf_i+0x15c>
 8008cf8:	3501      	adds	r5, #1
 8008cfa:	68e3      	ldr	r3, [r4, #12]
 8008cfc:	9903      	ldr	r1, [sp, #12]
 8008cfe:	1a5b      	subs	r3, r3, r1
 8008d00:	42ab      	cmp	r3, r5
 8008d02:	dcf2      	bgt.n	8008cea <_printf_i+0x212>
 8008d04:	e7eb      	b.n	8008cde <_printf_i+0x206>
 8008d06:	2500      	movs	r5, #0
 8008d08:	f104 0619 	add.w	r6, r4, #25
 8008d0c:	e7f5      	b.n	8008cfa <_printf_i+0x222>
 8008d0e:	bf00      	nop
 8008d10:	08009189 	.word	0x08009189
 8008d14:	0800919a 	.word	0x0800919a

08008d18 <__sflush_r>:
 8008d18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d20:	0716      	lsls	r6, r2, #28
 8008d22:	4605      	mov	r5, r0
 8008d24:	460c      	mov	r4, r1
 8008d26:	d454      	bmi.n	8008dd2 <__sflush_r+0xba>
 8008d28:	684b      	ldr	r3, [r1, #4]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	dc02      	bgt.n	8008d34 <__sflush_r+0x1c>
 8008d2e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	dd48      	ble.n	8008dc6 <__sflush_r+0xae>
 8008d34:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d36:	2e00      	cmp	r6, #0
 8008d38:	d045      	beq.n	8008dc6 <__sflush_r+0xae>
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008d40:	682f      	ldr	r7, [r5, #0]
 8008d42:	6a21      	ldr	r1, [r4, #32]
 8008d44:	602b      	str	r3, [r5, #0]
 8008d46:	d030      	beq.n	8008daa <__sflush_r+0x92>
 8008d48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008d4a:	89a3      	ldrh	r3, [r4, #12]
 8008d4c:	0759      	lsls	r1, r3, #29
 8008d4e:	d505      	bpl.n	8008d5c <__sflush_r+0x44>
 8008d50:	6863      	ldr	r3, [r4, #4]
 8008d52:	1ad2      	subs	r2, r2, r3
 8008d54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008d56:	b10b      	cbz	r3, 8008d5c <__sflush_r+0x44>
 8008d58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008d5a:	1ad2      	subs	r2, r2, r3
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d60:	6a21      	ldr	r1, [r4, #32]
 8008d62:	4628      	mov	r0, r5
 8008d64:	47b0      	blx	r6
 8008d66:	1c43      	adds	r3, r0, #1
 8008d68:	89a3      	ldrh	r3, [r4, #12]
 8008d6a:	d106      	bne.n	8008d7a <__sflush_r+0x62>
 8008d6c:	6829      	ldr	r1, [r5, #0]
 8008d6e:	291d      	cmp	r1, #29
 8008d70:	d82b      	bhi.n	8008dca <__sflush_r+0xb2>
 8008d72:	4a2a      	ldr	r2, [pc, #168]	@ (8008e1c <__sflush_r+0x104>)
 8008d74:	410a      	asrs	r2, r1
 8008d76:	07d6      	lsls	r6, r2, #31
 8008d78:	d427      	bmi.n	8008dca <__sflush_r+0xb2>
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	6062      	str	r2, [r4, #4]
 8008d7e:	04d9      	lsls	r1, r3, #19
 8008d80:	6922      	ldr	r2, [r4, #16]
 8008d82:	6022      	str	r2, [r4, #0]
 8008d84:	d504      	bpl.n	8008d90 <__sflush_r+0x78>
 8008d86:	1c42      	adds	r2, r0, #1
 8008d88:	d101      	bne.n	8008d8e <__sflush_r+0x76>
 8008d8a:	682b      	ldr	r3, [r5, #0]
 8008d8c:	b903      	cbnz	r3, 8008d90 <__sflush_r+0x78>
 8008d8e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008d90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d92:	602f      	str	r7, [r5, #0]
 8008d94:	b1b9      	cbz	r1, 8008dc6 <__sflush_r+0xae>
 8008d96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d9a:	4299      	cmp	r1, r3
 8008d9c:	d002      	beq.n	8008da4 <__sflush_r+0x8c>
 8008d9e:	4628      	mov	r0, r5
 8008da0:	f7ff fbf2 	bl	8008588 <_free_r>
 8008da4:	2300      	movs	r3, #0
 8008da6:	6363      	str	r3, [r4, #52]	@ 0x34
 8008da8:	e00d      	b.n	8008dc6 <__sflush_r+0xae>
 8008daa:	2301      	movs	r3, #1
 8008dac:	4628      	mov	r0, r5
 8008dae:	47b0      	blx	r6
 8008db0:	4602      	mov	r2, r0
 8008db2:	1c50      	adds	r0, r2, #1
 8008db4:	d1c9      	bne.n	8008d4a <__sflush_r+0x32>
 8008db6:	682b      	ldr	r3, [r5, #0]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d0c6      	beq.n	8008d4a <__sflush_r+0x32>
 8008dbc:	2b1d      	cmp	r3, #29
 8008dbe:	d001      	beq.n	8008dc4 <__sflush_r+0xac>
 8008dc0:	2b16      	cmp	r3, #22
 8008dc2:	d11e      	bne.n	8008e02 <__sflush_r+0xea>
 8008dc4:	602f      	str	r7, [r5, #0]
 8008dc6:	2000      	movs	r0, #0
 8008dc8:	e022      	b.n	8008e10 <__sflush_r+0xf8>
 8008dca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008dce:	b21b      	sxth	r3, r3
 8008dd0:	e01b      	b.n	8008e0a <__sflush_r+0xf2>
 8008dd2:	690f      	ldr	r7, [r1, #16]
 8008dd4:	2f00      	cmp	r7, #0
 8008dd6:	d0f6      	beq.n	8008dc6 <__sflush_r+0xae>
 8008dd8:	0793      	lsls	r3, r2, #30
 8008dda:	680e      	ldr	r6, [r1, #0]
 8008ddc:	bf08      	it	eq
 8008dde:	694b      	ldreq	r3, [r1, #20]
 8008de0:	600f      	str	r7, [r1, #0]
 8008de2:	bf18      	it	ne
 8008de4:	2300      	movne	r3, #0
 8008de6:	eba6 0807 	sub.w	r8, r6, r7
 8008dea:	608b      	str	r3, [r1, #8]
 8008dec:	f1b8 0f00 	cmp.w	r8, #0
 8008df0:	dde9      	ble.n	8008dc6 <__sflush_r+0xae>
 8008df2:	6a21      	ldr	r1, [r4, #32]
 8008df4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008df6:	4643      	mov	r3, r8
 8008df8:	463a      	mov	r2, r7
 8008dfa:	4628      	mov	r0, r5
 8008dfc:	47b0      	blx	r6
 8008dfe:	2800      	cmp	r0, #0
 8008e00:	dc08      	bgt.n	8008e14 <__sflush_r+0xfc>
 8008e02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e0a:	81a3      	strh	r3, [r4, #12]
 8008e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e14:	4407      	add	r7, r0
 8008e16:	eba8 0800 	sub.w	r8, r8, r0
 8008e1a:	e7e7      	b.n	8008dec <__sflush_r+0xd4>
 8008e1c:	dfbffffe 	.word	0xdfbffffe

08008e20 <_fflush_r>:
 8008e20:	b538      	push	{r3, r4, r5, lr}
 8008e22:	690b      	ldr	r3, [r1, #16]
 8008e24:	4605      	mov	r5, r0
 8008e26:	460c      	mov	r4, r1
 8008e28:	b913      	cbnz	r3, 8008e30 <_fflush_r+0x10>
 8008e2a:	2500      	movs	r5, #0
 8008e2c:	4628      	mov	r0, r5
 8008e2e:	bd38      	pop	{r3, r4, r5, pc}
 8008e30:	b118      	cbz	r0, 8008e3a <_fflush_r+0x1a>
 8008e32:	6a03      	ldr	r3, [r0, #32]
 8008e34:	b90b      	cbnz	r3, 8008e3a <_fflush_r+0x1a>
 8008e36:	f7ff fa3b 	bl	80082b0 <__sinit>
 8008e3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d0f3      	beq.n	8008e2a <_fflush_r+0xa>
 8008e42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008e44:	07d0      	lsls	r0, r2, #31
 8008e46:	d404      	bmi.n	8008e52 <_fflush_r+0x32>
 8008e48:	0599      	lsls	r1, r3, #22
 8008e4a:	d402      	bmi.n	8008e52 <_fflush_r+0x32>
 8008e4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e4e:	f7ff fb8a 	bl	8008566 <__retarget_lock_acquire_recursive>
 8008e52:	4628      	mov	r0, r5
 8008e54:	4621      	mov	r1, r4
 8008e56:	f7ff ff5f 	bl	8008d18 <__sflush_r>
 8008e5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008e5c:	07da      	lsls	r2, r3, #31
 8008e5e:	4605      	mov	r5, r0
 8008e60:	d4e4      	bmi.n	8008e2c <_fflush_r+0xc>
 8008e62:	89a3      	ldrh	r3, [r4, #12]
 8008e64:	059b      	lsls	r3, r3, #22
 8008e66:	d4e1      	bmi.n	8008e2c <_fflush_r+0xc>
 8008e68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e6a:	f7ff fb7d 	bl	8008568 <__retarget_lock_release_recursive>
 8008e6e:	e7dd      	b.n	8008e2c <_fflush_r+0xc>

08008e70 <__swbuf_r>:
 8008e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e72:	460e      	mov	r6, r1
 8008e74:	4614      	mov	r4, r2
 8008e76:	4605      	mov	r5, r0
 8008e78:	b118      	cbz	r0, 8008e82 <__swbuf_r+0x12>
 8008e7a:	6a03      	ldr	r3, [r0, #32]
 8008e7c:	b90b      	cbnz	r3, 8008e82 <__swbuf_r+0x12>
 8008e7e:	f7ff fa17 	bl	80082b0 <__sinit>
 8008e82:	69a3      	ldr	r3, [r4, #24]
 8008e84:	60a3      	str	r3, [r4, #8]
 8008e86:	89a3      	ldrh	r3, [r4, #12]
 8008e88:	071a      	lsls	r2, r3, #28
 8008e8a:	d501      	bpl.n	8008e90 <__swbuf_r+0x20>
 8008e8c:	6923      	ldr	r3, [r4, #16]
 8008e8e:	b943      	cbnz	r3, 8008ea2 <__swbuf_r+0x32>
 8008e90:	4621      	mov	r1, r4
 8008e92:	4628      	mov	r0, r5
 8008e94:	f000 f82a 	bl	8008eec <__swsetup_r>
 8008e98:	b118      	cbz	r0, 8008ea2 <__swbuf_r+0x32>
 8008e9a:	f04f 37ff 	mov.w	r7, #4294967295
 8008e9e:	4638      	mov	r0, r7
 8008ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ea2:	6823      	ldr	r3, [r4, #0]
 8008ea4:	6922      	ldr	r2, [r4, #16]
 8008ea6:	1a98      	subs	r0, r3, r2
 8008ea8:	6963      	ldr	r3, [r4, #20]
 8008eaa:	b2f6      	uxtb	r6, r6
 8008eac:	4283      	cmp	r3, r0
 8008eae:	4637      	mov	r7, r6
 8008eb0:	dc05      	bgt.n	8008ebe <__swbuf_r+0x4e>
 8008eb2:	4621      	mov	r1, r4
 8008eb4:	4628      	mov	r0, r5
 8008eb6:	f7ff ffb3 	bl	8008e20 <_fflush_r>
 8008eba:	2800      	cmp	r0, #0
 8008ebc:	d1ed      	bne.n	8008e9a <__swbuf_r+0x2a>
 8008ebe:	68a3      	ldr	r3, [r4, #8]
 8008ec0:	3b01      	subs	r3, #1
 8008ec2:	60a3      	str	r3, [r4, #8]
 8008ec4:	6823      	ldr	r3, [r4, #0]
 8008ec6:	1c5a      	adds	r2, r3, #1
 8008ec8:	6022      	str	r2, [r4, #0]
 8008eca:	701e      	strb	r6, [r3, #0]
 8008ecc:	6962      	ldr	r2, [r4, #20]
 8008ece:	1c43      	adds	r3, r0, #1
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d004      	beq.n	8008ede <__swbuf_r+0x6e>
 8008ed4:	89a3      	ldrh	r3, [r4, #12]
 8008ed6:	07db      	lsls	r3, r3, #31
 8008ed8:	d5e1      	bpl.n	8008e9e <__swbuf_r+0x2e>
 8008eda:	2e0a      	cmp	r6, #10
 8008edc:	d1df      	bne.n	8008e9e <__swbuf_r+0x2e>
 8008ede:	4621      	mov	r1, r4
 8008ee0:	4628      	mov	r0, r5
 8008ee2:	f7ff ff9d 	bl	8008e20 <_fflush_r>
 8008ee6:	2800      	cmp	r0, #0
 8008ee8:	d0d9      	beq.n	8008e9e <__swbuf_r+0x2e>
 8008eea:	e7d6      	b.n	8008e9a <__swbuf_r+0x2a>

08008eec <__swsetup_r>:
 8008eec:	b538      	push	{r3, r4, r5, lr}
 8008eee:	4b29      	ldr	r3, [pc, #164]	@ (8008f94 <__swsetup_r+0xa8>)
 8008ef0:	4605      	mov	r5, r0
 8008ef2:	6818      	ldr	r0, [r3, #0]
 8008ef4:	460c      	mov	r4, r1
 8008ef6:	b118      	cbz	r0, 8008f00 <__swsetup_r+0x14>
 8008ef8:	6a03      	ldr	r3, [r0, #32]
 8008efa:	b90b      	cbnz	r3, 8008f00 <__swsetup_r+0x14>
 8008efc:	f7ff f9d8 	bl	80082b0 <__sinit>
 8008f00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f04:	0719      	lsls	r1, r3, #28
 8008f06:	d422      	bmi.n	8008f4e <__swsetup_r+0x62>
 8008f08:	06da      	lsls	r2, r3, #27
 8008f0a:	d407      	bmi.n	8008f1c <__swsetup_r+0x30>
 8008f0c:	2209      	movs	r2, #9
 8008f0e:	602a      	str	r2, [r5, #0]
 8008f10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f14:	81a3      	strh	r3, [r4, #12]
 8008f16:	f04f 30ff 	mov.w	r0, #4294967295
 8008f1a:	e033      	b.n	8008f84 <__swsetup_r+0x98>
 8008f1c:	0758      	lsls	r0, r3, #29
 8008f1e:	d512      	bpl.n	8008f46 <__swsetup_r+0x5a>
 8008f20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f22:	b141      	cbz	r1, 8008f36 <__swsetup_r+0x4a>
 8008f24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f28:	4299      	cmp	r1, r3
 8008f2a:	d002      	beq.n	8008f32 <__swsetup_r+0x46>
 8008f2c:	4628      	mov	r0, r5
 8008f2e:	f7ff fb2b 	bl	8008588 <_free_r>
 8008f32:	2300      	movs	r3, #0
 8008f34:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f36:	89a3      	ldrh	r3, [r4, #12]
 8008f38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008f3c:	81a3      	strh	r3, [r4, #12]
 8008f3e:	2300      	movs	r3, #0
 8008f40:	6063      	str	r3, [r4, #4]
 8008f42:	6923      	ldr	r3, [r4, #16]
 8008f44:	6023      	str	r3, [r4, #0]
 8008f46:	89a3      	ldrh	r3, [r4, #12]
 8008f48:	f043 0308 	orr.w	r3, r3, #8
 8008f4c:	81a3      	strh	r3, [r4, #12]
 8008f4e:	6923      	ldr	r3, [r4, #16]
 8008f50:	b94b      	cbnz	r3, 8008f66 <__swsetup_r+0x7a>
 8008f52:	89a3      	ldrh	r3, [r4, #12]
 8008f54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008f58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f5c:	d003      	beq.n	8008f66 <__swsetup_r+0x7a>
 8008f5e:	4621      	mov	r1, r4
 8008f60:	4628      	mov	r0, r5
 8008f62:	f000 f84f 	bl	8009004 <__smakebuf_r>
 8008f66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f6a:	f013 0201 	ands.w	r2, r3, #1
 8008f6e:	d00a      	beq.n	8008f86 <__swsetup_r+0x9a>
 8008f70:	2200      	movs	r2, #0
 8008f72:	60a2      	str	r2, [r4, #8]
 8008f74:	6962      	ldr	r2, [r4, #20]
 8008f76:	4252      	negs	r2, r2
 8008f78:	61a2      	str	r2, [r4, #24]
 8008f7a:	6922      	ldr	r2, [r4, #16]
 8008f7c:	b942      	cbnz	r2, 8008f90 <__swsetup_r+0xa4>
 8008f7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008f82:	d1c5      	bne.n	8008f10 <__swsetup_r+0x24>
 8008f84:	bd38      	pop	{r3, r4, r5, pc}
 8008f86:	0799      	lsls	r1, r3, #30
 8008f88:	bf58      	it	pl
 8008f8a:	6962      	ldrpl	r2, [r4, #20]
 8008f8c:	60a2      	str	r2, [r4, #8]
 8008f8e:	e7f4      	b.n	8008f7a <__swsetup_r+0x8e>
 8008f90:	2000      	movs	r0, #0
 8008f92:	e7f7      	b.n	8008f84 <__swsetup_r+0x98>
 8008f94:	2000001c 	.word	0x2000001c

08008f98 <_sbrk_r>:
 8008f98:	b538      	push	{r3, r4, r5, lr}
 8008f9a:	4d06      	ldr	r5, [pc, #24]	@ (8008fb4 <_sbrk_r+0x1c>)
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	4604      	mov	r4, r0
 8008fa0:	4608      	mov	r0, r1
 8008fa2:	602b      	str	r3, [r5, #0]
 8008fa4:	f7f8 fbbc 	bl	8001720 <_sbrk>
 8008fa8:	1c43      	adds	r3, r0, #1
 8008faa:	d102      	bne.n	8008fb2 <_sbrk_r+0x1a>
 8008fac:	682b      	ldr	r3, [r5, #0]
 8008fae:	b103      	cbz	r3, 8008fb2 <_sbrk_r+0x1a>
 8008fb0:	6023      	str	r3, [r4, #0]
 8008fb2:	bd38      	pop	{r3, r4, r5, pc}
 8008fb4:	20004a6c 	.word	0x20004a6c

08008fb8 <__swhatbuf_r>:
 8008fb8:	b570      	push	{r4, r5, r6, lr}
 8008fba:	460c      	mov	r4, r1
 8008fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fc0:	2900      	cmp	r1, #0
 8008fc2:	b096      	sub	sp, #88	@ 0x58
 8008fc4:	4615      	mov	r5, r2
 8008fc6:	461e      	mov	r6, r3
 8008fc8:	da0d      	bge.n	8008fe6 <__swhatbuf_r+0x2e>
 8008fca:	89a3      	ldrh	r3, [r4, #12]
 8008fcc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008fd0:	f04f 0100 	mov.w	r1, #0
 8008fd4:	bf14      	ite	ne
 8008fd6:	2340      	movne	r3, #64	@ 0x40
 8008fd8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008fdc:	2000      	movs	r0, #0
 8008fde:	6031      	str	r1, [r6, #0]
 8008fe0:	602b      	str	r3, [r5, #0]
 8008fe2:	b016      	add	sp, #88	@ 0x58
 8008fe4:	bd70      	pop	{r4, r5, r6, pc}
 8008fe6:	466a      	mov	r2, sp
 8008fe8:	f000 f848 	bl	800907c <_fstat_r>
 8008fec:	2800      	cmp	r0, #0
 8008fee:	dbec      	blt.n	8008fca <__swhatbuf_r+0x12>
 8008ff0:	9901      	ldr	r1, [sp, #4]
 8008ff2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008ff6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008ffa:	4259      	negs	r1, r3
 8008ffc:	4159      	adcs	r1, r3
 8008ffe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009002:	e7eb      	b.n	8008fdc <__swhatbuf_r+0x24>

08009004 <__smakebuf_r>:
 8009004:	898b      	ldrh	r3, [r1, #12]
 8009006:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009008:	079d      	lsls	r5, r3, #30
 800900a:	4606      	mov	r6, r0
 800900c:	460c      	mov	r4, r1
 800900e:	d507      	bpl.n	8009020 <__smakebuf_r+0x1c>
 8009010:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009014:	6023      	str	r3, [r4, #0]
 8009016:	6123      	str	r3, [r4, #16]
 8009018:	2301      	movs	r3, #1
 800901a:	6163      	str	r3, [r4, #20]
 800901c:	b003      	add	sp, #12
 800901e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009020:	ab01      	add	r3, sp, #4
 8009022:	466a      	mov	r2, sp
 8009024:	f7ff ffc8 	bl	8008fb8 <__swhatbuf_r>
 8009028:	9f00      	ldr	r7, [sp, #0]
 800902a:	4605      	mov	r5, r0
 800902c:	4639      	mov	r1, r7
 800902e:	4630      	mov	r0, r6
 8009030:	f7ff fb16 	bl	8008660 <_malloc_r>
 8009034:	b948      	cbnz	r0, 800904a <__smakebuf_r+0x46>
 8009036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800903a:	059a      	lsls	r2, r3, #22
 800903c:	d4ee      	bmi.n	800901c <__smakebuf_r+0x18>
 800903e:	f023 0303 	bic.w	r3, r3, #3
 8009042:	f043 0302 	orr.w	r3, r3, #2
 8009046:	81a3      	strh	r3, [r4, #12]
 8009048:	e7e2      	b.n	8009010 <__smakebuf_r+0xc>
 800904a:	89a3      	ldrh	r3, [r4, #12]
 800904c:	6020      	str	r0, [r4, #0]
 800904e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009052:	81a3      	strh	r3, [r4, #12]
 8009054:	9b01      	ldr	r3, [sp, #4]
 8009056:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800905a:	b15b      	cbz	r3, 8009074 <__smakebuf_r+0x70>
 800905c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009060:	4630      	mov	r0, r6
 8009062:	f000 f81d 	bl	80090a0 <_isatty_r>
 8009066:	b128      	cbz	r0, 8009074 <__smakebuf_r+0x70>
 8009068:	89a3      	ldrh	r3, [r4, #12]
 800906a:	f023 0303 	bic.w	r3, r3, #3
 800906e:	f043 0301 	orr.w	r3, r3, #1
 8009072:	81a3      	strh	r3, [r4, #12]
 8009074:	89a3      	ldrh	r3, [r4, #12]
 8009076:	431d      	orrs	r5, r3
 8009078:	81a5      	strh	r5, [r4, #12]
 800907a:	e7cf      	b.n	800901c <__smakebuf_r+0x18>

0800907c <_fstat_r>:
 800907c:	b538      	push	{r3, r4, r5, lr}
 800907e:	4d07      	ldr	r5, [pc, #28]	@ (800909c <_fstat_r+0x20>)
 8009080:	2300      	movs	r3, #0
 8009082:	4604      	mov	r4, r0
 8009084:	4608      	mov	r0, r1
 8009086:	4611      	mov	r1, r2
 8009088:	602b      	str	r3, [r5, #0]
 800908a:	f7f8 fb20 	bl	80016ce <_fstat>
 800908e:	1c43      	adds	r3, r0, #1
 8009090:	d102      	bne.n	8009098 <_fstat_r+0x1c>
 8009092:	682b      	ldr	r3, [r5, #0]
 8009094:	b103      	cbz	r3, 8009098 <_fstat_r+0x1c>
 8009096:	6023      	str	r3, [r4, #0]
 8009098:	bd38      	pop	{r3, r4, r5, pc}
 800909a:	bf00      	nop
 800909c:	20004a6c 	.word	0x20004a6c

080090a0 <_isatty_r>:
 80090a0:	b538      	push	{r3, r4, r5, lr}
 80090a2:	4d06      	ldr	r5, [pc, #24]	@ (80090bc <_isatty_r+0x1c>)
 80090a4:	2300      	movs	r3, #0
 80090a6:	4604      	mov	r4, r0
 80090a8:	4608      	mov	r0, r1
 80090aa:	602b      	str	r3, [r5, #0]
 80090ac:	f7f8 fb1f 	bl	80016ee <_isatty>
 80090b0:	1c43      	adds	r3, r0, #1
 80090b2:	d102      	bne.n	80090ba <_isatty_r+0x1a>
 80090b4:	682b      	ldr	r3, [r5, #0]
 80090b6:	b103      	cbz	r3, 80090ba <_isatty_r+0x1a>
 80090b8:	6023      	str	r3, [r4, #0]
 80090ba:	bd38      	pop	{r3, r4, r5, pc}
 80090bc:	20004a6c 	.word	0x20004a6c

080090c0 <_init>:
 80090c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090c2:	bf00      	nop
 80090c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090c6:	bc08      	pop	{r3}
 80090c8:	469e      	mov	lr, r3
 80090ca:	4770      	bx	lr

080090cc <_fini>:
 80090cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ce:	bf00      	nop
 80090d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090d2:	bc08      	pop	{r3}
 80090d4:	469e      	mov	lr, r3
 80090d6:	4770      	bx	lr
