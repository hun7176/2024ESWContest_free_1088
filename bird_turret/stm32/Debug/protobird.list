
protobird.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080b0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08008260  08008260  00009260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082f8  080082f8  0000a07c  2**0
                  CONTENTS
  4 .ARM          00000008  080082f8  080082f8  000092f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008300  08008300  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008300  08008300  00009300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008304  08008304  00009304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08008308  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a07c  2**0
                  CONTENTS
 10 .bss          000049d8  2000007c  2000007c  0000a07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004a54  20004a54  0000a07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cda4  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a82  00000000  00000000  00026e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001750  00000000  00000000  0002a8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000122c  00000000  00000000  0002c028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002703f  00000000  00000000  0002d254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a638  00000000  00000000  00054293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec543  00000000  00000000  0006e8cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015ae0e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006670  00000000  00000000  0015ae54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  001614c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008248 	.word	0x08008248

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	08008248 	.word	0x08008248

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4a07      	ldr	r2, [pc, #28]	@ (800050c <vApplicationGetIdleTaskMemory+0x2c>)
 80004f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	4a06      	ldr	r2, [pc, #24]	@ (8000510 <vApplicationGetIdleTaskMemory+0x30>)
 80004f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2280      	movs	r2, #128	@ 0x80
 80004fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	20000098 	.word	0x20000098
 8000510:	20000138 	.word	0x20000138

08000514 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b0a2      	sub	sp, #136	@ 0x88
 8000518:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 800051a:	f001 f95d 	bl	80017d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f8bf 	bl	80006a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 fa99 	bl	8000a58 <MX_GPIO_Init>
  MX_ETH_Init();
 8000526:	f000 f939 	bl	800079c <MX_ETH_Init>
  MX_USART3_UART_Init();
 800052a:	f000 fa3d 	bl	80009a8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800052e:	f000 fa65 	bl	80009fc <MX_USB_OTG_FS_PCD_Init>
  MX_UART5_Init();
 8000532:	f000 fa0f 	bl	8000954 <MX_UART5_Init>
  MX_TIM3_Init();
 8000536:	f000 f97f 	bl	8000838 <MX_TIM3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800053a:	f000 f91b 	bl	8000774 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  // HAL_UART_Receive_IT(huartn, (uint8_t *)&dir, 1);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800053e:	2100      	movs	r1, #0
 8000540:	484a      	ldr	r0, [pc, #296]	@ (800066c <main+0x158>)
 8000542:	f002 ff03 	bl	800334c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000546:	2108      	movs	r1, #8
 8000548:	4848      	ldr	r0, [pc, #288]	@ (800066c <main+0x158>)
 800054a:	f002 feff 	bl	800334c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800054e:	210c      	movs	r1, #12
 8000550:	4846      	ldr	r0, [pc, #280]	@ (800066c <main+0x158>)
 8000552:	f002 fefb 	bl	800334c <HAL_TIM_PWM_Start>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of phiDirSem */
  osSemaphoreDef(phiDirSem);
 8000556:	2300      	movs	r3, #0
 8000558:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800055c:	2300      	movs	r3, #0
 800055e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  phiDirSemHandle = osSemaphoreCreate(osSemaphore(phiDirSem), 1);
 8000562:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000566:	2101      	movs	r1, #1
 8000568:	4618      	mov	r0, r3
 800056a:	f005 fa23 	bl	80059b4 <osSemaphoreCreate>
 800056e:	4603      	mov	r3, r0
 8000570:	4a3f      	ldr	r2, [pc, #252]	@ (8000670 <main+0x15c>)
 8000572:	6013      	str	r3, [r2, #0]

  /* definition and creation of thetaDirSem */
  osSemaphoreDef(thetaDirSem);
 8000574:	2300      	movs	r3, #0
 8000576:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000578:	2300      	movs	r3, #0
 800057a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  thetaDirSemHandle = osSemaphoreCreate(osSemaphore(thetaDirSem), 1);
 800057c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000580:	2101      	movs	r1, #1
 8000582:	4618      	mov	r0, r3
 8000584:	f005 fa16 	bl	80059b4 <osSemaphoreCreate>
 8000588:	4603      	mov	r3, r0
 800058a:	4a3a      	ldr	r2, [pc, #232]	@ (8000674 <main+0x160>)
 800058c:	6013      	str	r3, [r2, #0]

  /* definition and creation of triggerSem */
  osSemaphoreDef(triggerSem);
 800058e:	2300      	movs	r3, #0
 8000590:	673b      	str	r3, [r7, #112]	@ 0x70
 8000592:	2300      	movs	r3, #0
 8000594:	677b      	str	r3, [r7, #116]	@ 0x74
  triggerSemHandle = osSemaphoreCreate(osSemaphore(triggerSem), 0);
 8000596:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800059a:	2100      	movs	r1, #0
 800059c:	4618      	mov	r0, r3
 800059e:	f005 fa09 	bl	80059b4 <osSemaphoreCreate>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a34      	ldr	r2, [pc, #208]	@ (8000678 <main+0x164>)
 80005a6:	6013      	str	r3, [r2, #0]
  // osSemaphoreWait(triggerSemHandle, 1);

  /* definition and creation of trigendSem */
  osSemaphoreDef(trigendSem);
 80005a8:	2300      	movs	r3, #0
 80005aa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80005ac:	2300      	movs	r3, #0
 80005ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
  trigendSemHandle = osSemaphoreCreate(osSemaphore(trigendSem), 0);
 80005b0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f005 f9fc 	bl	80059b4 <osSemaphoreCreate>
 80005bc:	4603      	mov	r3, r0
 80005be:	4a2f      	ldr	r2, [pc, #188]	@ (800067c <main+0x168>)
 80005c0:	6013      	str	r3, [r2, #0]

  /* definition and creation of moveSem */
  osSemaphoreDef(moveSem);
 80005c2:	2300      	movs	r3, #0
 80005c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80005c6:	2300      	movs	r3, #0
 80005c8:	667b      	str	r3, [r7, #100]	@ 0x64
  moveSemHandle = osSemaphoreCreate(osSemaphore(moveSem), 0);
 80005ca:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80005ce:	2100      	movs	r1, #0
 80005d0:	4618      	mov	r0, r3
 80005d2:	f005 f9ef 	bl	80059b4 <osSemaphoreCreate>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a29      	ldr	r2, [pc, #164]	@ (8000680 <main+0x16c>)
 80005da:	6013      	str	r3, [r2, #0]
  // osSemaphoreWait(moveSemHandle, 1);

  /* definition and creation of moveendSem */
  osSemaphoreDef(moveendSem);
 80005dc:	2300      	movs	r3, #0
 80005de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80005e0:	2300      	movs	r3, #0
 80005e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  moveendSemHandle = osSemaphoreCreate(osSemaphore(moveendSem), 0);
 80005e4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f005 f9e2 	bl	80059b4 <osSemaphoreCreate>
 80005f0:	4603      	mov	r3, r0
 80005f2:	4a24      	ldr	r2, [pc, #144]	@ (8000684 <main+0x170>)
 80005f4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of uartTask */
  osThreadDef(uartTask, StartUartTask, osPriorityNormal, 0, 128);
 80005f6:	4b24      	ldr	r3, [pc, #144]	@ (8000688 <main+0x174>)
 80005f8:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80005fc:	461d      	mov	r5, r3
 80005fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000600:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000602:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000606:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uartTaskHandle = osThreadCreate(osThread(uartTask), NULL);
 800060a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800060e:	2100      	movs	r1, #0
 8000610:	4618      	mov	r0, r3
 8000612:	f005 f96f 	bl	80058f4 <osThreadCreate>
 8000616:	4603      	mov	r3, r0
 8000618:	4a1c      	ldr	r2, [pc, #112]	@ (800068c <main+0x178>)
 800061a:	6013      	str	r3, [r2, #0]

  /* definition and creation of motorTask */
  osThreadDef(motorTask, StartMotorTask, osPriorityNormal, 0, 128);
 800061c:	4b1c      	ldr	r3, [pc, #112]	@ (8000690 <main+0x17c>)
 800061e:	f107 0420 	add.w	r4, r7, #32
 8000622:	461d      	mov	r5, r3
 8000624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000628:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800062c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorTaskHandle = osThreadCreate(osThread(motorTask), NULL);
 8000630:	f107 0320 	add.w	r3, r7, #32
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f005 f95c 	bl	80058f4 <osThreadCreate>
 800063c:	4603      	mov	r3, r0
 800063e:	4a15      	ldr	r2, [pc, #84]	@ (8000694 <main+0x180>)
 8000640:	6013      	str	r3, [r2, #0]

  /* definition and creation of trigTask */
  osThreadDef(trigTask, StartTrigTask, osPriorityHigh, 0, 128);
 8000642:	4b15      	ldr	r3, [pc, #84]	@ (8000698 <main+0x184>)
 8000644:	1d3c      	adds	r4, r7, #4
 8000646:	461d      	mov	r5, r3
 8000648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800064c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000650:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  trigTaskHandle = osThreadCreate(osThread(trigTask), NULL);
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2100      	movs	r1, #0
 8000658:	4618      	mov	r0, r3
 800065a:	f005 f94b 	bl	80058f4 <osThreadCreate>
 800065e:	4603      	mov	r3, r0
 8000660:	4a0e      	ldr	r2, [pc, #56]	@ (800069c <main+0x188>)
 8000662:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000664:	f005 f93f 	bl	80058e6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8000668:	bf00      	nop
 800066a:	e7fd      	b.n	8000668 <main+0x154>
 800066c:	20000560 	.word	0x20000560
 8000670:	20000b28 	.word	0x20000b28
 8000674:	20000b2c 	.word	0x20000b2c
 8000678:	20000b30 	.word	0x20000b30
 800067c:	20000b34 	.word	0x20000b34
 8000680:	20000b38 	.word	0x20000b38
 8000684:	20000b3c 	.word	0x20000b3c
 8000688:	0800826c 	.word	0x0800826c
 800068c:	20000b1c 	.word	0x20000b1c
 8000690:	08008294 	.word	0x08008294
 8000694:	20000b20 	.word	0x20000b20
 8000698:	080082bc 	.word	0x080082bc
 800069c:	20000b24 	.word	0x20000b24

080006a0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b094      	sub	sp, #80	@ 0x50
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 0320 	add.w	r3, r7, #32
 80006aa:	2230      	movs	r2, #48	@ 0x30
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f007 fce2 	bl	8008078 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c4:	2300      	movs	r3, #0
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	4b28      	ldr	r3, [pc, #160]	@ (800076c <SystemClock_Config+0xcc>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006cc:	4a27      	ldr	r2, [pc, #156]	@ (800076c <SystemClock_Config+0xcc>)
 80006ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d4:	4b25      	ldr	r3, [pc, #148]	@ (800076c <SystemClock_Config+0xcc>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e0:	2300      	movs	r3, #0
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	4b22      	ldr	r3, [pc, #136]	@ (8000770 <SystemClock_Config+0xd0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a21      	ldr	r2, [pc, #132]	@ (8000770 <SystemClock_Config+0xd0>)
 80006ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006ee:	6013      	str	r3, [r2, #0]
 80006f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000770 <SystemClock_Config+0xd0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006fc:	2301      	movs	r3, #1
 80006fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000700:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000704:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000706:	2302      	movs	r3, #2
 8000708:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800070a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800070e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000710:	2304      	movs	r3, #4
 8000712:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000714:	23a8      	movs	r3, #168	@ 0xa8
 8000716:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000718:	2302      	movs	r3, #2
 800071a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800071c:	2307      	movs	r3, #7
 800071e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000720:	f107 0320 	add.w	r3, r7, #32
 8000724:	4618      	mov	r0, r3
 8000726:	f002 f82d 	bl	8002784 <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x94>
    Error_Handler();
 8000730:	f000 fd14 	bl	800115c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000734:	230f      	movs	r3, #15
 8000736:	60fb      	str	r3, [r7, #12]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000738:	2302      	movs	r3, #2
 800073a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000740:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000744:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000746:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800074a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	2105      	movs	r1, #5
 8000752:	4618      	mov	r0, r3
 8000754:	f002 fa8e 	bl	8002c74 <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xc2>
    Error_Handler();
 800075e:	f000 fcfd 	bl	800115c <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3750      	adds	r7, #80	@ 0x50
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* UART5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8000778:	2200      	movs	r2, #0
 800077a:	2105      	movs	r1, #5
 800077c:	2035      	movs	r0, #53	@ 0x35
 800077e:	f001 f949 	bl	8001a14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000782:	2035      	movs	r0, #53	@ 0x35
 8000784:	f001 f962 	bl	8001a4c <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000788:	2200      	movs	r2, #0
 800078a:	2105      	movs	r1, #5
 800078c:	2027      	movs	r0, #39	@ 0x27
 800078e:	f001 f941 	bl	8001a14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000792:	2027      	movs	r0, #39	@ 0x27
 8000794:	f001 f95a 	bl	8001a4c <HAL_NVIC_EnableIRQ>
}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}

0800079c <MX_ETH_Init>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000820 <MX_ETH_Init+0x84>)
 80007a2:	4a20      	ldr	r2, [pc, #128]	@ (8000824 <MX_ETH_Init+0x88>)
 80007a4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007a6:	4b20      	ldr	r3, [pc, #128]	@ (8000828 <MX_ETH_Init+0x8c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000828 <MX_ETH_Init+0x8c>)
 80007ae:	2280      	movs	r2, #128	@ 0x80
 80007b0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000828 <MX_ETH_Init+0x8c>)
 80007b4:	22e1      	movs	r2, #225	@ 0xe1
 80007b6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000828 <MX_ETH_Init+0x8c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007be:	4b1a      	ldr	r3, [pc, #104]	@ (8000828 <MX_ETH_Init+0x8c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007c4:	4b18      	ldr	r3, [pc, #96]	@ (8000828 <MX_ETH_Init+0x8c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007ca:	4b15      	ldr	r3, [pc, #84]	@ (8000820 <MX_ETH_Init+0x84>)
 80007cc:	4a16      	ldr	r2, [pc, #88]	@ (8000828 <MX_ETH_Init+0x8c>)
 80007ce:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007d0:	4b13      	ldr	r3, [pc, #76]	@ (8000820 <MX_ETH_Init+0x84>)
 80007d2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80007d6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007d8:	4b11      	ldr	r3, [pc, #68]	@ (8000820 <MX_ETH_Init+0x84>)
 80007da:	4a14      	ldr	r2, [pc, #80]	@ (800082c <MX_ETH_Init+0x90>)
 80007dc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007de:	4b10      	ldr	r3, [pc, #64]	@ (8000820 <MX_ETH_Init+0x84>)
 80007e0:	4a13      	ldr	r2, [pc, #76]	@ (8000830 <MX_ETH_Init+0x94>)
 80007e2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000820 <MX_ETH_Init+0x84>)
 80007e6:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80007ea:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK) {
 80007ec:	480c      	ldr	r0, [pc, #48]	@ (8000820 <MX_ETH_Init+0x84>)
 80007ee:	f001 f9cd 	bl	8001b8c <HAL_ETH_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_ETH_Init+0x60>
    Error_Handler();
 80007f8:	f000 fcb0 	bl	800115c <Error_Handler>
  }

  memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 80007fc:	2238      	movs	r2, #56	@ 0x38
 80007fe:	2100      	movs	r1, #0
 8000800:	480c      	ldr	r0, [pc, #48]	@ (8000834 <MX_ETH_Init+0x98>)
 8000802:	f007 fc39 	bl	8008078 <memset>
  TxConfig.Attributes =
 8000806:	4b0b      	ldr	r3, [pc, #44]	@ (8000834 <MX_ETH_Init+0x98>)
 8000808:	2221      	movs	r2, #33	@ 0x21
 800080a:	601a      	str	r2, [r3, #0]
      ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800080c:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <MX_ETH_Init+0x98>)
 800080e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000812:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000814:	4b07      	ldr	r3, [pc, #28]	@ (8000834 <MX_ETH_Init+0x98>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200004b0 	.word	0x200004b0
 8000824:	40028000 	.word	0x40028000
 8000828:	20000b6c 	.word	0x20000b6c
 800082c:	20000410 	.word	0x20000410
 8000830:	20000370 	.word	0x20000370
 8000834:	20000338 	.word	0x20000338

08000838 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b08e      	sub	sp, #56	@ 0x38
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800083e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800084c:	f107 0320 	add.w	r3, r7, #32
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]
 8000864:	615a      	str	r2, [r3, #20]
 8000866:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000868:	4b38      	ldr	r3, [pc, #224]	@ (800094c <MX_TIM3_Init+0x114>)
 800086a:	4a39      	ldr	r2, [pc, #228]	@ (8000950 <MX_TIM3_Init+0x118>)
 800086c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 280 - 1;
 800086e:	4b37      	ldr	r3, [pc, #220]	@ (800094c <MX_TIM3_Init+0x114>)
 8000870:	f240 1217 	movw	r2, #279	@ 0x117
 8000874:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000876:	4b35      	ldr	r3, [pc, #212]	@ (800094c <MX_TIM3_Init+0x114>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6000 - 1;
 800087c:	4b33      	ldr	r3, [pc, #204]	@ (800094c <MX_TIM3_Init+0x114>)
 800087e:	f241 726f 	movw	r2, #5999	@ 0x176f
 8000882:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000884:	4b31      	ldr	r3, [pc, #196]	@ (800094c <MX_TIM3_Init+0x114>)
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088a:	4b30      	ldr	r3, [pc, #192]	@ (800094c <MX_TIM3_Init+0x114>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000890:	482e      	ldr	r0, [pc, #184]	@ (800094c <MX_TIM3_Init+0x114>)
 8000892:	f002 fc41 	bl	8003118 <HAL_TIM_Base_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM3_Init+0x68>
    Error_Handler();
 800089c:	f000 fc5e 	bl	800115c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80008a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008aa:	4619      	mov	r1, r3
 80008ac:	4827      	ldr	r0, [pc, #156]	@ (800094c <MX_TIM3_Init+0x114>)
 80008ae:	f002 ffc7 	bl	8003840 <HAL_TIM_ConfigClockSource>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM3_Init+0x84>
    Error_Handler();
 80008b8:	f000 fc50 	bl	800115c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80008bc:	4823      	ldr	r0, [pc, #140]	@ (800094c <MX_TIM3_Init+0x114>)
 80008be:	f002 fceb 	bl	8003298 <HAL_TIM_PWM_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM3_Init+0x94>
    Error_Handler();
 80008c8:	f000 fc48 	bl	800115c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 80008d4:	f107 0320 	add.w	r3, r7, #32
 80008d8:	4619      	mov	r1, r3
 80008da:	481c      	ldr	r0, [pc, #112]	@ (800094c <MX_TIM3_Init+0x114>)
 80008dc:	f003 fbbc 	bl	8004058 <HAL_TIMEx_MasterConfigSynchronization>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM3_Init+0xb2>
    Error_Handler();
 80008e6:	f000 fc39 	bl	800115c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ea:	2360      	movs	r3, #96	@ 0x60
 80008ec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 450 - 1;
 80008ee:	f240 13c1 	movw	r3, #449	@ 0x1c1
 80008f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	2200      	movs	r2, #0
 8000900:	4619      	mov	r1, r3
 8000902:	4812      	ldr	r0, [pc, #72]	@ (800094c <MX_TIM3_Init+0x114>)
 8000904:	f002 feda 	bl	80036bc <HAL_TIM_PWM_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_TIM3_Init+0xda>
    Error_Handler();
 800090e:	f000 fc25 	bl	800115c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	2208      	movs	r2, #8
 8000916:	4619      	mov	r1, r3
 8000918:	480c      	ldr	r0, [pc, #48]	@ (800094c <MX_TIM3_Init+0x114>)
 800091a:	f002 fecf 	bl	80036bc <HAL_TIM_PWM_ConfigChannel>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM3_Init+0xf0>
    Error_Handler();
 8000924:	f000 fc1a 	bl	800115c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	220c      	movs	r2, #12
 800092c:	4619      	mov	r1, r3
 800092e:	4807      	ldr	r0, [pc, #28]	@ (800094c <MX_TIM3_Init+0x114>)
 8000930:	f002 fec4 	bl	80036bc <HAL_TIM_PWM_ConfigChannel>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_TIM3_Init+0x106>
    Error_Handler();
 800093a:	f000 fc0f 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800093e:	4803      	ldr	r0, [pc, #12]	@ (800094c <MX_TIM3_Init+0x114>)
 8000940:	f000 fd26 	bl	8001390 <HAL_TIM_MspPostInit>
}
 8000944:	bf00      	nop
 8000946:	3738      	adds	r7, #56	@ 0x38
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000560 	.word	0x20000560
 8000950:	40000400 	.word	0x40000400

08000954 <MX_UART5_Init>:
/**
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void) {
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000958:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <MX_UART5_Init+0x4c>)
 800095a:	4a12      	ldr	r2, [pc, #72]	@ (80009a4 <MX_UART5_Init+0x50>)
 800095c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800095e:	4b10      	ldr	r3, [pc, #64]	@ (80009a0 <MX_UART5_Init+0x4c>)
 8000960:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000964:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000966:	4b0e      	ldr	r3, [pc, #56]	@ (80009a0 <MX_UART5_Init+0x4c>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800096c:	4b0c      	ldr	r3, [pc, #48]	@ (80009a0 <MX_UART5_Init+0x4c>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000972:	4b0b      	ldr	r3, [pc, #44]	@ (80009a0 <MX_UART5_Init+0x4c>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000978:	4b09      	ldr	r3, [pc, #36]	@ (80009a0 <MX_UART5_Init+0x4c>)
 800097a:	220c      	movs	r2, #12
 800097c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097e:	4b08      	ldr	r3, [pc, #32]	@ (80009a0 <MX_UART5_Init+0x4c>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000984:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <MX_UART5_Init+0x4c>)
 8000986:	2200      	movs	r2, #0
 8000988:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK) {
 800098a:	4805      	ldr	r0, [pc, #20]	@ (80009a0 <MX_UART5_Init+0x4c>)
 800098c:	f003 fbf4 	bl	8004178 <HAL_UART_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_UART5_Init+0x46>
    Error_Handler();
 8000996:	f000 fbe1 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	200005a8 	.word	0x200005a8
 80009a4:	40005000 	.word	0x40005000

080009a8 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009ac:	4b11      	ldr	r3, [pc, #68]	@ (80009f4 <MX_USART3_UART_Init+0x4c>)
 80009ae:	4a12      	ldr	r2, [pc, #72]	@ (80009f8 <MX_USART3_UART_Init+0x50>)
 80009b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009b2:	4b10      	ldr	r3, [pc, #64]	@ (80009f4 <MX_USART3_UART_Init+0x4c>)
 80009b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	@ (80009f4 <MX_USART3_UART_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	@ (80009f4 <MX_USART3_UART_Init+0x4c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	@ (80009f4 <MX_USART3_UART_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009cc:	4b09      	ldr	r3, [pc, #36]	@ (80009f4 <MX_USART3_UART_Init+0x4c>)
 80009ce:	220c      	movs	r2, #12
 80009d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d2:	4b08      	ldr	r3, [pc, #32]	@ (80009f4 <MX_USART3_UART_Init+0x4c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d8:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <MX_USART3_UART_Init+0x4c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK) {
 80009de:	4805      	ldr	r0, [pc, #20]	@ (80009f4 <MX_USART3_UART_Init+0x4c>)
 80009e0:	f003 fbca 	bl	8004178 <HAL_UART_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_USART3_UART_Init+0x46>
    Error_Handler();
 80009ea:	f000 fbb7 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	200005f0 	.word	0x200005f0
 80009f8:	40004800 	.word	0x40004800

080009fc <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a00:	4b14      	ldr	r3, [pc, #80]	@ (8000a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a02:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000a06:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000a08:	4b12      	ldr	r3, [pc, #72]	@ (8000a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a0a:	2204      	movs	r2, #4
 8000a0c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a0e:	4b11      	ldr	r3, [pc, #68]	@ (8000a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a10:	2202      	movs	r2, #2
 8000a12:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	@ (8000a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a1c:	2202      	movs	r2, #2
 8000a1e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	@ (8000a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	@ (8000a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a2c:	4b09      	ldr	r3, [pc, #36]	@ (8000a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a32:	4b08      	ldr	r3, [pc, #32]	@ (8000a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a38:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8000a3e:	4805      	ldr	r0, [pc, #20]	@ (8000a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a40:	f001 fd91 	bl	8002566 <HAL_PCD_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_USB_OTG_FS_PCD_Init+0x52>
    Error_Handler();
 8000a4a:	f000 fb87 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000638 	.word	0x20000638

08000a58 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08c      	sub	sp, #48	@ 0x30
 8000a5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
 8000a6c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61bb      	str	r3, [r7, #24]
 8000a72:	4b4c      	ldr	r3, [pc, #304]	@ (8000ba4 <MX_GPIO_Init+0x14c>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	4a4b      	ldr	r2, [pc, #300]	@ (8000ba4 <MX_GPIO_Init+0x14c>)
 8000a78:	f043 0304 	orr.w	r3, r3, #4
 8000a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7e:	4b49      	ldr	r3, [pc, #292]	@ (8000ba4 <MX_GPIO_Init+0x14c>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	f003 0304 	and.w	r3, r3, #4
 8000a86:	61bb      	str	r3, [r7, #24]
 8000a88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]
 8000a8e:	4b45      	ldr	r3, [pc, #276]	@ (8000ba4 <MX_GPIO_Init+0x14c>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	4a44      	ldr	r2, [pc, #272]	@ (8000ba4 <MX_GPIO_Init+0x14c>)
 8000a94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9a:	4b42      	ldr	r3, [pc, #264]	@ (8000ba4 <MX_GPIO_Init+0x14c>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aa2:	617b      	str	r3, [r7, #20]
 8000aa4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
 8000aaa:	4b3e      	ldr	r3, [pc, #248]	@ (8000ba4 <MX_GPIO_Init+0x14c>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	4a3d      	ldr	r2, [pc, #244]	@ (8000ba4 <MX_GPIO_Init+0x14c>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab6:	4b3b      	ldr	r3, [pc, #236]	@ (8000ba4 <MX_GPIO_Init+0x14c>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	4b37      	ldr	r3, [pc, #220]	@ (8000ba4 <MX_GPIO_Init+0x14c>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	4a36      	ldr	r2, [pc, #216]	@ (8000ba4 <MX_GPIO_Init+0x14c>)
 8000acc:	f043 0302 	orr.w	r3, r3, #2
 8000ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad2:	4b34      	ldr	r3, [pc, #208]	@ (8000ba4 <MX_GPIO_Init+0x14c>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	f003 0302 	and.w	r3, r3, #2
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60bb      	str	r3, [r7, #8]
 8000ae2:	4b30      	ldr	r3, [pc, #192]	@ (8000ba4 <MX_GPIO_Init+0x14c>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	4a2f      	ldr	r2, [pc, #188]	@ (8000ba4 <MX_GPIO_Init+0x14c>)
 8000ae8:	f043 0308 	orr.w	r3, r3, #8
 8000aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aee:	4b2d      	ldr	r3, [pc, #180]	@ (8000ba4 <MX_GPIO_Init+0x14c>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	f003 0308 	and.w	r3, r3, #8
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	4b29      	ldr	r3, [pc, #164]	@ (8000ba4 <MX_GPIO_Init+0x14c>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	4a28      	ldr	r2, [pc, #160]	@ (8000ba4 <MX_GPIO_Init+0x14c>)
 8000b04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0a:	4b26      	ldr	r3, [pc, #152]	@ (8000ba4 <MX_GPIO_Init+0x14c>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000b1c:	4822      	ldr	r0, [pc, #136]	@ (8000ba8 <MX_GPIO_Init+0x150>)
 8000b1e:	f001 fd09 	bl	8002534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3 | USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2148      	movs	r1, #72	@ 0x48
 8000b26:	4821      	ldr	r0, [pc, #132]	@ (8000bac <MX_GPIO_Init+0x154>)
 8000b28:	f001 fd04 	bl	8002534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b32:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b3c:	f107 031c 	add.w	r3, r7, #28
 8000b40:	4619      	mov	r1, r3
 8000b42:	481b      	ldr	r0, [pc, #108]	@ (8000bb0 <MX_GPIO_Init+0x158>)
 8000b44:	f001 fb4a 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8000b48:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5a:	f107 031c 	add.w	r3, r7, #28
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4811      	ldr	r0, [pc, #68]	@ (8000ba8 <MX_GPIO_Init+0x150>)
 8000b62:	f001 fb3b 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3 | USB_PowerSwitchOn_Pin;
 8000b66:	2348      	movs	r3, #72	@ 0x48
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	480b      	ldr	r0, [pc, #44]	@ (8000bac <MX_GPIO_Init+0x154>)
 8000b7e:	f001 fb2d 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b82:	2380      	movs	r3, #128	@ 0x80
 8000b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b86:	2300      	movs	r3, #0
 8000b88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b8e:	f107 031c 	add.w	r3, r7, #28
 8000b92:	4619      	mov	r1, r3
 8000b94:	4805      	ldr	r0, [pc, #20]	@ (8000bac <MX_GPIO_Init+0x154>)
 8000b96:	f001 fb21 	bl	80021dc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b9a:	bf00      	nop
 8000b9c:	3730      	adds	r7, #48	@ 0x30
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40020400 	.word	0x40020400
 8000bac:	40021800 	.word	0x40021800
 8000bb0:	40020800 	.word	0x40020800

08000bb4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <StartUartTask>:
 * @brief  Function implementing the uartTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUartTask */
void StartUartTask(void const *argument) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
#define TRIGOP 1
#define ENDOFDATA 2
  /* Infinite loop */
  for (;;) {
    // new
    uartRxData[0] = 100, uartRxData[3] = 100;
 8000bd0:	4b47      	ldr	r3, [pc, #284]	@ (8000cf0 <StartUartTask+0x128>)
 8000bd2:	2264      	movs	r2, #100	@ 0x64
 8000bd4:	701a      	strb	r2, [r3, #0]
 8000bd6:	4b46      	ldr	r3, [pc, #280]	@ (8000cf0 <StartUartTask+0x128>)
 8000bd8:	2264      	movs	r2, #100	@ 0x64
 8000bda:	70da      	strb	r2, [r3, #3]

    while (uartRxData[0] != MOVEOP && uartRxData[0] != TRIGOP) {
 8000bdc:	e007      	b.n	8000bee <StartUartTask+0x26>
      HAL_UART_Receive(huartn, uartRxData, 1, 0xffff);
 8000bde:	4b45      	ldr	r3, [pc, #276]	@ (8000cf4 <StartUartTask+0x12c>)
 8000be0:	6818      	ldr	r0, [r3, #0]
 8000be2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000be6:	2201      	movs	r2, #1
 8000be8:	4941      	ldr	r1, [pc, #260]	@ (8000cf0 <StartUartTask+0x128>)
 8000bea:	f003 fba0 	bl	800432e <HAL_UART_Receive>
    while (uartRxData[0] != MOVEOP && uartRxData[0] != TRIGOP) {
 8000bee:	4b40      	ldr	r3, [pc, #256]	@ (8000cf0 <StartUartTask+0x128>)
 8000bf0:	f993 3000 	ldrsb.w	r3, [r3]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d004      	beq.n	8000c02 <StartUartTask+0x3a>
 8000bf8:	4b3d      	ldr	r3, [pc, #244]	@ (8000cf0 <StartUartTask+0x128>)
 8000bfa:	f993 3000 	ldrsb.w	r3, [r3]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d1ed      	bne.n	8000bde <StartUartTask+0x16>
    }
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000c02:	2201      	movs	r2, #1
 8000c04:	2101      	movs	r1, #1
 8000c06:	483c      	ldr	r0, [pc, #240]	@ (8000cf8 <StartUartTask+0x130>)
 8000c08:	f001 fc94 	bl	8002534 <HAL_GPIO_WritePin>
    HAL_UART_Receive(huartn, uartRxData + 1, 1, 0x00ff);
 8000c0c:	4b39      	ldr	r3, [pc, #228]	@ (8000cf4 <StartUartTask+0x12c>)
 8000c0e:	6818      	ldr	r0, [r3, #0]
 8000c10:	493a      	ldr	r1, [pc, #232]	@ (8000cfc <StartUartTask+0x134>)
 8000c12:	23ff      	movs	r3, #255	@ 0xff
 8000c14:	2201      	movs	r2, #1
 8000c16:	f003 fb8a 	bl	800432e <HAL_UART_Receive>
    HAL_UART_Receive(huartn, uartRxData + 2, 1, 0x00ff);
 8000c1a:	4b36      	ldr	r3, [pc, #216]	@ (8000cf4 <StartUartTask+0x12c>)
 8000c1c:	6818      	ldr	r0, [r3, #0]
 8000c1e:	4938      	ldr	r1, [pc, #224]	@ (8000d00 <StartUartTask+0x138>)
 8000c20:	23ff      	movs	r3, #255	@ 0xff
 8000c22:	2201      	movs	r2, #1
 8000c24:	f003 fb83 	bl	800432e <HAL_UART_Receive>
    HAL_UART_Receive(huartn, uartRxData + 3, 1, 0x00ff);
 8000c28:	4b32      	ldr	r3, [pc, #200]	@ (8000cf4 <StartUartTask+0x12c>)
 8000c2a:	6818      	ldr	r0, [r3, #0]
 8000c2c:	4935      	ldr	r1, [pc, #212]	@ (8000d04 <StartUartTask+0x13c>)
 8000c2e:	23ff      	movs	r3, #255	@ 0xff
 8000c30:	2201      	movs	r2, #1
 8000c32:	f003 fb7c 	bl	800432e <HAL_UART_Receive>
    while (uartRxData[3] != ENDOFDATA) {
 8000c36:	e015      	b.n	8000c64 <StartUartTask+0x9c>
      uartRxData[0] = uartRxData[1];
 8000c38:	4b2d      	ldr	r3, [pc, #180]	@ (8000cf0 <StartUartTask+0x128>)
 8000c3a:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8000c3e:	4b2c      	ldr	r3, [pc, #176]	@ (8000cf0 <StartUartTask+0x128>)
 8000c40:	701a      	strb	r2, [r3, #0]
      uartRxData[1] = uartRxData[2];
 8000c42:	4b2b      	ldr	r3, [pc, #172]	@ (8000cf0 <StartUartTask+0x128>)
 8000c44:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8000c48:	4b29      	ldr	r3, [pc, #164]	@ (8000cf0 <StartUartTask+0x128>)
 8000c4a:	705a      	strb	r2, [r3, #1]
      uartRxData[2] = uartRxData[3];
 8000c4c:	4b28      	ldr	r3, [pc, #160]	@ (8000cf0 <StartUartTask+0x128>)
 8000c4e:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8000c52:	4b27      	ldr	r3, [pc, #156]	@ (8000cf0 <StartUartTask+0x128>)
 8000c54:	709a      	strb	r2, [r3, #2]
      HAL_UART_Receive(huartn, uartRxData + 3, 1, 0x00ff);
 8000c56:	4b27      	ldr	r3, [pc, #156]	@ (8000cf4 <StartUartTask+0x12c>)
 8000c58:	6818      	ldr	r0, [r3, #0]
 8000c5a:	492a      	ldr	r1, [pc, #168]	@ (8000d04 <StartUartTask+0x13c>)
 8000c5c:	23ff      	movs	r3, #255	@ 0xff
 8000c5e:	2201      	movs	r2, #1
 8000c60:	f003 fb65 	bl	800432e <HAL_UART_Receive>
    while (uartRxData[3] != ENDOFDATA) {
 8000c64:	4b22      	ldr	r3, [pc, #136]	@ (8000cf0 <StartUartTask+0x128>)
 8000c66:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	d1e4      	bne.n	8000c38 <StartUartTask+0x70>
    }
    osSemaphoreWait(phiDirSemHandle, osWaitForever);
 8000c6e:	4b26      	ldr	r3, [pc, #152]	@ (8000d08 <StartUartTask+0x140>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f04f 31ff 	mov.w	r1, #4294967295
 8000c76:	4618      	mov	r0, r3
 8000c78:	f004 fece 	bl	8005a18 <osSemaphoreWait>
    phierr = uartRxData[1];
 8000c7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf0 <StartUartTask+0x128>)
 8000c7e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8000c82:	4b22      	ldr	r3, [pc, #136]	@ (8000d0c <StartUartTask+0x144>)
 8000c84:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(phiDirSemHandle);
 8000c86:	4b20      	ldr	r3, [pc, #128]	@ (8000d08 <StartUartTask+0x140>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f004 ff12 	bl	8005ab4 <osSemaphoreRelease>
    osSemaphoreWait(thetaDirSemHandle, osWaitForever);
 8000c90:	4b1f      	ldr	r3, [pc, #124]	@ (8000d10 <StartUartTask+0x148>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f04f 31ff 	mov.w	r1, #4294967295
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f004 febd 	bl	8005a18 <osSemaphoreWait>
    thterr = uartRxData[2];
 8000c9e:	4b14      	ldr	r3, [pc, #80]	@ (8000cf0 <StartUartTask+0x128>)
 8000ca0:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8000ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d14 <StartUartTask+0x14c>)
 8000ca6:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(thetaDirSemHandle);
 8000ca8:	4b19      	ldr	r3, [pc, #100]	@ (8000d10 <StartUartTask+0x148>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f004 ff01 	bl	8005ab4 <osSemaphoreRelease>

    // HAL_UART_Receive(huartn, (uint8_t *)&oper, 1, 0xffff);
    if (uartRxData[0] == MOVEOP) {
 8000cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf0 <StartUartTask+0x128>)
 8000cb4:	f993 3000 	ldrsb.w	r3, [r3]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d105      	bne.n	8000cc8 <StartUartTask+0x100>
      osSemaphoreRelease(moveSemHandle);
 8000cbc:	4b16      	ldr	r3, [pc, #88]	@ (8000d18 <StartUartTask+0x150>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f004 fef7 	bl	8005ab4 <osSemaphoreRelease>
 8000cc6:	e783      	b.n	8000bd0 <StartUartTask+0x8>
    } else if (uartRxData[0] == TRIGOP) {
 8000cc8:	4b09      	ldr	r3, [pc, #36]	@ (8000cf0 <StartUartTask+0x128>)
 8000cca:	f993 3000 	ldrsb.w	r3, [r3]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	f47f af7e 	bne.w	8000bd0 <StartUartTask+0x8>
      osSemaphoreRelease(triggerSemHandle);
 8000cd4:	4b11      	ldr	r3, [pc, #68]	@ (8000d1c <StartUartTask+0x154>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f004 feeb 	bl	8005ab4 <osSemaphoreRelease>
      // HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
      osSemaphoreWait(trigendSemHandle, osWaitForever);
 8000cde:	4b10      	ldr	r3, [pc, #64]	@ (8000d20 <StartUartTask+0x158>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f004 fe96 	bl	8005a18 <osSemaphoreWait>
    uartRxData[0] = 100, uartRxData[3] = 100;
 8000cec:	e770      	b.n	8000bd0 <StartUartTask+0x8>
 8000cee:	bf00      	nop
 8000cf0:	20000b44 	.word	0x20000b44
 8000cf4:	20000000 	.word	0x20000000
 8000cf8:	40020400 	.word	0x40020400
 8000cfc:	20000b45 	.word	0x20000b45
 8000d00:	20000b46 	.word	0x20000b46
 8000d04:	20000b47 	.word	0x20000b47
 8000d08:	20000b28 	.word	0x20000b28
 8000d0c:	20000b40 	.word	0x20000b40
 8000d10:	20000b2c 	.word	0x20000b2c
 8000d14:	20000b41 	.word	0x20000b41
 8000d18:	20000b38 	.word	0x20000b38
 8000d1c:	20000b30 	.word	0x20000b30
 8000d20:	20000b34 	.word	0x20000b34

08000d24 <StartMotorTask>:
float kpx = .8, kix = .01, kdx = .05;
float kpy = .8, kiy = .01, kdy = .05;
int bounderr;
const int BOUNDCOUNT = 30;
/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void const *argument) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
#define PHIMIN 150
#define THTMAX 750
#define THTMIN 450
  /* Infinite loop */
  for (;;) {
    bounderr = BOUNDCOUNT;
 8000d2c:	221e      	movs	r2, #30
 8000d2e:	4ba5      	ldr	r3, [pc, #660]	@ (8000fc4 <StartMotorTask+0x2a0>)
 8000d30:	601a      	str	r2, [r3, #0]
    osSemaphoreWait(moveSemHandle, osWaitForever);
 8000d32:	4ba5      	ldr	r3, [pc, #660]	@ (8000fc8 <StartMotorTask+0x2a4>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f04f 31ff 	mov.w	r1, #4294967295
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f004 fe6c 	bl	8005a18 <osSemaphoreWait>
    // get error values
    osSemaphoreWait(phiDirSemHandle, osWaitForever);
 8000d40:	4ba2      	ldr	r3, [pc, #648]	@ (8000fcc <StartMotorTask+0x2a8>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f04f 31ff 	mov.w	r1, #4294967295
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f004 fe65 	bl	8005a18 <osSemaphoreWait>
    nowphierr = phierr;
 8000d4e:	4ba0      	ldr	r3, [pc, #640]	@ (8000fd0 <StartMotorTask+0x2ac>)
 8000d50:	f993 3000 	ldrsb.w	r3, [r3]
 8000d54:	ee07 3a90 	vmov	s15, r3
 8000d58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d5c:	4b9d      	ldr	r3, [pc, #628]	@ (8000fd4 <StartMotorTask+0x2b0>)
 8000d5e:	edc3 7a00 	vstr	s15, [r3]
    osSemaphoreRelease(phiDirSemHandle);
 8000d62:	4b9a      	ldr	r3, [pc, #616]	@ (8000fcc <StartMotorTask+0x2a8>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f004 fea4 	bl	8005ab4 <osSemaphoreRelease>

    osSemaphoreWait(thetaDirSemHandle, osWaitForever);
 8000d6c:	4b9a      	ldr	r3, [pc, #616]	@ (8000fd8 <StartMotorTask+0x2b4>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f04f 31ff 	mov.w	r1, #4294967295
 8000d74:	4618      	mov	r0, r3
 8000d76:	f004 fe4f 	bl	8005a18 <osSemaphoreWait>
    nowthterr = thterr;
 8000d7a:	4b98      	ldr	r3, [pc, #608]	@ (8000fdc <StartMotorTask+0x2b8>)
 8000d7c:	f993 3000 	ldrsb.w	r3, [r3]
 8000d80:	ee07 3a90 	vmov	s15, r3
 8000d84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d88:	4b95      	ldr	r3, [pc, #596]	@ (8000fe0 <StartMotorTask+0x2bc>)
 8000d8a:	edc3 7a00 	vstr	s15, [r3]
    osSemaphoreRelease(thetaDirSemHandle);
 8000d8e:	4b92      	ldr	r3, [pc, #584]	@ (8000fd8 <StartMotorTask+0x2b4>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f004 fe8e 	bl	8005ab4 <osSemaphoreRelease>

    // pid control
    integphi += nowphierr;
 8000d98:	4b92      	ldr	r3, [pc, #584]	@ (8000fe4 <StartMotorTask+0x2c0>)
 8000d9a:	ed93 7a00 	vldr	s14, [r3]
 8000d9e:	4b8d      	ldr	r3, [pc, #564]	@ (8000fd4 <StartMotorTask+0x2b0>)
 8000da0:	edd3 7a00 	vldr	s15, [r3]
 8000da4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000da8:	4b8e      	ldr	r3, [pc, #568]	@ (8000fe4 <StartMotorTask+0x2c0>)
 8000daa:	edc3 7a00 	vstr	s15, [r3]
    integtht += nowthterr;
 8000dae:	4b8e      	ldr	r3, [pc, #568]	@ (8000fe8 <StartMotorTask+0x2c4>)
 8000db0:	ed93 7a00 	vldr	s14, [r3]
 8000db4:	4b8a      	ldr	r3, [pc, #552]	@ (8000fe0 <StartMotorTask+0x2bc>)
 8000db6:	edd3 7a00 	vldr	s15, [r3]
 8000dba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dbe:	4b8a      	ldr	r3, [pc, #552]	@ (8000fe8 <StartMotorTask+0x2c4>)
 8000dc0:	edc3 7a00 	vstr	s15, [r3]
    diffphi = (nowphierr - prevphierr);
 8000dc4:	4b83      	ldr	r3, [pc, #524]	@ (8000fd4 <StartMotorTask+0x2b0>)
 8000dc6:	ed93 7a00 	vldr	s14, [r3]
 8000dca:	4b88      	ldr	r3, [pc, #544]	@ (8000fec <StartMotorTask+0x2c8>)
 8000dcc:	edd3 7a00 	vldr	s15, [r3]
 8000dd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dd4:	4b86      	ldr	r3, [pc, #536]	@ (8000ff0 <StartMotorTask+0x2cc>)
 8000dd6:	edc3 7a00 	vstr	s15, [r3]
    difftht = (nowthterr - prevthterr);
 8000dda:	4b81      	ldr	r3, [pc, #516]	@ (8000fe0 <StartMotorTask+0x2bc>)
 8000ddc:	ed93 7a00 	vldr	s14, [r3]
 8000de0:	4b84      	ldr	r3, [pc, #528]	@ (8000ff4 <StartMotorTask+0x2d0>)
 8000de2:	edd3 7a00 	vldr	s15, [r3]
 8000de6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dea:	4b83      	ldr	r3, [pc, #524]	@ (8000ff8 <StartMotorTask+0x2d4>)
 8000dec:	edc3 7a00 	vstr	s15, [r3]
    phipulse += kpx * nowphierr + kix * integphi + kpx * diffphi;
 8000df0:	4b82      	ldr	r3, [pc, #520]	@ (8000ffc <StartMotorTask+0x2d8>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	ee07 3a90 	vmov	s15, r3
 8000df8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dfc:	4b80      	ldr	r3, [pc, #512]	@ (8001000 <StartMotorTask+0x2dc>)
 8000dfe:	edd3 6a00 	vldr	s13, [r3]
 8000e02:	4b74      	ldr	r3, [pc, #464]	@ (8000fd4 <StartMotorTask+0x2b0>)
 8000e04:	edd3 7a00 	vldr	s15, [r3]
 8000e08:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000e0c:	4b7d      	ldr	r3, [pc, #500]	@ (8001004 <StartMotorTask+0x2e0>)
 8000e0e:	ed93 6a00 	vldr	s12, [r3]
 8000e12:	4b74      	ldr	r3, [pc, #464]	@ (8000fe4 <StartMotorTask+0x2c0>)
 8000e14:	edd3 7a00 	vldr	s15, [r3]
 8000e18:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e1c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000e20:	4b77      	ldr	r3, [pc, #476]	@ (8001000 <StartMotorTask+0x2dc>)
 8000e22:	ed93 6a00 	vldr	s12, [r3]
 8000e26:	4b72      	ldr	r3, [pc, #456]	@ (8000ff0 <StartMotorTask+0x2cc>)
 8000e28:	edd3 7a00 	vldr	s15, [r3]
 8000e2c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000e34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e3c:	ee17 2a90 	vmov	r2, s15
 8000e40:	4b6e      	ldr	r3, [pc, #440]	@ (8000ffc <StartMotorTask+0x2d8>)
 8000e42:	601a      	str	r2, [r3, #0]
    thtpulse += kpy * nowthterr + kiy * integtht + kpy * difftht;
 8000e44:	4b70      	ldr	r3, [pc, #448]	@ (8001008 <StartMotorTask+0x2e4>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	ee07 3a90 	vmov	s15, r3
 8000e4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e50:	4b6e      	ldr	r3, [pc, #440]	@ (800100c <StartMotorTask+0x2e8>)
 8000e52:	edd3 6a00 	vldr	s13, [r3]
 8000e56:	4b62      	ldr	r3, [pc, #392]	@ (8000fe0 <StartMotorTask+0x2bc>)
 8000e58:	edd3 7a00 	vldr	s15, [r3]
 8000e5c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000e60:	4b6b      	ldr	r3, [pc, #428]	@ (8001010 <StartMotorTask+0x2ec>)
 8000e62:	ed93 6a00 	vldr	s12, [r3]
 8000e66:	4b60      	ldr	r3, [pc, #384]	@ (8000fe8 <StartMotorTask+0x2c4>)
 8000e68:	edd3 7a00 	vldr	s15, [r3]
 8000e6c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e70:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000e74:	4b65      	ldr	r3, [pc, #404]	@ (800100c <StartMotorTask+0x2e8>)
 8000e76:	ed93 6a00 	vldr	s12, [r3]
 8000e7a:	4b5f      	ldr	r3, [pc, #380]	@ (8000ff8 <StartMotorTask+0x2d4>)
 8000e7c:	edd3 7a00 	vldr	s15, [r3]
 8000e80:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000e88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e90:	ee17 2a90 	vmov	r2, s15
 8000e94:	4b5c      	ldr	r3, [pc, #368]	@ (8001008 <StartMotorTask+0x2e4>)
 8000e96:	601a      	str	r2, [r3, #0]
    // phipulse += kpx * nowphierr;
    // thtpulse += kpy * nowthterr;

    // check the bound
    phipulse = phipulse > PHIMIN ? phipulse : PHIMIN;
 8000e98:	4b58      	ldr	r3, [pc, #352]	@ (8000ffc <StartMotorTask+0x2d8>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b96      	cmp	r3, #150	@ 0x96
 8000e9e:	bfb8      	it	lt
 8000ea0:	2396      	movlt	r3, #150	@ 0x96
 8000ea2:	4a56      	ldr	r2, [pc, #344]	@ (8000ffc <StartMotorTask+0x2d8>)
 8000ea4:	6013      	str	r3, [r2, #0]
    phipulse = phipulse < PHIMAX ? phipulse : PHIMAX;
 8000ea6:	4b55      	ldr	r3, [pc, #340]	@ (8000ffc <StartMotorTask+0x2d8>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	bfa8      	it	ge
 8000eb2:	4613      	movge	r3, r2
 8000eb4:	4a51      	ldr	r2, [pc, #324]	@ (8000ffc <StartMotorTask+0x2d8>)
 8000eb6:	6013      	str	r3, [r2, #0]
    thtpulse = thtpulse > THTMIN ? thtpulse : THTMIN;
 8000eb8:	4b53      	ldr	r3, [pc, #332]	@ (8001008 <StartMotorTask+0x2e4>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8000ec0:	bfb8      	it	lt
 8000ec2:	f44f 73e1 	movlt.w	r3, #450	@ 0x1c2
 8000ec6:	4a50      	ldr	r2, [pc, #320]	@ (8001008 <StartMotorTask+0x2e4>)
 8000ec8:	6013      	str	r3, [r2, #0]
    thtpulse = thtpulse < THTMAX ? thtpulse : THTMAX;
 8000eca:	4b4f      	ldr	r3, [pc, #316]	@ (8001008 <StartMotorTask+0x2e4>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	bfa8      	it	ge
 8000ed6:	4613      	movge	r3, r2
 8000ed8:	4a4b      	ldr	r2, [pc, #300]	@ (8001008 <StartMotorTask+0x2e4>)
 8000eda:	6013      	str	r3, [r2, #0]
    if (phipulse == PHIMIN || phipulse == PHIMAX || thtpulse == THTMIN ||
 8000edc:	4b47      	ldr	r3, [pc, #284]	@ (8000ffc <StartMotorTask+0x2d8>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b96      	cmp	r3, #150	@ 0x96
 8000ee2:	d010      	beq.n	8000f06 <StartMotorTask+0x1e2>
 8000ee4:	4b45      	ldr	r3, [pc, #276]	@ (8000ffc <StartMotorTask+0x2d8>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d00a      	beq.n	8000f06 <StartMotorTask+0x1e2>
 8000ef0:	4b45      	ldr	r3, [pc, #276]	@ (8001008 <StartMotorTask+0x2e4>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8000ef8:	d005      	beq.n	8000f06 <StartMotorTask+0x1e2>
        thtpulse == THTMAX)
 8000efa:	4b43      	ldr	r3, [pc, #268]	@ (8001008 <StartMotorTask+0x2e4>)
 8000efc:	681b      	ldr	r3, [r3, #0]
    if (phipulse == PHIMIN || phipulse == PHIMAX || thtpulse == THTMIN ||
 8000efe:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d104      	bne.n	8000f10 <StartMotorTask+0x1ec>
      bounderr--;
 8000f06:	4b2f      	ldr	r3, [pc, #188]	@ (8000fc4 <StartMotorTask+0x2a0>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	4a2d      	ldr	r2, [pc, #180]	@ (8000fc4 <StartMotorTask+0x2a0>)
 8000f0e:	6013      	str	r3, [r2, #0]
    if (!bounderr) {
 8000f10:	4b2c      	ldr	r3, [pc, #176]	@ (8000fc4 <StartMotorTask+0x2a0>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d140      	bne.n	8000f9a <StartMotorTask+0x276>
      phipulse = PHICENTER, thtpulse = THTCENTER;
 8000f18:	f240 12c1 	movw	r2, #449	@ 0x1c1
 8000f1c:	4b37      	ldr	r3, [pc, #220]	@ (8000ffc <StartMotorTask+0x2d8>)
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	f240 2289 	movw	r2, #649	@ 0x289
 8000f24:	4b38      	ldr	r3, [pc, #224]	@ (8001008 <StartMotorTask+0x2e4>)
 8000f26:	601a      	str	r2, [r3, #0]
      HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_SET);
 8000f28:	2201      	movs	r2, #1
 8000f2a:	2108      	movs	r1, #8
 8000f2c:	4839      	ldr	r0, [pc, #228]	@ (8001014 <StartMotorTask+0x2f0>)
 8000f2e:	f001 fb01 	bl	8002534 <HAL_GPIO_WritePin>
      HAL_UART_Transmit(huartn, &RES_ERR, 1, HAL_MAX_DELAY);
 8000f32:	4b39      	ldr	r3, [pc, #228]	@ (8001018 <StartMotorTask+0x2f4>)
 8000f34:	6818      	ldr	r0, [r3, #0]
 8000f36:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	4937      	ldr	r1, [pc, #220]	@ (800101c <StartMotorTask+0x2f8>)
 8000f3e:	f003 f96b 	bl	8004218 <HAL_UART_Transmit>
      bounderr = BOUNDCOUNT;
 8000f42:	221e      	movs	r2, #30
 8000f44:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc4 <StartMotorTask+0x2a0>)
 8000f46:	601a      	str	r2, [r3, #0]
      phipulse = PHICENTER, thtpulse = THTCENTER;
 8000f48:	f240 12c1 	movw	r2, #449	@ 0x1c1
 8000f4c:	4b2b      	ldr	r3, [pc, #172]	@ (8000ffc <StartMotorTask+0x2d8>)
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	f240 2289 	movw	r2, #649	@ 0x289
 8000f54:	4b2c      	ldr	r3, [pc, #176]	@ (8001008 <StartMotorTask+0x2e4>)
 8000f56:	601a      	str	r2, [r3, #0]
      prevphierr = 0.0, prevthterr = 0.0;
 8000f58:	4b24      	ldr	r3, [pc, #144]	@ (8000fec <StartMotorTask+0x2c8>)
 8000f5a:	f04f 0200 	mov.w	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	4b24      	ldr	r3, [pc, #144]	@ (8000ff4 <StartMotorTask+0x2d0>)
 8000f62:	f04f 0200 	mov.w	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
      nowphierr = 0.0, nowthterr = 0.0;
 8000f68:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd4 <StartMotorTask+0x2b0>)
 8000f6a:	f04f 0200 	mov.w	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe0 <StartMotorTask+0x2bc>)
 8000f72:	f04f 0200 	mov.w	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
      integphi = 0.0, integtht = 0.0;
 8000f78:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe4 <StartMotorTask+0x2c0>)
 8000f7a:	f04f 0200 	mov.w	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	4b19      	ldr	r3, [pc, #100]	@ (8000fe8 <StartMotorTask+0x2c4>)
 8000f82:	f04f 0200 	mov.w	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
      diffphi = 0.0, difftht = 0.0;
 8000f88:	4b19      	ldr	r3, [pc, #100]	@ (8000ff0 <StartMotorTask+0x2cc>)
 8000f8a:	f04f 0200 	mov.w	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	4b19      	ldr	r3, [pc, #100]	@ (8000ff8 <StartMotorTask+0x2d4>)
 8000f92:	f04f 0200 	mov.w	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
      break;
 8000f98:	e010      	b.n	8000fbc <StartMotorTask+0x298>
    }

    // set duty cycle
    TIM3->CCR3 = thtpulse;
 8000f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8001008 <StartMotorTask+0x2e4>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	4b20      	ldr	r3, [pc, #128]	@ (8001020 <StartMotorTask+0x2fc>)
 8000fa0:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM3->CCR4 = phipulse;
 8000fa2:	4b16      	ldr	r3, [pc, #88]	@ (8000ffc <StartMotorTask+0x2d8>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	4b1e      	ldr	r3, [pc, #120]	@ (8001020 <StartMotorTask+0x2fc>)
 8000fa8:	641a      	str	r2, [r3, #64]	@ 0x40
    prevphierr = nowphierr, prevthterr = nowthterr;
 8000faa:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd4 <StartMotorTask+0x2b0>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a0f      	ldr	r2, [pc, #60]	@ (8000fec <StartMotorTask+0x2c8>)
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe0 <StartMotorTask+0x2bc>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a0f      	ldr	r2, [pc, #60]	@ (8000ff4 <StartMotorTask+0x2d0>)
 8000fb8:	6013      	str	r3, [r2, #0]
    bounderr = BOUNDCOUNT;
 8000fba:	e6b7      	b.n	8000d2c <StartMotorTask+0x8>
  }
  /* USER CODE END StartMotorTask */
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000b68 	.word	0x20000b68
 8000fc8:	20000b38 	.word	0x20000b38
 8000fcc:	20000b28 	.word	0x20000b28
 8000fd0:	20000b40 	.word	0x20000b40
 8000fd4:	20000b50 	.word	0x20000b50
 8000fd8:	20000b2c 	.word	0x20000b2c
 8000fdc:	20000b41 	.word	0x20000b41
 8000fe0:	20000b54 	.word	0x20000b54
 8000fe4:	20000b58 	.word	0x20000b58
 8000fe8:	20000b5c 	.word	0x20000b5c
 8000fec:	20000b48 	.word	0x20000b48
 8000ff0:	20000b60 	.word	0x20000b60
 8000ff4:	20000b4c 	.word	0x20000b4c
 8000ff8:	20000b64 	.word	0x20000b64
 8000ffc:	20000004 	.word	0x20000004
 8001000:	2000000c 	.word	0x2000000c
 8001004:	20000010 	.word	0x20000010
 8001008:	20000008 	.word	0x20000008
 800100c:	20000014 	.word	0x20000014
 8001010:	20000018 	.word	0x20000018
 8001014:	40021800 	.word	0x40021800
 8001018:	20000000 	.word	0x20000000
 800101c:	080082dd 	.word	0x080082dd
 8001020:	40000400 	.word	0x40000400

08001024 <StartTrigTask>:
 * @brief Function implementing the trigTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTrigTask */
void StartTrigTask(void const *argument) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTrigTask */
  const int DFLTPULSE = 270, TRIGPULSE = 700;
 800102c:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8001036:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for (;;) {
    osSemaphoreWait(triggerSemHandle, osWaitForever);
 8001038:	4b30      	ldr	r3, [pc, #192]	@ (80010fc <StartTrigTask+0xd8>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f04f 31ff 	mov.w	r1, #4294967295
 8001040:	4618      	mov	r0, r3
 8001042:	f004 fce9 	bl	8005a18 <osSemaphoreWait>
    // triggering
    TIM3->CCR1 = TRIGPULSE;
 8001046:	4a2e      	ldr	r2, [pc, #184]	@ (8001100 <StartTrigTask+0xdc>)
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	6353      	str	r3, [r2, #52]	@ 0x34
    osDelay(500);
 800104c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001050:	f004 fc9c 	bl	800598c <osDelay>
    TIM3->CCR1 = DFLTPULSE;
 8001054:	4a2a      	ldr	r2, [pc, #168]	@ (8001100 <StartTrigTask+0xdc>)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	6353      	str	r3, [r2, #52]	@ 0x34
    osDelay(500);
 800105a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800105e:	f004 fc95 	bl	800598c <osDelay>
    TIM3->CCR1 = TRIGPULSE;
 8001062:	4a27      	ldr	r2, [pc, #156]	@ (8001100 <StartTrigTask+0xdc>)
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	6353      	str	r3, [r2, #52]	@ 0x34
    osDelay(500);
 8001068:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800106c:	f004 fc8e 	bl	800598c <osDelay>
    TIM3->CCR1 = DFLTPULSE;
 8001070:	4a23      	ldr	r2, [pc, #140]	@ (8001100 <StartTrigTask+0xdc>)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	6353      	str	r3, [r2, #52]	@ 0x34
    osDelay(500);
 8001076:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800107a:	f004 fc87 	bl	800598c <osDelay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	2101      	movs	r1, #1
 8001082:	4820      	ldr	r0, [pc, #128]	@ (8001104 <StartTrigTask+0xe0>)
 8001084:	f001 fa56 	bl	8002534 <HAL_GPIO_WritePin>
    bounderr = BOUNDCOUNT;
 8001088:	221e      	movs	r2, #30
 800108a:	4b1f      	ldr	r3, [pc, #124]	@ (8001108 <StartTrigTask+0xe4>)
 800108c:	601a      	str	r2, [r3, #0]
    TIM3->CCR3 = THTCENTER, TIM3->CCR4 = PHICENTER;
 800108e:	f240 2289 	movw	r2, #649	@ 0x289
 8001092:	4b1b      	ldr	r3, [pc, #108]	@ (8001100 <StartTrigTask+0xdc>)
 8001094:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001096:	f240 12c1 	movw	r2, #449	@ 0x1c1
 800109a:	4b19      	ldr	r3, [pc, #100]	@ (8001100 <StartTrigTask+0xdc>)
 800109c:	641a      	str	r2, [r3, #64]	@ 0x40
    prevphierr = 0.0, prevthterr = 0.0;
 800109e:	4b1b      	ldr	r3, [pc, #108]	@ (800110c <StartTrigTask+0xe8>)
 80010a0:	f04f 0200 	mov.w	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001110 <StartTrigTask+0xec>)
 80010a8:	f04f 0200 	mov.w	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
    nowphierr = 0.0, nowthterr = 0.0;
 80010ae:	4b19      	ldr	r3, [pc, #100]	@ (8001114 <StartTrigTask+0xf0>)
 80010b0:	f04f 0200 	mov.w	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	4b18      	ldr	r3, [pc, #96]	@ (8001118 <StartTrigTask+0xf4>)
 80010b8:	f04f 0200 	mov.w	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
    integphi = 0.0, integtht = 0.0;
 80010be:	4b17      	ldr	r3, [pc, #92]	@ (800111c <StartTrigTask+0xf8>)
 80010c0:	f04f 0200 	mov.w	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	4b16      	ldr	r3, [pc, #88]	@ (8001120 <StartTrigTask+0xfc>)
 80010c8:	f04f 0200 	mov.w	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
    diffphi = 0.0, difftht = 0.0;
 80010ce:	4b15      	ldr	r3, [pc, #84]	@ (8001124 <StartTrigTask+0x100>)
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	4b14      	ldr	r3, [pc, #80]	@ (8001128 <StartTrigTask+0x104>)
 80010d8:	f04f 0200 	mov.w	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
    HAL_UART_Transmit(huartn, &RES_DONE, 1, HAL_MAX_DELAY);
 80010de:	4b13      	ldr	r3, [pc, #76]	@ (800112c <StartTrigTask+0x108>)
 80010e0:	6818      	ldr	r0, [r3, #0]
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295
 80010e6:	2201      	movs	r2, #1
 80010e8:	4911      	ldr	r1, [pc, #68]	@ (8001130 <StartTrigTask+0x10c>)
 80010ea:	f003 f895 	bl	8004218 <HAL_UART_Transmit>
    osSemaphoreRelease(trigendSemHandle);
 80010ee:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <StartTrigTask+0x110>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f004 fcde 	bl	8005ab4 <osSemaphoreRelease>
    osSemaphoreWait(triggerSemHandle, osWaitForever);
 80010f8:	bf00      	nop
 80010fa:	e79d      	b.n	8001038 <StartTrigTask+0x14>
 80010fc:	20000b30 	.word	0x20000b30
 8001100:	40000400 	.word	0x40000400
 8001104:	40020400 	.word	0x40020400
 8001108:	20000b68 	.word	0x20000b68
 800110c:	20000b48 	.word	0x20000b48
 8001110:	20000b4c 	.word	0x20000b4c
 8001114:	20000b50 	.word	0x20000b50
 8001118:	20000b54 	.word	0x20000b54
 800111c:	20000b58 	.word	0x20000b58
 8001120:	20000b5c 	.word	0x20000b5c
 8001124:	20000b60 	.word	0x20000b60
 8001128:	20000b64 	.word	0x20000b64
 800112c:	20000000 	.word	0x20000000
 8001130:	080082de 	.word	0x080082de
 8001134:	20000b34 	.word	0x20000b34

08001138 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a04      	ldr	r2, [pc, #16]	@ (8001158 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d101      	bne.n	800114e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800114a:	f000 fb67 	bl	800181c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40001000 	.word	0x40001000

0800115c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001160:	b672      	cpsid	i
}
 8001162:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001164:	bf00      	nop
 8001166:	e7fd      	b.n	8001164 <Error_Handler+0x8>

08001168 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	4b12      	ldr	r3, [pc, #72]	@ (80011bc <HAL_MspInit+0x54>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001176:	4a11      	ldr	r2, [pc, #68]	@ (80011bc <HAL_MspInit+0x54>)
 8001178:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800117c:	6453      	str	r3, [r2, #68]	@ 0x44
 800117e:	4b0f      	ldr	r3, [pc, #60]	@ (80011bc <HAL_MspInit+0x54>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001182:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	603b      	str	r3, [r7, #0]
 800118e:	4b0b      	ldr	r3, [pc, #44]	@ (80011bc <HAL_MspInit+0x54>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001192:	4a0a      	ldr	r2, [pc, #40]	@ (80011bc <HAL_MspInit+0x54>)
 8001194:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001198:	6413      	str	r3, [r2, #64]	@ 0x40
 800119a:	4b08      	ldr	r3, [pc, #32]	@ (80011bc <HAL_MspInit+0x54>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011a2:	603b      	str	r3, [r7, #0]
 80011a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	210f      	movs	r1, #15
 80011aa:	f06f 0001 	mvn.w	r0, #1
 80011ae:	f000 fc31 	bl	8001a14 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40023800 	.word	0x40023800

080011c0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08e      	sub	sp, #56	@ 0x38
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a55      	ldr	r2, [pc, #340]	@ (8001334 <HAL_ETH_MspInit+0x174>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	f040 80a4 	bne.w	800132c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80011e4:	2300      	movs	r3, #0
 80011e6:	623b      	str	r3, [r7, #32]
 80011e8:	4b53      	ldr	r3, [pc, #332]	@ (8001338 <HAL_ETH_MspInit+0x178>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ec:	4a52      	ldr	r2, [pc, #328]	@ (8001338 <HAL_ETH_MspInit+0x178>)
 80011ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f4:	4b50      	ldr	r3, [pc, #320]	@ (8001338 <HAL_ETH_MspInit+0x178>)
 80011f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011fc:	623b      	str	r3, [r7, #32]
 80011fe:	6a3b      	ldr	r3, [r7, #32]
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]
 8001204:	4b4c      	ldr	r3, [pc, #304]	@ (8001338 <HAL_ETH_MspInit+0x178>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001208:	4a4b      	ldr	r2, [pc, #300]	@ (8001338 <HAL_ETH_MspInit+0x178>)
 800120a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800120e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001210:	4b49      	ldr	r3, [pc, #292]	@ (8001338 <HAL_ETH_MspInit+0x178>)
 8001212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001214:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001218:	61fb      	str	r3, [r7, #28]
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	2300      	movs	r3, #0
 800121e:	61bb      	str	r3, [r7, #24]
 8001220:	4b45      	ldr	r3, [pc, #276]	@ (8001338 <HAL_ETH_MspInit+0x178>)
 8001222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001224:	4a44      	ldr	r2, [pc, #272]	@ (8001338 <HAL_ETH_MspInit+0x178>)
 8001226:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800122a:	6313      	str	r3, [r2, #48]	@ 0x30
 800122c:	4b42      	ldr	r3, [pc, #264]	@ (8001338 <HAL_ETH_MspInit+0x178>)
 800122e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001230:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001234:	61bb      	str	r3, [r7, #24]
 8001236:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	4b3e      	ldr	r3, [pc, #248]	@ (8001338 <HAL_ETH_MspInit+0x178>)
 800123e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001240:	4a3d      	ldr	r2, [pc, #244]	@ (8001338 <HAL_ETH_MspInit+0x178>)
 8001242:	f043 0304 	orr.w	r3, r3, #4
 8001246:	6313      	str	r3, [r2, #48]	@ 0x30
 8001248:	4b3b      	ldr	r3, [pc, #236]	@ (8001338 <HAL_ETH_MspInit+0x178>)
 800124a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124c:	f003 0304 	and.w	r3, r3, #4
 8001250:	617b      	str	r3, [r7, #20]
 8001252:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001254:	2300      	movs	r3, #0
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	4b37      	ldr	r3, [pc, #220]	@ (8001338 <HAL_ETH_MspInit+0x178>)
 800125a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125c:	4a36      	ldr	r2, [pc, #216]	@ (8001338 <HAL_ETH_MspInit+0x178>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	6313      	str	r3, [r2, #48]	@ 0x30
 8001264:	4b34      	ldr	r3, [pc, #208]	@ (8001338 <HAL_ETH_MspInit+0x178>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	4b30      	ldr	r3, [pc, #192]	@ (8001338 <HAL_ETH_MspInit+0x178>)
 8001276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001278:	4a2f      	ldr	r2, [pc, #188]	@ (8001338 <HAL_ETH_MspInit+0x178>)
 800127a:	f043 0302 	orr.w	r3, r3, #2
 800127e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001280:	4b2d      	ldr	r3, [pc, #180]	@ (8001338 <HAL_ETH_MspInit+0x178>)
 8001282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800128c:	2300      	movs	r3, #0
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	4b29      	ldr	r3, [pc, #164]	@ (8001338 <HAL_ETH_MspInit+0x178>)
 8001292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001294:	4a28      	ldr	r2, [pc, #160]	@ (8001338 <HAL_ETH_MspInit+0x178>)
 8001296:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800129a:	6313      	str	r3, [r2, #48]	@ 0x30
 800129c:	4b26      	ldr	r3, [pc, #152]	@ (8001338 <HAL_ETH_MspInit+0x178>)
 800129e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80012a8:	2332      	movs	r3, #50	@ 0x32
 80012aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	2302      	movs	r3, #2
 80012ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b4:	2303      	movs	r3, #3
 80012b6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012b8:	230b      	movs	r3, #11
 80012ba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012c0:	4619      	mov	r1, r3
 80012c2:	481e      	ldr	r0, [pc, #120]	@ (800133c <HAL_ETH_MspInit+0x17c>)
 80012c4:	f000 ff8a 	bl	80021dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80012c8:	2386      	movs	r3, #134	@ 0x86
 80012ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	2302      	movs	r3, #2
 80012ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d4:	2303      	movs	r3, #3
 80012d6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012d8:	230b      	movs	r3, #11
 80012da:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012e0:	4619      	mov	r1, r3
 80012e2:	4817      	ldr	r0, [pc, #92]	@ (8001340 <HAL_ETH_MspInit+0x180>)
 80012e4:	f000 ff7a 	bl	80021dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80012e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f6:	2303      	movs	r3, #3
 80012f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012fa:	230b      	movs	r3, #11
 80012fc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80012fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001302:	4619      	mov	r1, r3
 8001304:	480f      	ldr	r0, [pc, #60]	@ (8001344 <HAL_ETH_MspInit+0x184>)
 8001306:	f000 ff69 	bl	80021dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800130a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800130e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001310:	2302      	movs	r3, #2
 8001312:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001318:	2303      	movs	r3, #3
 800131a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800131c:	230b      	movs	r3, #11
 800131e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001320:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001324:	4619      	mov	r1, r3
 8001326:	4808      	ldr	r0, [pc, #32]	@ (8001348 <HAL_ETH_MspInit+0x188>)
 8001328:	f000 ff58 	bl	80021dc <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 800132c:	bf00      	nop
 800132e:	3738      	adds	r7, #56	@ 0x38
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40028000 	.word	0x40028000
 8001338:	40023800 	.word	0x40023800
 800133c:	40020800 	.word	0x40020800
 8001340:	40020000 	.word	0x40020000
 8001344:	40020400 	.word	0x40020400
 8001348:	40021800 	.word	0x40021800

0800134c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a0b      	ldr	r2, [pc, #44]	@ (8001388 <HAL_TIM_Base_MspInit+0x3c>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d10d      	bne.n	800137a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	4b0a      	ldr	r3, [pc, #40]	@ (800138c <HAL_TIM_Base_MspInit+0x40>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001366:	4a09      	ldr	r2, [pc, #36]	@ (800138c <HAL_TIM_Base_MspInit+0x40>)
 8001368:	f043 0302 	orr.w	r3, r3, #2
 800136c:	6413      	str	r3, [r2, #64]	@ 0x40
 800136e:	4b07      	ldr	r3, [pc, #28]	@ (800138c <HAL_TIM_Base_MspInit+0x40>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800137a:	bf00      	nop
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40000400 	.word	0x40000400
 800138c:	40023800 	.word	0x40023800

08001390 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 030c 	add.w	r3, r7, #12
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a12      	ldr	r2, [pc, #72]	@ (80013f8 <HAL_TIM_MspPostInit+0x68>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d11e      	bne.n	80013f0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	4b11      	ldr	r3, [pc, #68]	@ (80013fc <HAL_TIM_MspPostInit+0x6c>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	4a10      	ldr	r2, [pc, #64]	@ (80013fc <HAL_TIM_MspPostInit+0x6c>)
 80013bc:	f043 0304 	orr.w	r3, r3, #4
 80013c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c2:	4b0e      	ldr	r3, [pc, #56]	@ (80013fc <HAL_TIM_MspPostInit+0x6c>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	f003 0304 	and.w	r3, r3, #4
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 80013ce:	f44f 7350 	mov.w	r3, #832	@ 0x340
 80013d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d4:	2302      	movs	r3, #2
 80013d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013dc:	2300      	movs	r3, #0
 80013de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013e0:	2302      	movs	r3, #2
 80013e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	4619      	mov	r1, r3
 80013ea:	4805      	ldr	r0, [pc, #20]	@ (8001400 <HAL_TIM_MspPostInit+0x70>)
 80013ec:	f000 fef6 	bl	80021dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80013f0:	bf00      	nop
 80013f2:	3720      	adds	r7, #32
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40000400 	.word	0x40000400
 80013fc:	40023800 	.word	0x40023800
 8001400:	40020800 	.word	0x40020800

08001404 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08c      	sub	sp, #48	@ 0x30
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	f107 031c 	add.w	r3, r7, #28
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a42      	ldr	r2, [pc, #264]	@ (800152c <HAL_UART_MspInit+0x128>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d14b      	bne.n	80014be <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	61bb      	str	r3, [r7, #24]
 800142a:	4b41      	ldr	r3, [pc, #260]	@ (8001530 <HAL_UART_MspInit+0x12c>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142e:	4a40      	ldr	r2, [pc, #256]	@ (8001530 <HAL_UART_MspInit+0x12c>)
 8001430:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001434:	6413      	str	r3, [r2, #64]	@ 0x40
 8001436:	4b3e      	ldr	r3, [pc, #248]	@ (8001530 <HAL_UART_MspInit+0x12c>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800143e:	61bb      	str	r3, [r7, #24]
 8001440:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	617b      	str	r3, [r7, #20]
 8001446:	4b3a      	ldr	r3, [pc, #232]	@ (8001530 <HAL_UART_MspInit+0x12c>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	4a39      	ldr	r2, [pc, #228]	@ (8001530 <HAL_UART_MspInit+0x12c>)
 800144c:	f043 0304 	orr.w	r3, r3, #4
 8001450:	6313      	str	r3, [r2, #48]	@ 0x30
 8001452:	4b37      	ldr	r3, [pc, #220]	@ (8001530 <HAL_UART_MspInit+0x12c>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	f003 0304 	and.w	r3, r3, #4
 800145a:	617b      	str	r3, [r7, #20]
 800145c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	4b33      	ldr	r3, [pc, #204]	@ (8001530 <HAL_UART_MspInit+0x12c>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	4a32      	ldr	r2, [pc, #200]	@ (8001530 <HAL_UART_MspInit+0x12c>)
 8001468:	f043 0308 	orr.w	r3, r3, #8
 800146c:	6313      	str	r3, [r2, #48]	@ 0x30
 800146e:	4b30      	ldr	r3, [pc, #192]	@ (8001530 <HAL_UART_MspInit+0x12c>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	f003 0308 	and.w	r3, r3, #8
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800147a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800147e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001488:	2303      	movs	r3, #3
 800148a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800148c:	2308      	movs	r3, #8
 800148e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001490:	f107 031c 	add.w	r3, r7, #28
 8001494:	4619      	mov	r1, r3
 8001496:	4827      	ldr	r0, [pc, #156]	@ (8001534 <HAL_UART_MspInit+0x130>)
 8001498:	f000 fea0 	bl	80021dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800149c:	2304      	movs	r3, #4
 800149e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a0:	2302      	movs	r3, #2
 80014a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a8:	2303      	movs	r3, #3
 80014aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80014ac:	2308      	movs	r3, #8
 80014ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014b0:	f107 031c 	add.w	r3, r7, #28
 80014b4:	4619      	mov	r1, r3
 80014b6:	4820      	ldr	r0, [pc, #128]	@ (8001538 <HAL_UART_MspInit+0x134>)
 80014b8:	f000 fe90 	bl	80021dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014bc:	e031      	b.n	8001522 <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART3)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a1e      	ldr	r2, [pc, #120]	@ (800153c <HAL_UART_MspInit+0x138>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d12c      	bne.n	8001522 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	4b18      	ldr	r3, [pc, #96]	@ (8001530 <HAL_UART_MspInit+0x12c>)
 80014ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d0:	4a17      	ldr	r2, [pc, #92]	@ (8001530 <HAL_UART_MspInit+0x12c>)
 80014d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80014d8:	4b15      	ldr	r3, [pc, #84]	@ (8001530 <HAL_UART_MspInit+0x12c>)
 80014da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014e4:	2300      	movs	r3, #0
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	4b11      	ldr	r3, [pc, #68]	@ (8001530 <HAL_UART_MspInit+0x12c>)
 80014ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ec:	4a10      	ldr	r2, [pc, #64]	@ (8001530 <HAL_UART_MspInit+0x12c>)
 80014ee:	f043 0308 	orr.w	r3, r3, #8
 80014f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001530 <HAL_UART_MspInit+0x12c>)
 80014f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f8:	f003 0308 	and.w	r3, r3, #8
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001500:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150e:	2303      	movs	r3, #3
 8001510:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001512:	2307      	movs	r3, #7
 8001514:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001516:	f107 031c 	add.w	r3, r7, #28
 800151a:	4619      	mov	r1, r3
 800151c:	4806      	ldr	r0, [pc, #24]	@ (8001538 <HAL_UART_MspInit+0x134>)
 800151e:	f000 fe5d 	bl	80021dc <HAL_GPIO_Init>
}
 8001522:	bf00      	nop
 8001524:	3730      	adds	r7, #48	@ 0x30
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40005000 	.word	0x40005000
 8001530:	40023800 	.word	0x40023800
 8001534:	40020800 	.word	0x40020800
 8001538:	40020c00 	.word	0x40020c00
 800153c:	40004800 	.word	0x40004800

08001540 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08a      	sub	sp, #40	@ 0x28
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001560:	d13f      	bne.n	80015e2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	4b21      	ldr	r3, [pc, #132]	@ (80015ec <HAL_PCD_MspInit+0xac>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	4a20      	ldr	r2, [pc, #128]	@ (80015ec <HAL_PCD_MspInit+0xac>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	6313      	str	r3, [r2, #48]	@ 0x30
 8001572:	4b1e      	ldr	r3, [pc, #120]	@ (80015ec <HAL_PCD_MspInit+0xac>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800157e:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001584:	2302      	movs	r3, #2
 8001586:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158c:	2303      	movs	r3, #3
 800158e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001590:	230a      	movs	r3, #10
 8001592:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	4619      	mov	r1, r3
 800159a:	4815      	ldr	r0, [pc, #84]	@ (80015f0 <HAL_PCD_MspInit+0xb0>)
 800159c:	f000 fe1e 	bl	80021dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80015a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	4619      	mov	r1, r3
 80015b4:	480e      	ldr	r0, [pc, #56]	@ (80015f0 <HAL_PCD_MspInit+0xb0>)
 80015b6:	f000 fe11 	bl	80021dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015ba:	4b0c      	ldr	r3, [pc, #48]	@ (80015ec <HAL_PCD_MspInit+0xac>)
 80015bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015be:	4a0b      	ldr	r2, [pc, #44]	@ (80015ec <HAL_PCD_MspInit+0xac>)
 80015c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015c4:	6353      	str	r3, [r2, #52]	@ 0x34
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	4b08      	ldr	r3, [pc, #32]	@ (80015ec <HAL_PCD_MspInit+0xac>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ce:	4a07      	ldr	r2, [pc, #28]	@ (80015ec <HAL_PCD_MspInit+0xac>)
 80015d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80015d6:	4b05      	ldr	r3, [pc, #20]	@ (80015ec <HAL_PCD_MspInit+0xac>)
 80015d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80015e2:	bf00      	nop
 80015e4:	3728      	adds	r7, #40	@ 0x28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40020000 	.word	0x40020000

080015f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08e      	sub	sp, #56	@ 0x38
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80015fc:	2300      	movs	r3, #0
 80015fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001600:	2300      	movs	r3, #0
 8001602:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001604:	2300      	movs	r3, #0
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	4b33      	ldr	r3, [pc, #204]	@ (80016d8 <HAL_InitTick+0xe4>)
 800160a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160c:	4a32      	ldr	r2, [pc, #200]	@ (80016d8 <HAL_InitTick+0xe4>)
 800160e:	f043 0310 	orr.w	r3, r3, #16
 8001612:	6413      	str	r3, [r2, #64]	@ 0x40
 8001614:	4b30      	ldr	r3, [pc, #192]	@ (80016d8 <HAL_InitTick+0xe4>)
 8001616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001618:	f003 0310 	and.w	r3, r3, #16
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001620:	f107 0210 	add.w	r2, r7, #16
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	4611      	mov	r1, r2
 800162a:	4618      	mov	r0, r3
 800162c:	f001 fd42 	bl	80030b4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001630:	6a3b      	ldr	r3, [r7, #32]
 8001632:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001636:	2b00      	cmp	r3, #0
 8001638:	d103      	bne.n	8001642 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800163a:	f001 fd13 	bl	8003064 <HAL_RCC_GetPCLK1Freq>
 800163e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001640:	e004      	b.n	800164c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001642:	f001 fd0f 	bl	8003064 <HAL_RCC_GetPCLK1Freq>
 8001646:	4603      	mov	r3, r0
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800164c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800164e:	4a23      	ldr	r2, [pc, #140]	@ (80016dc <HAL_InitTick+0xe8>)
 8001650:	fba2 2303 	umull	r2, r3, r2, r3
 8001654:	0c9b      	lsrs	r3, r3, #18
 8001656:	3b01      	subs	r3, #1
 8001658:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800165a:	4b21      	ldr	r3, [pc, #132]	@ (80016e0 <HAL_InitTick+0xec>)
 800165c:	4a21      	ldr	r2, [pc, #132]	@ (80016e4 <HAL_InitTick+0xf0>)
 800165e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001660:	4b1f      	ldr	r3, [pc, #124]	@ (80016e0 <HAL_InitTick+0xec>)
 8001662:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001666:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001668:	4a1d      	ldr	r2, [pc, #116]	@ (80016e0 <HAL_InitTick+0xec>)
 800166a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800166c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800166e:	4b1c      	ldr	r3, [pc, #112]	@ (80016e0 <HAL_InitTick+0xec>)
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001674:	4b1a      	ldr	r3, [pc, #104]	@ (80016e0 <HAL_InitTick+0xec>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800167a:	4b19      	ldr	r3, [pc, #100]	@ (80016e0 <HAL_InitTick+0xec>)
 800167c:	2200      	movs	r2, #0
 800167e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001680:	4817      	ldr	r0, [pc, #92]	@ (80016e0 <HAL_InitTick+0xec>)
 8001682:	f001 fd49 	bl	8003118 <HAL_TIM_Base_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800168c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001690:	2b00      	cmp	r3, #0
 8001692:	d11b      	bne.n	80016cc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001694:	4812      	ldr	r0, [pc, #72]	@ (80016e0 <HAL_InitTick+0xec>)
 8001696:	f001 fd8f 	bl	80031b8 <HAL_TIM_Base_Start_IT>
 800169a:	4603      	mov	r3, r0
 800169c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80016a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d111      	bne.n	80016cc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016a8:	2036      	movs	r0, #54	@ 0x36
 80016aa:	f000 f9cf 	bl	8001a4c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b0f      	cmp	r3, #15
 80016b2:	d808      	bhi.n	80016c6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80016b4:	2200      	movs	r2, #0
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	2036      	movs	r0, #54	@ 0x36
 80016ba:	f000 f9ab 	bl	8001a14 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016be:	4a0a      	ldr	r2, [pc, #40]	@ (80016e8 <HAL_InitTick+0xf4>)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6013      	str	r3, [r2, #0]
 80016c4:	e002      	b.n	80016cc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80016cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3738      	adds	r7, #56	@ 0x38
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40023800 	.word	0x40023800
 80016dc:	431bde83 	.word	0x431bde83
 80016e0:	20000b74 	.word	0x20000b74
 80016e4:	40001000 	.word	0x40001000
 80016e8:	20000020 	.word	0x20000020

080016ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016f0:	bf00      	nop
 80016f2:	e7fd      	b.n	80016f0 <NMI_Handler+0x4>

080016f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f8:	bf00      	nop
 80016fa:	e7fd      	b.n	80016f8 <HardFault_Handler+0x4>

080016fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001700:	bf00      	nop
 8001702:	e7fd      	b.n	8001700 <MemManage_Handler+0x4>

08001704 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001708:	bf00      	nop
 800170a:	e7fd      	b.n	8001708 <BusFault_Handler+0x4>

0800170c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <UsageFault_Handler+0x4>

08001714 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
	...

08001724 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001728:	4802      	ldr	r0, [pc, #8]	@ (8001734 <USART3_IRQHandler+0x10>)
 800172a:	f002 fe97 	bl	800445c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200005f0 	.word	0x200005f0

08001738 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800173c:	4802      	ldr	r0, [pc, #8]	@ (8001748 <UART5_IRQHandler+0x10>)
 800173e:	f002 fe8d 	bl	800445c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	200005a8 	.word	0x200005a8

0800174c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001750:	4802      	ldr	r0, [pc, #8]	@ (800175c <TIM6_DAC_IRQHandler+0x10>)
 8001752:	f001 fec3 	bl	80034dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000b74 	.word	0x20000b74

08001760 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001764:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <SystemInit+0x20>)
 8001766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800176a:	4a05      	ldr	r2, [pc, #20]	@ (8001780 <SystemInit+0x20>)
 800176c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001770:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001784:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001788:	f7ff ffea 	bl	8001760 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800178c:	480c      	ldr	r0, [pc, #48]	@ (80017c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800178e:	490d      	ldr	r1, [pc, #52]	@ (80017c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001790:	4a0d      	ldr	r2, [pc, #52]	@ (80017c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001794:	e002      	b.n	800179c <LoopCopyDataInit>

08001796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800179a:	3304      	adds	r3, #4

0800179c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800179c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a0:	d3f9      	bcc.n	8001796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017a2:	4a0a      	ldr	r2, [pc, #40]	@ (80017cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017a4:	4c0a      	ldr	r4, [pc, #40]	@ (80017d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a8:	e001      	b.n	80017ae <LoopFillZerobss>

080017aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017ac:	3204      	adds	r2, #4

080017ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b0:	d3fb      	bcc.n	80017aa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80017b2:	f006 fcbf 	bl	8008134 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017b6:	f7fe fead 	bl	8000514 <main>
  bx  lr    
 80017ba:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80017bc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80017c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80017c8:	08008308 	.word	0x08008308
  ldr r2, =_sbss
 80017cc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80017d0:	20004a54 	.word	0x20004a54

080017d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017d4:	e7fe      	b.n	80017d4 <ADC_IRQHandler>
	...

080017d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001818 <HAL_Init+0x40>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001818 <HAL_Init+0x40>)
 80017e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001818 <HAL_Init+0x40>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001818 <HAL_Init+0x40>)
 80017ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f4:	4b08      	ldr	r3, [pc, #32]	@ (8001818 <HAL_Init+0x40>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a07      	ldr	r2, [pc, #28]	@ (8001818 <HAL_Init+0x40>)
 80017fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001800:	2003      	movs	r0, #3
 8001802:	f000 f8fc 	bl	80019fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001806:	200f      	movs	r0, #15
 8001808:	f7ff fef4 	bl	80015f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800180c:	f7ff fcac 	bl	8001168 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40023c00 	.word	0x40023c00

0800181c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001820:	4b06      	ldr	r3, [pc, #24]	@ (800183c <HAL_IncTick+0x20>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	461a      	mov	r2, r3
 8001826:	4b06      	ldr	r3, [pc, #24]	@ (8001840 <HAL_IncTick+0x24>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4413      	add	r3, r2
 800182c:	4a04      	ldr	r2, [pc, #16]	@ (8001840 <HAL_IncTick+0x24>)
 800182e:	6013      	str	r3, [r2, #0]
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	20000024 	.word	0x20000024
 8001840:	20000bbc 	.word	0x20000bbc

08001844 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return uwTick;
 8001848:	4b03      	ldr	r3, [pc, #12]	@ (8001858 <HAL_GetTick+0x14>)
 800184a:	681b      	ldr	r3, [r3, #0]
}
 800184c:	4618      	mov	r0, r3
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	20000bbc 	.word	0x20000bbc

0800185c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001864:	f7ff ffee 	bl	8001844 <HAL_GetTick>
 8001868:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001874:	d005      	beq.n	8001882 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001876:	4b0a      	ldr	r3, [pc, #40]	@ (80018a0 <HAL_Delay+0x44>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	461a      	mov	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4413      	add	r3, r2
 8001880:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001882:	bf00      	nop
 8001884:	f7ff ffde 	bl	8001844 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	429a      	cmp	r2, r3
 8001892:	d8f7      	bhi.n	8001884 <HAL_Delay+0x28>
  {
  }
}
 8001894:	bf00      	nop
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000024 	.word	0x20000024

080018a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b4:	4b0c      	ldr	r3, [pc, #48]	@ (80018e8 <__NVIC_SetPriorityGrouping+0x44>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018c0:	4013      	ands	r3, r2
 80018c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018d6:	4a04      	ldr	r2, [pc, #16]	@ (80018e8 <__NVIC_SetPriorityGrouping+0x44>)
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	60d3      	str	r3, [r2, #12]
}
 80018dc:	bf00      	nop
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f0:	4b04      	ldr	r3, [pc, #16]	@ (8001904 <__NVIC_GetPriorityGrouping+0x18>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	0a1b      	lsrs	r3, r3, #8
 80018f6:	f003 0307 	and.w	r3, r3, #7
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001916:	2b00      	cmp	r3, #0
 8001918:	db0b      	blt.n	8001932 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	f003 021f 	and.w	r2, r3, #31
 8001920:	4907      	ldr	r1, [pc, #28]	@ (8001940 <__NVIC_EnableIRQ+0x38>)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	095b      	lsrs	r3, r3, #5
 8001928:	2001      	movs	r0, #1
 800192a:	fa00 f202 	lsl.w	r2, r0, r2
 800192e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	e000e100 	.word	0xe000e100

08001944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	6039      	str	r1, [r7, #0]
 800194e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001954:	2b00      	cmp	r3, #0
 8001956:	db0a      	blt.n	800196e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	b2da      	uxtb	r2, r3
 800195c:	490c      	ldr	r1, [pc, #48]	@ (8001990 <__NVIC_SetPriority+0x4c>)
 800195e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001962:	0112      	lsls	r2, r2, #4
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	440b      	add	r3, r1
 8001968:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800196c:	e00a      	b.n	8001984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	b2da      	uxtb	r2, r3
 8001972:	4908      	ldr	r1, [pc, #32]	@ (8001994 <__NVIC_SetPriority+0x50>)
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	3b04      	subs	r3, #4
 800197c:	0112      	lsls	r2, r2, #4
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	440b      	add	r3, r1
 8001982:	761a      	strb	r2, [r3, #24]
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	e000e100 	.word	0xe000e100
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001998:	b480      	push	{r7}
 800199a:	b089      	sub	sp, #36	@ 0x24
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	f1c3 0307 	rsb	r3, r3, #7
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	bf28      	it	cs
 80019b6:	2304      	movcs	r3, #4
 80019b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	3304      	adds	r3, #4
 80019be:	2b06      	cmp	r3, #6
 80019c0:	d902      	bls.n	80019c8 <NVIC_EncodePriority+0x30>
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	3b03      	subs	r3, #3
 80019c6:	e000      	b.n	80019ca <NVIC_EncodePriority+0x32>
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019cc:	f04f 32ff 	mov.w	r2, #4294967295
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43da      	mvns	r2, r3
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	401a      	ands	r2, r3
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e0:	f04f 31ff 	mov.w	r1, #4294967295
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ea:	43d9      	mvns	r1, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f0:	4313      	orrs	r3, r2
         );
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3724      	adds	r7, #36	@ 0x24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff ff4c 	bl	80018a4 <__NVIC_SetPriorityGrouping>
}
 8001a0c:	bf00      	nop
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
 8001a20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a26:	f7ff ff61 	bl	80018ec <__NVIC_GetPriorityGrouping>
 8001a2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	68b9      	ldr	r1, [r7, #8]
 8001a30:	6978      	ldr	r0, [r7, #20]
 8001a32:	f7ff ffb1 	bl	8001998 <NVIC_EncodePriority>
 8001a36:	4602      	mov	r2, r0
 8001a38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a3c:	4611      	mov	r1, r2
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff ff80 	bl	8001944 <__NVIC_SetPriority>
}
 8001a44:	bf00      	nop
 8001a46:	3718      	adds	r7, #24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff ff54 	bl	8001908 <__NVIC_EnableIRQ>
}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a74:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a76:	f7ff fee5 	bl	8001844 <HAL_GetTick>
 8001a7a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d008      	beq.n	8001a9a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2280      	movs	r2, #128	@ 0x80
 8001a8c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e052      	b.n	8001b40 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f022 0216 	bic.w	r2, r2, #22
 8001aa8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	695a      	ldr	r2, [r3, #20]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ab8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d103      	bne.n	8001aca <HAL_DMA_Abort+0x62>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d007      	beq.n	8001ada <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 0208 	bic.w	r2, r2, #8
 8001ad8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 0201 	bic.w	r2, r2, #1
 8001ae8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aea:	e013      	b.n	8001b14 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001aec:	f7ff feaa 	bl	8001844 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b05      	cmp	r3, #5
 8001af8:	d90c      	bls.n	8001b14 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2220      	movs	r2, #32
 8001afe:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2203      	movs	r2, #3
 8001b04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e015      	b.n	8001b40 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1e4      	bne.n	8001aec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b26:	223f      	movs	r2, #63	@ 0x3f
 8001b28:	409a      	lsls	r2, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d004      	beq.n	8001b66 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2280      	movs	r2, #128	@ 0x80
 8001b60:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e00c      	b.n	8001b80 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2205      	movs	r2, #5
 8001b6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 0201 	bic.w	r2, r2, #1
 8001b7c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e06c      	b.n	8001c78 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d106      	bne.n	8001bb6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2223      	movs	r2, #35	@ 0x23
 8001bac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f7ff fb05 	bl	80011c0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	4b31      	ldr	r3, [pc, #196]	@ (8001c80 <HAL_ETH_Init+0xf4>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bbe:	4a30      	ldr	r2, [pc, #192]	@ (8001c80 <HAL_ETH_Init+0xf4>)
 8001bc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bc6:	4b2e      	ldr	r3, [pc, #184]	@ (8001c80 <HAL_ETH_Init+0xf4>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001bd2:	4b2c      	ldr	r3, [pc, #176]	@ (8001c84 <HAL_ETH_Init+0xf8>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	4a2b      	ldr	r2, [pc, #172]	@ (8001c84 <HAL_ETH_Init+0xf8>)
 8001bd8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001bdc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001bde:	4b29      	ldr	r3, [pc, #164]	@ (8001c84 <HAL_ETH_Init+0xf8>)
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	4927      	ldr	r1, [pc, #156]	@ (8001c84 <HAL_ETH_Init+0xf8>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001bec:	4b25      	ldr	r3, [pc, #148]	@ (8001c84 <HAL_ETH_Init+0xf8>)
 8001bee:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6812      	ldr	r2, [r2, #0]
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c06:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c08:	f7ff fe1c 	bl	8001844 <HAL_GetTick>
 8001c0c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001c0e:	e011      	b.n	8001c34 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001c10:	f7ff fe18 	bl	8001844 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001c1e:	d909      	bls.n	8001c34 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2204      	movs	r2, #4
 8001c24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	22e0      	movs	r2, #224	@ 0xe0
 8001c2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e021      	b.n	8001c78 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1e4      	bne.n	8001c10 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f958 	bl	8001efc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f9ff 	bl	8002050 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 fa55 	bl	8002102 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	2100      	movs	r1, #0
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f9bd 	bl	8001fe0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2210      	movs	r2, #16
 8001c72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40013800 	.word	0x40013800

08001c88 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	4b51      	ldr	r3, [pc, #324]	@ (8001de4 <ETH_SetMACConfig+0x15c>)
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	7c1b      	ldrb	r3, [r3, #16]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d102      	bne.n	8001cb0 <ETH_SetMACConfig+0x28>
 8001caa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001cae:	e000      	b.n	8001cb2 <ETH_SetMACConfig+0x2a>
 8001cb0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	7c5b      	ldrb	r3, [r3, #17]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d102      	bne.n	8001cc0 <ETH_SetMACConfig+0x38>
 8001cba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001cbe:	e000      	b.n	8001cc2 <ETH_SetMACConfig+0x3a>
 8001cc0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001cc2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001cc8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	7fdb      	ldrb	r3, [r3, #31]
 8001cce:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001cd0:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001cd6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	7f92      	ldrb	r2, [r2, #30]
 8001cdc:	2a00      	cmp	r2, #0
 8001cde:	d102      	bne.n	8001ce6 <ETH_SetMACConfig+0x5e>
 8001ce0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ce4:	e000      	b.n	8001ce8 <ETH_SetMACConfig+0x60>
 8001ce6:	2200      	movs	r2, #0
                        macconf->Speed |
 8001ce8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	7f1b      	ldrb	r3, [r3, #28]
 8001cee:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001cf0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001cf6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	791b      	ldrb	r3, [r3, #4]
 8001cfc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001cfe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001d06:	2a00      	cmp	r2, #0
 8001d08:	d102      	bne.n	8001d10 <ETH_SetMACConfig+0x88>
 8001d0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d0e:	e000      	b.n	8001d12 <ETH_SetMACConfig+0x8a>
 8001d10:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001d12:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	7bdb      	ldrb	r3, [r3, #15]
 8001d18:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001d1a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001d20:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001d28:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d42:	2001      	movs	r0, #1
 8001d44:	f7ff fd8a 	bl	800185c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001d5e:	4013      	ands	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d66:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001d6e:	2a00      	cmp	r2, #0
 8001d70:	d101      	bne.n	8001d76 <ETH_SetMACConfig+0xee>
 8001d72:	2280      	movs	r2, #128	@ 0x80
 8001d74:	e000      	b.n	8001d78 <ETH_SetMACConfig+0xf0>
 8001d76:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d78:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d7e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001d86:	2a01      	cmp	r2, #1
 8001d88:	d101      	bne.n	8001d8e <ETH_SetMACConfig+0x106>
 8001d8a:	2208      	movs	r2, #8
 8001d8c:	e000      	b.n	8001d90 <ETH_SetMACConfig+0x108>
 8001d8e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001d90:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001d98:	2a01      	cmp	r2, #1
 8001d9a:	d101      	bne.n	8001da0 <ETH_SetMACConfig+0x118>
 8001d9c:	2204      	movs	r2, #4
 8001d9e:	e000      	b.n	8001da2 <ETH_SetMACConfig+0x11a>
 8001da0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001da2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001daa:	2a01      	cmp	r2, #1
 8001dac:	d101      	bne.n	8001db2 <ETH_SetMACConfig+0x12a>
 8001dae:	2202      	movs	r2, #2
 8001db0:	e000      	b.n	8001db4 <ETH_SetMACConfig+0x12c>
 8001db2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001db4:	4313      	orrs	r3, r2
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dcc:	2001      	movs	r0, #1
 8001dce:	f7ff fd45 	bl	800185c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	619a      	str	r2, [r3, #24]
}
 8001dda:	bf00      	nop
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	ff20810f 	.word	0xff20810f

08001de8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	4b3d      	ldr	r3, [pc, #244]	@ (8001ef8 <ETH_SetDMAConfig+0x110>)
 8001e02:	4013      	ands	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	7b1b      	ldrb	r3, [r3, #12]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d102      	bne.n	8001e14 <ETH_SetDMAConfig+0x2c>
 8001e0e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001e12:	e000      	b.n	8001e16 <ETH_SetDMAConfig+0x2e>
 8001e14:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	7b5b      	ldrb	r3, [r3, #13]
 8001e1a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e1c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	7f52      	ldrb	r2, [r2, #29]
 8001e22:	2a00      	cmp	r2, #0
 8001e24:	d102      	bne.n	8001e2c <ETH_SetDMAConfig+0x44>
 8001e26:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001e2a:	e000      	b.n	8001e2e <ETH_SetDMAConfig+0x46>
 8001e2c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001e2e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	7b9b      	ldrb	r3, [r3, #14]
 8001e34:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001e36:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001e3c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	7f1b      	ldrb	r3, [r3, #28]
 8001e42:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001e44:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	7f9b      	ldrb	r3, [r3, #30]
 8001e4a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001e4c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001e52:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e5a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e7e:	2001      	movs	r0, #1
 8001e80:	f7ff fcec 	bl	800185c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	791b      	ldrb	r3, [r3, #4]
 8001e96:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e9c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001ea2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001ea8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001eb0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001eb2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001eba:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001ec0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	6812      	ldr	r2, [r2, #0]
 8001ec6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001eca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ece:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001edc:	2001      	movs	r0, #1
 8001ede:	f7ff fcbd 	bl	800185c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001eea:	461a      	mov	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6013      	str	r3, [r2, #0]
}
 8001ef0:	bf00      	nop
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	f8de3f23 	.word	0xf8de3f23

08001efc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b0a6      	sub	sp, #152	@ 0x98
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001f04:	2301      	movs	r3, #1
 8001f06:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001f10:	2300      	movs	r3, #0
 8001f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001f20:	2300      	movs	r3, #0
 8001f22:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001f26:	2301      	movs	r3, #1
 8001f28:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001f32:	2300      	movs	r3, #0
 8001f34:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001f46:	2300      	movs	r3, #0
 8001f48:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001f52:	2300      	movs	r3, #0
 8001f54:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001f5e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f62:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001f64:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f68:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001f70:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f74:	4619      	mov	r1, r3
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7ff fe86 	bl	8001c88 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001f80:	2301      	movs	r3, #1
 8001f82:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001f84:	2301      	movs	r3, #1
 8001f86:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001f92:	2300      	movs	r3, #0
 8001f94:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001fac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fb0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001fb2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001fb6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001fb8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fbc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001fcc:	f107 0308 	add.w	r3, r7, #8
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff ff08 	bl	8001de8 <ETH_SetDMAConfig>
}
 8001fd8:	bf00      	nop
 8001fda:	3798      	adds	r7, #152	@ 0x98
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b087      	sub	sp, #28
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3305      	adds	r3, #5
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	021b      	lsls	r3, r3, #8
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	3204      	adds	r2, #4
 8001ff8:	7812      	ldrb	r2, [r2, #0]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	4b11      	ldr	r3, [pc, #68]	@ (8002048 <ETH_MACAddressConfig+0x68>)
 8002002:	4413      	add	r3, r2
 8002004:	461a      	mov	r2, r3
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3303      	adds	r3, #3
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	061a      	lsls	r2, r3, #24
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3302      	adds	r3, #2
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	041b      	lsls	r3, r3, #16
 800201a:	431a      	orrs	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3301      	adds	r3, #1
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	021b      	lsls	r3, r3, #8
 8002024:	4313      	orrs	r3, r2
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	7812      	ldrb	r2, [r2, #0]
 800202a:	4313      	orrs	r3, r2
 800202c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	4b06      	ldr	r3, [pc, #24]	@ (800204c <ETH_MACAddressConfig+0x6c>)
 8002032:	4413      	add	r3, r2
 8002034:	461a      	mov	r2, r3
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	6013      	str	r3, [r2, #0]
}
 800203a:	bf00      	nop
 800203c:	371c      	adds	r7, #28
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	40028040 	.word	0x40028040
 800204c:	40028044 	.word	0x40028044

08002050 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002058:	2300      	movs	r3, #0
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	e03e      	b.n	80020dc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68d9      	ldr	r1, [r3, #12]
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	4613      	mov	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	440b      	add	r3, r1
 800206e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	2200      	movs	r2, #0
 800207a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	2200      	movs	r2, #0
 8002080:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	2200      	movs	r2, #0
 8002086:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002088:	68b9      	ldr	r1, [r7, #8]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	3206      	adds	r2, #6
 8002090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d80c      	bhi.n	80020c0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68d9      	ldr	r1, [r3, #12]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	1c5a      	adds	r2, r3, #1
 80020ae:	4613      	mov	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	440b      	add	r3, r1
 80020b8:	461a      	mov	r2, r3
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	e004      	b.n	80020ca <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	461a      	mov	r2, r3
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	3301      	adds	r3, #1
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2b03      	cmp	r3, #3
 80020e0:	d9bd      	bls.n	800205e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020f4:	611a      	str	r2, [r3, #16]
}
 80020f6:	bf00      	nop
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002102:	b480      	push	{r7}
 8002104:	b085      	sub	sp, #20
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	e046      	b.n	800219e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6919      	ldr	r1, [r3, #16]
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	440b      	add	r3, r1
 8002120:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	2200      	movs	r2, #0
 800212c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	2200      	movs	r2, #0
 8002132:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	2200      	movs	r2, #0
 8002138:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	2200      	movs	r2, #0
 800213e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	2200      	movs	r2, #0
 8002144:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800214c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8002154:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002162:	68b9      	ldr	r1, [r7, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	3212      	adds	r2, #18
 800216a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2b02      	cmp	r3, #2
 8002172:	d80c      	bhi.n	800218e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6919      	ldr	r1, [r3, #16]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	4613      	mov	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	440b      	add	r3, r1
 8002186:	461a      	mov	r2, r3
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	60da      	str	r2, [r3, #12]
 800218c:	e004      	b.n	8002198 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	461a      	mov	r2, r3
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	3301      	adds	r3, #1
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2b03      	cmp	r3, #3
 80021a2:	d9b5      	bls.n	8002110 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691a      	ldr	r2, [r3, #16]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021ce:	60da      	str	r2, [r3, #12]
}
 80021d0:	bf00      	nop
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021dc:	b480      	push	{r7}
 80021de:	b089      	sub	sp, #36	@ 0x24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
 80021f6:	e177      	b.n	80024e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021f8:	2201      	movs	r2, #1
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	4013      	ands	r3, r2
 800220a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	429a      	cmp	r2, r3
 8002212:	f040 8166 	bne.w	80024e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 0303 	and.w	r3, r3, #3
 800221e:	2b01      	cmp	r3, #1
 8002220:	d005      	beq.n	800222e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800222a:	2b02      	cmp	r3, #2
 800222c:	d130      	bne.n	8002290 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	2203      	movs	r2, #3
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43db      	mvns	r3, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4013      	ands	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	68da      	ldr	r2, [r3, #12]
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4313      	orrs	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002264:	2201      	movs	r2, #1
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	091b      	lsrs	r3, r3, #4
 800227a:	f003 0201 	and.w	r2, r3, #1
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	2b03      	cmp	r3, #3
 800229a:	d017      	beq.n	80022cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	2203      	movs	r2, #3
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 0303 	and.w	r3, r3, #3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d123      	bne.n	8002320 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	08da      	lsrs	r2, r3, #3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3208      	adds	r2, #8
 80022e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	220f      	movs	r2, #15
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	691a      	ldr	r2, [r3, #16]
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	08da      	lsrs	r2, r3, #3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3208      	adds	r2, #8
 800231a:	69b9      	ldr	r1, [r7, #24]
 800231c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	2203      	movs	r2, #3
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 0203 	and.w	r2, r3, #3
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 80c0 	beq.w	80024e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	4b66      	ldr	r3, [pc, #408]	@ (8002500 <HAL_GPIO_Init+0x324>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236a:	4a65      	ldr	r2, [pc, #404]	@ (8002500 <HAL_GPIO_Init+0x324>)
 800236c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002370:	6453      	str	r3, [r2, #68]	@ 0x44
 8002372:	4b63      	ldr	r3, [pc, #396]	@ (8002500 <HAL_GPIO_Init+0x324>)
 8002374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002376:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800237e:	4a61      	ldr	r2, [pc, #388]	@ (8002504 <HAL_GPIO_Init+0x328>)
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	089b      	lsrs	r3, r3, #2
 8002384:	3302      	adds	r3, #2
 8002386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800238a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	220f      	movs	r2, #15
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4013      	ands	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a58      	ldr	r2, [pc, #352]	@ (8002508 <HAL_GPIO_Init+0x32c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d037      	beq.n	800241a <HAL_GPIO_Init+0x23e>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a57      	ldr	r2, [pc, #348]	@ (800250c <HAL_GPIO_Init+0x330>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d031      	beq.n	8002416 <HAL_GPIO_Init+0x23a>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a56      	ldr	r2, [pc, #344]	@ (8002510 <HAL_GPIO_Init+0x334>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d02b      	beq.n	8002412 <HAL_GPIO_Init+0x236>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a55      	ldr	r2, [pc, #340]	@ (8002514 <HAL_GPIO_Init+0x338>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d025      	beq.n	800240e <HAL_GPIO_Init+0x232>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a54      	ldr	r2, [pc, #336]	@ (8002518 <HAL_GPIO_Init+0x33c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d01f      	beq.n	800240a <HAL_GPIO_Init+0x22e>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a53      	ldr	r2, [pc, #332]	@ (800251c <HAL_GPIO_Init+0x340>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d019      	beq.n	8002406 <HAL_GPIO_Init+0x22a>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a52      	ldr	r2, [pc, #328]	@ (8002520 <HAL_GPIO_Init+0x344>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d013      	beq.n	8002402 <HAL_GPIO_Init+0x226>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a51      	ldr	r2, [pc, #324]	@ (8002524 <HAL_GPIO_Init+0x348>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d00d      	beq.n	80023fe <HAL_GPIO_Init+0x222>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a50      	ldr	r2, [pc, #320]	@ (8002528 <HAL_GPIO_Init+0x34c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d007      	beq.n	80023fa <HAL_GPIO_Init+0x21e>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a4f      	ldr	r2, [pc, #316]	@ (800252c <HAL_GPIO_Init+0x350>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d101      	bne.n	80023f6 <HAL_GPIO_Init+0x21a>
 80023f2:	2309      	movs	r3, #9
 80023f4:	e012      	b.n	800241c <HAL_GPIO_Init+0x240>
 80023f6:	230a      	movs	r3, #10
 80023f8:	e010      	b.n	800241c <HAL_GPIO_Init+0x240>
 80023fa:	2308      	movs	r3, #8
 80023fc:	e00e      	b.n	800241c <HAL_GPIO_Init+0x240>
 80023fe:	2307      	movs	r3, #7
 8002400:	e00c      	b.n	800241c <HAL_GPIO_Init+0x240>
 8002402:	2306      	movs	r3, #6
 8002404:	e00a      	b.n	800241c <HAL_GPIO_Init+0x240>
 8002406:	2305      	movs	r3, #5
 8002408:	e008      	b.n	800241c <HAL_GPIO_Init+0x240>
 800240a:	2304      	movs	r3, #4
 800240c:	e006      	b.n	800241c <HAL_GPIO_Init+0x240>
 800240e:	2303      	movs	r3, #3
 8002410:	e004      	b.n	800241c <HAL_GPIO_Init+0x240>
 8002412:	2302      	movs	r3, #2
 8002414:	e002      	b.n	800241c <HAL_GPIO_Init+0x240>
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <HAL_GPIO_Init+0x240>
 800241a:	2300      	movs	r3, #0
 800241c:	69fa      	ldr	r2, [r7, #28]
 800241e:	f002 0203 	and.w	r2, r2, #3
 8002422:	0092      	lsls	r2, r2, #2
 8002424:	4093      	lsls	r3, r2
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4313      	orrs	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800242c:	4935      	ldr	r1, [pc, #212]	@ (8002504 <HAL_GPIO_Init+0x328>)
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	089b      	lsrs	r3, r3, #2
 8002432:	3302      	adds	r3, #2
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800243a:	4b3d      	ldr	r3, [pc, #244]	@ (8002530 <HAL_GPIO_Init+0x354>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	43db      	mvns	r3, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4013      	ands	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800245e:	4a34      	ldr	r2, [pc, #208]	@ (8002530 <HAL_GPIO_Init+0x354>)
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002464:	4b32      	ldr	r3, [pc, #200]	@ (8002530 <HAL_GPIO_Init+0x354>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	43db      	mvns	r3, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4013      	ands	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002488:	4a29      	ldr	r2, [pc, #164]	@ (8002530 <HAL_GPIO_Init+0x354>)
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800248e:	4b28      	ldr	r3, [pc, #160]	@ (8002530 <HAL_GPIO_Init+0x354>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	43db      	mvns	r3, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4013      	ands	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024b2:	4a1f      	ldr	r2, [pc, #124]	@ (8002530 <HAL_GPIO_Init+0x354>)
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002530 <HAL_GPIO_Init+0x354>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	43db      	mvns	r3, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	4313      	orrs	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024dc:	4a14      	ldr	r2, [pc, #80]	@ (8002530 <HAL_GPIO_Init+0x354>)
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	3301      	adds	r3, #1
 80024e6:	61fb      	str	r3, [r7, #28]
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	2b0f      	cmp	r3, #15
 80024ec:	f67f ae84 	bls.w	80021f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024f0:	bf00      	nop
 80024f2:	bf00      	nop
 80024f4:	3724      	adds	r7, #36	@ 0x24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	40023800 	.word	0x40023800
 8002504:	40013800 	.word	0x40013800
 8002508:	40020000 	.word	0x40020000
 800250c:	40020400 	.word	0x40020400
 8002510:	40020800 	.word	0x40020800
 8002514:	40020c00 	.word	0x40020c00
 8002518:	40021000 	.word	0x40021000
 800251c:	40021400 	.word	0x40021400
 8002520:	40021800 	.word	0x40021800
 8002524:	40021c00 	.word	0x40021c00
 8002528:	40022000 	.word	0x40022000
 800252c:	40022400 	.word	0x40022400
 8002530:	40013c00 	.word	0x40013c00

08002534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	807b      	strh	r3, [r7, #2]
 8002540:	4613      	mov	r3, r2
 8002542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002544:	787b      	ldrb	r3, [r7, #1]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800254a:	887a      	ldrh	r2, [r7, #2]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002550:	e003      	b.n	800255a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002552:	887b      	ldrh	r3, [r7, #2]
 8002554:	041a      	lsls	r2, r3, #16
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	619a      	str	r2, [r3, #24]
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b086      	sub	sp, #24
 800256a:	af02      	add	r7, sp, #8
 800256c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e101      	b.n	800277c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d106      	bne.n	8002598 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7fe ffd4 	bl	8001540 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2203      	movs	r2, #3
 800259c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025a6:	d102      	bne.n	80025ae <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f002 fed2 	bl	800535c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6818      	ldr	r0, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	7c1a      	ldrb	r2, [r3, #16]
 80025c0:	f88d 2000 	strb.w	r2, [sp]
 80025c4:	3304      	adds	r3, #4
 80025c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025c8:	f002 fe64 	bl	8005294 <USB_CoreInit>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d005      	beq.n	80025de <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2202      	movs	r2, #2
 80025d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e0ce      	b.n	800277c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2100      	movs	r1, #0
 80025e4:	4618      	mov	r0, r3
 80025e6:	f002 feca 	bl	800537e <USB_SetCurrentMode>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d005      	beq.n	80025fc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2202      	movs	r2, #2
 80025f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e0bf      	b.n	800277c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025fc:	2300      	movs	r3, #0
 80025fe:	73fb      	strb	r3, [r7, #15]
 8002600:	e04a      	b.n	8002698 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002602:	7bfa      	ldrb	r2, [r7, #15]
 8002604:	6879      	ldr	r1, [r7, #4]
 8002606:	4613      	mov	r3, r2
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	4413      	add	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	440b      	add	r3, r1
 8002610:	3315      	adds	r3, #21
 8002612:	2201      	movs	r2, #1
 8002614:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002616:	7bfa      	ldrb	r2, [r7, #15]
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	4413      	add	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	440b      	add	r3, r1
 8002624:	3314      	adds	r3, #20
 8002626:	7bfa      	ldrb	r2, [r7, #15]
 8002628:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800262a:	7bfa      	ldrb	r2, [r7, #15]
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	b298      	uxth	r0, r3
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	4613      	mov	r3, r2
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	4413      	add	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	440b      	add	r3, r1
 800263c:	332e      	adds	r3, #46	@ 0x2e
 800263e:	4602      	mov	r2, r0
 8002640:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002642:	7bfa      	ldrb	r2, [r7, #15]
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	4613      	mov	r3, r2
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	4413      	add	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	440b      	add	r3, r1
 8002650:	3318      	adds	r3, #24
 8002652:	2200      	movs	r2, #0
 8002654:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002656:	7bfa      	ldrb	r2, [r7, #15]
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	4613      	mov	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	4413      	add	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	440b      	add	r3, r1
 8002664:	331c      	adds	r3, #28
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800266a:	7bfa      	ldrb	r2, [r7, #15]
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	4413      	add	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	440b      	add	r3, r1
 8002678:	3320      	adds	r3, #32
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800267e:	7bfa      	ldrb	r2, [r7, #15]
 8002680:	6879      	ldr	r1, [r7, #4]
 8002682:	4613      	mov	r3, r2
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	4413      	add	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	440b      	add	r3, r1
 800268c:	3324      	adds	r3, #36	@ 0x24
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002692:	7bfb      	ldrb	r3, [r7, #15]
 8002694:	3301      	adds	r3, #1
 8002696:	73fb      	strb	r3, [r7, #15]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	791b      	ldrb	r3, [r3, #4]
 800269c:	7bfa      	ldrb	r2, [r7, #15]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d3af      	bcc.n	8002602 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026a2:	2300      	movs	r3, #0
 80026a4:	73fb      	strb	r3, [r7, #15]
 80026a6:	e044      	b.n	8002732 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026a8:	7bfa      	ldrb	r2, [r7, #15]
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	4613      	mov	r3, r2
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	4413      	add	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	440b      	add	r3, r1
 80026b6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80026ba:	2200      	movs	r2, #0
 80026bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026be:	7bfa      	ldrb	r2, [r7, #15]
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	4613      	mov	r3, r2
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	4413      	add	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	440b      	add	r3, r1
 80026cc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80026d0:	7bfa      	ldrb	r2, [r7, #15]
 80026d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026d4:	7bfa      	ldrb	r2, [r7, #15]
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	4613      	mov	r3, r2
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	4413      	add	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80026e6:	2200      	movs	r2, #0
 80026e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026ea:	7bfa      	ldrb	r2, [r7, #15]
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	4613      	mov	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	4413      	add	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	440b      	add	r3, r1
 80026f8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002700:	7bfa      	ldrb	r2, [r7, #15]
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4413      	add	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002716:	7bfa      	ldrb	r2, [r7, #15]
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	4613      	mov	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	4413      	add	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	440b      	add	r3, r1
 8002724:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800272c:	7bfb      	ldrb	r3, [r7, #15]
 800272e:	3301      	adds	r3, #1
 8002730:	73fb      	strb	r3, [r7, #15]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	791b      	ldrb	r3, [r3, #4]
 8002736:	7bfa      	ldrb	r2, [r7, #15]
 8002738:	429a      	cmp	r2, r3
 800273a:	d3b5      	bcc.n	80026a8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6818      	ldr	r0, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	7c1a      	ldrb	r2, [r3, #16]
 8002744:	f88d 2000 	strb.w	r2, [sp]
 8002748:	3304      	adds	r3, #4
 800274a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800274c:	f002 fe64 	bl	8005418 <USB_DevInit>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d005      	beq.n	8002762 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2202      	movs	r2, #2
 800275a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e00c      	b.n	800277c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	f003 f82c 	bl	80057d2 <USB_DevDisconnect>

  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e267      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d075      	beq.n	800288e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027a2:	4b88      	ldr	r3, [pc, #544]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 030c 	and.w	r3, r3, #12
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	d00c      	beq.n	80027c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ae:	4b85      	ldr	r3, [pc, #532]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027b6:	2b08      	cmp	r3, #8
 80027b8:	d112      	bne.n	80027e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ba:	4b82      	ldr	r3, [pc, #520]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027c6:	d10b      	bne.n	80027e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c8:	4b7e      	ldr	r3, [pc, #504]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d05b      	beq.n	800288c <HAL_RCC_OscConfig+0x108>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d157      	bne.n	800288c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e242      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027e8:	d106      	bne.n	80027f8 <HAL_RCC_OscConfig+0x74>
 80027ea:	4b76      	ldr	r3, [pc, #472]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a75      	ldr	r2, [pc, #468]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80027f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027f4:	6013      	str	r3, [r2, #0]
 80027f6:	e01d      	b.n	8002834 <HAL_RCC_OscConfig+0xb0>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002800:	d10c      	bne.n	800281c <HAL_RCC_OscConfig+0x98>
 8002802:	4b70      	ldr	r3, [pc, #448]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a6f      	ldr	r2, [pc, #444]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002808:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800280c:	6013      	str	r3, [r2, #0]
 800280e:	4b6d      	ldr	r3, [pc, #436]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a6c      	ldr	r2, [pc, #432]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002814:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	e00b      	b.n	8002834 <HAL_RCC_OscConfig+0xb0>
 800281c:	4b69      	ldr	r3, [pc, #420]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a68      	ldr	r2, [pc, #416]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002822:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002826:	6013      	str	r3, [r2, #0]
 8002828:	4b66      	ldr	r3, [pc, #408]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a65      	ldr	r2, [pc, #404]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 800282e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002832:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d013      	beq.n	8002864 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283c:	f7ff f802 	bl	8001844 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002844:	f7fe fffe 	bl	8001844 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b64      	cmp	r3, #100	@ 0x64
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e207      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002856:	4b5b      	ldr	r3, [pc, #364]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0f0      	beq.n	8002844 <HAL_RCC_OscConfig+0xc0>
 8002862:	e014      	b.n	800288e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002864:	f7fe ffee 	bl	8001844 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800286c:	f7fe ffea 	bl	8001844 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b64      	cmp	r3, #100	@ 0x64
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e1f3      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800287e:	4b51      	ldr	r3, [pc, #324]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0xe8>
 800288a:	e000      	b.n	800288e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800288c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d063      	beq.n	8002962 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800289a:	4b4a      	ldr	r3, [pc, #296]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 030c 	and.w	r3, r3, #12
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00b      	beq.n	80028be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028a6:	4b47      	ldr	r3, [pc, #284]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028ae:	2b08      	cmp	r3, #8
 80028b0:	d11c      	bne.n	80028ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028b2:	4b44      	ldr	r3, [pc, #272]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d116      	bne.n	80028ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028be:	4b41      	ldr	r3, [pc, #260]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d005      	beq.n	80028d6 <HAL_RCC_OscConfig+0x152>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d001      	beq.n	80028d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e1c7      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d6:	4b3b      	ldr	r3, [pc, #236]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	4937      	ldr	r1, [pc, #220]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ea:	e03a      	b.n	8002962 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d020      	beq.n	8002936 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028f4:	4b34      	ldr	r3, [pc, #208]	@ (80029c8 <HAL_RCC_OscConfig+0x244>)
 80028f6:	2201      	movs	r2, #1
 80028f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fa:	f7fe ffa3 	bl	8001844 <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002900:	e008      	b.n	8002914 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002902:	f7fe ff9f 	bl	8001844 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e1a8      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002914:	4b2b      	ldr	r3, [pc, #172]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0f0      	beq.n	8002902 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002920:	4b28      	ldr	r3, [pc, #160]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	4925      	ldr	r1, [pc, #148]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002930:	4313      	orrs	r3, r2
 8002932:	600b      	str	r3, [r1, #0]
 8002934:	e015      	b.n	8002962 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002936:	4b24      	ldr	r3, [pc, #144]	@ (80029c8 <HAL_RCC_OscConfig+0x244>)
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293c:	f7fe ff82 	bl	8001844 <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002944:	f7fe ff7e 	bl	8001844 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e187      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002956:	4b1b      	ldr	r3, [pc, #108]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f0      	bne.n	8002944 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0308 	and.w	r3, r3, #8
 800296a:	2b00      	cmp	r3, #0
 800296c:	d036      	beq.n	80029dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d016      	beq.n	80029a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002976:	4b15      	ldr	r3, [pc, #84]	@ (80029cc <HAL_RCC_OscConfig+0x248>)
 8002978:	2201      	movs	r2, #1
 800297a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800297c:	f7fe ff62 	bl	8001844 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002984:	f7fe ff5e 	bl	8001844 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e167      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002996:	4b0b      	ldr	r3, [pc, #44]	@ (80029c4 <HAL_RCC_OscConfig+0x240>)
 8002998:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0f0      	beq.n	8002984 <HAL_RCC_OscConfig+0x200>
 80029a2:	e01b      	b.n	80029dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029a4:	4b09      	ldr	r3, [pc, #36]	@ (80029cc <HAL_RCC_OscConfig+0x248>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029aa:	f7fe ff4b 	bl	8001844 <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b0:	e00e      	b.n	80029d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029b2:	f7fe ff47 	bl	8001844 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d907      	bls.n	80029d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e150      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
 80029c4:	40023800 	.word	0x40023800
 80029c8:	42470000 	.word	0x42470000
 80029cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d0:	4b88      	ldr	r3, [pc, #544]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 80029d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1ea      	bne.n	80029b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 8097 	beq.w	8002b18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ea:	2300      	movs	r3, #0
 80029ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ee:	4b81      	ldr	r3, [pc, #516]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 80029f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10f      	bne.n	8002a1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	4b7d      	ldr	r3, [pc, #500]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a02:	4a7c      	ldr	r2, [pc, #496]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a08:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a0a:	4b7a      	ldr	r3, [pc, #488]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a12:	60bb      	str	r3, [r7, #8]
 8002a14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a16:	2301      	movs	r3, #1
 8002a18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1a:	4b77      	ldr	r3, [pc, #476]	@ (8002bf8 <HAL_RCC_OscConfig+0x474>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d118      	bne.n	8002a58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a26:	4b74      	ldr	r3, [pc, #464]	@ (8002bf8 <HAL_RCC_OscConfig+0x474>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a73      	ldr	r2, [pc, #460]	@ (8002bf8 <HAL_RCC_OscConfig+0x474>)
 8002a2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a32:	f7fe ff07 	bl	8001844 <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a3a:	f7fe ff03 	bl	8001844 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e10c      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4c:	4b6a      	ldr	r3, [pc, #424]	@ (8002bf8 <HAL_RCC_OscConfig+0x474>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0f0      	beq.n	8002a3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d106      	bne.n	8002a6e <HAL_RCC_OscConfig+0x2ea>
 8002a60:	4b64      	ldr	r3, [pc, #400]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a64:	4a63      	ldr	r2, [pc, #396]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a66:	f043 0301 	orr.w	r3, r3, #1
 8002a6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a6c:	e01c      	b.n	8002aa8 <HAL_RCC_OscConfig+0x324>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	2b05      	cmp	r3, #5
 8002a74:	d10c      	bne.n	8002a90 <HAL_RCC_OscConfig+0x30c>
 8002a76:	4b5f      	ldr	r3, [pc, #380]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a7a:	4a5e      	ldr	r2, [pc, #376]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a7c:	f043 0304 	orr.w	r3, r3, #4
 8002a80:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a82:	4b5c      	ldr	r3, [pc, #368]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a86:	4a5b      	ldr	r2, [pc, #364]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a88:	f043 0301 	orr.w	r3, r3, #1
 8002a8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a8e:	e00b      	b.n	8002aa8 <HAL_RCC_OscConfig+0x324>
 8002a90:	4b58      	ldr	r3, [pc, #352]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a94:	4a57      	ldr	r2, [pc, #348]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a96:	f023 0301 	bic.w	r3, r3, #1
 8002a9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a9c:	4b55      	ldr	r3, [pc, #340]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa0:	4a54      	ldr	r2, [pc, #336]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002aa2:	f023 0304 	bic.w	r3, r3, #4
 8002aa6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d015      	beq.n	8002adc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab0:	f7fe fec8 	bl	8001844 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab6:	e00a      	b.n	8002ace <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ab8:	f7fe fec4 	bl	8001844 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e0cb      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ace:	4b49      	ldr	r3, [pc, #292]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0ee      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x334>
 8002ada:	e014      	b.n	8002b06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002adc:	f7fe feb2 	bl	8001844 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ae2:	e00a      	b.n	8002afa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ae4:	f7fe feae 	bl	8001844 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e0b5      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002afa:	4b3e      	ldr	r3, [pc, #248]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1ee      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b06:	7dfb      	ldrb	r3, [r7, #23]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d105      	bne.n	8002b18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b0c:	4b39      	ldr	r3, [pc, #228]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b10:	4a38      	ldr	r2, [pc, #224]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002b12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b16:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 80a1 	beq.w	8002c64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b22:	4b34      	ldr	r3, [pc, #208]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 030c 	and.w	r3, r3, #12
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d05c      	beq.n	8002be8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d141      	bne.n	8002bba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b36:	4b31      	ldr	r3, [pc, #196]	@ (8002bfc <HAL_RCC_OscConfig+0x478>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3c:	f7fe fe82 	bl	8001844 <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b44:	f7fe fe7e 	bl	8001844 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e087      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b56:	4b27      	ldr	r3, [pc, #156]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f0      	bne.n	8002b44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69da      	ldr	r2, [r3, #28]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b70:	019b      	lsls	r3, r3, #6
 8002b72:	431a      	orrs	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b78:	085b      	lsrs	r3, r3, #1
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	041b      	lsls	r3, r3, #16
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b84:	061b      	lsls	r3, r3, #24
 8002b86:	491b      	ldr	r1, [pc, #108]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bfc <HAL_RCC_OscConfig+0x478>)
 8002b8e:	2201      	movs	r2, #1
 8002b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b92:	f7fe fe57 	bl	8001844 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b98:	e008      	b.n	8002bac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b9a:	f7fe fe53 	bl	8001844 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e05c      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bac:	4b11      	ldr	r3, [pc, #68]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0f0      	beq.n	8002b9a <HAL_RCC_OscConfig+0x416>
 8002bb8:	e054      	b.n	8002c64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bba:	4b10      	ldr	r3, [pc, #64]	@ (8002bfc <HAL_RCC_OscConfig+0x478>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc0:	f7fe fe40 	bl	8001844 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bc8:	f7fe fe3c 	bl	8001844 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e045      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bda:	4b06      	ldr	r3, [pc, #24]	@ (8002bf4 <HAL_RCC_OscConfig+0x470>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1f0      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x444>
 8002be6:	e03d      	b.n	8002c64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d107      	bne.n	8002c00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e038      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	40007000 	.word	0x40007000
 8002bfc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c00:	4b1b      	ldr	r3, [pc, #108]	@ (8002c70 <HAL_RCC_OscConfig+0x4ec>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d028      	beq.n	8002c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d121      	bne.n	8002c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d11a      	bne.n	8002c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c30:	4013      	ands	r3, r2
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d111      	bne.n	8002c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c46:	085b      	lsrs	r3, r3, #1
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d107      	bne.n	8002c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d001      	beq.n	8002c64 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e000      	b.n	8002c66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40023800 	.word	0x40023800

08002c74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e0cc      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c88:	4b68      	ldr	r3, [pc, #416]	@ (8002e2c <HAL_RCC_ClockConfig+0x1b8>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 030f 	and.w	r3, r3, #15
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d90c      	bls.n	8002cb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c96:	4b65      	ldr	r3, [pc, #404]	@ (8002e2c <HAL_RCC_ClockConfig+0x1b8>)
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9e:	4b63      	ldr	r3, [pc, #396]	@ (8002e2c <HAL_RCC_ClockConfig+0x1b8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d001      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e0b8      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d020      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d005      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cc8:	4b59      	ldr	r3, [pc, #356]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	4a58      	ldr	r2, [pc, #352]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002cce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002cd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0308 	and.w	r3, r3, #8
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d005      	beq.n	8002cec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ce0:	4b53      	ldr	r3, [pc, #332]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	4a52      	ldr	r2, [pc, #328]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002cea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cec:	4b50      	ldr	r3, [pc, #320]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	494d      	ldr	r1, [pc, #308]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d044      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d107      	bne.n	8002d22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d12:	4b47      	ldr	r3, [pc, #284]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d119      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e07f      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d003      	beq.n	8002d32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d2e:	2b03      	cmp	r3, #3
 8002d30:	d107      	bne.n	8002d42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d32:	4b3f      	ldr	r3, [pc, #252]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d109      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e06f      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d42:	4b3b      	ldr	r3, [pc, #236]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e067      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d52:	4b37      	ldr	r3, [pc, #220]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f023 0203 	bic.w	r2, r3, #3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	4934      	ldr	r1, [pc, #208]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d64:	f7fe fd6e 	bl	8001844 <HAL_GetTick>
 8002d68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6a:	e00a      	b.n	8002d82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d6c:	f7fe fd6a 	bl	8001844 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e04f      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d82:	4b2b      	ldr	r3, [pc, #172]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 020c 	and.w	r2, r3, #12
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d1eb      	bne.n	8002d6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d94:	4b25      	ldr	r3, [pc, #148]	@ (8002e2c <HAL_RCC_ClockConfig+0x1b8>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 030f 	and.w	r3, r3, #15
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d20c      	bcs.n	8002dbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da2:	4b22      	ldr	r3, [pc, #136]	@ (8002e2c <HAL_RCC_ClockConfig+0x1b8>)
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002daa:	4b20      	ldr	r3, [pc, #128]	@ (8002e2c <HAL_RCC_ClockConfig+0x1b8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d001      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e032      	b.n	8002e22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d008      	beq.n	8002dda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dc8:	4b19      	ldr	r3, [pc, #100]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	4916      	ldr	r1, [pc, #88]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0308 	and.w	r3, r3, #8
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d009      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002de6:	4b12      	ldr	r3, [pc, #72]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	490e      	ldr	r1, [pc, #56]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dfa:	f000 f821 	bl	8002e40 <HAL_RCC_GetSysClockFreq>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	4b0b      	ldr	r3, [pc, #44]	@ (8002e30 <HAL_RCC_ClockConfig+0x1bc>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	091b      	lsrs	r3, r3, #4
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	490a      	ldr	r1, [pc, #40]	@ (8002e34 <HAL_RCC_ClockConfig+0x1c0>)
 8002e0c:	5ccb      	ldrb	r3, [r1, r3]
 8002e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e12:	4a09      	ldr	r2, [pc, #36]	@ (8002e38 <HAL_RCC_ClockConfig+0x1c4>)
 8002e14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e16:	4b09      	ldr	r3, [pc, #36]	@ (8002e3c <HAL_RCC_ClockConfig+0x1c8>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fe fbea 	bl	80015f4 <HAL_InitTick>

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40023c00 	.word	0x40023c00
 8002e30:	40023800 	.word	0x40023800
 8002e34:	080082e0 	.word	0x080082e0
 8002e38:	2000001c 	.word	0x2000001c
 8002e3c:	20000020 	.word	0x20000020

08002e40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e44:	b094      	sub	sp, #80	@ 0x50
 8002e46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e50:	2300      	movs	r3, #0
 8002e52:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002e54:	2300      	movs	r3, #0
 8002e56:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e58:	4b79      	ldr	r3, [pc, #484]	@ (8003040 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 030c 	and.w	r3, r3, #12
 8002e60:	2b08      	cmp	r3, #8
 8002e62:	d00d      	beq.n	8002e80 <HAL_RCC_GetSysClockFreq+0x40>
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	f200 80e1 	bhi.w	800302c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d002      	beq.n	8002e74 <HAL_RCC_GetSysClockFreq+0x34>
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	d003      	beq.n	8002e7a <HAL_RCC_GetSysClockFreq+0x3a>
 8002e72:	e0db      	b.n	800302c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e74:	4b73      	ldr	r3, [pc, #460]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e76:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002e78:	e0db      	b.n	8003032 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e7a:	4b73      	ldr	r3, [pc, #460]	@ (8003048 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e7e:	e0d8      	b.n	8003032 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e80:	4b6f      	ldr	r3, [pc, #444]	@ (8003040 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e88:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e8a:	4b6d      	ldr	r3, [pc, #436]	@ (8003040 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d063      	beq.n	8002f5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e96:	4b6a      	ldr	r3, [pc, #424]	@ (8003040 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	099b      	lsrs	r3, r3, #6
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ea0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ea8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002eaa:	2300      	movs	r3, #0
 8002eac:	637b      	str	r3, [r7, #52]	@ 0x34
 8002eae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002eb2:	4622      	mov	r2, r4
 8002eb4:	462b      	mov	r3, r5
 8002eb6:	f04f 0000 	mov.w	r0, #0
 8002eba:	f04f 0100 	mov.w	r1, #0
 8002ebe:	0159      	lsls	r1, r3, #5
 8002ec0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ec4:	0150      	lsls	r0, r2, #5
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	4621      	mov	r1, r4
 8002ecc:	1a51      	subs	r1, r2, r1
 8002ece:	6139      	str	r1, [r7, #16]
 8002ed0:	4629      	mov	r1, r5
 8002ed2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ed6:	617b      	str	r3, [r7, #20]
 8002ed8:	f04f 0200 	mov.w	r2, #0
 8002edc:	f04f 0300 	mov.w	r3, #0
 8002ee0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ee4:	4659      	mov	r1, fp
 8002ee6:	018b      	lsls	r3, r1, #6
 8002ee8:	4651      	mov	r1, sl
 8002eea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002eee:	4651      	mov	r1, sl
 8002ef0:	018a      	lsls	r2, r1, #6
 8002ef2:	4651      	mov	r1, sl
 8002ef4:	ebb2 0801 	subs.w	r8, r2, r1
 8002ef8:	4659      	mov	r1, fp
 8002efa:	eb63 0901 	sbc.w	r9, r3, r1
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f12:	4690      	mov	r8, r2
 8002f14:	4699      	mov	r9, r3
 8002f16:	4623      	mov	r3, r4
 8002f18:	eb18 0303 	adds.w	r3, r8, r3
 8002f1c:	60bb      	str	r3, [r7, #8]
 8002f1e:	462b      	mov	r3, r5
 8002f20:	eb49 0303 	adc.w	r3, r9, r3
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	f04f 0200 	mov.w	r2, #0
 8002f2a:	f04f 0300 	mov.w	r3, #0
 8002f2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f32:	4629      	mov	r1, r5
 8002f34:	024b      	lsls	r3, r1, #9
 8002f36:	4621      	mov	r1, r4
 8002f38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f3c:	4621      	mov	r1, r4
 8002f3e:	024a      	lsls	r2, r1, #9
 8002f40:	4610      	mov	r0, r2
 8002f42:	4619      	mov	r1, r3
 8002f44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f46:	2200      	movs	r2, #0
 8002f48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f50:	f7fd f94e 	bl	80001f0 <__aeabi_uldivmod>
 8002f54:	4602      	mov	r2, r0
 8002f56:	460b      	mov	r3, r1
 8002f58:	4613      	mov	r3, r2
 8002f5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f5c:	e058      	b.n	8003010 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f5e:	4b38      	ldr	r3, [pc, #224]	@ (8003040 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	099b      	lsrs	r3, r3, #6
 8002f64:	2200      	movs	r2, #0
 8002f66:	4618      	mov	r0, r3
 8002f68:	4611      	mov	r1, r2
 8002f6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f6e:	623b      	str	r3, [r7, #32]
 8002f70:	2300      	movs	r3, #0
 8002f72:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f78:	4642      	mov	r2, r8
 8002f7a:	464b      	mov	r3, r9
 8002f7c:	f04f 0000 	mov.w	r0, #0
 8002f80:	f04f 0100 	mov.w	r1, #0
 8002f84:	0159      	lsls	r1, r3, #5
 8002f86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f8a:	0150      	lsls	r0, r2, #5
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4641      	mov	r1, r8
 8002f92:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f96:	4649      	mov	r1, r9
 8002f98:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	f04f 0300 	mov.w	r3, #0
 8002fa4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fa8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fb0:	ebb2 040a 	subs.w	r4, r2, sl
 8002fb4:	eb63 050b 	sbc.w	r5, r3, fp
 8002fb8:	f04f 0200 	mov.w	r2, #0
 8002fbc:	f04f 0300 	mov.w	r3, #0
 8002fc0:	00eb      	lsls	r3, r5, #3
 8002fc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fc6:	00e2      	lsls	r2, r4, #3
 8002fc8:	4614      	mov	r4, r2
 8002fca:	461d      	mov	r5, r3
 8002fcc:	4643      	mov	r3, r8
 8002fce:	18e3      	adds	r3, r4, r3
 8002fd0:	603b      	str	r3, [r7, #0]
 8002fd2:	464b      	mov	r3, r9
 8002fd4:	eb45 0303 	adc.w	r3, r5, r3
 8002fd8:	607b      	str	r3, [r7, #4]
 8002fda:	f04f 0200 	mov.w	r2, #0
 8002fde:	f04f 0300 	mov.w	r3, #0
 8002fe2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fe6:	4629      	mov	r1, r5
 8002fe8:	028b      	lsls	r3, r1, #10
 8002fea:	4621      	mov	r1, r4
 8002fec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ff0:	4621      	mov	r1, r4
 8002ff2:	028a      	lsls	r2, r1, #10
 8002ff4:	4610      	mov	r0, r2
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	61bb      	str	r3, [r7, #24]
 8002ffe:	61fa      	str	r2, [r7, #28]
 8003000:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003004:	f7fd f8f4 	bl	80001f0 <__aeabi_uldivmod>
 8003008:	4602      	mov	r2, r0
 800300a:	460b      	mov	r3, r1
 800300c:	4613      	mov	r3, r2
 800300e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003010:	4b0b      	ldr	r3, [pc, #44]	@ (8003040 <HAL_RCC_GetSysClockFreq+0x200>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	0c1b      	lsrs	r3, r3, #16
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	3301      	adds	r3, #1
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003020:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003022:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003024:	fbb2 f3f3 	udiv	r3, r2, r3
 8003028:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800302a:	e002      	b.n	8003032 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800302c:	4b05      	ldr	r3, [pc, #20]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x204>)
 800302e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003030:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003032:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003034:	4618      	mov	r0, r3
 8003036:	3750      	adds	r7, #80	@ 0x50
 8003038:	46bd      	mov	sp, r7
 800303a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800303e:	bf00      	nop
 8003040:	40023800 	.word	0x40023800
 8003044:	00f42400 	.word	0x00f42400
 8003048:	007a1200 	.word	0x007a1200

0800304c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003050:	4b03      	ldr	r3, [pc, #12]	@ (8003060 <HAL_RCC_GetHCLKFreq+0x14>)
 8003052:	681b      	ldr	r3, [r3, #0]
}
 8003054:	4618      	mov	r0, r3
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	2000001c 	.word	0x2000001c

08003064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003068:	f7ff fff0 	bl	800304c <HAL_RCC_GetHCLKFreq>
 800306c:	4602      	mov	r2, r0
 800306e:	4b05      	ldr	r3, [pc, #20]	@ (8003084 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	0a9b      	lsrs	r3, r3, #10
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	4903      	ldr	r1, [pc, #12]	@ (8003088 <HAL_RCC_GetPCLK1Freq+0x24>)
 800307a:	5ccb      	ldrb	r3, [r1, r3]
 800307c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003080:	4618      	mov	r0, r3
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40023800 	.word	0x40023800
 8003088:	080082f0 	.word	0x080082f0

0800308c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003090:	f7ff ffdc 	bl	800304c <HAL_RCC_GetHCLKFreq>
 8003094:	4602      	mov	r2, r0
 8003096:	4b05      	ldr	r3, [pc, #20]	@ (80030ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	0b5b      	lsrs	r3, r3, #13
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	4903      	ldr	r1, [pc, #12]	@ (80030b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030a2:	5ccb      	ldrb	r3, [r1, r3]
 80030a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40023800 	.word	0x40023800
 80030b0:	080082f0 	.word	0x080082f0

080030b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	220f      	movs	r2, #15
 80030c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80030c4:	4b12      	ldr	r3, [pc, #72]	@ (8003110 <HAL_RCC_GetClockConfig+0x5c>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f003 0203 	and.w	r2, r3, #3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80030d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003110 <HAL_RCC_GetClockConfig+0x5c>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80030dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003110 <HAL_RCC_GetClockConfig+0x5c>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80030e8:	4b09      	ldr	r3, [pc, #36]	@ (8003110 <HAL_RCC_GetClockConfig+0x5c>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	08db      	lsrs	r3, r3, #3
 80030ee:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030f6:	4b07      	ldr	r3, [pc, #28]	@ (8003114 <HAL_RCC_GetClockConfig+0x60>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 020f 	and.w	r2, r3, #15
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	601a      	str	r2, [r3, #0]
}
 8003102:	bf00      	nop
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	40023800 	.word	0x40023800
 8003114:	40023c00 	.word	0x40023c00

08003118 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e041      	b.n	80031ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d106      	bne.n	8003144 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7fe f904 	bl	800134c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3304      	adds	r3, #4
 8003154:	4619      	mov	r1, r3
 8003156:	4610      	mov	r0, r2
 8003158:	f000 fc62 	bl	8003a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
	...

080031b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d001      	beq.n	80031d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e04e      	b.n	800326e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2202      	movs	r2, #2
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 0201 	orr.w	r2, r2, #1
 80031e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a23      	ldr	r2, [pc, #140]	@ (800327c <HAL_TIM_Base_Start_IT+0xc4>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d022      	beq.n	8003238 <HAL_TIM_Base_Start_IT+0x80>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031fa:	d01d      	beq.n	8003238 <HAL_TIM_Base_Start_IT+0x80>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a1f      	ldr	r2, [pc, #124]	@ (8003280 <HAL_TIM_Base_Start_IT+0xc8>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d018      	beq.n	8003238 <HAL_TIM_Base_Start_IT+0x80>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a1e      	ldr	r2, [pc, #120]	@ (8003284 <HAL_TIM_Base_Start_IT+0xcc>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d013      	beq.n	8003238 <HAL_TIM_Base_Start_IT+0x80>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a1c      	ldr	r2, [pc, #112]	@ (8003288 <HAL_TIM_Base_Start_IT+0xd0>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d00e      	beq.n	8003238 <HAL_TIM_Base_Start_IT+0x80>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a1b      	ldr	r2, [pc, #108]	@ (800328c <HAL_TIM_Base_Start_IT+0xd4>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d009      	beq.n	8003238 <HAL_TIM_Base_Start_IT+0x80>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a19      	ldr	r2, [pc, #100]	@ (8003290 <HAL_TIM_Base_Start_IT+0xd8>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d004      	beq.n	8003238 <HAL_TIM_Base_Start_IT+0x80>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a18      	ldr	r2, [pc, #96]	@ (8003294 <HAL_TIM_Base_Start_IT+0xdc>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d111      	bne.n	800325c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2b06      	cmp	r3, #6
 8003248:	d010      	beq.n	800326c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f042 0201 	orr.w	r2, r2, #1
 8003258:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800325a:	e007      	b.n	800326c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0201 	orr.w	r2, r2, #1
 800326a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40010000 	.word	0x40010000
 8003280:	40000400 	.word	0x40000400
 8003284:	40000800 	.word	0x40000800
 8003288:	40000c00 	.word	0x40000c00
 800328c:	40010400 	.word	0x40010400
 8003290:	40014000 	.word	0x40014000
 8003294:	40001800 	.word	0x40001800

08003298 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e041      	b.n	800332e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d106      	bne.n	80032c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f839 	bl	8003336 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3304      	adds	r3, #4
 80032d4:	4619      	mov	r1, r3
 80032d6:	4610      	mov	r0, r2
 80032d8:	f000 fba2 	bl	8003a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
	...

0800334c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d109      	bne.n	8003370 <HAL_TIM_PWM_Start+0x24>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b01      	cmp	r3, #1
 8003366:	bf14      	ite	ne
 8003368:	2301      	movne	r3, #1
 800336a:	2300      	moveq	r3, #0
 800336c:	b2db      	uxtb	r3, r3
 800336e:	e022      	b.n	80033b6 <HAL_TIM_PWM_Start+0x6a>
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	2b04      	cmp	r3, #4
 8003374:	d109      	bne.n	800338a <HAL_TIM_PWM_Start+0x3e>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b01      	cmp	r3, #1
 8003380:	bf14      	ite	ne
 8003382:	2301      	movne	r3, #1
 8003384:	2300      	moveq	r3, #0
 8003386:	b2db      	uxtb	r3, r3
 8003388:	e015      	b.n	80033b6 <HAL_TIM_PWM_Start+0x6a>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	2b08      	cmp	r3, #8
 800338e:	d109      	bne.n	80033a4 <HAL_TIM_PWM_Start+0x58>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b01      	cmp	r3, #1
 800339a:	bf14      	ite	ne
 800339c:	2301      	movne	r3, #1
 800339e:	2300      	moveq	r3, #0
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	e008      	b.n	80033b6 <HAL_TIM_PWM_Start+0x6a>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	bf14      	ite	ne
 80033b0:	2301      	movne	r3, #1
 80033b2:	2300      	moveq	r3, #0
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e07c      	b.n	80034b8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d104      	bne.n	80033ce <HAL_TIM_PWM_Start+0x82>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2202      	movs	r2, #2
 80033c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033cc:	e013      	b.n	80033f6 <HAL_TIM_PWM_Start+0xaa>
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d104      	bne.n	80033de <HAL_TIM_PWM_Start+0x92>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2202      	movs	r2, #2
 80033d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033dc:	e00b      	b.n	80033f6 <HAL_TIM_PWM_Start+0xaa>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d104      	bne.n	80033ee <HAL_TIM_PWM_Start+0xa2>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2202      	movs	r2, #2
 80033e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033ec:	e003      	b.n	80033f6 <HAL_TIM_PWM_Start+0xaa>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2202      	movs	r2, #2
 80033f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2201      	movs	r2, #1
 80033fc:	6839      	ldr	r1, [r7, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 fe04 	bl	800400c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a2d      	ldr	r2, [pc, #180]	@ (80034c0 <HAL_TIM_PWM_Start+0x174>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d004      	beq.n	8003418 <HAL_TIM_PWM_Start+0xcc>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a2c      	ldr	r2, [pc, #176]	@ (80034c4 <HAL_TIM_PWM_Start+0x178>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d101      	bne.n	800341c <HAL_TIM_PWM_Start+0xd0>
 8003418:	2301      	movs	r3, #1
 800341a:	e000      	b.n	800341e <HAL_TIM_PWM_Start+0xd2>
 800341c:	2300      	movs	r3, #0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d007      	beq.n	8003432 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003430:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a22      	ldr	r2, [pc, #136]	@ (80034c0 <HAL_TIM_PWM_Start+0x174>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d022      	beq.n	8003482 <HAL_TIM_PWM_Start+0x136>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003444:	d01d      	beq.n	8003482 <HAL_TIM_PWM_Start+0x136>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a1f      	ldr	r2, [pc, #124]	@ (80034c8 <HAL_TIM_PWM_Start+0x17c>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d018      	beq.n	8003482 <HAL_TIM_PWM_Start+0x136>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a1d      	ldr	r2, [pc, #116]	@ (80034cc <HAL_TIM_PWM_Start+0x180>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d013      	beq.n	8003482 <HAL_TIM_PWM_Start+0x136>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a1c      	ldr	r2, [pc, #112]	@ (80034d0 <HAL_TIM_PWM_Start+0x184>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d00e      	beq.n	8003482 <HAL_TIM_PWM_Start+0x136>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a16      	ldr	r2, [pc, #88]	@ (80034c4 <HAL_TIM_PWM_Start+0x178>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d009      	beq.n	8003482 <HAL_TIM_PWM_Start+0x136>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a18      	ldr	r2, [pc, #96]	@ (80034d4 <HAL_TIM_PWM_Start+0x188>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d004      	beq.n	8003482 <HAL_TIM_PWM_Start+0x136>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a16      	ldr	r2, [pc, #88]	@ (80034d8 <HAL_TIM_PWM_Start+0x18c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d111      	bne.n	80034a6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2b06      	cmp	r3, #6
 8003492:	d010      	beq.n	80034b6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0201 	orr.w	r2, r2, #1
 80034a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034a4:	e007      	b.n	80034b6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f042 0201 	orr.w	r2, r2, #1
 80034b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	40010000 	.word	0x40010000
 80034c4:	40010400 	.word	0x40010400
 80034c8:	40000400 	.word	0x40000400
 80034cc:	40000800 	.word	0x40000800
 80034d0:	40000c00 	.word	0x40000c00
 80034d4:	40014000 	.word	0x40014000
 80034d8:	40001800 	.word	0x40001800

080034dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d020      	beq.n	8003540 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d01b      	beq.n	8003540 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f06f 0202 	mvn.w	r2, #2
 8003510:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 fa5b 	bl	80039e2 <HAL_TIM_IC_CaptureCallback>
 800352c:	e005      	b.n	800353a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 fa4d 	bl	80039ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 fa5e 	bl	80039f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f003 0304 	and.w	r3, r3, #4
 8003546:	2b00      	cmp	r3, #0
 8003548:	d020      	beq.n	800358c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f003 0304 	and.w	r3, r3, #4
 8003550:	2b00      	cmp	r3, #0
 8003552:	d01b      	beq.n	800358c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f06f 0204 	mvn.w	r2, #4
 800355c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2202      	movs	r2, #2
 8003562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 fa35 	bl	80039e2 <HAL_TIM_IC_CaptureCallback>
 8003578:	e005      	b.n	8003586 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 fa27 	bl	80039ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 fa38 	bl	80039f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b00      	cmp	r3, #0
 8003594:	d020      	beq.n	80035d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f003 0308 	and.w	r3, r3, #8
 800359c:	2b00      	cmp	r3, #0
 800359e:	d01b      	beq.n	80035d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f06f 0208 	mvn.w	r2, #8
 80035a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2204      	movs	r2, #4
 80035ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	f003 0303 	and.w	r3, r3, #3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 fa0f 	bl	80039e2 <HAL_TIM_IC_CaptureCallback>
 80035c4:	e005      	b.n	80035d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 fa01 	bl	80039ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 fa12 	bl	80039f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	f003 0310 	and.w	r3, r3, #16
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d020      	beq.n	8003624 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f003 0310 	and.w	r3, r3, #16
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d01b      	beq.n	8003624 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f06f 0210 	mvn.w	r2, #16
 80035f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2208      	movs	r2, #8
 80035fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f9e9 	bl	80039e2 <HAL_TIM_IC_CaptureCallback>
 8003610:	e005      	b.n	800361e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f9db 	bl	80039ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 f9ec 	bl	80039f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00c      	beq.n	8003648 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b00      	cmp	r3, #0
 8003636:	d007      	beq.n	8003648 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f06f 0201 	mvn.w	r2, #1
 8003640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7fd fd78 	bl	8001138 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00c      	beq.n	800366c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003658:	2b00      	cmp	r3, #0
 800365a:	d007      	beq.n	800366c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 fd7c 	bl	8004164 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00c      	beq.n	8003690 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800367c:	2b00      	cmp	r3, #0
 800367e:	d007      	beq.n	8003690 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f9bd 	bl	8003a0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	f003 0320 	and.w	r3, r3, #32
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00c      	beq.n	80036b4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f003 0320 	and.w	r3, r3, #32
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d007      	beq.n	80036b4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f06f 0220 	mvn.w	r2, #32
 80036ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 fd4e 	bl	8004150 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036b4:	bf00      	nop
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036c8:	2300      	movs	r3, #0
 80036ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d101      	bne.n	80036da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80036d6:	2302      	movs	r3, #2
 80036d8:	e0ae      	b.n	8003838 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b0c      	cmp	r3, #12
 80036e6:	f200 809f 	bhi.w	8003828 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80036ea:	a201      	add	r2, pc, #4	@ (adr r2, 80036f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80036ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f0:	08003725 	.word	0x08003725
 80036f4:	08003829 	.word	0x08003829
 80036f8:	08003829 	.word	0x08003829
 80036fc:	08003829 	.word	0x08003829
 8003700:	08003765 	.word	0x08003765
 8003704:	08003829 	.word	0x08003829
 8003708:	08003829 	.word	0x08003829
 800370c:	08003829 	.word	0x08003829
 8003710:	080037a7 	.word	0x080037a7
 8003714:	08003829 	.word	0x08003829
 8003718:	08003829 	.word	0x08003829
 800371c:	08003829 	.word	0x08003829
 8003720:	080037e7 	.word	0x080037e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68b9      	ldr	r1, [r7, #8]
 800372a:	4618      	mov	r0, r3
 800372c:	f000 fa24 	bl	8003b78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699a      	ldr	r2, [r3, #24]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0208 	orr.w	r2, r2, #8
 800373e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	699a      	ldr	r2, [r3, #24]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0204 	bic.w	r2, r2, #4
 800374e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6999      	ldr	r1, [r3, #24]
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	691a      	ldr	r2, [r3, #16]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	619a      	str	r2, [r3, #24]
      break;
 8003762:	e064      	b.n	800382e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68b9      	ldr	r1, [r7, #8]
 800376a:	4618      	mov	r0, r3
 800376c:	f000 fa74 	bl	8003c58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699a      	ldr	r2, [r3, #24]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800377e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	699a      	ldr	r2, [r3, #24]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800378e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6999      	ldr	r1, [r3, #24]
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	021a      	lsls	r2, r3, #8
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	619a      	str	r2, [r3, #24]
      break;
 80037a4:	e043      	b.n	800382e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68b9      	ldr	r1, [r7, #8]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f000 fac9 	bl	8003d44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	69da      	ldr	r2, [r3, #28]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f042 0208 	orr.w	r2, r2, #8
 80037c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	69da      	ldr	r2, [r3, #28]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0204 	bic.w	r2, r2, #4
 80037d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	69d9      	ldr	r1, [r3, #28]
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	691a      	ldr	r2, [r3, #16]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	61da      	str	r2, [r3, #28]
      break;
 80037e4:	e023      	b.n	800382e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68b9      	ldr	r1, [r7, #8]
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 fb1d 	bl	8003e2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	69da      	ldr	r2, [r3, #28]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003800:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	69da      	ldr	r2, [r3, #28]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003810:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	69d9      	ldr	r1, [r3, #28]
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	021a      	lsls	r2, r3, #8
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	61da      	str	r2, [r3, #28]
      break;
 8003826:	e002      	b.n	800382e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	75fb      	strb	r3, [r7, #23]
      break;
 800382c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003836:	7dfb      	ldrb	r3, [r7, #23]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3718      	adds	r7, #24
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800384a:	2300      	movs	r3, #0
 800384c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003854:	2b01      	cmp	r3, #1
 8003856:	d101      	bne.n	800385c <HAL_TIM_ConfigClockSource+0x1c>
 8003858:	2302      	movs	r3, #2
 800385a:	e0b4      	b.n	80039c6 <HAL_TIM_ConfigClockSource+0x186>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2202      	movs	r2, #2
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800387a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003882:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003894:	d03e      	beq.n	8003914 <HAL_TIM_ConfigClockSource+0xd4>
 8003896:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800389a:	f200 8087 	bhi.w	80039ac <HAL_TIM_ConfigClockSource+0x16c>
 800389e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038a2:	f000 8086 	beq.w	80039b2 <HAL_TIM_ConfigClockSource+0x172>
 80038a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038aa:	d87f      	bhi.n	80039ac <HAL_TIM_ConfigClockSource+0x16c>
 80038ac:	2b70      	cmp	r3, #112	@ 0x70
 80038ae:	d01a      	beq.n	80038e6 <HAL_TIM_ConfigClockSource+0xa6>
 80038b0:	2b70      	cmp	r3, #112	@ 0x70
 80038b2:	d87b      	bhi.n	80039ac <HAL_TIM_ConfigClockSource+0x16c>
 80038b4:	2b60      	cmp	r3, #96	@ 0x60
 80038b6:	d050      	beq.n	800395a <HAL_TIM_ConfigClockSource+0x11a>
 80038b8:	2b60      	cmp	r3, #96	@ 0x60
 80038ba:	d877      	bhi.n	80039ac <HAL_TIM_ConfigClockSource+0x16c>
 80038bc:	2b50      	cmp	r3, #80	@ 0x50
 80038be:	d03c      	beq.n	800393a <HAL_TIM_ConfigClockSource+0xfa>
 80038c0:	2b50      	cmp	r3, #80	@ 0x50
 80038c2:	d873      	bhi.n	80039ac <HAL_TIM_ConfigClockSource+0x16c>
 80038c4:	2b40      	cmp	r3, #64	@ 0x40
 80038c6:	d058      	beq.n	800397a <HAL_TIM_ConfigClockSource+0x13a>
 80038c8:	2b40      	cmp	r3, #64	@ 0x40
 80038ca:	d86f      	bhi.n	80039ac <HAL_TIM_ConfigClockSource+0x16c>
 80038cc:	2b30      	cmp	r3, #48	@ 0x30
 80038ce:	d064      	beq.n	800399a <HAL_TIM_ConfigClockSource+0x15a>
 80038d0:	2b30      	cmp	r3, #48	@ 0x30
 80038d2:	d86b      	bhi.n	80039ac <HAL_TIM_ConfigClockSource+0x16c>
 80038d4:	2b20      	cmp	r3, #32
 80038d6:	d060      	beq.n	800399a <HAL_TIM_ConfigClockSource+0x15a>
 80038d8:	2b20      	cmp	r3, #32
 80038da:	d867      	bhi.n	80039ac <HAL_TIM_ConfigClockSource+0x16c>
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d05c      	beq.n	800399a <HAL_TIM_ConfigClockSource+0x15a>
 80038e0:	2b10      	cmp	r3, #16
 80038e2:	d05a      	beq.n	800399a <HAL_TIM_ConfigClockSource+0x15a>
 80038e4:	e062      	b.n	80039ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038f6:	f000 fb69 	bl	8003fcc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003908:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	609a      	str	r2, [r3, #8]
      break;
 8003912:	e04f      	b.n	80039b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003924:	f000 fb52 	bl	8003fcc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689a      	ldr	r2, [r3, #8]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003936:	609a      	str	r2, [r3, #8]
      break;
 8003938:	e03c      	b.n	80039b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003946:	461a      	mov	r2, r3
 8003948:	f000 fac6 	bl	8003ed8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2150      	movs	r1, #80	@ 0x50
 8003952:	4618      	mov	r0, r3
 8003954:	f000 fb1f 	bl	8003f96 <TIM_ITRx_SetConfig>
      break;
 8003958:	e02c      	b.n	80039b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003966:	461a      	mov	r2, r3
 8003968:	f000 fae5 	bl	8003f36 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2160      	movs	r1, #96	@ 0x60
 8003972:	4618      	mov	r0, r3
 8003974:	f000 fb0f 	bl	8003f96 <TIM_ITRx_SetConfig>
      break;
 8003978:	e01c      	b.n	80039b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003986:	461a      	mov	r2, r3
 8003988:	f000 faa6 	bl	8003ed8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2140      	movs	r1, #64	@ 0x40
 8003992:	4618      	mov	r0, r3
 8003994:	f000 faff 	bl	8003f96 <TIM_ITRx_SetConfig>
      break;
 8003998:	e00c      	b.n	80039b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4619      	mov	r1, r3
 80039a4:	4610      	mov	r0, r2
 80039a6:	f000 faf6 	bl	8003f96 <TIM_ITRx_SetConfig>
      break;
 80039aa:	e003      	b.n	80039b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	73fb      	strb	r3, [r7, #15]
      break;
 80039b0:	e000      	b.n	80039b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80039b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80039c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b083      	sub	sp, #12
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
	...

08003a20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a46      	ldr	r2, [pc, #280]	@ (8003b4c <TIM_Base_SetConfig+0x12c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d013      	beq.n	8003a60 <TIM_Base_SetConfig+0x40>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a3e:	d00f      	beq.n	8003a60 <TIM_Base_SetConfig+0x40>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a43      	ldr	r2, [pc, #268]	@ (8003b50 <TIM_Base_SetConfig+0x130>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d00b      	beq.n	8003a60 <TIM_Base_SetConfig+0x40>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a42      	ldr	r2, [pc, #264]	@ (8003b54 <TIM_Base_SetConfig+0x134>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d007      	beq.n	8003a60 <TIM_Base_SetConfig+0x40>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a41      	ldr	r2, [pc, #260]	@ (8003b58 <TIM_Base_SetConfig+0x138>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d003      	beq.n	8003a60 <TIM_Base_SetConfig+0x40>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a40      	ldr	r2, [pc, #256]	@ (8003b5c <TIM_Base_SetConfig+0x13c>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d108      	bne.n	8003a72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a35      	ldr	r2, [pc, #212]	@ (8003b4c <TIM_Base_SetConfig+0x12c>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d02b      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a80:	d027      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a32      	ldr	r2, [pc, #200]	@ (8003b50 <TIM_Base_SetConfig+0x130>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d023      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a31      	ldr	r2, [pc, #196]	@ (8003b54 <TIM_Base_SetConfig+0x134>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d01f      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a30      	ldr	r2, [pc, #192]	@ (8003b58 <TIM_Base_SetConfig+0x138>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d01b      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a2f      	ldr	r2, [pc, #188]	@ (8003b5c <TIM_Base_SetConfig+0x13c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d017      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a2e      	ldr	r2, [pc, #184]	@ (8003b60 <TIM_Base_SetConfig+0x140>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d013      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a2d      	ldr	r2, [pc, #180]	@ (8003b64 <TIM_Base_SetConfig+0x144>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d00f      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a2c      	ldr	r2, [pc, #176]	@ (8003b68 <TIM_Base_SetConfig+0x148>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d00b      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a2b      	ldr	r2, [pc, #172]	@ (8003b6c <TIM_Base_SetConfig+0x14c>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d007      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a2a      	ldr	r2, [pc, #168]	@ (8003b70 <TIM_Base_SetConfig+0x150>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d003      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a29      	ldr	r2, [pc, #164]	@ (8003b74 <TIM_Base_SetConfig+0x154>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d108      	bne.n	8003ae4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ad8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a10      	ldr	r2, [pc, #64]	@ (8003b4c <TIM_Base_SetConfig+0x12c>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d003      	beq.n	8003b18 <TIM_Base_SetConfig+0xf8>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a12      	ldr	r2, [pc, #72]	@ (8003b5c <TIM_Base_SetConfig+0x13c>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d103      	bne.n	8003b20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d105      	bne.n	8003b3e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	f023 0201 	bic.w	r2, r3, #1
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	611a      	str	r2, [r3, #16]
  }
}
 8003b3e:	bf00      	nop
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	40010000 	.word	0x40010000
 8003b50:	40000400 	.word	0x40000400
 8003b54:	40000800 	.word	0x40000800
 8003b58:	40000c00 	.word	0x40000c00
 8003b5c:	40010400 	.word	0x40010400
 8003b60:	40014000 	.word	0x40014000
 8003b64:	40014400 	.word	0x40014400
 8003b68:	40014800 	.word	0x40014800
 8003b6c:	40001800 	.word	0x40001800
 8003b70:	40001c00 	.word	0x40001c00
 8003b74:	40002000 	.word	0x40002000

08003b78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b087      	sub	sp, #28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	f023 0201 	bic.w	r2, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f023 0303 	bic.w	r3, r3, #3
 8003bae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f023 0302 	bic.w	r3, r3, #2
 8003bc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a20      	ldr	r2, [pc, #128]	@ (8003c50 <TIM_OC1_SetConfig+0xd8>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d003      	beq.n	8003bdc <TIM_OC1_SetConfig+0x64>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a1f      	ldr	r2, [pc, #124]	@ (8003c54 <TIM_OC1_SetConfig+0xdc>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d10c      	bne.n	8003bf6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f023 0308 	bic.w	r3, r3, #8
 8003be2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f023 0304 	bic.w	r3, r3, #4
 8003bf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a15      	ldr	r2, [pc, #84]	@ (8003c50 <TIM_OC1_SetConfig+0xd8>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d003      	beq.n	8003c06 <TIM_OC1_SetConfig+0x8e>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a14      	ldr	r2, [pc, #80]	@ (8003c54 <TIM_OC1_SetConfig+0xdc>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d111      	bne.n	8003c2a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	621a      	str	r2, [r3, #32]
}
 8003c44:	bf00      	nop
 8003c46:	371c      	adds	r7, #28
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	40010000 	.word	0x40010000
 8003c54:	40010400 	.word	0x40010400

08003c58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	f023 0210 	bic.w	r2, r3, #16
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	021b      	lsls	r3, r3, #8
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	f023 0320 	bic.w	r3, r3, #32
 8003ca2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	011b      	lsls	r3, r3, #4
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a22      	ldr	r2, [pc, #136]	@ (8003d3c <TIM_OC2_SetConfig+0xe4>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d003      	beq.n	8003cc0 <TIM_OC2_SetConfig+0x68>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a21      	ldr	r2, [pc, #132]	@ (8003d40 <TIM_OC2_SetConfig+0xe8>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d10d      	bne.n	8003cdc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	011b      	lsls	r3, r3, #4
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cda:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a17      	ldr	r2, [pc, #92]	@ (8003d3c <TIM_OC2_SetConfig+0xe4>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d003      	beq.n	8003cec <TIM_OC2_SetConfig+0x94>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a16      	ldr	r2, [pc, #88]	@ (8003d40 <TIM_OC2_SetConfig+0xe8>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d113      	bne.n	8003d14 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003cf2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003cfa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	621a      	str	r2, [r3, #32]
}
 8003d2e:	bf00      	nop
 8003d30:	371c      	adds	r7, #28
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	40010000 	.word	0x40010000
 8003d40:	40010400 	.word	0x40010400

08003d44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b087      	sub	sp, #28
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f023 0303 	bic.w	r3, r3, #3
 8003d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	021b      	lsls	r3, r3, #8
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a21      	ldr	r2, [pc, #132]	@ (8003e24 <TIM_OC3_SetConfig+0xe0>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d003      	beq.n	8003daa <TIM_OC3_SetConfig+0x66>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a20      	ldr	r2, [pc, #128]	@ (8003e28 <TIM_OC3_SetConfig+0xe4>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d10d      	bne.n	8003dc6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003db0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	021b      	lsls	r3, r3, #8
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003dc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a16      	ldr	r2, [pc, #88]	@ (8003e24 <TIM_OC3_SetConfig+0xe0>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d003      	beq.n	8003dd6 <TIM_OC3_SetConfig+0x92>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a15      	ldr	r2, [pc, #84]	@ (8003e28 <TIM_OC3_SetConfig+0xe4>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d113      	bne.n	8003dfe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ddc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003de4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	011b      	lsls	r3, r3, #4
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	011b      	lsls	r3, r3, #4
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	621a      	str	r2, [r3, #32]
}
 8003e18:	bf00      	nop
 8003e1a:	371c      	adds	r7, #28
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	40010000 	.word	0x40010000
 8003e28:	40010400 	.word	0x40010400

08003e2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	021b      	lsls	r3, r3, #8
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	031b      	lsls	r3, r3, #12
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a12      	ldr	r2, [pc, #72]	@ (8003ed0 <TIM_OC4_SetConfig+0xa4>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d003      	beq.n	8003e94 <TIM_OC4_SetConfig+0x68>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a11      	ldr	r2, [pc, #68]	@ (8003ed4 <TIM_OC4_SetConfig+0xa8>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d109      	bne.n	8003ea8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	019b      	lsls	r3, r3, #6
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	621a      	str	r2, [r3, #32]
}
 8003ec2:	bf00      	nop
 8003ec4:	371c      	adds	r7, #28
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	40010000 	.word	0x40010000
 8003ed4:	40010400 	.word	0x40010400

08003ed8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b087      	sub	sp, #28
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	f023 0201 	bic.w	r2, r3, #1
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	011b      	lsls	r3, r3, #4
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	f023 030a 	bic.w	r3, r3, #10
 8003f14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	621a      	str	r2, [r3, #32]
}
 8003f2a:	bf00      	nop
 8003f2c:	371c      	adds	r7, #28
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr

08003f36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f36:	b480      	push	{r7}
 8003f38:	b087      	sub	sp, #28
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	60f8      	str	r0, [r7, #12]
 8003f3e:	60b9      	str	r1, [r7, #8]
 8003f40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
 8003f4c:	f023 0210 	bic.w	r2, r3, #16
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003f60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	031b      	lsls	r3, r3, #12
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003f72:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	011b      	lsls	r3, r3, #4
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	621a      	str	r2, [r3, #32]
}
 8003f8a:	bf00      	nop
 8003f8c:	371c      	adds	r7, #28
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b085      	sub	sp, #20
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
 8003f9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	f043 0307 	orr.w	r3, r3, #7
 8003fb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	609a      	str	r2, [r3, #8]
}
 8003fc0:	bf00      	nop
 8003fc2:	3714      	adds	r7, #20
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b087      	sub	sp, #28
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
 8003fd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003fe6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	021a      	lsls	r2, r3, #8
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	609a      	str	r2, [r3, #8]
}
 8004000:	bf00      	nop
 8004002:	371c      	adds	r7, #28
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800400c:	b480      	push	{r7}
 800400e:	b087      	sub	sp, #28
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	f003 031f 	and.w	r3, r3, #31
 800401e:	2201      	movs	r2, #1
 8004020:	fa02 f303 	lsl.w	r3, r2, r3
 8004024:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a1a      	ldr	r2, [r3, #32]
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	43db      	mvns	r3, r3
 800402e:	401a      	ands	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6a1a      	ldr	r2, [r3, #32]
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	f003 031f 	and.w	r3, r3, #31
 800403e:	6879      	ldr	r1, [r7, #4]
 8004040:	fa01 f303 	lsl.w	r3, r1, r3
 8004044:	431a      	orrs	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	621a      	str	r2, [r3, #32]
}
 800404a:	bf00      	nop
 800404c:	371c      	adds	r7, #28
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
	...

08004058 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004068:	2b01      	cmp	r3, #1
 800406a:	d101      	bne.n	8004070 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800406c:	2302      	movs	r3, #2
 800406e:	e05a      	b.n	8004126 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2202      	movs	r2, #2
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004096:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	4313      	orrs	r3, r2
 80040a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a21      	ldr	r2, [pc, #132]	@ (8004134 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d022      	beq.n	80040fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040bc:	d01d      	beq.n	80040fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a1d      	ldr	r2, [pc, #116]	@ (8004138 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d018      	beq.n	80040fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a1b      	ldr	r2, [pc, #108]	@ (800413c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d013      	beq.n	80040fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a1a      	ldr	r2, [pc, #104]	@ (8004140 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d00e      	beq.n	80040fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a18      	ldr	r2, [pc, #96]	@ (8004144 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d009      	beq.n	80040fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a17      	ldr	r2, [pc, #92]	@ (8004148 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d004      	beq.n	80040fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a15      	ldr	r2, [pc, #84]	@ (800414c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d10c      	bne.n	8004114 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004100:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	68ba      	ldr	r2, [r7, #8]
 8004108:	4313      	orrs	r3, r2
 800410a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3714      	adds	r7, #20
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	40010000 	.word	0x40010000
 8004138:	40000400 	.word	0x40000400
 800413c:	40000800 	.word	0x40000800
 8004140:	40000c00 	.word	0x40000c00
 8004144:	40010400 	.word	0x40010400
 8004148:	40014000 	.word	0x40014000
 800414c:	40001800 	.word	0x40001800

08004150 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e042      	b.n	8004210 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d106      	bne.n	80041a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f7fd f930 	bl	8001404 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2224      	movs	r2, #36	@ 0x24
 80041a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68da      	ldr	r2, [r3, #12]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 fdf5 	bl	8004dac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	691a      	ldr	r2, [r3, #16]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80041d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	695a      	ldr	r2, [r3, #20]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80041e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80041f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2220      	movs	r2, #32
 80041fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2220      	movs	r2, #32
 8004204:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3708      	adds	r7, #8
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b08a      	sub	sp, #40	@ 0x28
 800421c:	af02      	add	r7, sp, #8
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	603b      	str	r3, [r7, #0]
 8004224:	4613      	mov	r3, r2
 8004226:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004228:	2300      	movs	r3, #0
 800422a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b20      	cmp	r3, #32
 8004236:	d175      	bne.n	8004324 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d002      	beq.n	8004244 <HAL_UART_Transmit+0x2c>
 800423e:	88fb      	ldrh	r3, [r7, #6]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e06e      	b.n	8004326 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2221      	movs	r2, #33	@ 0x21
 8004252:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004256:	f7fd faf5 	bl	8001844 <HAL_GetTick>
 800425a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	88fa      	ldrh	r2, [r7, #6]
 8004260:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	88fa      	ldrh	r2, [r7, #6]
 8004266:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004270:	d108      	bne.n	8004284 <HAL_UART_Transmit+0x6c>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d104      	bne.n	8004284 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800427a:	2300      	movs	r3, #0
 800427c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	61bb      	str	r3, [r7, #24]
 8004282:	e003      	b.n	800428c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004288:	2300      	movs	r3, #0
 800428a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800428c:	e02e      	b.n	80042ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	2200      	movs	r2, #0
 8004296:	2180      	movs	r1, #128	@ 0x80
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 fb91 	bl	80049c0 <UART_WaitOnFlagUntilTimeout>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d005      	beq.n	80042b0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e03a      	b.n	8004326 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10b      	bne.n	80042ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	881b      	ldrh	r3, [r3, #0]
 80042ba:	461a      	mov	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	3302      	adds	r3, #2
 80042ca:	61bb      	str	r3, [r7, #24]
 80042cc:	e007      	b.n	80042de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	781a      	ldrb	r2, [r3, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	3301      	adds	r3, #1
 80042dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	3b01      	subs	r3, #1
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1cb      	bne.n	800428e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2200      	movs	r2, #0
 80042fe:	2140      	movs	r1, #64	@ 0x40
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f000 fb5d 	bl	80049c0 <UART_WaitOnFlagUntilTimeout>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d005      	beq.n	8004318 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2220      	movs	r2, #32
 8004310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e006      	b.n	8004326 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2220      	movs	r2, #32
 800431c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004320:	2300      	movs	r3, #0
 8004322:	e000      	b.n	8004326 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004324:	2302      	movs	r3, #2
  }
}
 8004326:	4618      	mov	r0, r3
 8004328:	3720      	adds	r7, #32
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b08a      	sub	sp, #40	@ 0x28
 8004332:	af02      	add	r7, sp, #8
 8004334:	60f8      	str	r0, [r7, #12]
 8004336:	60b9      	str	r1, [r7, #8]
 8004338:	603b      	str	r3, [r7, #0]
 800433a:	4613      	mov	r3, r2
 800433c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800433e:	2300      	movs	r3, #0
 8004340:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b20      	cmp	r3, #32
 800434c:	f040 8081 	bne.w	8004452 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d002      	beq.n	800435c <HAL_UART_Receive+0x2e>
 8004356:	88fb      	ldrh	r3, [r7, #6]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d101      	bne.n	8004360 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e079      	b.n	8004454 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2222      	movs	r2, #34	@ 0x22
 800436a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004374:	f7fd fa66 	bl	8001844 <HAL_GetTick>
 8004378:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	88fa      	ldrh	r2, [r7, #6]
 800437e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	88fa      	ldrh	r2, [r7, #6]
 8004384:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800438e:	d108      	bne.n	80043a2 <HAL_UART_Receive+0x74>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d104      	bne.n	80043a2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004398:	2300      	movs	r3, #0
 800439a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	61bb      	str	r3, [r7, #24]
 80043a0:	e003      	b.n	80043aa <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043a6:	2300      	movs	r3, #0
 80043a8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80043aa:	e047      	b.n	800443c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	9300      	str	r3, [sp, #0]
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	2200      	movs	r2, #0
 80043b4:	2120      	movs	r1, #32
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 fb02 	bl	80049c0 <UART_WaitOnFlagUntilTimeout>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d005      	beq.n	80043ce <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2220      	movs	r2, #32
 80043c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e042      	b.n	8004454 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10c      	bne.n	80043ee <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	b29b      	uxth	r3, r3
 80043dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	3302      	adds	r3, #2
 80043ea:	61bb      	str	r3, [r7, #24]
 80043ec:	e01f      	b.n	800442e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043f6:	d007      	beq.n	8004408 <HAL_UART_Receive+0xda>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10a      	bne.n	8004416 <HAL_UART_Receive+0xe8>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d106      	bne.n	8004416 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	b2da      	uxtb	r2, r3
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	701a      	strb	r2, [r3, #0]
 8004414:	e008      	b.n	8004428 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	b2db      	uxtb	r3, r3
 800441e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004422:	b2da      	uxtb	r2, r3
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	3301      	adds	r3, #1
 800442c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004432:	b29b      	uxth	r3, r3
 8004434:	3b01      	subs	r3, #1
 8004436:	b29a      	uxth	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004440:	b29b      	uxth	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1b2      	bne.n	80043ac <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2220      	movs	r2, #32
 800444a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800444e:	2300      	movs	r3, #0
 8004450:	e000      	b.n	8004454 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004452:	2302      	movs	r3, #2
  }
}
 8004454:	4618      	mov	r0, r3
 8004456:	3720      	adds	r7, #32
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b0ba      	sub	sp, #232	@ 0xe8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004482:	2300      	movs	r3, #0
 8004484:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004488:	2300      	movs	r3, #0
 800448a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800448e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004492:	f003 030f 	and.w	r3, r3, #15
 8004496:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800449a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10f      	bne.n	80044c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044a6:	f003 0320 	and.w	r3, r3, #32
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d009      	beq.n	80044c2 <HAL_UART_IRQHandler+0x66>
 80044ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044b2:	f003 0320 	and.w	r3, r3, #32
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 fbb8 	bl	8004c30 <UART_Receive_IT>
      return;
 80044c0:	e25b      	b.n	800497a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80044c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f000 80de 	beq.w	8004688 <HAL_UART_IRQHandler+0x22c>
 80044cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d106      	bne.n	80044e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80044d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044dc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 80d1 	beq.w	8004688 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80044e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00b      	beq.n	800450a <HAL_UART_IRQHandler+0xae>
 80044f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d005      	beq.n	800450a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004502:	f043 0201 	orr.w	r2, r3, #1
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800450a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800450e:	f003 0304 	and.w	r3, r3, #4
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00b      	beq.n	800452e <HAL_UART_IRQHandler+0xd2>
 8004516:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	d005      	beq.n	800452e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004526:	f043 0202 	orr.w	r2, r3, #2
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800452e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00b      	beq.n	8004552 <HAL_UART_IRQHandler+0xf6>
 800453a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d005      	beq.n	8004552 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800454a:	f043 0204 	orr.w	r2, r3, #4
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004556:	f003 0308 	and.w	r3, r3, #8
 800455a:	2b00      	cmp	r3, #0
 800455c:	d011      	beq.n	8004582 <HAL_UART_IRQHandler+0x126>
 800455e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004562:	f003 0320 	and.w	r3, r3, #32
 8004566:	2b00      	cmp	r3, #0
 8004568:	d105      	bne.n	8004576 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800456a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d005      	beq.n	8004582 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800457a:	f043 0208 	orr.w	r2, r3, #8
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004586:	2b00      	cmp	r3, #0
 8004588:	f000 81f2 	beq.w	8004970 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800458c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004590:	f003 0320 	and.w	r3, r3, #32
 8004594:	2b00      	cmp	r3, #0
 8004596:	d008      	beq.n	80045aa <HAL_UART_IRQHandler+0x14e>
 8004598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800459c:	f003 0320 	and.w	r3, r3, #32
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d002      	beq.n	80045aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 fb43 	bl	8004c30 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b4:	2b40      	cmp	r3, #64	@ 0x40
 80045b6:	bf0c      	ite	eq
 80045b8:	2301      	moveq	r3, #1
 80045ba:	2300      	movne	r3, #0
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045c6:	f003 0308 	and.w	r3, r3, #8
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d103      	bne.n	80045d6 <HAL_UART_IRQHandler+0x17a>
 80045ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d04f      	beq.n	8004676 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 fa4b 	bl	8004a72 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045e6:	2b40      	cmp	r3, #64	@ 0x40
 80045e8:	d141      	bne.n	800466e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	3314      	adds	r3, #20
 80045f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80045f8:	e853 3f00 	ldrex	r3, [r3]
 80045fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004600:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004604:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004608:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	3314      	adds	r3, #20
 8004612:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004616:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800461a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004622:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004626:	e841 2300 	strex	r3, r2, [r1]
 800462a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800462e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1d9      	bne.n	80045ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800463a:	2b00      	cmp	r3, #0
 800463c:	d013      	beq.n	8004666 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004642:	4a7e      	ldr	r2, [pc, #504]	@ (800483c <HAL_UART_IRQHandler+0x3e0>)
 8004644:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800464a:	4618      	mov	r0, r3
 800464c:	f7fd fa7c 	bl	8001b48 <HAL_DMA_Abort_IT>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d016      	beq.n	8004684 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800465a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004660:	4610      	mov	r0, r2
 8004662:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004664:	e00e      	b.n	8004684 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f994 	bl	8004994 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800466c:	e00a      	b.n	8004684 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f990 	bl	8004994 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004674:	e006      	b.n	8004684 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f98c 	bl	8004994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004682:	e175      	b.n	8004970 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004684:	bf00      	nop
    return;
 8004686:	e173      	b.n	8004970 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800468c:	2b01      	cmp	r3, #1
 800468e:	f040 814f 	bne.w	8004930 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004696:	f003 0310 	and.w	r3, r3, #16
 800469a:	2b00      	cmp	r3, #0
 800469c:	f000 8148 	beq.w	8004930 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80046a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046a4:	f003 0310 	and.w	r3, r3, #16
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 8141 	beq.w	8004930 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046ae:	2300      	movs	r3, #0
 80046b0:	60bb      	str	r3, [r7, #8]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	60bb      	str	r3, [r7, #8]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	60bb      	str	r3, [r7, #8]
 80046c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ce:	2b40      	cmp	r3, #64	@ 0x40
 80046d0:	f040 80b6 	bne.w	8004840 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80046e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f000 8145 	beq.w	8004974 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80046ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80046f2:	429a      	cmp	r2, r3
 80046f4:	f080 813e 	bcs.w	8004974 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80046fe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800470a:	f000 8088 	beq.w	800481e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	330c      	adds	r3, #12
 8004714:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004718:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800471c:	e853 3f00 	ldrex	r3, [r3]
 8004720:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004724:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004728:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800472c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	330c      	adds	r3, #12
 8004736:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800473a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800473e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004742:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004746:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800474a:	e841 2300 	strex	r3, r2, [r1]
 800474e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004752:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1d9      	bne.n	800470e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	3314      	adds	r3, #20
 8004760:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004762:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004764:	e853 3f00 	ldrex	r3, [r3]
 8004768:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800476a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800476c:	f023 0301 	bic.w	r3, r3, #1
 8004770:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	3314      	adds	r3, #20
 800477a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800477e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004782:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004784:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004786:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800478a:	e841 2300 	strex	r3, r2, [r1]
 800478e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004790:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1e1      	bne.n	800475a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	3314      	adds	r3, #20
 800479c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047a0:	e853 3f00 	ldrex	r3, [r3]
 80047a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80047a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	3314      	adds	r3, #20
 80047b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80047ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80047bc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047be:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80047c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80047c2:	e841 2300 	strex	r3, r2, [r1]
 80047c6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80047c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1e3      	bne.n	8004796 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2220      	movs	r2, #32
 80047d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	330c      	adds	r3, #12
 80047e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047e6:	e853 3f00 	ldrex	r3, [r3]
 80047ea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80047ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047ee:	f023 0310 	bic.w	r3, r3, #16
 80047f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	330c      	adds	r3, #12
 80047fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004800:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004802:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004804:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004806:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004808:	e841 2300 	strex	r3, r2, [r1]
 800480c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800480e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1e3      	bne.n	80047dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004818:	4618      	mov	r0, r3
 800481a:	f7fd f925 	bl	8001a68 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2202      	movs	r2, #2
 8004822:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800482c:	b29b      	uxth	r3, r3
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	b29b      	uxth	r3, r3
 8004832:	4619      	mov	r1, r3
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 f8b7 	bl	80049a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800483a:	e09b      	b.n	8004974 <HAL_UART_IRQHandler+0x518>
 800483c:	08004b39 	.word	0x08004b39
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004848:	b29b      	uxth	r3, r3
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004854:	b29b      	uxth	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	f000 808e 	beq.w	8004978 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800485c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004860:	2b00      	cmp	r3, #0
 8004862:	f000 8089 	beq.w	8004978 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	330c      	adds	r3, #12
 800486c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004870:	e853 3f00 	ldrex	r3, [r3]
 8004874:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004878:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800487c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	330c      	adds	r3, #12
 8004886:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800488a:	647a      	str	r2, [r7, #68]	@ 0x44
 800488c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004890:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004892:	e841 2300 	strex	r3, r2, [r1]
 8004896:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004898:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1e3      	bne.n	8004866 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	3314      	adds	r3, #20
 80048a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a8:	e853 3f00 	ldrex	r3, [r3]
 80048ac:	623b      	str	r3, [r7, #32]
   return(result);
 80048ae:	6a3b      	ldr	r3, [r7, #32]
 80048b0:	f023 0301 	bic.w	r3, r3, #1
 80048b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	3314      	adds	r3, #20
 80048be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80048c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80048c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048ca:	e841 2300 	strex	r3, r2, [r1]
 80048ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80048d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1e3      	bne.n	800489e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2220      	movs	r2, #32
 80048da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	330c      	adds	r3, #12
 80048ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	e853 3f00 	ldrex	r3, [r3]
 80048f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f023 0310 	bic.w	r3, r3, #16
 80048fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	330c      	adds	r3, #12
 8004904:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004908:	61fa      	str	r2, [r7, #28]
 800490a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490c:	69b9      	ldr	r1, [r7, #24]
 800490e:	69fa      	ldr	r2, [r7, #28]
 8004910:	e841 2300 	strex	r3, r2, [r1]
 8004914:	617b      	str	r3, [r7, #20]
   return(result);
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1e3      	bne.n	80048e4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2202      	movs	r2, #2
 8004920:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004922:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004926:	4619      	mov	r1, r3
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 f83d 	bl	80049a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800492e:	e023      	b.n	8004978 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004934:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004938:	2b00      	cmp	r3, #0
 800493a:	d009      	beq.n	8004950 <HAL_UART_IRQHandler+0x4f4>
 800493c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004940:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004944:	2b00      	cmp	r3, #0
 8004946:	d003      	beq.n	8004950 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f909 	bl	8004b60 <UART_Transmit_IT>
    return;
 800494e:	e014      	b.n	800497a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00e      	beq.n	800497a <HAL_UART_IRQHandler+0x51e>
 800495c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004964:	2b00      	cmp	r3, #0
 8004966:	d008      	beq.n	800497a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 f949 	bl	8004c00 <UART_EndTransmit_IT>
    return;
 800496e:	e004      	b.n	800497a <HAL_UART_IRQHandler+0x51e>
    return;
 8004970:	bf00      	nop
 8004972:	e002      	b.n	800497a <HAL_UART_IRQHandler+0x51e>
      return;
 8004974:	bf00      	nop
 8004976:	e000      	b.n	800497a <HAL_UART_IRQHandler+0x51e>
      return;
 8004978:	bf00      	nop
  }
}
 800497a:	37e8      	adds	r7, #232	@ 0xe8
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	460b      	mov	r3, r1
 80049b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	603b      	str	r3, [r7, #0]
 80049cc:	4613      	mov	r3, r2
 80049ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049d0:	e03b      	b.n	8004a4a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049d2:	6a3b      	ldr	r3, [r7, #32]
 80049d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d8:	d037      	beq.n	8004a4a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049da:	f7fc ff33 	bl	8001844 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	6a3a      	ldr	r2, [r7, #32]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d302      	bcc.n	80049f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80049ea:	6a3b      	ldr	r3, [r7, #32]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d101      	bne.n	80049f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e03a      	b.n	8004a6a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	f003 0304 	and.w	r3, r3, #4
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d023      	beq.n	8004a4a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	2b80      	cmp	r3, #128	@ 0x80
 8004a06:	d020      	beq.n	8004a4a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	2b40      	cmp	r3, #64	@ 0x40
 8004a0c:	d01d      	beq.n	8004a4a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0308 	and.w	r3, r3, #8
 8004a18:	2b08      	cmp	r3, #8
 8004a1a:	d116      	bne.n	8004a4a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	617b      	str	r3, [r7, #20]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	617b      	str	r3, [r7, #20]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	617b      	str	r3, [r7, #20]
 8004a30:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f000 f81d 	bl	8004a72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2208      	movs	r2, #8
 8004a3c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e00f      	b.n	8004a6a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	4013      	ands	r3, r2
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	bf0c      	ite	eq
 8004a5a:	2301      	moveq	r3, #1
 8004a5c:	2300      	movne	r3, #0
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	461a      	mov	r2, r3
 8004a62:	79fb      	ldrb	r3, [r7, #7]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d0b4      	beq.n	80049d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3718      	adds	r7, #24
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b095      	sub	sp, #84	@ 0x54
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	330c      	adds	r3, #12
 8004a80:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a84:	e853 3f00 	ldrex	r3, [r3]
 8004a88:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	330c      	adds	r3, #12
 8004a98:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a9a:	643a      	str	r2, [r7, #64]	@ 0x40
 8004a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004aa0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004aa2:	e841 2300 	strex	r3, r2, [r1]
 8004aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1e5      	bne.n	8004a7a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	3314      	adds	r3, #20
 8004ab4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab6:	6a3b      	ldr	r3, [r7, #32]
 8004ab8:	e853 3f00 	ldrex	r3, [r3]
 8004abc:	61fb      	str	r3, [r7, #28]
   return(result);
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	f023 0301 	bic.w	r3, r3, #1
 8004ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	3314      	adds	r3, #20
 8004acc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ace:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ad4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ad6:	e841 2300 	strex	r3, r2, [r1]
 8004ada:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1e5      	bne.n	8004aae <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d119      	bne.n	8004b1e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	330c      	adds	r3, #12
 8004af0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	e853 3f00 	ldrex	r3, [r3]
 8004af8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	f023 0310 	bic.w	r3, r3, #16
 8004b00:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	330c      	adds	r3, #12
 8004b08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b0a:	61ba      	str	r2, [r7, #24]
 8004b0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0e:	6979      	ldr	r1, [r7, #20]
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	e841 2300 	strex	r3, r2, [r1]
 8004b16:	613b      	str	r3, [r7, #16]
   return(result);
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1e5      	bne.n	8004aea <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2220      	movs	r2, #32
 8004b22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004b2c:	bf00      	nop
 8004b2e:	3754      	adds	r7, #84	@ 0x54
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f7ff ff1e 	bl	8004994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b58:	bf00      	nop
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	2b21      	cmp	r3, #33	@ 0x21
 8004b72:	d13e      	bne.n	8004bf2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b7c:	d114      	bne.n	8004ba8 <UART_Transmit_IT+0x48>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d110      	bne.n	8004ba8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	881b      	ldrh	r3, [r3, #0]
 8004b90:	461a      	mov	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b9a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a1b      	ldr	r3, [r3, #32]
 8004ba0:	1c9a      	adds	r2, r3, #2
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	621a      	str	r2, [r3, #32]
 8004ba6:	e008      	b.n	8004bba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	1c59      	adds	r1, r3, #1
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	6211      	str	r1, [r2, #32]
 8004bb2:	781a      	ldrb	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10f      	bne.n	8004bee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68da      	ldr	r2, [r3, #12]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004bdc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68da      	ldr	r2, [r3, #12]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004bec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	e000      	b.n	8004bf4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004bf2:	2302      	movs	r3, #2
  }
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3714      	adds	r7, #20
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68da      	ldr	r2, [r3, #12]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c16:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f7ff fead 	bl	8004980 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3708      	adds	r7, #8
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b08c      	sub	sp, #48	@ 0x30
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b22      	cmp	r3, #34	@ 0x22
 8004c42:	f040 80ae 	bne.w	8004da2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c4e:	d117      	bne.n	8004c80 <UART_Receive_IT+0x50>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d113      	bne.n	8004c80 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c60:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c72:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c78:	1c9a      	adds	r2, r3, #2
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	629a      	str	r2, [r3, #40]	@ 0x28
 8004c7e:	e026      	b.n	8004cce <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004c86:	2300      	movs	r3, #0
 8004c88:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c92:	d007      	beq.n	8004ca4 <UART_Receive_IT+0x74>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10a      	bne.n	8004cb2 <UART_Receive_IT+0x82>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d106      	bne.n	8004cb2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	b2da      	uxtb	r2, r3
 8004cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cae:	701a      	strb	r2, [r3, #0]
 8004cb0:	e008      	b.n	8004cc4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cc2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc8:	1c5a      	adds	r2, r3, #1
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	4619      	mov	r1, r3
 8004cdc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d15d      	bne.n	8004d9e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68da      	ldr	r2, [r3, #12]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f022 0220 	bic.w	r2, r2, #32
 8004cf0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68da      	ldr	r2, [r3, #12]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d00:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	695a      	ldr	r2, [r3, #20]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 0201 	bic.w	r2, r2, #1
 8004d10:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2220      	movs	r2, #32
 8004d16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d135      	bne.n	8004d94 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	330c      	adds	r3, #12
 8004d34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	e853 3f00 	ldrex	r3, [r3]
 8004d3c:	613b      	str	r3, [r7, #16]
   return(result);
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	f023 0310 	bic.w	r3, r3, #16
 8004d44:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	330c      	adds	r3, #12
 8004d4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d4e:	623a      	str	r2, [r7, #32]
 8004d50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d52:	69f9      	ldr	r1, [r7, #28]
 8004d54:	6a3a      	ldr	r2, [r7, #32]
 8004d56:	e841 2300 	strex	r3, r2, [r1]
 8004d5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1e5      	bne.n	8004d2e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0310 	and.w	r3, r3, #16
 8004d6c:	2b10      	cmp	r3, #16
 8004d6e:	d10a      	bne.n	8004d86 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d70:	2300      	movs	r3, #0
 8004d72:	60fb      	str	r3, [r7, #12]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f7ff fe0b 	bl	80049a8 <HAL_UARTEx_RxEventCallback>
 8004d92:	e002      	b.n	8004d9a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f7fb ff0d 	bl	8000bb4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	e002      	b.n	8004da4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	e000      	b.n	8004da4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004da2:	2302      	movs	r3, #2
  }
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3730      	adds	r7, #48	@ 0x30
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004db0:	b0c0      	sub	sp, #256	@ 0x100
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc8:	68d9      	ldr	r1, [r3, #12]
 8004dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	ea40 0301 	orr.w	r3, r0, r1
 8004dd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	431a      	orrs	r2, r3
 8004de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	431a      	orrs	r2, r3
 8004dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004e04:	f021 010c 	bic.w	r1, r1, #12
 8004e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004e12:	430b      	orrs	r3, r1
 8004e14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e26:	6999      	ldr	r1, [r3, #24]
 8004e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	ea40 0301 	orr.w	r3, r0, r1
 8004e32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	4b8f      	ldr	r3, [pc, #572]	@ (8005078 <UART_SetConfig+0x2cc>)
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d005      	beq.n	8004e4c <UART_SetConfig+0xa0>
 8004e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	4b8d      	ldr	r3, [pc, #564]	@ (800507c <UART_SetConfig+0x2d0>)
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d104      	bne.n	8004e56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e4c:	f7fe f91e 	bl	800308c <HAL_RCC_GetPCLK2Freq>
 8004e50:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004e54:	e003      	b.n	8004e5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e56:	f7fe f905 	bl	8003064 <HAL_RCC_GetPCLK1Freq>
 8004e5a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e62:	69db      	ldr	r3, [r3, #28]
 8004e64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e68:	f040 810c 	bne.w	8005084 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e70:	2200      	movs	r2, #0
 8004e72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e76:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004e7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004e7e:	4622      	mov	r2, r4
 8004e80:	462b      	mov	r3, r5
 8004e82:	1891      	adds	r1, r2, r2
 8004e84:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004e86:	415b      	adcs	r3, r3
 8004e88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004e8e:	4621      	mov	r1, r4
 8004e90:	eb12 0801 	adds.w	r8, r2, r1
 8004e94:	4629      	mov	r1, r5
 8004e96:	eb43 0901 	adc.w	r9, r3, r1
 8004e9a:	f04f 0200 	mov.w	r2, #0
 8004e9e:	f04f 0300 	mov.w	r3, #0
 8004ea2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ea6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004eaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004eae:	4690      	mov	r8, r2
 8004eb0:	4699      	mov	r9, r3
 8004eb2:	4623      	mov	r3, r4
 8004eb4:	eb18 0303 	adds.w	r3, r8, r3
 8004eb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ebc:	462b      	mov	r3, r5
 8004ebe:	eb49 0303 	adc.w	r3, r9, r3
 8004ec2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004ed2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004ed6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004eda:	460b      	mov	r3, r1
 8004edc:	18db      	adds	r3, r3, r3
 8004ede:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	eb42 0303 	adc.w	r3, r2, r3
 8004ee6:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ee8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004eec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004ef0:	f7fb f97e 	bl	80001f0 <__aeabi_uldivmod>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	4b61      	ldr	r3, [pc, #388]	@ (8005080 <UART_SetConfig+0x2d4>)
 8004efa:	fba3 2302 	umull	r2, r3, r3, r2
 8004efe:	095b      	lsrs	r3, r3, #5
 8004f00:	011c      	lsls	r4, r3, #4
 8004f02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f06:	2200      	movs	r2, #0
 8004f08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f0c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004f10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004f14:	4642      	mov	r2, r8
 8004f16:	464b      	mov	r3, r9
 8004f18:	1891      	adds	r1, r2, r2
 8004f1a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004f1c:	415b      	adcs	r3, r3
 8004f1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f24:	4641      	mov	r1, r8
 8004f26:	eb12 0a01 	adds.w	sl, r2, r1
 8004f2a:	4649      	mov	r1, r9
 8004f2c:	eb43 0b01 	adc.w	fp, r3, r1
 8004f30:	f04f 0200 	mov.w	r2, #0
 8004f34:	f04f 0300 	mov.w	r3, #0
 8004f38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f44:	4692      	mov	sl, r2
 8004f46:	469b      	mov	fp, r3
 8004f48:	4643      	mov	r3, r8
 8004f4a:	eb1a 0303 	adds.w	r3, sl, r3
 8004f4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f52:	464b      	mov	r3, r9
 8004f54:	eb4b 0303 	adc.w	r3, fp, r3
 8004f58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f68:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004f6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f70:	460b      	mov	r3, r1
 8004f72:	18db      	adds	r3, r3, r3
 8004f74:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f76:	4613      	mov	r3, r2
 8004f78:	eb42 0303 	adc.w	r3, r2, r3
 8004f7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004f82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004f86:	f7fb f933 	bl	80001f0 <__aeabi_uldivmod>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	4611      	mov	r1, r2
 8004f90:	4b3b      	ldr	r3, [pc, #236]	@ (8005080 <UART_SetConfig+0x2d4>)
 8004f92:	fba3 2301 	umull	r2, r3, r3, r1
 8004f96:	095b      	lsrs	r3, r3, #5
 8004f98:	2264      	movs	r2, #100	@ 0x64
 8004f9a:	fb02 f303 	mul.w	r3, r2, r3
 8004f9e:	1acb      	subs	r3, r1, r3
 8004fa0:	00db      	lsls	r3, r3, #3
 8004fa2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004fa6:	4b36      	ldr	r3, [pc, #216]	@ (8005080 <UART_SetConfig+0x2d4>)
 8004fa8:	fba3 2302 	umull	r2, r3, r3, r2
 8004fac:	095b      	lsrs	r3, r3, #5
 8004fae:	005b      	lsls	r3, r3, #1
 8004fb0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004fb4:	441c      	add	r4, r3
 8004fb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004fc0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004fc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004fc8:	4642      	mov	r2, r8
 8004fca:	464b      	mov	r3, r9
 8004fcc:	1891      	adds	r1, r2, r2
 8004fce:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004fd0:	415b      	adcs	r3, r3
 8004fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004fd8:	4641      	mov	r1, r8
 8004fda:	1851      	adds	r1, r2, r1
 8004fdc:	6339      	str	r1, [r7, #48]	@ 0x30
 8004fde:	4649      	mov	r1, r9
 8004fe0:	414b      	adcs	r3, r1
 8004fe2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fe4:	f04f 0200 	mov.w	r2, #0
 8004fe8:	f04f 0300 	mov.w	r3, #0
 8004fec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004ff0:	4659      	mov	r1, fp
 8004ff2:	00cb      	lsls	r3, r1, #3
 8004ff4:	4651      	mov	r1, sl
 8004ff6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ffa:	4651      	mov	r1, sl
 8004ffc:	00ca      	lsls	r2, r1, #3
 8004ffe:	4610      	mov	r0, r2
 8005000:	4619      	mov	r1, r3
 8005002:	4603      	mov	r3, r0
 8005004:	4642      	mov	r2, r8
 8005006:	189b      	adds	r3, r3, r2
 8005008:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800500c:	464b      	mov	r3, r9
 800500e:	460a      	mov	r2, r1
 8005010:	eb42 0303 	adc.w	r3, r2, r3
 8005014:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005024:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005028:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800502c:	460b      	mov	r3, r1
 800502e:	18db      	adds	r3, r3, r3
 8005030:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005032:	4613      	mov	r3, r2
 8005034:	eb42 0303 	adc.w	r3, r2, r3
 8005038:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800503a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800503e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005042:	f7fb f8d5 	bl	80001f0 <__aeabi_uldivmod>
 8005046:	4602      	mov	r2, r0
 8005048:	460b      	mov	r3, r1
 800504a:	4b0d      	ldr	r3, [pc, #52]	@ (8005080 <UART_SetConfig+0x2d4>)
 800504c:	fba3 1302 	umull	r1, r3, r3, r2
 8005050:	095b      	lsrs	r3, r3, #5
 8005052:	2164      	movs	r1, #100	@ 0x64
 8005054:	fb01 f303 	mul.w	r3, r1, r3
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	00db      	lsls	r3, r3, #3
 800505c:	3332      	adds	r3, #50	@ 0x32
 800505e:	4a08      	ldr	r2, [pc, #32]	@ (8005080 <UART_SetConfig+0x2d4>)
 8005060:	fba2 2303 	umull	r2, r3, r2, r3
 8005064:	095b      	lsrs	r3, r3, #5
 8005066:	f003 0207 	and.w	r2, r3, #7
 800506a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4422      	add	r2, r4
 8005072:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005074:	e106      	b.n	8005284 <UART_SetConfig+0x4d8>
 8005076:	bf00      	nop
 8005078:	40011000 	.word	0x40011000
 800507c:	40011400 	.word	0x40011400
 8005080:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005084:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005088:	2200      	movs	r2, #0
 800508a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800508e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005092:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005096:	4642      	mov	r2, r8
 8005098:	464b      	mov	r3, r9
 800509a:	1891      	adds	r1, r2, r2
 800509c:	6239      	str	r1, [r7, #32]
 800509e:	415b      	adcs	r3, r3
 80050a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80050a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050a6:	4641      	mov	r1, r8
 80050a8:	1854      	adds	r4, r2, r1
 80050aa:	4649      	mov	r1, r9
 80050ac:	eb43 0501 	adc.w	r5, r3, r1
 80050b0:	f04f 0200 	mov.w	r2, #0
 80050b4:	f04f 0300 	mov.w	r3, #0
 80050b8:	00eb      	lsls	r3, r5, #3
 80050ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050be:	00e2      	lsls	r2, r4, #3
 80050c0:	4614      	mov	r4, r2
 80050c2:	461d      	mov	r5, r3
 80050c4:	4643      	mov	r3, r8
 80050c6:	18e3      	adds	r3, r4, r3
 80050c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80050cc:	464b      	mov	r3, r9
 80050ce:	eb45 0303 	adc.w	r3, r5, r3
 80050d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80050d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80050e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80050e6:	f04f 0200 	mov.w	r2, #0
 80050ea:	f04f 0300 	mov.w	r3, #0
 80050ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80050f2:	4629      	mov	r1, r5
 80050f4:	008b      	lsls	r3, r1, #2
 80050f6:	4621      	mov	r1, r4
 80050f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050fc:	4621      	mov	r1, r4
 80050fe:	008a      	lsls	r2, r1, #2
 8005100:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005104:	f7fb f874 	bl	80001f0 <__aeabi_uldivmod>
 8005108:	4602      	mov	r2, r0
 800510a:	460b      	mov	r3, r1
 800510c:	4b60      	ldr	r3, [pc, #384]	@ (8005290 <UART_SetConfig+0x4e4>)
 800510e:	fba3 2302 	umull	r2, r3, r3, r2
 8005112:	095b      	lsrs	r3, r3, #5
 8005114:	011c      	lsls	r4, r3, #4
 8005116:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800511a:	2200      	movs	r2, #0
 800511c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005120:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005124:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005128:	4642      	mov	r2, r8
 800512a:	464b      	mov	r3, r9
 800512c:	1891      	adds	r1, r2, r2
 800512e:	61b9      	str	r1, [r7, #24]
 8005130:	415b      	adcs	r3, r3
 8005132:	61fb      	str	r3, [r7, #28]
 8005134:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005138:	4641      	mov	r1, r8
 800513a:	1851      	adds	r1, r2, r1
 800513c:	6139      	str	r1, [r7, #16]
 800513e:	4649      	mov	r1, r9
 8005140:	414b      	adcs	r3, r1
 8005142:	617b      	str	r3, [r7, #20]
 8005144:	f04f 0200 	mov.w	r2, #0
 8005148:	f04f 0300 	mov.w	r3, #0
 800514c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005150:	4659      	mov	r1, fp
 8005152:	00cb      	lsls	r3, r1, #3
 8005154:	4651      	mov	r1, sl
 8005156:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800515a:	4651      	mov	r1, sl
 800515c:	00ca      	lsls	r2, r1, #3
 800515e:	4610      	mov	r0, r2
 8005160:	4619      	mov	r1, r3
 8005162:	4603      	mov	r3, r0
 8005164:	4642      	mov	r2, r8
 8005166:	189b      	adds	r3, r3, r2
 8005168:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800516c:	464b      	mov	r3, r9
 800516e:	460a      	mov	r2, r1
 8005170:	eb42 0303 	adc.w	r3, r2, r3
 8005174:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005182:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005184:	f04f 0200 	mov.w	r2, #0
 8005188:	f04f 0300 	mov.w	r3, #0
 800518c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005190:	4649      	mov	r1, r9
 8005192:	008b      	lsls	r3, r1, #2
 8005194:	4641      	mov	r1, r8
 8005196:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800519a:	4641      	mov	r1, r8
 800519c:	008a      	lsls	r2, r1, #2
 800519e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80051a2:	f7fb f825 	bl	80001f0 <__aeabi_uldivmod>
 80051a6:	4602      	mov	r2, r0
 80051a8:	460b      	mov	r3, r1
 80051aa:	4611      	mov	r1, r2
 80051ac:	4b38      	ldr	r3, [pc, #224]	@ (8005290 <UART_SetConfig+0x4e4>)
 80051ae:	fba3 2301 	umull	r2, r3, r3, r1
 80051b2:	095b      	lsrs	r3, r3, #5
 80051b4:	2264      	movs	r2, #100	@ 0x64
 80051b6:	fb02 f303 	mul.w	r3, r2, r3
 80051ba:	1acb      	subs	r3, r1, r3
 80051bc:	011b      	lsls	r3, r3, #4
 80051be:	3332      	adds	r3, #50	@ 0x32
 80051c0:	4a33      	ldr	r2, [pc, #204]	@ (8005290 <UART_SetConfig+0x4e4>)
 80051c2:	fba2 2303 	umull	r2, r3, r2, r3
 80051c6:	095b      	lsrs	r3, r3, #5
 80051c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051cc:	441c      	add	r4, r3
 80051ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051d2:	2200      	movs	r2, #0
 80051d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80051d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80051d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80051dc:	4642      	mov	r2, r8
 80051de:	464b      	mov	r3, r9
 80051e0:	1891      	adds	r1, r2, r2
 80051e2:	60b9      	str	r1, [r7, #8]
 80051e4:	415b      	adcs	r3, r3
 80051e6:	60fb      	str	r3, [r7, #12]
 80051e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051ec:	4641      	mov	r1, r8
 80051ee:	1851      	adds	r1, r2, r1
 80051f0:	6039      	str	r1, [r7, #0]
 80051f2:	4649      	mov	r1, r9
 80051f4:	414b      	adcs	r3, r1
 80051f6:	607b      	str	r3, [r7, #4]
 80051f8:	f04f 0200 	mov.w	r2, #0
 80051fc:	f04f 0300 	mov.w	r3, #0
 8005200:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005204:	4659      	mov	r1, fp
 8005206:	00cb      	lsls	r3, r1, #3
 8005208:	4651      	mov	r1, sl
 800520a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800520e:	4651      	mov	r1, sl
 8005210:	00ca      	lsls	r2, r1, #3
 8005212:	4610      	mov	r0, r2
 8005214:	4619      	mov	r1, r3
 8005216:	4603      	mov	r3, r0
 8005218:	4642      	mov	r2, r8
 800521a:	189b      	adds	r3, r3, r2
 800521c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800521e:	464b      	mov	r3, r9
 8005220:	460a      	mov	r2, r1
 8005222:	eb42 0303 	adc.w	r3, r2, r3
 8005226:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	663b      	str	r3, [r7, #96]	@ 0x60
 8005232:	667a      	str	r2, [r7, #100]	@ 0x64
 8005234:	f04f 0200 	mov.w	r2, #0
 8005238:	f04f 0300 	mov.w	r3, #0
 800523c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005240:	4649      	mov	r1, r9
 8005242:	008b      	lsls	r3, r1, #2
 8005244:	4641      	mov	r1, r8
 8005246:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800524a:	4641      	mov	r1, r8
 800524c:	008a      	lsls	r2, r1, #2
 800524e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005252:	f7fa ffcd 	bl	80001f0 <__aeabi_uldivmod>
 8005256:	4602      	mov	r2, r0
 8005258:	460b      	mov	r3, r1
 800525a:	4b0d      	ldr	r3, [pc, #52]	@ (8005290 <UART_SetConfig+0x4e4>)
 800525c:	fba3 1302 	umull	r1, r3, r3, r2
 8005260:	095b      	lsrs	r3, r3, #5
 8005262:	2164      	movs	r1, #100	@ 0x64
 8005264:	fb01 f303 	mul.w	r3, r1, r3
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	011b      	lsls	r3, r3, #4
 800526c:	3332      	adds	r3, #50	@ 0x32
 800526e:	4a08      	ldr	r2, [pc, #32]	@ (8005290 <UART_SetConfig+0x4e4>)
 8005270:	fba2 2303 	umull	r2, r3, r2, r3
 8005274:	095b      	lsrs	r3, r3, #5
 8005276:	f003 020f 	and.w	r2, r3, #15
 800527a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4422      	add	r2, r4
 8005282:	609a      	str	r2, [r3, #8]
}
 8005284:	bf00      	nop
 8005286:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800528a:	46bd      	mov	sp, r7
 800528c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005290:	51eb851f 	.word	0x51eb851f

08005294 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005294:	b084      	sub	sp, #16
 8005296:	b580      	push	{r7, lr}
 8005298:	b084      	sub	sp, #16
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
 800529e:	f107 001c 	add.w	r0, r7, #28
 80052a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052a6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d123      	bne.n	80052f6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052b2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80052c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80052d6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d105      	bne.n	80052ea <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 faa0 	bl	8005830 <USB_CoreReset>
 80052f0:	4603      	mov	r3, r0
 80052f2:	73fb      	strb	r3, [r7, #15]
 80052f4:	e01b      	b.n	800532e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 fa94 	bl	8005830 <USB_CoreReset>
 8005308:	4603      	mov	r3, r0
 800530a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800530c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005310:	2b00      	cmp	r3, #0
 8005312:	d106      	bne.n	8005322 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005318:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005320:	e005      	b.n	800532e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005326:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800532e:	7fbb      	ldrb	r3, [r7, #30]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d10b      	bne.n	800534c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f043 0206 	orr.w	r2, r3, #6
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f043 0220 	orr.w	r2, r3, #32
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800534c:	7bfb      	ldrb	r3, [r7, #15]
}
 800534e:	4618      	mov	r0, r3
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005358:	b004      	add	sp, #16
 800535a:	4770      	bx	lr

0800535c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f023 0201 	bic.w	r2, r3, #1
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr

0800537e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b084      	sub	sp, #16
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
 8005386:	460b      	mov	r3, r1
 8005388:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800538a:	2300      	movs	r3, #0
 800538c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800539a:	78fb      	ldrb	r3, [r7, #3]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d115      	bne.n	80053cc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80053ac:	200a      	movs	r0, #10
 80053ae:	f7fc fa55 	bl	800185c <HAL_Delay>
      ms += 10U;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	330a      	adds	r3, #10
 80053b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 fa2b 	bl	8005814 <USB_GetMode>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d01e      	beq.n	8005402 <USB_SetCurrentMode+0x84>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2bc7      	cmp	r3, #199	@ 0xc7
 80053c8:	d9f0      	bls.n	80053ac <USB_SetCurrentMode+0x2e>
 80053ca:	e01a      	b.n	8005402 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80053cc:	78fb      	ldrb	r3, [r7, #3]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d115      	bne.n	80053fe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80053de:	200a      	movs	r0, #10
 80053e0:	f7fc fa3c 	bl	800185c <HAL_Delay>
      ms += 10U;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	330a      	adds	r3, #10
 80053e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 fa12 	bl	8005814 <USB_GetMode>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d005      	beq.n	8005402 <USB_SetCurrentMode+0x84>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2bc7      	cmp	r3, #199	@ 0xc7
 80053fa:	d9f0      	bls.n	80053de <USB_SetCurrentMode+0x60>
 80053fc:	e001      	b.n	8005402 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e005      	b.n	800540e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2bc8      	cmp	r3, #200	@ 0xc8
 8005406:	d101      	bne.n	800540c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e000      	b.n	800540e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
	...

08005418 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005418:	b084      	sub	sp, #16
 800541a:	b580      	push	{r7, lr}
 800541c:	b086      	sub	sp, #24
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
 8005422:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005426:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800542a:	2300      	movs	r3, #0
 800542c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005432:	2300      	movs	r3, #0
 8005434:	613b      	str	r3, [r7, #16]
 8005436:	e009      	b.n	800544c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	3340      	adds	r3, #64	@ 0x40
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	4413      	add	r3, r2
 8005442:	2200      	movs	r2, #0
 8005444:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	3301      	adds	r3, #1
 800544a:	613b      	str	r3, [r7, #16]
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	2b0e      	cmp	r3, #14
 8005450:	d9f2      	bls.n	8005438 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005452:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005456:	2b00      	cmp	r3, #0
 8005458:	d11c      	bne.n	8005494 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005468:	f043 0302 	orr.w	r3, r3, #2
 800546c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005472:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800547e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800548a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	639a      	str	r2, [r3, #56]	@ 0x38
 8005492:	e00b      	b.n	80054ac <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005498:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80054b2:	461a      	mov	r2, r3
 80054b4:	2300      	movs	r3, #0
 80054b6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054b8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d10d      	bne.n	80054dc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80054c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d104      	bne.n	80054d2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80054c8:	2100      	movs	r1, #0
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f968 	bl	80057a0 <USB_SetDevSpeed>
 80054d0:	e008      	b.n	80054e4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80054d2:	2101      	movs	r1, #1
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 f963 	bl	80057a0 <USB_SetDevSpeed>
 80054da:	e003      	b.n	80054e4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80054dc:	2103      	movs	r1, #3
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f95e 	bl	80057a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80054e4:	2110      	movs	r1, #16
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 f8fa 	bl	80056e0 <USB_FlushTxFifo>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f924 	bl	8005744 <USB_FlushRxFifo>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800550c:	461a      	mov	r2, r3
 800550e:	2300      	movs	r3, #0
 8005510:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005518:	461a      	mov	r2, r3
 800551a:	2300      	movs	r3, #0
 800551c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005524:	461a      	mov	r2, r3
 8005526:	2300      	movs	r3, #0
 8005528:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800552a:	2300      	movs	r3, #0
 800552c:	613b      	str	r3, [r7, #16]
 800552e:	e043      	b.n	80055b8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4413      	add	r3, r2
 8005538:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005542:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005546:	d118      	bne.n	800557a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10a      	bne.n	8005564 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	015a      	lsls	r2, r3, #5
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	4413      	add	r3, r2
 8005556:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800555a:	461a      	mov	r2, r3
 800555c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005560:	6013      	str	r3, [r2, #0]
 8005562:	e013      	b.n	800558c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4413      	add	r3, r2
 800556c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005570:	461a      	mov	r2, r3
 8005572:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005576:	6013      	str	r3, [r2, #0]
 8005578:	e008      	b.n	800558c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	015a      	lsls	r2, r3, #5
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	4413      	add	r3, r2
 8005582:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005586:	461a      	mov	r2, r3
 8005588:	2300      	movs	r3, #0
 800558a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4413      	add	r3, r2
 8005594:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005598:	461a      	mov	r2, r3
 800559a:	2300      	movs	r3, #0
 800559c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	015a      	lsls	r2, r3, #5
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	4413      	add	r3, r2
 80055a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055aa:	461a      	mov	r2, r3
 80055ac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80055b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	3301      	adds	r3, #1
 80055b6:	613b      	str	r3, [r7, #16]
 80055b8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80055bc:	461a      	mov	r2, r3
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d3b5      	bcc.n	8005530 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055c4:	2300      	movs	r3, #0
 80055c6:	613b      	str	r3, [r7, #16]
 80055c8:	e043      	b.n	8005652 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	015a      	lsls	r2, r3, #5
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	4413      	add	r3, r2
 80055d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055e0:	d118      	bne.n	8005614 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10a      	bne.n	80055fe <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	015a      	lsls	r2, r3, #5
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	4413      	add	r3, r2
 80055f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055f4:	461a      	mov	r2, r3
 80055f6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80055fa:	6013      	str	r3, [r2, #0]
 80055fc:	e013      	b.n	8005626 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	015a      	lsls	r2, r3, #5
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	4413      	add	r3, r2
 8005606:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800560a:	461a      	mov	r2, r3
 800560c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005610:	6013      	str	r3, [r2, #0]
 8005612:	e008      	b.n	8005626 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4413      	add	r3, r2
 800561c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005620:	461a      	mov	r2, r3
 8005622:	2300      	movs	r3, #0
 8005624:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	015a      	lsls	r2, r3, #5
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	4413      	add	r3, r2
 800562e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005632:	461a      	mov	r2, r3
 8005634:	2300      	movs	r3, #0
 8005636:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	4413      	add	r3, r2
 8005640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005644:	461a      	mov	r2, r3
 8005646:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800564a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	3301      	adds	r3, #1
 8005650:	613b      	str	r3, [r7, #16]
 8005652:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005656:	461a      	mov	r2, r3
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	4293      	cmp	r3, r2
 800565c:	d3b5      	bcc.n	80055ca <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800566c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005670:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800567e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005680:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005684:	2b00      	cmp	r3, #0
 8005686:	d105      	bne.n	8005694 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	699b      	ldr	r3, [r3, #24]
 800568c:	f043 0210 	orr.w	r2, r3, #16
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	699a      	ldr	r2, [r3, #24]
 8005698:	4b10      	ldr	r3, [pc, #64]	@ (80056dc <USB_DevInit+0x2c4>)
 800569a:	4313      	orrs	r3, r2
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80056a0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d005      	beq.n	80056b4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	f043 0208 	orr.w	r2, r3, #8
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80056b4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d107      	bne.n	80056cc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80056c4:	f043 0304 	orr.w	r3, r3, #4
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80056cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3718      	adds	r7, #24
 80056d2:	46bd      	mov	sp, r7
 80056d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056d8:	b004      	add	sp, #16
 80056da:	4770      	bx	lr
 80056dc:	803c3800 	.word	0x803c3800

080056e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80056ea:	2300      	movs	r3, #0
 80056ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	3301      	adds	r3, #1
 80056f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80056fa:	d901      	bls.n	8005700 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e01b      	b.n	8005738 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	2b00      	cmp	r3, #0
 8005706:	daf2      	bge.n	80056ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005708:	2300      	movs	r3, #0
 800570a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	019b      	lsls	r3, r3, #6
 8005710:	f043 0220 	orr.w	r2, r3, #32
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	3301      	adds	r3, #1
 800571c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005724:	d901      	bls.n	800572a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e006      	b.n	8005738 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	f003 0320 	and.w	r3, r3, #32
 8005732:	2b20      	cmp	r3, #32
 8005734:	d0f0      	beq.n	8005718 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800574c:	2300      	movs	r3, #0
 800574e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	3301      	adds	r3, #1
 8005754:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800575c:	d901      	bls.n	8005762 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e018      	b.n	8005794 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	2b00      	cmp	r3, #0
 8005768:	daf2      	bge.n	8005750 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800576a:	2300      	movs	r3, #0
 800576c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2210      	movs	r2, #16
 8005772:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	3301      	adds	r3, #1
 8005778:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005780:	d901      	bls.n	8005786 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e006      	b.n	8005794 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	f003 0310 	and.w	r3, r3, #16
 800578e:	2b10      	cmp	r3, #16
 8005790:	d0f0      	beq.n	8005774 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	460b      	mov	r3, r1
 80057aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	78fb      	ldrb	r3, [r7, #3]
 80057ba:	68f9      	ldr	r1, [r7, #12]
 80057bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80057c0:	4313      	orrs	r3, r2
 80057c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3714      	adds	r7, #20
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b085      	sub	sp, #20
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80057ec:	f023 0303 	bic.w	r3, r3, #3
 80057f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005800:	f043 0302 	orr.w	r3, r3, #2
 8005804:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3714      	adds	r7, #20
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	695b      	ldr	r3, [r3, #20]
 8005820:	f003 0301 	and.w	r3, r3, #1
}
 8005824:	4618      	mov	r0, r3
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005838:	2300      	movs	r3, #0
 800583a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	3301      	adds	r3, #1
 8005840:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005848:	d901      	bls.n	800584e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e01b      	b.n	8005886 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	2b00      	cmp	r3, #0
 8005854:	daf2      	bge.n	800583c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005856:	2300      	movs	r3, #0
 8005858:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	f043 0201 	orr.w	r2, r3, #1
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	3301      	adds	r3, #1
 800586a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005872:	d901      	bls.n	8005878 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e006      	b.n	8005886 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	2b01      	cmp	r3, #1
 8005882:	d0f0      	beq.n	8005866 <USB_CoreReset+0x36>

  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3714      	adds	r7, #20
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr

08005892 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005892:	b480      	push	{r7}
 8005894:	b085      	sub	sp, #20
 8005896:	af00      	add	r7, sp, #0
 8005898:	4603      	mov	r3, r0
 800589a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800589c:	2300      	movs	r3, #0
 800589e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80058a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058a4:	2b84      	cmp	r3, #132	@ 0x84
 80058a6:	d005      	beq.n	80058b4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80058a8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	4413      	add	r3, r2
 80058b0:	3303      	adds	r3, #3
 80058b2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80058b4:	68fb      	ldr	r3, [r7, #12]
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3714      	adds	r7, #20
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr

080058c2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80058c2:	b480      	push	{r7}
 80058c4:	b083      	sub	sp, #12
 80058c6:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058c8:	f3ef 8305 	mrs	r3, IPSR
 80058cc:	607b      	str	r3, [r7, #4]
  return(result);
 80058ce:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	bf14      	ite	ne
 80058d4:	2301      	movne	r3, #1
 80058d6:	2300      	moveq	r3, #0
 80058d8:	b2db      	uxtb	r3, r3
}
 80058da:	4618      	mov	r0, r3
 80058dc:	370c      	adds	r7, #12
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80058ea:	f001 f941 	bl	8006b70 <vTaskStartScheduler>
  
  return osOK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80058f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058f6:	b089      	sub	sp, #36	@ 0x24
 80058f8:	af04      	add	r7, sp, #16
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d020      	beq.n	8005948 <osThreadCreate+0x54>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d01c      	beq.n	8005948 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685c      	ldr	r4, [r3, #4]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	691e      	ldr	r6, [r3, #16]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005920:	4618      	mov	r0, r3
 8005922:	f7ff ffb6 	bl	8005892 <makeFreeRtosPriority>
 8005926:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	695b      	ldr	r3, [r3, #20]
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005930:	9202      	str	r2, [sp, #8]
 8005932:	9301      	str	r3, [sp, #4]
 8005934:	9100      	str	r1, [sp, #0]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	4632      	mov	r2, r6
 800593a:	4629      	mov	r1, r5
 800593c:	4620      	mov	r0, r4
 800593e:	f000 ff31 	bl	80067a4 <xTaskCreateStatic>
 8005942:	4603      	mov	r3, r0
 8005944:	60fb      	str	r3, [r7, #12]
 8005946:	e01c      	b.n	8005982 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685c      	ldr	r4, [r3, #4]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005954:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800595c:	4618      	mov	r0, r3
 800595e:	f7ff ff98 	bl	8005892 <makeFreeRtosPriority>
 8005962:	4602      	mov	r2, r0
 8005964:	f107 030c 	add.w	r3, r7, #12
 8005968:	9301      	str	r3, [sp, #4]
 800596a:	9200      	str	r2, [sp, #0]
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	4632      	mov	r2, r6
 8005970:	4629      	mov	r1, r5
 8005972:	4620      	mov	r0, r4
 8005974:	f000 ff76 	bl	8006864 <xTaskCreate>
 8005978:	4603      	mov	r3, r0
 800597a:	2b01      	cmp	r3, #1
 800597c:	d001      	beq.n	8005982 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800597e:	2300      	movs	r3, #0
 8005980:	e000      	b.n	8005984 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005982:	68fb      	ldr	r3, [r7, #12]
}
 8005984:	4618      	mov	r0, r3
 8005986:	3714      	adds	r7, #20
 8005988:	46bd      	mov	sp, r7
 800598a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800598c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d001      	beq.n	80059a2 <osDelay+0x16>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	e000      	b.n	80059a4 <osDelay+0x18>
 80059a2:	2301      	movs	r3, #1
 80059a4:	4618      	mov	r0, r3
 80059a6:	f001 f8ad 	bl	8006b04 <vTaskDelay>
  
  return osOK;
 80059aa:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af02      	add	r7, sp, #8
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00f      	beq.n	80059e6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d10a      	bne.n	80059e2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	2203      	movs	r2, #3
 80059d2:	9200      	str	r2, [sp, #0]
 80059d4:	2200      	movs	r2, #0
 80059d6:	2100      	movs	r1, #0
 80059d8:	2001      	movs	r0, #1
 80059da:	f000 f9bf 	bl	8005d5c <xQueueGenericCreateStatic>
 80059de:	4603      	mov	r3, r0
 80059e0:	e016      	b.n	8005a10 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80059e2:	2300      	movs	r3, #0
 80059e4:	e014      	b.n	8005a10 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d110      	bne.n	8005a0e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80059ec:	2203      	movs	r2, #3
 80059ee:	2100      	movs	r1, #0
 80059f0:	2001      	movs	r0, #1
 80059f2:	f000 fa30 	bl	8005e56 <xQueueGenericCreate>
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d005      	beq.n	8005a0a <osSemaphoreCreate+0x56>
 80059fe:	2300      	movs	r3, #0
 8005a00:	2200      	movs	r2, #0
 8005a02:	2100      	movs	r1, #0
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f000 fa81 	bl	8005f0c <xQueueGenericSend>
      return sema;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	e000      	b.n	8005a10 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005a0e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3710      	adds	r7, #16
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005a22:	2300      	movs	r3, #0
 8005a24:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d101      	bne.n	8005a30 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005a2c:	2380      	movs	r3, #128	@ 0x80
 8005a2e:	e03a      	b.n	8005aa6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005a30:	2300      	movs	r3, #0
 8005a32:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a3a:	d103      	bne.n	8005a44 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a40:	60fb      	str	r3, [r7, #12]
 8005a42:	e009      	b.n	8005a58 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d006      	beq.n	8005a58 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <osSemaphoreWait+0x40>
      ticks = 1;
 8005a54:	2301      	movs	r3, #1
 8005a56:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005a58:	f7ff ff33 	bl	80058c2 <inHandlerMode>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d017      	beq.n	8005a92 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005a62:	f107 0308 	add.w	r3, r7, #8
 8005a66:	461a      	mov	r2, r3
 8005a68:	2100      	movs	r1, #0
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 fcf0 	bl	8006450 <xQueueReceiveFromISR>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d001      	beq.n	8005a7a <osSemaphoreWait+0x62>
      return osErrorOS;
 8005a76:	23ff      	movs	r3, #255	@ 0xff
 8005a78:	e015      	b.n	8005aa6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d011      	beq.n	8005aa4 <osSemaphoreWait+0x8c>
 8005a80:	4b0b      	ldr	r3, [pc, #44]	@ (8005ab0 <osSemaphoreWait+0x98>)
 8005a82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a86:	601a      	str	r2, [r3, #0]
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	f3bf 8f6f 	isb	sy
 8005a90:	e008      	b.n	8005aa4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005a92:	68f9      	ldr	r1, [r7, #12]
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 fbcb 	bl	8006230 <xQueueSemaphoreTake>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d001      	beq.n	8005aa4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005aa0:	23ff      	movs	r3, #255	@ 0xff
 8005aa2:	e000      	b.n	8005aa6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	e000ed04 	.word	0xe000ed04

08005ab4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005abc:	2300      	movs	r3, #0
 8005abe:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005ac4:	f7ff fefd 	bl	80058c2 <inHandlerMode>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d016      	beq.n	8005afc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005ace:	f107 0308 	add.w	r3, r7, #8
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 fb1b 	bl	8006110 <xQueueGiveFromISR>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d001      	beq.n	8005ae4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005ae0:	23ff      	movs	r3, #255	@ 0xff
 8005ae2:	e017      	b.n	8005b14 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d013      	beq.n	8005b12 <osSemaphoreRelease+0x5e>
 8005aea:	4b0c      	ldr	r3, [pc, #48]	@ (8005b1c <osSemaphoreRelease+0x68>)
 8005aec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	f3bf 8f4f 	dsb	sy
 8005af6:	f3bf 8f6f 	isb	sy
 8005afa:	e00a      	b.n	8005b12 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005afc:	2300      	movs	r3, #0
 8005afe:	2200      	movs	r2, #0
 8005b00:	2100      	movs	r1, #0
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 fa02 	bl	8005f0c <xQueueGenericSend>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d001      	beq.n	8005b12 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8005b0e:	23ff      	movs	r3, #255	@ 0xff
 8005b10:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8005b12:	68fb      	ldr	r3, [r7, #12]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3710      	adds	r7, #16
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	e000ed04 	.word	0xe000ed04

08005b20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f103 0208 	add.w	r2, r3, #8
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f04f 32ff 	mov.w	r2, #4294967295
 8005b38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f103 0208 	add.w	r2, r3, #8
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f103 0208 	add.w	r2, r3, #8
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005b6e:	bf00      	nop
 8005b70:	370c      	adds	r7, #12
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b085      	sub	sp, #20
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
 8005b82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	689a      	ldr	r2, [r3, #8]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	683a      	ldr	r2, [r7, #0]
 8005b9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	1c5a      	adds	r2, r3, #1
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	601a      	str	r2, [r3, #0]
}
 8005bb6:	bf00      	nop
 8005bb8:	3714      	adds	r7, #20
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr

08005bc2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	b085      	sub	sp, #20
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
 8005bca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd8:	d103      	bne.n	8005be2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	60fb      	str	r3, [r7, #12]
 8005be0:	e00c      	b.n	8005bfc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	3308      	adds	r3, #8
 8005be6:	60fb      	str	r3, [r7, #12]
 8005be8:	e002      	b.n	8005bf0 <vListInsert+0x2e>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	60fb      	str	r3, [r7, #12]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d2f6      	bcs.n	8005bea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	683a      	ldr	r2, [r7, #0]
 8005c0a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	1c5a      	adds	r2, r3, #1
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	601a      	str	r2, [r3, #0]
}
 8005c28:	bf00      	nop
 8005c2a:	3714      	adds	r7, #20
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	6892      	ldr	r2, [r2, #8]
 8005c4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	6852      	ldr	r2, [r2, #4]
 8005c54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d103      	bne.n	8005c68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	689a      	ldr	r2, [r3, #8]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	1e5a      	subs	r2, r3, #1
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3714      	adds	r7, #20
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10b      	bne.n	8005cb4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca0:	f383 8811 	msr	BASEPRI, r3
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	f3bf 8f4f 	dsb	sy
 8005cac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005cae:	bf00      	nop
 8005cb0:	bf00      	nop
 8005cb2:	e7fd      	b.n	8005cb0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005cb4:	f001 fed0 	bl	8007a58 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cc0:	68f9      	ldr	r1, [r7, #12]
 8005cc2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005cc4:	fb01 f303 	mul.w	r3, r1, r3
 8005cc8:	441a      	add	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	68f9      	ldr	r1, [r7, #12]
 8005ce8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005cea:	fb01 f303 	mul.w	r3, r1, r3
 8005cee:	441a      	add	r2, r3
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	22ff      	movs	r2, #255	@ 0xff
 8005cf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	22ff      	movs	r2, #255	@ 0xff
 8005d00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d114      	bne.n	8005d34 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d01a      	beq.n	8005d48 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	3310      	adds	r3, #16
 8005d16:	4618      	mov	r0, r3
 8005d18:	f001 f984 	bl	8007024 <xTaskRemoveFromEventList>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d012      	beq.n	8005d48 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005d22:	4b0d      	ldr	r3, [pc, #52]	@ (8005d58 <xQueueGenericReset+0xd0>)
 8005d24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d28:	601a      	str	r2, [r3, #0]
 8005d2a:	f3bf 8f4f 	dsb	sy
 8005d2e:	f3bf 8f6f 	isb	sy
 8005d32:	e009      	b.n	8005d48 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	3310      	adds	r3, #16
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7ff fef1 	bl	8005b20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	3324      	adds	r3, #36	@ 0x24
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7ff feec 	bl	8005b20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005d48:	f001 feb8 	bl	8007abc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005d4c:	2301      	movs	r3, #1
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	e000ed04 	.word	0xe000ed04

08005d5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b08e      	sub	sp, #56	@ 0x38
 8005d60:	af02      	add	r7, sp, #8
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
 8005d68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10b      	bne.n	8005d88 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d74:	f383 8811 	msr	BASEPRI, r3
 8005d78:	f3bf 8f6f 	isb	sy
 8005d7c:	f3bf 8f4f 	dsb	sy
 8005d80:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005d82:	bf00      	nop
 8005d84:	bf00      	nop
 8005d86:	e7fd      	b.n	8005d84 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d10b      	bne.n	8005da6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005da0:	bf00      	nop
 8005da2:	bf00      	nop
 8005da4:	e7fd      	b.n	8005da2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d002      	beq.n	8005db2 <xQueueGenericCreateStatic+0x56>
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d001      	beq.n	8005db6 <xQueueGenericCreateStatic+0x5a>
 8005db2:	2301      	movs	r3, #1
 8005db4:	e000      	b.n	8005db8 <xQueueGenericCreateStatic+0x5c>
 8005db6:	2300      	movs	r3, #0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10b      	bne.n	8005dd4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc0:	f383 8811 	msr	BASEPRI, r3
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	623b      	str	r3, [r7, #32]
}
 8005dce:	bf00      	nop
 8005dd0:	bf00      	nop
 8005dd2:	e7fd      	b.n	8005dd0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d102      	bne.n	8005de0 <xQueueGenericCreateStatic+0x84>
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d101      	bne.n	8005de4 <xQueueGenericCreateStatic+0x88>
 8005de0:	2301      	movs	r3, #1
 8005de2:	e000      	b.n	8005de6 <xQueueGenericCreateStatic+0x8a>
 8005de4:	2300      	movs	r3, #0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10b      	bne.n	8005e02 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dee:	f383 8811 	msr	BASEPRI, r3
 8005df2:	f3bf 8f6f 	isb	sy
 8005df6:	f3bf 8f4f 	dsb	sy
 8005dfa:	61fb      	str	r3, [r7, #28]
}
 8005dfc:	bf00      	nop
 8005dfe:	bf00      	nop
 8005e00:	e7fd      	b.n	8005dfe <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005e02:	2348      	movs	r3, #72	@ 0x48
 8005e04:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	2b48      	cmp	r3, #72	@ 0x48
 8005e0a:	d00b      	beq.n	8005e24 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e10:	f383 8811 	msr	BASEPRI, r3
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	61bb      	str	r3, [r7, #24]
}
 8005e1e:	bf00      	nop
 8005e20:	bf00      	nop
 8005e22:	e7fd      	b.n	8005e20 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005e24:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00d      	beq.n	8005e4c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e38:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e3e:	9300      	str	r3, [sp, #0]
 8005e40:	4613      	mov	r3, r2
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	68b9      	ldr	r1, [r7, #8]
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f000 f840 	bl	8005ecc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3730      	adds	r7, #48	@ 0x30
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b08a      	sub	sp, #40	@ 0x28
 8005e5a:	af02      	add	r7, sp, #8
 8005e5c:	60f8      	str	r0, [r7, #12]
 8005e5e:	60b9      	str	r1, [r7, #8]
 8005e60:	4613      	mov	r3, r2
 8005e62:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d10b      	bne.n	8005e82 <xQueueGenericCreate+0x2c>
	__asm volatile
 8005e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e6e:	f383 8811 	msr	BASEPRI, r3
 8005e72:	f3bf 8f6f 	isb	sy
 8005e76:	f3bf 8f4f 	dsb	sy
 8005e7a:	613b      	str	r3, [r7, #16]
}
 8005e7c:	bf00      	nop
 8005e7e:	bf00      	nop
 8005e80:	e7fd      	b.n	8005e7e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	68ba      	ldr	r2, [r7, #8]
 8005e86:	fb02 f303 	mul.w	r3, r2, r3
 8005e8a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	3348      	adds	r3, #72	@ 0x48
 8005e90:	4618      	mov	r0, r3
 8005e92:	f001 ff03 	bl	8007c9c <pvPortMalloc>
 8005e96:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d011      	beq.n	8005ec2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	3348      	adds	r3, #72	@ 0x48
 8005ea6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005eb0:	79fa      	ldrb	r2, [r7, #7]
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	9300      	str	r3, [sp, #0]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	68b9      	ldr	r1, [r7, #8]
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f000 f805 	bl	8005ecc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005ec2:	69bb      	ldr	r3, [r7, #24]
	}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3720      	adds	r7, #32
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d103      	bne.n	8005ee8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	69ba      	ldr	r2, [r7, #24]
 8005ee4:	601a      	str	r2, [r3, #0]
 8005ee6:	e002      	b.n	8005eee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005efa:	2101      	movs	r1, #1
 8005efc:	69b8      	ldr	r0, [r7, #24]
 8005efe:	f7ff fec3 	bl	8005c88 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005f02:	bf00      	nop
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
	...

08005f0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b08e      	sub	sp, #56	@ 0x38
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
 8005f18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d10b      	bne.n	8005f40 <xQueueGenericSend+0x34>
	__asm volatile
 8005f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f2c:	f383 8811 	msr	BASEPRI, r3
 8005f30:	f3bf 8f6f 	isb	sy
 8005f34:	f3bf 8f4f 	dsb	sy
 8005f38:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005f3a:	bf00      	nop
 8005f3c:	bf00      	nop
 8005f3e:	e7fd      	b.n	8005f3c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d103      	bne.n	8005f4e <xQueueGenericSend+0x42>
 8005f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d101      	bne.n	8005f52 <xQueueGenericSend+0x46>
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e000      	b.n	8005f54 <xQueueGenericSend+0x48>
 8005f52:	2300      	movs	r3, #0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10b      	bne.n	8005f70 <xQueueGenericSend+0x64>
	__asm volatile
 8005f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f5c:	f383 8811 	msr	BASEPRI, r3
 8005f60:	f3bf 8f6f 	isb	sy
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005f6a:	bf00      	nop
 8005f6c:	bf00      	nop
 8005f6e:	e7fd      	b.n	8005f6c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d103      	bne.n	8005f7e <xQueueGenericSend+0x72>
 8005f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d101      	bne.n	8005f82 <xQueueGenericSend+0x76>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e000      	b.n	8005f84 <xQueueGenericSend+0x78>
 8005f82:	2300      	movs	r3, #0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d10b      	bne.n	8005fa0 <xQueueGenericSend+0x94>
	__asm volatile
 8005f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f8c:	f383 8811 	msr	BASEPRI, r3
 8005f90:	f3bf 8f6f 	isb	sy
 8005f94:	f3bf 8f4f 	dsb	sy
 8005f98:	623b      	str	r3, [r7, #32]
}
 8005f9a:	bf00      	nop
 8005f9c:	bf00      	nop
 8005f9e:	e7fd      	b.n	8005f9c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fa0:	f001 fa06 	bl	80073b0 <xTaskGetSchedulerState>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d102      	bne.n	8005fb0 <xQueueGenericSend+0xa4>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d101      	bne.n	8005fb4 <xQueueGenericSend+0xa8>
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e000      	b.n	8005fb6 <xQueueGenericSend+0xaa>
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10b      	bne.n	8005fd2 <xQueueGenericSend+0xc6>
	__asm volatile
 8005fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	61fb      	str	r3, [r7, #28]
}
 8005fcc:	bf00      	nop
 8005fce:	bf00      	nop
 8005fd0:	e7fd      	b.n	8005fce <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005fd2:	f001 fd41 	bl	8007a58 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d302      	bcc.n	8005fe8 <xQueueGenericSend+0xdc>
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d129      	bne.n	800603c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005fe8:	683a      	ldr	r2, [r7, #0]
 8005fea:	68b9      	ldr	r1, [r7, #8]
 8005fec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005fee:	f000 fac9 	bl	8006584 <prvCopyDataToQueue>
 8005ff2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d010      	beq.n	800601e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ffe:	3324      	adds	r3, #36	@ 0x24
 8006000:	4618      	mov	r0, r3
 8006002:	f001 f80f 	bl	8007024 <xTaskRemoveFromEventList>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d013      	beq.n	8006034 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800600c:	4b3f      	ldr	r3, [pc, #252]	@ (800610c <xQueueGenericSend+0x200>)
 800600e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006012:	601a      	str	r2, [r3, #0]
 8006014:	f3bf 8f4f 	dsb	sy
 8006018:	f3bf 8f6f 	isb	sy
 800601c:	e00a      	b.n	8006034 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800601e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006020:	2b00      	cmp	r3, #0
 8006022:	d007      	beq.n	8006034 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006024:	4b39      	ldr	r3, [pc, #228]	@ (800610c <xQueueGenericSend+0x200>)
 8006026:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800602a:	601a      	str	r2, [r3, #0]
 800602c:	f3bf 8f4f 	dsb	sy
 8006030:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006034:	f001 fd42 	bl	8007abc <vPortExitCritical>
				return pdPASS;
 8006038:	2301      	movs	r3, #1
 800603a:	e063      	b.n	8006104 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d103      	bne.n	800604a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006042:	f001 fd3b 	bl	8007abc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006046:	2300      	movs	r3, #0
 8006048:	e05c      	b.n	8006104 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800604a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800604c:	2b00      	cmp	r3, #0
 800604e:	d106      	bne.n	800605e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006050:	f107 0314 	add.w	r3, r7, #20
 8006054:	4618      	mov	r0, r3
 8006056:	f001 f849 	bl	80070ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800605a:	2301      	movs	r3, #1
 800605c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800605e:	f001 fd2d 	bl	8007abc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006062:	f000 fdef 	bl	8006c44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006066:	f001 fcf7 	bl	8007a58 <vPortEnterCritical>
 800606a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006070:	b25b      	sxtb	r3, r3
 8006072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006076:	d103      	bne.n	8006080 <xQueueGenericSend+0x174>
 8006078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607a:	2200      	movs	r2, #0
 800607c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006082:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006086:	b25b      	sxtb	r3, r3
 8006088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800608c:	d103      	bne.n	8006096 <xQueueGenericSend+0x18a>
 800608e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006096:	f001 fd11 	bl	8007abc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800609a:	1d3a      	adds	r2, r7, #4
 800609c:	f107 0314 	add.w	r3, r7, #20
 80060a0:	4611      	mov	r1, r2
 80060a2:	4618      	mov	r0, r3
 80060a4:	f001 f838 	bl	8007118 <xTaskCheckForTimeOut>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d124      	bne.n	80060f8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80060ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80060b0:	f000 fb60 	bl	8006774 <prvIsQueueFull>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d018      	beq.n	80060ec <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80060ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060bc:	3310      	adds	r3, #16
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	4611      	mov	r1, r2
 80060c2:	4618      	mov	r0, r3
 80060c4:	f000 ff88 	bl	8006fd8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80060c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80060ca:	f000 faeb 	bl	80066a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80060ce:	f000 fdc7 	bl	8006c60 <xTaskResumeAll>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f47f af7c 	bne.w	8005fd2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80060da:	4b0c      	ldr	r3, [pc, #48]	@ (800610c <xQueueGenericSend+0x200>)
 80060dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060e0:	601a      	str	r2, [r3, #0]
 80060e2:	f3bf 8f4f 	dsb	sy
 80060e6:	f3bf 8f6f 	isb	sy
 80060ea:	e772      	b.n	8005fd2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80060ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80060ee:	f000 fad9 	bl	80066a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060f2:	f000 fdb5 	bl	8006c60 <xTaskResumeAll>
 80060f6:	e76c      	b.n	8005fd2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80060f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80060fa:	f000 fad3 	bl	80066a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060fe:	f000 fdaf 	bl	8006c60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006102:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006104:	4618      	mov	r0, r3
 8006106:	3738      	adds	r7, #56	@ 0x38
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}
 800610c:	e000ed04 	.word	0xe000ed04

08006110 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b08e      	sub	sp, #56	@ 0x38
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800611e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10b      	bne.n	800613c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006128:	f383 8811 	msr	BASEPRI, r3
 800612c:	f3bf 8f6f 	isb	sy
 8006130:	f3bf 8f4f 	dsb	sy
 8006134:	623b      	str	r3, [r7, #32]
}
 8006136:	bf00      	nop
 8006138:	bf00      	nop
 800613a:	e7fd      	b.n	8006138 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800613c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800613e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006140:	2b00      	cmp	r3, #0
 8006142:	d00b      	beq.n	800615c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8006144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006148:	f383 8811 	msr	BASEPRI, r3
 800614c:	f3bf 8f6f 	isb	sy
 8006150:	f3bf 8f4f 	dsb	sy
 8006154:	61fb      	str	r3, [r7, #28]
}
 8006156:	bf00      	nop
 8006158:	bf00      	nop
 800615a:	e7fd      	b.n	8006158 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800615c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d103      	bne.n	800616c <xQueueGiveFromISR+0x5c>
 8006164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d101      	bne.n	8006170 <xQueueGiveFromISR+0x60>
 800616c:	2301      	movs	r3, #1
 800616e:	e000      	b.n	8006172 <xQueueGiveFromISR+0x62>
 8006170:	2300      	movs	r3, #0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10b      	bne.n	800618e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8006176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800617a:	f383 8811 	msr	BASEPRI, r3
 800617e:	f3bf 8f6f 	isb	sy
 8006182:	f3bf 8f4f 	dsb	sy
 8006186:	61bb      	str	r3, [r7, #24]
}
 8006188:	bf00      	nop
 800618a:	bf00      	nop
 800618c:	e7fd      	b.n	800618a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800618e:	f001 fd43 	bl	8007c18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006192:	f3ef 8211 	mrs	r2, BASEPRI
 8006196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800619a:	f383 8811 	msr	BASEPRI, r3
 800619e:	f3bf 8f6f 	isb	sy
 80061a2:	f3bf 8f4f 	dsb	sy
 80061a6:	617a      	str	r2, [r7, #20]
 80061a8:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80061aa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80061ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061b2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80061b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d22b      	bcs.n	8006216 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80061be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80061c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80061c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ca:	1c5a      	adds	r2, r3, #1
 80061cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ce:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80061d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80061d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d8:	d112      	bne.n	8006200 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d016      	beq.n	8006210 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e4:	3324      	adds	r3, #36	@ 0x24
 80061e6:	4618      	mov	r0, r3
 80061e8:	f000 ff1c 	bl	8007024 <xTaskRemoveFromEventList>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00e      	beq.n	8006210 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00b      	beq.n	8006210 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	2201      	movs	r2, #1
 80061fc:	601a      	str	r2, [r3, #0]
 80061fe:	e007      	b.n	8006210 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006200:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006204:	3301      	adds	r3, #1
 8006206:	b2db      	uxtb	r3, r3
 8006208:	b25a      	sxtb	r2, r3
 800620a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800620c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006210:	2301      	movs	r3, #1
 8006212:	637b      	str	r3, [r7, #52]	@ 0x34
 8006214:	e001      	b.n	800621a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006216:	2300      	movs	r3, #0
 8006218:	637b      	str	r3, [r7, #52]	@ 0x34
 800621a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800621c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006224:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006228:	4618      	mov	r0, r3
 800622a:	3738      	adds	r7, #56	@ 0x38
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b08e      	sub	sp, #56	@ 0x38
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800623a:	2300      	movs	r3, #0
 800623c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006242:	2300      	movs	r3, #0
 8006244:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006248:	2b00      	cmp	r3, #0
 800624a:	d10b      	bne.n	8006264 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800624c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006250:	f383 8811 	msr	BASEPRI, r3
 8006254:	f3bf 8f6f 	isb	sy
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	623b      	str	r3, [r7, #32]
}
 800625e:	bf00      	nop
 8006260:	bf00      	nop
 8006262:	e7fd      	b.n	8006260 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00b      	beq.n	8006284 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800626c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006270:	f383 8811 	msr	BASEPRI, r3
 8006274:	f3bf 8f6f 	isb	sy
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	61fb      	str	r3, [r7, #28]
}
 800627e:	bf00      	nop
 8006280:	bf00      	nop
 8006282:	e7fd      	b.n	8006280 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006284:	f001 f894 	bl	80073b0 <xTaskGetSchedulerState>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d102      	bne.n	8006294 <xQueueSemaphoreTake+0x64>
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d101      	bne.n	8006298 <xQueueSemaphoreTake+0x68>
 8006294:	2301      	movs	r3, #1
 8006296:	e000      	b.n	800629a <xQueueSemaphoreTake+0x6a>
 8006298:	2300      	movs	r3, #0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10b      	bne.n	80062b6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800629e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062a2:	f383 8811 	msr	BASEPRI, r3
 80062a6:	f3bf 8f6f 	isb	sy
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	61bb      	str	r3, [r7, #24]
}
 80062b0:	bf00      	nop
 80062b2:	bf00      	nop
 80062b4:	e7fd      	b.n	80062b2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80062b6:	f001 fbcf 	bl	8007a58 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80062ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062be:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80062c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d024      	beq.n	8006310 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80062c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c8:	1e5a      	subs	r2, r3, #1
 80062ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062cc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d104      	bne.n	80062e0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80062d6:	f001 fa17 	bl	8007708 <pvTaskIncrementMutexHeldCount>
 80062da:	4602      	mov	r2, r0
 80062dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062de:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00f      	beq.n	8006308 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ea:	3310      	adds	r3, #16
 80062ec:	4618      	mov	r0, r3
 80062ee:	f000 fe99 	bl	8007024 <xTaskRemoveFromEventList>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d007      	beq.n	8006308 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80062f8:	4b54      	ldr	r3, [pc, #336]	@ (800644c <xQueueSemaphoreTake+0x21c>)
 80062fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062fe:	601a      	str	r2, [r3, #0]
 8006300:	f3bf 8f4f 	dsb	sy
 8006304:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006308:	f001 fbd8 	bl	8007abc <vPortExitCritical>
				return pdPASS;
 800630c:	2301      	movs	r3, #1
 800630e:	e098      	b.n	8006442 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d112      	bne.n	800633c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00b      	beq.n	8006334 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800631c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006320:	f383 8811 	msr	BASEPRI, r3
 8006324:	f3bf 8f6f 	isb	sy
 8006328:	f3bf 8f4f 	dsb	sy
 800632c:	617b      	str	r3, [r7, #20]
}
 800632e:	bf00      	nop
 8006330:	bf00      	nop
 8006332:	e7fd      	b.n	8006330 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006334:	f001 fbc2 	bl	8007abc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006338:	2300      	movs	r3, #0
 800633a:	e082      	b.n	8006442 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800633c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800633e:	2b00      	cmp	r3, #0
 8006340:	d106      	bne.n	8006350 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006342:	f107 030c 	add.w	r3, r7, #12
 8006346:	4618      	mov	r0, r3
 8006348:	f000 fed0 	bl	80070ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800634c:	2301      	movs	r3, #1
 800634e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006350:	f001 fbb4 	bl	8007abc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006354:	f000 fc76 	bl	8006c44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006358:	f001 fb7e 	bl	8007a58 <vPortEnterCritical>
 800635c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800635e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006362:	b25b      	sxtb	r3, r3
 8006364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006368:	d103      	bne.n	8006372 <xQueueSemaphoreTake+0x142>
 800636a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800636c:	2200      	movs	r2, #0
 800636e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006374:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006378:	b25b      	sxtb	r3, r3
 800637a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800637e:	d103      	bne.n	8006388 <xQueueSemaphoreTake+0x158>
 8006380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006382:	2200      	movs	r2, #0
 8006384:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006388:	f001 fb98 	bl	8007abc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800638c:	463a      	mov	r2, r7
 800638e:	f107 030c 	add.w	r3, r7, #12
 8006392:	4611      	mov	r1, r2
 8006394:	4618      	mov	r0, r3
 8006396:	f000 febf 	bl	8007118 <xTaskCheckForTimeOut>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d132      	bne.n	8006406 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80063a2:	f000 f9d1 	bl	8006748 <prvIsQueueEmpty>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d026      	beq.n	80063fa <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d109      	bne.n	80063c8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80063b4:	f001 fb50 	bl	8007a58 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80063b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	4618      	mov	r0, r3
 80063be:	f001 f815 	bl	80073ec <xTaskPriorityInherit>
 80063c2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80063c4:	f001 fb7a 	bl	8007abc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80063c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ca:	3324      	adds	r3, #36	@ 0x24
 80063cc:	683a      	ldr	r2, [r7, #0]
 80063ce:	4611      	mov	r1, r2
 80063d0:	4618      	mov	r0, r3
 80063d2:	f000 fe01 	bl	8006fd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80063d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80063d8:	f000 f964 	bl	80066a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80063dc:	f000 fc40 	bl	8006c60 <xTaskResumeAll>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f47f af67 	bne.w	80062b6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80063e8:	4b18      	ldr	r3, [pc, #96]	@ (800644c <xQueueSemaphoreTake+0x21c>)
 80063ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063ee:	601a      	str	r2, [r3, #0]
 80063f0:	f3bf 8f4f 	dsb	sy
 80063f4:	f3bf 8f6f 	isb	sy
 80063f8:	e75d      	b.n	80062b6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80063fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80063fc:	f000 f952 	bl	80066a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006400:	f000 fc2e 	bl	8006c60 <xTaskResumeAll>
 8006404:	e757      	b.n	80062b6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006406:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006408:	f000 f94c 	bl	80066a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800640c:	f000 fc28 	bl	8006c60 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006410:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006412:	f000 f999 	bl	8006748 <prvIsQueueEmpty>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	f43f af4c 	beq.w	80062b6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800641e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00d      	beq.n	8006440 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006424:	f001 fb18 	bl	8007a58 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006428:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800642a:	f000 f893 	bl	8006554 <prvGetDisinheritPriorityAfterTimeout>
 800642e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006436:	4618      	mov	r0, r3
 8006438:	f001 f8d6 	bl	80075e8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800643c:	f001 fb3e 	bl	8007abc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006440:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006442:	4618      	mov	r0, r3
 8006444:	3738      	adds	r7, #56	@ 0x38
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	e000ed04 	.word	0xe000ed04

08006450 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b08e      	sub	sp, #56	@ 0x38
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10b      	bne.n	800647e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800646a:	f383 8811 	msr	BASEPRI, r3
 800646e:	f3bf 8f6f 	isb	sy
 8006472:	f3bf 8f4f 	dsb	sy
 8006476:	623b      	str	r3, [r7, #32]
}
 8006478:	bf00      	nop
 800647a:	bf00      	nop
 800647c:	e7fd      	b.n	800647a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d103      	bne.n	800648c <xQueueReceiveFromISR+0x3c>
 8006484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006488:	2b00      	cmp	r3, #0
 800648a:	d101      	bne.n	8006490 <xQueueReceiveFromISR+0x40>
 800648c:	2301      	movs	r3, #1
 800648e:	e000      	b.n	8006492 <xQueueReceiveFromISR+0x42>
 8006490:	2300      	movs	r3, #0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10b      	bne.n	80064ae <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800649a:	f383 8811 	msr	BASEPRI, r3
 800649e:	f3bf 8f6f 	isb	sy
 80064a2:	f3bf 8f4f 	dsb	sy
 80064a6:	61fb      	str	r3, [r7, #28]
}
 80064a8:	bf00      	nop
 80064aa:	bf00      	nop
 80064ac:	e7fd      	b.n	80064aa <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064ae:	f001 fbb3 	bl	8007c18 <vPortValidateInterruptPriority>
	__asm volatile
 80064b2:	f3ef 8211 	mrs	r2, BASEPRI
 80064b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ba:	f383 8811 	msr	BASEPRI, r3
 80064be:	f3bf 8f6f 	isb	sy
 80064c2:	f3bf 8f4f 	dsb	sy
 80064c6:	61ba      	str	r2, [r7, #24]
 80064c8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80064ca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80064cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064d2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d02f      	beq.n	800653a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80064da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80064e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80064e4:	68b9      	ldr	r1, [r7, #8]
 80064e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80064e8:	f000 f8b6 	bl	8006658 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80064ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ee:	1e5a      	subs	r2, r3, #1
 80064f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80064f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80064f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064fc:	d112      	bne.n	8006524 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d016      	beq.n	8006534 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006508:	3310      	adds	r3, #16
 800650a:	4618      	mov	r0, r3
 800650c:	f000 fd8a 	bl	8007024 <xTaskRemoveFromEventList>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00e      	beq.n	8006534 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00b      	beq.n	8006534 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	601a      	str	r2, [r3, #0]
 8006522:	e007      	b.n	8006534 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006524:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006528:	3301      	adds	r3, #1
 800652a:	b2db      	uxtb	r3, r3
 800652c:	b25a      	sxtb	r2, r3
 800652e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006530:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006534:	2301      	movs	r3, #1
 8006536:	637b      	str	r3, [r7, #52]	@ 0x34
 8006538:	e001      	b.n	800653e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800653a:	2300      	movs	r3, #0
 800653c:	637b      	str	r3, [r7, #52]	@ 0x34
 800653e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006540:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	f383 8811 	msr	BASEPRI, r3
}
 8006548:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800654a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800654c:	4618      	mov	r0, r3
 800654e:	3738      	adds	r7, #56	@ 0x38
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006560:	2b00      	cmp	r3, #0
 8006562:	d006      	beq.n	8006572 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f1c3 0307 	rsb	r3, r3, #7
 800656e:	60fb      	str	r3, [r7, #12]
 8006570:	e001      	b.n	8006576 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006572:	2300      	movs	r3, #0
 8006574:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006576:	68fb      	ldr	r3, [r7, #12]
	}
 8006578:	4618      	mov	r0, r3
 800657a:	3714      	adds	r7, #20
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006590:	2300      	movs	r3, #0
 8006592:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006598:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10d      	bne.n	80065be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d14d      	bne.n	8006646 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	4618      	mov	r0, r3
 80065b0:	f000 ff92 	bl	80074d8 <xTaskPriorityDisinherit>
 80065b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	609a      	str	r2, [r3, #8]
 80065bc:	e043      	b.n	8006646 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d119      	bne.n	80065f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6858      	ldr	r0, [r3, #4]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065cc:	461a      	mov	r2, r3
 80065ce:	68b9      	ldr	r1, [r7, #8]
 80065d0:	f001 fdd6 	bl	8008180 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	685a      	ldr	r2, [r3, #4]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065dc:	441a      	add	r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	685a      	ldr	r2, [r3, #4]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d32b      	bcc.n	8006646 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	605a      	str	r2, [r3, #4]
 80065f6:	e026      	b.n	8006646 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	68d8      	ldr	r0, [r3, #12]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006600:	461a      	mov	r2, r3
 8006602:	68b9      	ldr	r1, [r7, #8]
 8006604:	f001 fdbc 	bl	8008180 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	68da      	ldr	r2, [r3, #12]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006610:	425b      	negs	r3, r3
 8006612:	441a      	add	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	68da      	ldr	r2, [r3, #12]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	429a      	cmp	r2, r3
 8006622:	d207      	bcs.n	8006634 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	689a      	ldr	r2, [r3, #8]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800662c:	425b      	negs	r3, r3
 800662e:	441a      	add	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2b02      	cmp	r3, #2
 8006638:	d105      	bne.n	8006646 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d002      	beq.n	8006646 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	3b01      	subs	r3, #1
 8006644:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	1c5a      	adds	r2, r3, #1
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800664e:	697b      	ldr	r3, [r7, #20]
}
 8006650:	4618      	mov	r0, r3
 8006652:	3718      	adds	r7, #24
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006666:	2b00      	cmp	r3, #0
 8006668:	d018      	beq.n	800669c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	68da      	ldr	r2, [r3, #12]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006672:	441a      	add	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	68da      	ldr	r2, [r3, #12]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	429a      	cmp	r2, r3
 8006682:	d303      	bcc.n	800668c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	68d9      	ldr	r1, [r3, #12]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006694:	461a      	mov	r2, r3
 8006696:	6838      	ldr	r0, [r7, #0]
 8006698:	f001 fd72 	bl	8008180 <memcpy>
	}
}
 800669c:	bf00      	nop
 800669e:	3708      	adds	r7, #8
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80066ac:	f001 f9d4 	bl	8007a58 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80066b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066b8:	e011      	b.n	80066de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d012      	beq.n	80066e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	3324      	adds	r3, #36	@ 0x24
 80066c6:	4618      	mov	r0, r3
 80066c8:	f000 fcac 	bl	8007024 <xTaskRemoveFromEventList>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d001      	beq.n	80066d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80066d2:	f000 fd85 	bl	80071e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80066d6:	7bfb      	ldrb	r3, [r7, #15]
 80066d8:	3b01      	subs	r3, #1
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	dce9      	bgt.n	80066ba <prvUnlockQueue+0x16>
 80066e6:	e000      	b.n	80066ea <prvUnlockQueue+0x46>
					break;
 80066e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	22ff      	movs	r2, #255	@ 0xff
 80066ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80066f2:	f001 f9e3 	bl	8007abc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80066f6:	f001 f9af 	bl	8007a58 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006700:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006702:	e011      	b.n	8006728 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d012      	beq.n	8006732 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	3310      	adds	r3, #16
 8006710:	4618      	mov	r0, r3
 8006712:	f000 fc87 	bl	8007024 <xTaskRemoveFromEventList>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d001      	beq.n	8006720 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800671c:	f000 fd60 	bl	80071e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006720:	7bbb      	ldrb	r3, [r7, #14]
 8006722:	3b01      	subs	r3, #1
 8006724:	b2db      	uxtb	r3, r3
 8006726:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006728:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800672c:	2b00      	cmp	r3, #0
 800672e:	dce9      	bgt.n	8006704 <prvUnlockQueue+0x60>
 8006730:	e000      	b.n	8006734 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006732:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	22ff      	movs	r2, #255	@ 0xff
 8006738:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800673c:	f001 f9be 	bl	8007abc <vPortExitCritical>
}
 8006740:	bf00      	nop
 8006742:	3710      	adds	r7, #16
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006750:	f001 f982 	bl	8007a58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006758:	2b00      	cmp	r3, #0
 800675a:	d102      	bne.n	8006762 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800675c:	2301      	movs	r3, #1
 800675e:	60fb      	str	r3, [r7, #12]
 8006760:	e001      	b.n	8006766 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006762:	2300      	movs	r3, #0
 8006764:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006766:	f001 f9a9 	bl	8007abc <vPortExitCritical>

	return xReturn;
 800676a:	68fb      	ldr	r3, [r7, #12]
}
 800676c:	4618      	mov	r0, r3
 800676e:	3710      	adds	r7, #16
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800677c:	f001 f96c 	bl	8007a58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006788:	429a      	cmp	r2, r3
 800678a:	d102      	bne.n	8006792 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800678c:	2301      	movs	r3, #1
 800678e:	60fb      	str	r3, [r7, #12]
 8006790:	e001      	b.n	8006796 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006792:	2300      	movs	r3, #0
 8006794:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006796:	f001 f991 	bl	8007abc <vPortExitCritical>

	return xReturn;
 800679a:	68fb      	ldr	r3, [r7, #12]
}
 800679c:	4618      	mov	r0, r3
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b08e      	sub	sp, #56	@ 0x38
 80067a8:	af04      	add	r7, sp, #16
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]
 80067b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80067b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10b      	bne.n	80067d0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80067b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067bc:	f383 8811 	msr	BASEPRI, r3
 80067c0:	f3bf 8f6f 	isb	sy
 80067c4:	f3bf 8f4f 	dsb	sy
 80067c8:	623b      	str	r3, [r7, #32]
}
 80067ca:	bf00      	nop
 80067cc:	bf00      	nop
 80067ce:	e7fd      	b.n	80067cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80067d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d10b      	bne.n	80067ee <xTaskCreateStatic+0x4a>
	__asm volatile
 80067d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067da:	f383 8811 	msr	BASEPRI, r3
 80067de:	f3bf 8f6f 	isb	sy
 80067e2:	f3bf 8f4f 	dsb	sy
 80067e6:	61fb      	str	r3, [r7, #28]
}
 80067e8:	bf00      	nop
 80067ea:	bf00      	nop
 80067ec:	e7fd      	b.n	80067ea <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80067ee:	23a0      	movs	r3, #160	@ 0xa0
 80067f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	2ba0      	cmp	r3, #160	@ 0xa0
 80067f6:	d00b      	beq.n	8006810 <xTaskCreateStatic+0x6c>
	__asm volatile
 80067f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067fc:	f383 8811 	msr	BASEPRI, r3
 8006800:	f3bf 8f6f 	isb	sy
 8006804:	f3bf 8f4f 	dsb	sy
 8006808:	61bb      	str	r3, [r7, #24]
}
 800680a:	bf00      	nop
 800680c:	bf00      	nop
 800680e:	e7fd      	b.n	800680c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006810:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006814:	2b00      	cmp	r3, #0
 8006816:	d01e      	beq.n	8006856 <xTaskCreateStatic+0xb2>
 8006818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800681a:	2b00      	cmp	r3, #0
 800681c:	d01b      	beq.n	8006856 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800681e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006820:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006824:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006826:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682a:	2202      	movs	r2, #2
 800682c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006830:	2300      	movs	r3, #0
 8006832:	9303      	str	r3, [sp, #12]
 8006834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006836:	9302      	str	r3, [sp, #8]
 8006838:	f107 0314 	add.w	r3, r7, #20
 800683c:	9301      	str	r3, [sp, #4]
 800683e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	68b9      	ldr	r1, [r7, #8]
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 f851 	bl	80068f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800684e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006850:	f000 f8ee 	bl	8006a30 <prvAddNewTaskToReadyList>
 8006854:	e001      	b.n	800685a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006856:	2300      	movs	r3, #0
 8006858:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800685a:	697b      	ldr	r3, [r7, #20]
	}
 800685c:	4618      	mov	r0, r3
 800685e:	3728      	adds	r7, #40	@ 0x28
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006864:	b580      	push	{r7, lr}
 8006866:	b08c      	sub	sp, #48	@ 0x30
 8006868:	af04      	add	r7, sp, #16
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	603b      	str	r3, [r7, #0]
 8006870:	4613      	mov	r3, r2
 8006872:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006874:	88fb      	ldrh	r3, [r7, #6]
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	4618      	mov	r0, r3
 800687a:	f001 fa0f 	bl	8007c9c <pvPortMalloc>
 800687e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00e      	beq.n	80068a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006886:	20a0      	movs	r0, #160	@ 0xa0
 8006888:	f001 fa08 	bl	8007c9c <pvPortMalloc>
 800688c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d003      	beq.n	800689c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	631a      	str	r2, [r3, #48]	@ 0x30
 800689a:	e005      	b.n	80068a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800689c:	6978      	ldr	r0, [r7, #20]
 800689e:	f001 facb 	bl	8007e38 <vPortFree>
 80068a2:	e001      	b.n	80068a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80068a4:	2300      	movs	r3, #0
 80068a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d017      	beq.n	80068de <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80068b6:	88fa      	ldrh	r2, [r7, #6]
 80068b8:	2300      	movs	r3, #0
 80068ba:	9303      	str	r3, [sp, #12]
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	9302      	str	r3, [sp, #8]
 80068c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068c2:	9301      	str	r3, [sp, #4]
 80068c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068c6:	9300      	str	r3, [sp, #0]
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	68b9      	ldr	r1, [r7, #8]
 80068cc:	68f8      	ldr	r0, [r7, #12]
 80068ce:	f000 f80f 	bl	80068f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80068d2:	69f8      	ldr	r0, [r7, #28]
 80068d4:	f000 f8ac 	bl	8006a30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80068d8:	2301      	movs	r3, #1
 80068da:	61bb      	str	r3, [r7, #24]
 80068dc:	e002      	b.n	80068e4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80068de:	f04f 33ff 	mov.w	r3, #4294967295
 80068e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80068e4:	69bb      	ldr	r3, [r7, #24]
	}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3720      	adds	r7, #32
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
	...

080068f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b088      	sub	sp, #32
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]
 80068fc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80068fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006900:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006908:	3b01      	subs	r3, #1
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	f023 0307 	bic.w	r3, r3, #7
 8006916:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	f003 0307 	and.w	r3, r3, #7
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00b      	beq.n	800693a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8006922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006926:	f383 8811 	msr	BASEPRI, r3
 800692a:	f3bf 8f6f 	isb	sy
 800692e:	f3bf 8f4f 	dsb	sy
 8006932:	617b      	str	r3, [r7, #20]
}
 8006934:	bf00      	nop
 8006936:	bf00      	nop
 8006938:	e7fd      	b.n	8006936 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d01f      	beq.n	8006980 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006940:	2300      	movs	r3, #0
 8006942:	61fb      	str	r3, [r7, #28]
 8006944:	e012      	b.n	800696c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006946:	68ba      	ldr	r2, [r7, #8]
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	4413      	add	r3, r2
 800694c:	7819      	ldrb	r1, [r3, #0]
 800694e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	4413      	add	r3, r2
 8006954:	3334      	adds	r3, #52	@ 0x34
 8006956:	460a      	mov	r2, r1
 8006958:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800695a:	68ba      	ldr	r2, [r7, #8]
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	4413      	add	r3, r2
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d006      	beq.n	8006974 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	3301      	adds	r3, #1
 800696a:	61fb      	str	r3, [r7, #28]
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	2b0f      	cmp	r3, #15
 8006970:	d9e9      	bls.n	8006946 <prvInitialiseNewTask+0x56>
 8006972:	e000      	b.n	8006976 <prvInitialiseNewTask+0x86>
			{
				break;
 8006974:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006978:	2200      	movs	r2, #0
 800697a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800697e:	e003      	b.n	8006988 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006982:	2200      	movs	r2, #0
 8006984:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800698a:	2b06      	cmp	r3, #6
 800698c:	d901      	bls.n	8006992 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800698e:	2306      	movs	r3, #6
 8006990:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006994:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006996:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800699a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800699c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800699e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a0:	2200      	movs	r2, #0
 80069a2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80069a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a6:	3304      	adds	r3, #4
 80069a8:	4618      	mov	r0, r3
 80069aa:	f7ff f8d9 	bl	8005b60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80069ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b0:	3318      	adds	r3, #24
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7ff f8d4 	bl	8005b60 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80069b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069bc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069c0:	f1c3 0207 	rsb	r2, r3, #7
 80069c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80069c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069cc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80069ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d0:	2200      	movs	r2, #0
 80069d2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80069d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80069de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e0:	334c      	adds	r3, #76	@ 0x4c
 80069e2:	224c      	movs	r2, #76	@ 0x4c
 80069e4:	2100      	movs	r1, #0
 80069e6:	4618      	mov	r0, r3
 80069e8:	f001 fb46 	bl	8008078 <memset>
 80069ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ee:	4a0d      	ldr	r2, [pc, #52]	@ (8006a24 <prvInitialiseNewTask+0x134>)
 80069f0:	651a      	str	r2, [r3, #80]	@ 0x50
 80069f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f4:	4a0c      	ldr	r2, [pc, #48]	@ (8006a28 <prvInitialiseNewTask+0x138>)
 80069f6:	655a      	str	r2, [r3, #84]	@ 0x54
 80069f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069fa:	4a0c      	ldr	r2, [pc, #48]	@ (8006a2c <prvInitialiseNewTask+0x13c>)
 80069fc:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80069fe:	683a      	ldr	r2, [r7, #0]
 8006a00:	68f9      	ldr	r1, [r7, #12]
 8006a02:	69b8      	ldr	r0, [r7, #24]
 8006a04:	f000 fefa 	bl	80077fc <pxPortInitialiseStack>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a0c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d002      	beq.n	8006a1a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a1a:	bf00      	nop
 8006a1c:	3720      	adds	r7, #32
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	20004914 	.word	0x20004914
 8006a28:	2000497c 	.word	0x2000497c
 8006a2c:	200049e4 	.word	0x200049e4

08006a30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006a38:	f001 f80e 	bl	8007a58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006a3c:	4b2a      	ldr	r3, [pc, #168]	@ (8006ae8 <prvAddNewTaskToReadyList+0xb8>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	3301      	adds	r3, #1
 8006a42:	4a29      	ldr	r2, [pc, #164]	@ (8006ae8 <prvAddNewTaskToReadyList+0xb8>)
 8006a44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006a46:	4b29      	ldr	r3, [pc, #164]	@ (8006aec <prvAddNewTaskToReadyList+0xbc>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d109      	bne.n	8006a62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006a4e:	4a27      	ldr	r2, [pc, #156]	@ (8006aec <prvAddNewTaskToReadyList+0xbc>)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006a54:	4b24      	ldr	r3, [pc, #144]	@ (8006ae8 <prvAddNewTaskToReadyList+0xb8>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d110      	bne.n	8006a7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006a5c:	f000 fbe4 	bl	8007228 <prvInitialiseTaskLists>
 8006a60:	e00d      	b.n	8006a7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006a62:	4b23      	ldr	r3, [pc, #140]	@ (8006af0 <prvAddNewTaskToReadyList+0xc0>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d109      	bne.n	8006a7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006a6a:	4b20      	ldr	r3, [pc, #128]	@ (8006aec <prvAddNewTaskToReadyList+0xbc>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d802      	bhi.n	8006a7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006a78:	4a1c      	ldr	r2, [pc, #112]	@ (8006aec <prvAddNewTaskToReadyList+0xbc>)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8006af4 <prvAddNewTaskToReadyList+0xc4>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	3301      	adds	r3, #1
 8006a84:	4a1b      	ldr	r2, [pc, #108]	@ (8006af4 <prvAddNewTaskToReadyList+0xc4>)
 8006a86:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	409a      	lsls	r2, r3
 8006a90:	4b19      	ldr	r3, [pc, #100]	@ (8006af8 <prvAddNewTaskToReadyList+0xc8>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	4a18      	ldr	r2, [pc, #96]	@ (8006af8 <prvAddNewTaskToReadyList+0xc8>)
 8006a98:	6013      	str	r3, [r2, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4413      	add	r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4a15      	ldr	r2, [pc, #84]	@ (8006afc <prvAddNewTaskToReadyList+0xcc>)
 8006aa8:	441a      	add	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	3304      	adds	r3, #4
 8006aae:	4619      	mov	r1, r3
 8006ab0:	4610      	mov	r0, r2
 8006ab2:	f7ff f862 	bl	8005b7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006ab6:	f001 f801 	bl	8007abc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006aba:	4b0d      	ldr	r3, [pc, #52]	@ (8006af0 <prvAddNewTaskToReadyList+0xc0>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00e      	beq.n	8006ae0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8006aec <prvAddNewTaskToReadyList+0xbc>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d207      	bcs.n	8006ae0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8006b00 <prvAddNewTaskToReadyList+0xd0>)
 8006ad2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ad6:	601a      	str	r2, [r3, #0]
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ae0:	bf00      	nop
 8006ae2:	3708      	adds	r7, #8
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	20000cc0 	.word	0x20000cc0
 8006aec:	20000bc0 	.word	0x20000bc0
 8006af0:	20000ccc 	.word	0x20000ccc
 8006af4:	20000cdc 	.word	0x20000cdc
 8006af8:	20000cc8 	.word	0x20000cc8
 8006afc:	20000bc4 	.word	0x20000bc4
 8006b00:	e000ed04 	.word	0xe000ed04

08006b04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d018      	beq.n	8006b48 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006b16:	4b14      	ldr	r3, [pc, #80]	@ (8006b68 <vTaskDelay+0x64>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00b      	beq.n	8006b36 <vTaskDelay+0x32>
	__asm volatile
 8006b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b22:	f383 8811 	msr	BASEPRI, r3
 8006b26:	f3bf 8f6f 	isb	sy
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	60bb      	str	r3, [r7, #8]
}
 8006b30:	bf00      	nop
 8006b32:	bf00      	nop
 8006b34:	e7fd      	b.n	8006b32 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006b36:	f000 f885 	bl	8006c44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 fdf7 	bl	8007730 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006b42:	f000 f88d 	bl	8006c60 <xTaskResumeAll>
 8006b46:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d107      	bne.n	8006b5e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006b4e:	4b07      	ldr	r3, [pc, #28]	@ (8006b6c <vTaskDelay+0x68>)
 8006b50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b54:	601a      	str	r2, [r3, #0]
 8006b56:	f3bf 8f4f 	dsb	sy
 8006b5a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b5e:	bf00      	nop
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	20000ce8 	.word	0x20000ce8
 8006b6c:	e000ed04 	.word	0xe000ed04

08006b70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b08a      	sub	sp, #40	@ 0x28
 8006b74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006b76:	2300      	movs	r3, #0
 8006b78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006b7e:	463a      	mov	r2, r7
 8006b80:	1d39      	adds	r1, r7, #4
 8006b82:	f107 0308 	add.w	r3, r7, #8
 8006b86:	4618      	mov	r0, r3
 8006b88:	f7f9 fcaa 	bl	80004e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006b8c:	6839      	ldr	r1, [r7, #0]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68ba      	ldr	r2, [r7, #8]
 8006b92:	9202      	str	r2, [sp, #8]
 8006b94:	9301      	str	r3, [sp, #4]
 8006b96:	2300      	movs	r3, #0
 8006b98:	9300      	str	r3, [sp, #0]
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	460a      	mov	r2, r1
 8006b9e:	4921      	ldr	r1, [pc, #132]	@ (8006c24 <vTaskStartScheduler+0xb4>)
 8006ba0:	4821      	ldr	r0, [pc, #132]	@ (8006c28 <vTaskStartScheduler+0xb8>)
 8006ba2:	f7ff fdff 	bl	80067a4 <xTaskCreateStatic>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	4a20      	ldr	r2, [pc, #128]	@ (8006c2c <vTaskStartScheduler+0xbc>)
 8006baa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006bac:	4b1f      	ldr	r3, [pc, #124]	@ (8006c2c <vTaskStartScheduler+0xbc>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d002      	beq.n	8006bba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	617b      	str	r3, [r7, #20]
 8006bb8:	e001      	b.n	8006bbe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d11b      	bne.n	8006bfc <vTaskStartScheduler+0x8c>
	__asm volatile
 8006bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc8:	f383 8811 	msr	BASEPRI, r3
 8006bcc:	f3bf 8f6f 	isb	sy
 8006bd0:	f3bf 8f4f 	dsb	sy
 8006bd4:	613b      	str	r3, [r7, #16]
}
 8006bd6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006bd8:	4b15      	ldr	r3, [pc, #84]	@ (8006c30 <vTaskStartScheduler+0xc0>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	334c      	adds	r3, #76	@ 0x4c
 8006bde:	4a15      	ldr	r2, [pc, #84]	@ (8006c34 <vTaskStartScheduler+0xc4>)
 8006be0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006be2:	4b15      	ldr	r3, [pc, #84]	@ (8006c38 <vTaskStartScheduler+0xc8>)
 8006be4:	f04f 32ff 	mov.w	r2, #4294967295
 8006be8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006bea:	4b14      	ldr	r3, [pc, #80]	@ (8006c3c <vTaskStartScheduler+0xcc>)
 8006bec:	2201      	movs	r2, #1
 8006bee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006bf0:	4b13      	ldr	r3, [pc, #76]	@ (8006c40 <vTaskStartScheduler+0xd0>)
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006bf6:	f000 fe8b 	bl	8007910 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006bfa:	e00f      	b.n	8006c1c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c02:	d10b      	bne.n	8006c1c <vTaskStartScheduler+0xac>
	__asm volatile
 8006c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c08:	f383 8811 	msr	BASEPRI, r3
 8006c0c:	f3bf 8f6f 	isb	sy
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	60fb      	str	r3, [r7, #12]
}
 8006c16:	bf00      	nop
 8006c18:	bf00      	nop
 8006c1a:	e7fd      	b.n	8006c18 <vTaskStartScheduler+0xa8>
}
 8006c1c:	bf00      	nop
 8006c1e:	3718      	adds	r7, #24
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	080082d8 	.word	0x080082d8
 8006c28:	080071f9 	.word	0x080071f9
 8006c2c:	20000ce4 	.word	0x20000ce4
 8006c30:	20000bc0 	.word	0x20000bc0
 8006c34:	2000002c 	.word	0x2000002c
 8006c38:	20000ce0 	.word	0x20000ce0
 8006c3c:	20000ccc 	.word	0x20000ccc
 8006c40:	20000cc4 	.word	0x20000cc4

08006c44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006c44:	b480      	push	{r7}
 8006c46:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006c48:	4b04      	ldr	r3, [pc, #16]	@ (8006c5c <vTaskSuspendAll+0x18>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	4a03      	ldr	r2, [pc, #12]	@ (8006c5c <vTaskSuspendAll+0x18>)
 8006c50:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006c52:	bf00      	nop
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr
 8006c5c:	20000ce8 	.word	0x20000ce8

08006c60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006c66:	2300      	movs	r3, #0
 8006c68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006c6e:	4b42      	ldr	r3, [pc, #264]	@ (8006d78 <xTaskResumeAll+0x118>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d10b      	bne.n	8006c8e <xTaskResumeAll+0x2e>
	__asm volatile
 8006c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c7a:	f383 8811 	msr	BASEPRI, r3
 8006c7e:	f3bf 8f6f 	isb	sy
 8006c82:	f3bf 8f4f 	dsb	sy
 8006c86:	603b      	str	r3, [r7, #0]
}
 8006c88:	bf00      	nop
 8006c8a:	bf00      	nop
 8006c8c:	e7fd      	b.n	8006c8a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006c8e:	f000 fee3 	bl	8007a58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006c92:	4b39      	ldr	r3, [pc, #228]	@ (8006d78 <xTaskResumeAll+0x118>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	3b01      	subs	r3, #1
 8006c98:	4a37      	ldr	r2, [pc, #220]	@ (8006d78 <xTaskResumeAll+0x118>)
 8006c9a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c9c:	4b36      	ldr	r3, [pc, #216]	@ (8006d78 <xTaskResumeAll+0x118>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d161      	bne.n	8006d68 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ca4:	4b35      	ldr	r3, [pc, #212]	@ (8006d7c <xTaskResumeAll+0x11c>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d05d      	beq.n	8006d68 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006cac:	e02e      	b.n	8006d0c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cae:	4b34      	ldr	r3, [pc, #208]	@ (8006d80 <xTaskResumeAll+0x120>)
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	3318      	adds	r3, #24
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7fe ffba 	bl	8005c34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	3304      	adds	r3, #4
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f7fe ffb5 	bl	8005c34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cce:	2201      	movs	r2, #1
 8006cd0:	409a      	lsls	r2, r3
 8006cd2:	4b2c      	ldr	r3, [pc, #176]	@ (8006d84 <xTaskResumeAll+0x124>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	4a2a      	ldr	r2, [pc, #168]	@ (8006d84 <xTaskResumeAll+0x124>)
 8006cda:	6013      	str	r3, [r2, #0]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	4413      	add	r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	4a27      	ldr	r2, [pc, #156]	@ (8006d88 <xTaskResumeAll+0x128>)
 8006cea:	441a      	add	r2, r3
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	3304      	adds	r3, #4
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	4610      	mov	r0, r2
 8006cf4:	f7fe ff41 	bl	8005b7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cfc:	4b23      	ldr	r3, [pc, #140]	@ (8006d8c <xTaskResumeAll+0x12c>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d302      	bcc.n	8006d0c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006d06:	4b22      	ldr	r3, [pc, #136]	@ (8006d90 <xTaskResumeAll+0x130>)
 8006d08:	2201      	movs	r2, #1
 8006d0a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d0c:	4b1c      	ldr	r3, [pc, #112]	@ (8006d80 <xTaskResumeAll+0x120>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d1cc      	bne.n	8006cae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d001      	beq.n	8006d1e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006d1a:	f000 fb29 	bl	8007370 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006d1e:	4b1d      	ldr	r3, [pc, #116]	@ (8006d94 <xTaskResumeAll+0x134>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d010      	beq.n	8006d4c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006d2a:	f000 f837 	bl	8006d9c <xTaskIncrementTick>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d002      	beq.n	8006d3a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006d34:	4b16      	ldr	r3, [pc, #88]	@ (8006d90 <xTaskResumeAll+0x130>)
 8006d36:	2201      	movs	r2, #1
 8006d38:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	3b01      	subs	r3, #1
 8006d3e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1f1      	bne.n	8006d2a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006d46:	4b13      	ldr	r3, [pc, #76]	@ (8006d94 <xTaskResumeAll+0x134>)
 8006d48:	2200      	movs	r2, #0
 8006d4a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006d4c:	4b10      	ldr	r3, [pc, #64]	@ (8006d90 <xTaskResumeAll+0x130>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d009      	beq.n	8006d68 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006d54:	2301      	movs	r3, #1
 8006d56:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006d58:	4b0f      	ldr	r3, [pc, #60]	@ (8006d98 <xTaskResumeAll+0x138>)
 8006d5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d5e:	601a      	str	r2, [r3, #0]
 8006d60:	f3bf 8f4f 	dsb	sy
 8006d64:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d68:	f000 fea8 	bl	8007abc <vPortExitCritical>

	return xAlreadyYielded;
 8006d6c:	68bb      	ldr	r3, [r7, #8]
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	20000ce8 	.word	0x20000ce8
 8006d7c:	20000cc0 	.word	0x20000cc0
 8006d80:	20000c80 	.word	0x20000c80
 8006d84:	20000cc8 	.word	0x20000cc8
 8006d88:	20000bc4 	.word	0x20000bc4
 8006d8c:	20000bc0 	.word	0x20000bc0
 8006d90:	20000cd4 	.word	0x20000cd4
 8006d94:	20000cd0 	.word	0x20000cd0
 8006d98:	e000ed04 	.word	0xe000ed04

08006d9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b086      	sub	sp, #24
 8006da0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006da2:	2300      	movs	r3, #0
 8006da4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006da6:	4b4f      	ldr	r3, [pc, #316]	@ (8006ee4 <xTaskIncrementTick+0x148>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f040 808f 	bne.w	8006ece <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006db0:	4b4d      	ldr	r3, [pc, #308]	@ (8006ee8 <xTaskIncrementTick+0x14c>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	3301      	adds	r3, #1
 8006db6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006db8:	4a4b      	ldr	r2, [pc, #300]	@ (8006ee8 <xTaskIncrementTick+0x14c>)
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d121      	bne.n	8006e08 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006dc4:	4b49      	ldr	r3, [pc, #292]	@ (8006eec <xTaskIncrementTick+0x150>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00b      	beq.n	8006de6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dd2:	f383 8811 	msr	BASEPRI, r3
 8006dd6:	f3bf 8f6f 	isb	sy
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	603b      	str	r3, [r7, #0]
}
 8006de0:	bf00      	nop
 8006de2:	bf00      	nop
 8006de4:	e7fd      	b.n	8006de2 <xTaskIncrementTick+0x46>
 8006de6:	4b41      	ldr	r3, [pc, #260]	@ (8006eec <xTaskIncrementTick+0x150>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	60fb      	str	r3, [r7, #12]
 8006dec:	4b40      	ldr	r3, [pc, #256]	@ (8006ef0 <xTaskIncrementTick+0x154>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a3e      	ldr	r2, [pc, #248]	@ (8006eec <xTaskIncrementTick+0x150>)
 8006df2:	6013      	str	r3, [r2, #0]
 8006df4:	4a3e      	ldr	r2, [pc, #248]	@ (8006ef0 <xTaskIncrementTick+0x154>)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6013      	str	r3, [r2, #0]
 8006dfa:	4b3e      	ldr	r3, [pc, #248]	@ (8006ef4 <xTaskIncrementTick+0x158>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	4a3c      	ldr	r2, [pc, #240]	@ (8006ef4 <xTaskIncrementTick+0x158>)
 8006e02:	6013      	str	r3, [r2, #0]
 8006e04:	f000 fab4 	bl	8007370 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006e08:	4b3b      	ldr	r3, [pc, #236]	@ (8006ef8 <xTaskIncrementTick+0x15c>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d348      	bcc.n	8006ea4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e12:	4b36      	ldr	r3, [pc, #216]	@ (8006eec <xTaskIncrementTick+0x150>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d104      	bne.n	8006e26 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e1c:	4b36      	ldr	r3, [pc, #216]	@ (8006ef8 <xTaskIncrementTick+0x15c>)
 8006e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8006e22:	601a      	str	r2, [r3, #0]
					break;
 8006e24:	e03e      	b.n	8006ea4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e26:	4b31      	ldr	r3, [pc, #196]	@ (8006eec <xTaskIncrementTick+0x150>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d203      	bcs.n	8006e46 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006e3e:	4a2e      	ldr	r2, [pc, #184]	@ (8006ef8 <xTaskIncrementTick+0x15c>)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006e44:	e02e      	b.n	8006ea4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	3304      	adds	r3, #4
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7fe fef2 	bl	8005c34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d004      	beq.n	8006e62 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	3318      	adds	r3, #24
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f7fe fee9 	bl	8005c34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e66:	2201      	movs	r2, #1
 8006e68:	409a      	lsls	r2, r3
 8006e6a:	4b24      	ldr	r3, [pc, #144]	@ (8006efc <xTaskIncrementTick+0x160>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	4a22      	ldr	r2, [pc, #136]	@ (8006efc <xTaskIncrementTick+0x160>)
 8006e72:	6013      	str	r3, [r2, #0]
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e78:	4613      	mov	r3, r2
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	4413      	add	r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4a1f      	ldr	r2, [pc, #124]	@ (8006f00 <xTaskIncrementTick+0x164>)
 8006e82:	441a      	add	r2, r3
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	3304      	adds	r3, #4
 8006e88:	4619      	mov	r1, r3
 8006e8a:	4610      	mov	r0, r2
 8006e8c:	f7fe fe75 	bl	8005b7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e94:	4b1b      	ldr	r3, [pc, #108]	@ (8006f04 <xTaskIncrementTick+0x168>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d3b9      	bcc.n	8006e12 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ea2:	e7b6      	b.n	8006e12 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006ea4:	4b17      	ldr	r3, [pc, #92]	@ (8006f04 <xTaskIncrementTick+0x168>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eaa:	4915      	ldr	r1, [pc, #84]	@ (8006f00 <xTaskIncrementTick+0x164>)
 8006eac:	4613      	mov	r3, r2
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	4413      	add	r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	440b      	add	r3, r1
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d901      	bls.n	8006ec0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006ec0:	4b11      	ldr	r3, [pc, #68]	@ (8006f08 <xTaskIncrementTick+0x16c>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d007      	beq.n	8006ed8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	617b      	str	r3, [r7, #20]
 8006ecc:	e004      	b.n	8006ed8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006ece:	4b0f      	ldr	r3, [pc, #60]	@ (8006f0c <xTaskIncrementTick+0x170>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	4a0d      	ldr	r2, [pc, #52]	@ (8006f0c <xTaskIncrementTick+0x170>)
 8006ed6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006ed8:	697b      	ldr	r3, [r7, #20]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3718      	adds	r7, #24
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	20000ce8 	.word	0x20000ce8
 8006ee8:	20000cc4 	.word	0x20000cc4
 8006eec:	20000c78 	.word	0x20000c78
 8006ef0:	20000c7c 	.word	0x20000c7c
 8006ef4:	20000cd8 	.word	0x20000cd8
 8006ef8:	20000ce0 	.word	0x20000ce0
 8006efc:	20000cc8 	.word	0x20000cc8
 8006f00:	20000bc4 	.word	0x20000bc4
 8006f04:	20000bc0 	.word	0x20000bc0
 8006f08:	20000cd4 	.word	0x20000cd4
 8006f0c:	20000cd0 	.word	0x20000cd0

08006f10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006f10:	b480      	push	{r7}
 8006f12:	b087      	sub	sp, #28
 8006f14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f16:	4b2a      	ldr	r3, [pc, #168]	@ (8006fc0 <vTaskSwitchContext+0xb0>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d003      	beq.n	8006f26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006f1e:	4b29      	ldr	r3, [pc, #164]	@ (8006fc4 <vTaskSwitchContext+0xb4>)
 8006f20:	2201      	movs	r2, #1
 8006f22:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006f24:	e045      	b.n	8006fb2 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8006f26:	4b27      	ldr	r3, [pc, #156]	@ (8006fc4 <vTaskSwitchContext+0xb4>)
 8006f28:	2200      	movs	r2, #0
 8006f2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f2c:	4b26      	ldr	r3, [pc, #152]	@ (8006fc8 <vTaskSwitchContext+0xb8>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	fab3 f383 	clz	r3, r3
 8006f38:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006f3a:	7afb      	ldrb	r3, [r7, #11]
 8006f3c:	f1c3 031f 	rsb	r3, r3, #31
 8006f40:	617b      	str	r3, [r7, #20]
 8006f42:	4922      	ldr	r1, [pc, #136]	@ (8006fcc <vTaskSwitchContext+0xbc>)
 8006f44:	697a      	ldr	r2, [r7, #20]
 8006f46:	4613      	mov	r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	4413      	add	r3, r2
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	440b      	add	r3, r1
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d10b      	bne.n	8006f6e <vTaskSwitchContext+0x5e>
	__asm volatile
 8006f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f5a:	f383 8811 	msr	BASEPRI, r3
 8006f5e:	f3bf 8f6f 	isb	sy
 8006f62:	f3bf 8f4f 	dsb	sy
 8006f66:	607b      	str	r3, [r7, #4]
}
 8006f68:	bf00      	nop
 8006f6a:	bf00      	nop
 8006f6c:	e7fd      	b.n	8006f6a <vTaskSwitchContext+0x5a>
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	4613      	mov	r3, r2
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	4413      	add	r3, r2
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	4a14      	ldr	r2, [pc, #80]	@ (8006fcc <vTaskSwitchContext+0xbc>)
 8006f7a:	4413      	add	r3, r2
 8006f7c:	613b      	str	r3, [r7, #16]
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	685a      	ldr	r2, [r3, #4]
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	605a      	str	r2, [r3, #4]
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	685a      	ldr	r2, [r3, #4]
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	3308      	adds	r3, #8
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d104      	bne.n	8006f9e <vTaskSwitchContext+0x8e>
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	685a      	ldr	r2, [r3, #4]
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	605a      	str	r2, [r3, #4]
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	4a0a      	ldr	r2, [pc, #40]	@ (8006fd0 <vTaskSwitchContext+0xc0>)
 8006fa6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006fa8:	4b09      	ldr	r3, [pc, #36]	@ (8006fd0 <vTaskSwitchContext+0xc0>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	334c      	adds	r3, #76	@ 0x4c
 8006fae:	4a09      	ldr	r2, [pc, #36]	@ (8006fd4 <vTaskSwitchContext+0xc4>)
 8006fb0:	6013      	str	r3, [r2, #0]
}
 8006fb2:	bf00      	nop
 8006fb4:	371c      	adds	r7, #28
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop
 8006fc0:	20000ce8 	.word	0x20000ce8
 8006fc4:	20000cd4 	.word	0x20000cd4
 8006fc8:	20000cc8 	.word	0x20000cc8
 8006fcc:	20000bc4 	.word	0x20000bc4
 8006fd0:	20000bc0 	.word	0x20000bc0
 8006fd4:	2000002c 	.word	0x2000002c

08006fd8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d10b      	bne.n	8007000 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fec:	f383 8811 	msr	BASEPRI, r3
 8006ff0:	f3bf 8f6f 	isb	sy
 8006ff4:	f3bf 8f4f 	dsb	sy
 8006ff8:	60fb      	str	r3, [r7, #12]
}
 8006ffa:	bf00      	nop
 8006ffc:	bf00      	nop
 8006ffe:	e7fd      	b.n	8006ffc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007000:	4b07      	ldr	r3, [pc, #28]	@ (8007020 <vTaskPlaceOnEventList+0x48>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	3318      	adds	r3, #24
 8007006:	4619      	mov	r1, r3
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f7fe fdda 	bl	8005bc2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800700e:	2101      	movs	r1, #1
 8007010:	6838      	ldr	r0, [r7, #0]
 8007012:	f000 fb8d 	bl	8007730 <prvAddCurrentTaskToDelayedList>
}
 8007016:	bf00      	nop
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	20000bc0 	.word	0x20000bc0

08007024 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b086      	sub	sp, #24
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10b      	bne.n	8007052 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800703a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800703e:	f383 8811 	msr	BASEPRI, r3
 8007042:	f3bf 8f6f 	isb	sy
 8007046:	f3bf 8f4f 	dsb	sy
 800704a:	60fb      	str	r3, [r7, #12]
}
 800704c:	bf00      	nop
 800704e:	bf00      	nop
 8007050:	e7fd      	b.n	800704e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	3318      	adds	r3, #24
 8007056:	4618      	mov	r0, r3
 8007058:	f7fe fdec 	bl	8005c34 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800705c:	4b1d      	ldr	r3, [pc, #116]	@ (80070d4 <xTaskRemoveFromEventList+0xb0>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d11c      	bne.n	800709e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	3304      	adds	r3, #4
 8007068:	4618      	mov	r0, r3
 800706a:	f7fe fde3 	bl	8005c34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007072:	2201      	movs	r2, #1
 8007074:	409a      	lsls	r2, r3
 8007076:	4b18      	ldr	r3, [pc, #96]	@ (80070d8 <xTaskRemoveFromEventList+0xb4>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4313      	orrs	r3, r2
 800707c:	4a16      	ldr	r2, [pc, #88]	@ (80070d8 <xTaskRemoveFromEventList+0xb4>)
 800707e:	6013      	str	r3, [r2, #0]
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007084:	4613      	mov	r3, r2
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	4413      	add	r3, r2
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	4a13      	ldr	r2, [pc, #76]	@ (80070dc <xTaskRemoveFromEventList+0xb8>)
 800708e:	441a      	add	r2, r3
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	3304      	adds	r3, #4
 8007094:	4619      	mov	r1, r3
 8007096:	4610      	mov	r0, r2
 8007098:	f7fe fd6f 	bl	8005b7a <vListInsertEnd>
 800709c:	e005      	b.n	80070aa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	3318      	adds	r3, #24
 80070a2:	4619      	mov	r1, r3
 80070a4:	480e      	ldr	r0, [pc, #56]	@ (80070e0 <xTaskRemoveFromEventList+0xbc>)
 80070a6:	f7fe fd68 	bl	8005b7a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070ae:	4b0d      	ldr	r3, [pc, #52]	@ (80070e4 <xTaskRemoveFromEventList+0xc0>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d905      	bls.n	80070c4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80070b8:	2301      	movs	r3, #1
 80070ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80070bc:	4b0a      	ldr	r3, [pc, #40]	@ (80070e8 <xTaskRemoveFromEventList+0xc4>)
 80070be:	2201      	movs	r2, #1
 80070c0:	601a      	str	r2, [r3, #0]
 80070c2:	e001      	b.n	80070c8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80070c4:	2300      	movs	r3, #0
 80070c6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80070c8:	697b      	ldr	r3, [r7, #20]
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3718      	adds	r7, #24
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	20000ce8 	.word	0x20000ce8
 80070d8:	20000cc8 	.word	0x20000cc8
 80070dc:	20000bc4 	.word	0x20000bc4
 80070e0:	20000c80 	.word	0x20000c80
 80070e4:	20000bc0 	.word	0x20000bc0
 80070e8:	20000cd4 	.word	0x20000cd4

080070ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80070f4:	4b06      	ldr	r3, [pc, #24]	@ (8007110 <vTaskInternalSetTimeOutState+0x24>)
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80070fc:	4b05      	ldr	r3, [pc, #20]	@ (8007114 <vTaskInternalSetTimeOutState+0x28>)
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	605a      	str	r2, [r3, #4]
}
 8007104:	bf00      	nop
 8007106:	370c      	adds	r7, #12
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr
 8007110:	20000cd8 	.word	0x20000cd8
 8007114:	20000cc4 	.word	0x20000cc4

08007118 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b088      	sub	sp, #32
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d10b      	bne.n	8007140 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800712c:	f383 8811 	msr	BASEPRI, r3
 8007130:	f3bf 8f6f 	isb	sy
 8007134:	f3bf 8f4f 	dsb	sy
 8007138:	613b      	str	r3, [r7, #16]
}
 800713a:	bf00      	nop
 800713c:	bf00      	nop
 800713e:	e7fd      	b.n	800713c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d10b      	bne.n	800715e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800714a:	f383 8811 	msr	BASEPRI, r3
 800714e:	f3bf 8f6f 	isb	sy
 8007152:	f3bf 8f4f 	dsb	sy
 8007156:	60fb      	str	r3, [r7, #12]
}
 8007158:	bf00      	nop
 800715a:	bf00      	nop
 800715c:	e7fd      	b.n	800715a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800715e:	f000 fc7b 	bl	8007a58 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007162:	4b1d      	ldr	r3, [pc, #116]	@ (80071d8 <xTaskCheckForTimeOut+0xc0>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	69ba      	ldr	r2, [r7, #24]
 800716e:	1ad3      	subs	r3, r2, r3
 8007170:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800717a:	d102      	bne.n	8007182 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800717c:	2300      	movs	r3, #0
 800717e:	61fb      	str	r3, [r7, #28]
 8007180:	e023      	b.n	80071ca <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	4b15      	ldr	r3, [pc, #84]	@ (80071dc <xTaskCheckForTimeOut+0xc4>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	429a      	cmp	r2, r3
 800718c:	d007      	beq.n	800719e <xTaskCheckForTimeOut+0x86>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	69ba      	ldr	r2, [r7, #24]
 8007194:	429a      	cmp	r2, r3
 8007196:	d302      	bcc.n	800719e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007198:	2301      	movs	r3, #1
 800719a:	61fb      	str	r3, [r7, #28]
 800719c:	e015      	b.n	80071ca <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	697a      	ldr	r2, [r7, #20]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d20b      	bcs.n	80071c0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	1ad2      	subs	r2, r2, r3
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f7ff ff99 	bl	80070ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80071ba:	2300      	movs	r3, #0
 80071bc:	61fb      	str	r3, [r7, #28]
 80071be:	e004      	b.n	80071ca <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	2200      	movs	r2, #0
 80071c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80071c6:	2301      	movs	r3, #1
 80071c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80071ca:	f000 fc77 	bl	8007abc <vPortExitCritical>

	return xReturn;
 80071ce:	69fb      	ldr	r3, [r7, #28]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3720      	adds	r7, #32
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	20000cc4 	.word	0x20000cc4
 80071dc:	20000cd8 	.word	0x20000cd8

080071e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80071e0:	b480      	push	{r7}
 80071e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80071e4:	4b03      	ldr	r3, [pc, #12]	@ (80071f4 <vTaskMissedYield+0x14>)
 80071e6:	2201      	movs	r2, #1
 80071e8:	601a      	str	r2, [r3, #0]
}
 80071ea:	bf00      	nop
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr
 80071f4:	20000cd4 	.word	0x20000cd4

080071f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007200:	f000 f852 	bl	80072a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007204:	4b06      	ldr	r3, [pc, #24]	@ (8007220 <prvIdleTask+0x28>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2b01      	cmp	r3, #1
 800720a:	d9f9      	bls.n	8007200 <prvIdleTask+0x8>
			{
				taskYIELD();
 800720c:	4b05      	ldr	r3, [pc, #20]	@ (8007224 <prvIdleTask+0x2c>)
 800720e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007212:	601a      	str	r2, [r3, #0]
 8007214:	f3bf 8f4f 	dsb	sy
 8007218:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800721c:	e7f0      	b.n	8007200 <prvIdleTask+0x8>
 800721e:	bf00      	nop
 8007220:	20000bc4 	.word	0x20000bc4
 8007224:	e000ed04 	.word	0xe000ed04

08007228 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800722e:	2300      	movs	r3, #0
 8007230:	607b      	str	r3, [r7, #4]
 8007232:	e00c      	b.n	800724e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	4613      	mov	r3, r2
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	4413      	add	r3, r2
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	4a12      	ldr	r2, [pc, #72]	@ (8007288 <prvInitialiseTaskLists+0x60>)
 8007240:	4413      	add	r3, r2
 8007242:	4618      	mov	r0, r3
 8007244:	f7fe fc6c 	bl	8005b20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	3301      	adds	r3, #1
 800724c:	607b      	str	r3, [r7, #4]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2b06      	cmp	r3, #6
 8007252:	d9ef      	bls.n	8007234 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007254:	480d      	ldr	r0, [pc, #52]	@ (800728c <prvInitialiseTaskLists+0x64>)
 8007256:	f7fe fc63 	bl	8005b20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800725a:	480d      	ldr	r0, [pc, #52]	@ (8007290 <prvInitialiseTaskLists+0x68>)
 800725c:	f7fe fc60 	bl	8005b20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007260:	480c      	ldr	r0, [pc, #48]	@ (8007294 <prvInitialiseTaskLists+0x6c>)
 8007262:	f7fe fc5d 	bl	8005b20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007266:	480c      	ldr	r0, [pc, #48]	@ (8007298 <prvInitialiseTaskLists+0x70>)
 8007268:	f7fe fc5a 	bl	8005b20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800726c:	480b      	ldr	r0, [pc, #44]	@ (800729c <prvInitialiseTaskLists+0x74>)
 800726e:	f7fe fc57 	bl	8005b20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007272:	4b0b      	ldr	r3, [pc, #44]	@ (80072a0 <prvInitialiseTaskLists+0x78>)
 8007274:	4a05      	ldr	r2, [pc, #20]	@ (800728c <prvInitialiseTaskLists+0x64>)
 8007276:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007278:	4b0a      	ldr	r3, [pc, #40]	@ (80072a4 <prvInitialiseTaskLists+0x7c>)
 800727a:	4a05      	ldr	r2, [pc, #20]	@ (8007290 <prvInitialiseTaskLists+0x68>)
 800727c:	601a      	str	r2, [r3, #0]
}
 800727e:	bf00      	nop
 8007280:	3708      	adds	r7, #8
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	20000bc4 	.word	0x20000bc4
 800728c:	20000c50 	.word	0x20000c50
 8007290:	20000c64 	.word	0x20000c64
 8007294:	20000c80 	.word	0x20000c80
 8007298:	20000c94 	.word	0x20000c94
 800729c:	20000cac 	.word	0x20000cac
 80072a0:	20000c78 	.word	0x20000c78
 80072a4:	20000c7c 	.word	0x20000c7c

080072a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072ae:	e019      	b.n	80072e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80072b0:	f000 fbd2 	bl	8007a58 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072b4:	4b10      	ldr	r3, [pc, #64]	@ (80072f8 <prvCheckTasksWaitingTermination+0x50>)
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	3304      	adds	r3, #4
 80072c0:	4618      	mov	r0, r3
 80072c2:	f7fe fcb7 	bl	8005c34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80072c6:	4b0d      	ldr	r3, [pc, #52]	@ (80072fc <prvCheckTasksWaitingTermination+0x54>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	3b01      	subs	r3, #1
 80072cc:	4a0b      	ldr	r2, [pc, #44]	@ (80072fc <prvCheckTasksWaitingTermination+0x54>)
 80072ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80072d0:	4b0b      	ldr	r3, [pc, #44]	@ (8007300 <prvCheckTasksWaitingTermination+0x58>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	3b01      	subs	r3, #1
 80072d6:	4a0a      	ldr	r2, [pc, #40]	@ (8007300 <prvCheckTasksWaitingTermination+0x58>)
 80072d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80072da:	f000 fbef 	bl	8007abc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f810 	bl	8007304 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072e4:	4b06      	ldr	r3, [pc, #24]	@ (8007300 <prvCheckTasksWaitingTermination+0x58>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d1e1      	bne.n	80072b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80072ec:	bf00      	nop
 80072ee:	bf00      	nop
 80072f0:	3708      	adds	r7, #8
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	20000c94 	.word	0x20000c94
 80072fc:	20000cc0 	.word	0x20000cc0
 8007300:	20000ca8 	.word	0x20000ca8

08007304 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	334c      	adds	r3, #76	@ 0x4c
 8007310:	4618      	mov	r0, r3
 8007312:	f000 feb9 	bl	8008088 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800731c:	2b00      	cmp	r3, #0
 800731e:	d108      	bne.n	8007332 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007324:	4618      	mov	r0, r3
 8007326:	f000 fd87 	bl	8007e38 <vPortFree>
				vPortFree( pxTCB );
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 fd84 	bl	8007e38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007330:	e019      	b.n	8007366 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007338:	2b01      	cmp	r3, #1
 800733a:	d103      	bne.n	8007344 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 fd7b 	bl	8007e38 <vPortFree>
	}
 8007342:	e010      	b.n	8007366 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800734a:	2b02      	cmp	r3, #2
 800734c:	d00b      	beq.n	8007366 <prvDeleteTCB+0x62>
	__asm volatile
 800734e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007352:	f383 8811 	msr	BASEPRI, r3
 8007356:	f3bf 8f6f 	isb	sy
 800735a:	f3bf 8f4f 	dsb	sy
 800735e:	60fb      	str	r3, [r7, #12]
}
 8007360:	bf00      	nop
 8007362:	bf00      	nop
 8007364:	e7fd      	b.n	8007362 <prvDeleteTCB+0x5e>
	}
 8007366:	bf00      	nop
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
	...

08007370 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007376:	4b0c      	ldr	r3, [pc, #48]	@ (80073a8 <prvResetNextTaskUnblockTime+0x38>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d104      	bne.n	800738a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007380:	4b0a      	ldr	r3, [pc, #40]	@ (80073ac <prvResetNextTaskUnblockTime+0x3c>)
 8007382:	f04f 32ff 	mov.w	r2, #4294967295
 8007386:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007388:	e008      	b.n	800739c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800738a:	4b07      	ldr	r3, [pc, #28]	@ (80073a8 <prvResetNextTaskUnblockTime+0x38>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	4a04      	ldr	r2, [pc, #16]	@ (80073ac <prvResetNextTaskUnblockTime+0x3c>)
 800739a:	6013      	str	r3, [r2, #0]
}
 800739c:	bf00      	nop
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr
 80073a8:	20000c78 	.word	0x20000c78
 80073ac:	20000ce0 	.word	0x20000ce0

080073b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80073b6:	4b0b      	ldr	r3, [pc, #44]	@ (80073e4 <xTaskGetSchedulerState+0x34>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d102      	bne.n	80073c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80073be:	2301      	movs	r3, #1
 80073c0:	607b      	str	r3, [r7, #4]
 80073c2:	e008      	b.n	80073d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073c4:	4b08      	ldr	r3, [pc, #32]	@ (80073e8 <xTaskGetSchedulerState+0x38>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d102      	bne.n	80073d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80073cc:	2302      	movs	r3, #2
 80073ce:	607b      	str	r3, [r7, #4]
 80073d0:	e001      	b.n	80073d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80073d2:	2300      	movs	r3, #0
 80073d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80073d6:	687b      	ldr	r3, [r7, #4]
	}
 80073d8:	4618      	mov	r0, r3
 80073da:	370c      	adds	r7, #12
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr
 80073e4:	20000ccc 	.word	0x20000ccc
 80073e8:	20000ce8 	.word	0x20000ce8

080073ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80073f8:	2300      	movs	r3, #0
 80073fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d05e      	beq.n	80074c0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007406:	4b31      	ldr	r3, [pc, #196]	@ (80074cc <xTaskPriorityInherit+0xe0>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800740c:	429a      	cmp	r2, r3
 800740e:	d24e      	bcs.n	80074ae <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	2b00      	cmp	r3, #0
 8007416:	db06      	blt.n	8007426 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007418:	4b2c      	ldr	r3, [pc, #176]	@ (80074cc <xTaskPriorityInherit+0xe0>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800741e:	f1c3 0207 	rsb	r2, r3, #7
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	6959      	ldr	r1, [r3, #20]
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800742e:	4613      	mov	r3, r2
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	4413      	add	r3, r2
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	4a26      	ldr	r2, [pc, #152]	@ (80074d0 <xTaskPriorityInherit+0xe4>)
 8007438:	4413      	add	r3, r2
 800743a:	4299      	cmp	r1, r3
 800743c:	d12f      	bne.n	800749e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	3304      	adds	r3, #4
 8007442:	4618      	mov	r0, r3
 8007444:	f7fe fbf6 	bl	8005c34 <uxListRemove>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d10a      	bne.n	8007464 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007452:	2201      	movs	r2, #1
 8007454:	fa02 f303 	lsl.w	r3, r2, r3
 8007458:	43da      	mvns	r2, r3
 800745a:	4b1e      	ldr	r3, [pc, #120]	@ (80074d4 <xTaskPriorityInherit+0xe8>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4013      	ands	r3, r2
 8007460:	4a1c      	ldr	r2, [pc, #112]	@ (80074d4 <xTaskPriorityInherit+0xe8>)
 8007462:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007464:	4b19      	ldr	r3, [pc, #100]	@ (80074cc <xTaskPriorityInherit+0xe0>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007472:	2201      	movs	r2, #1
 8007474:	409a      	lsls	r2, r3
 8007476:	4b17      	ldr	r3, [pc, #92]	@ (80074d4 <xTaskPriorityInherit+0xe8>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4313      	orrs	r3, r2
 800747c:	4a15      	ldr	r2, [pc, #84]	@ (80074d4 <xTaskPriorityInherit+0xe8>)
 800747e:	6013      	str	r3, [r2, #0]
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007484:	4613      	mov	r3, r2
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	4413      	add	r3, r2
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4a10      	ldr	r2, [pc, #64]	@ (80074d0 <xTaskPriorityInherit+0xe4>)
 800748e:	441a      	add	r2, r3
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	3304      	adds	r3, #4
 8007494:	4619      	mov	r1, r3
 8007496:	4610      	mov	r0, r2
 8007498:	f7fe fb6f 	bl	8005b7a <vListInsertEnd>
 800749c:	e004      	b.n	80074a8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800749e:	4b0b      	ldr	r3, [pc, #44]	@ (80074cc <xTaskPriorityInherit+0xe0>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80074a8:	2301      	movs	r3, #1
 80074aa:	60fb      	str	r3, [r7, #12]
 80074ac:	e008      	b.n	80074c0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80074b2:	4b06      	ldr	r3, [pc, #24]	@ (80074cc <xTaskPriorityInherit+0xe0>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d201      	bcs.n	80074c0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80074bc:	2301      	movs	r3, #1
 80074be:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80074c0:	68fb      	ldr	r3, [r7, #12]
	}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3710      	adds	r7, #16
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	20000bc0 	.word	0x20000bc0
 80074d0:	20000bc4 	.word	0x20000bc4
 80074d4:	20000cc8 	.word	0x20000cc8

080074d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b086      	sub	sp, #24
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80074e4:	2300      	movs	r3, #0
 80074e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d070      	beq.n	80075d0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80074ee:	4b3b      	ldr	r3, [pc, #236]	@ (80075dc <xTaskPriorityDisinherit+0x104>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	693a      	ldr	r2, [r7, #16]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d00b      	beq.n	8007510 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80074f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074fc:	f383 8811 	msr	BASEPRI, r3
 8007500:	f3bf 8f6f 	isb	sy
 8007504:	f3bf 8f4f 	dsb	sy
 8007508:	60fb      	str	r3, [r7, #12]
}
 800750a:	bf00      	nop
 800750c:	bf00      	nop
 800750e:	e7fd      	b.n	800750c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007514:	2b00      	cmp	r3, #0
 8007516:	d10b      	bne.n	8007530 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800751c:	f383 8811 	msr	BASEPRI, r3
 8007520:	f3bf 8f6f 	isb	sy
 8007524:	f3bf 8f4f 	dsb	sy
 8007528:	60bb      	str	r3, [r7, #8]
}
 800752a:	bf00      	nop
 800752c:	bf00      	nop
 800752e:	e7fd      	b.n	800752c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007534:	1e5a      	subs	r2, r3, #1
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007542:	429a      	cmp	r2, r3
 8007544:	d044      	beq.n	80075d0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800754a:	2b00      	cmp	r3, #0
 800754c:	d140      	bne.n	80075d0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	3304      	adds	r3, #4
 8007552:	4618      	mov	r0, r3
 8007554:	f7fe fb6e 	bl	8005c34 <uxListRemove>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d115      	bne.n	800758a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007562:	491f      	ldr	r1, [pc, #124]	@ (80075e0 <xTaskPriorityDisinherit+0x108>)
 8007564:	4613      	mov	r3, r2
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	4413      	add	r3, r2
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	440b      	add	r3, r1
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d10a      	bne.n	800758a <xTaskPriorityDisinherit+0xb2>
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007578:	2201      	movs	r2, #1
 800757a:	fa02 f303 	lsl.w	r3, r2, r3
 800757e:	43da      	mvns	r2, r3
 8007580:	4b18      	ldr	r3, [pc, #96]	@ (80075e4 <xTaskPriorityDisinherit+0x10c>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4013      	ands	r3, r2
 8007586:	4a17      	ldr	r2, [pc, #92]	@ (80075e4 <xTaskPriorityDisinherit+0x10c>)
 8007588:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007596:	f1c3 0207 	rsb	r2, r3, #7
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a2:	2201      	movs	r2, #1
 80075a4:	409a      	lsls	r2, r3
 80075a6:	4b0f      	ldr	r3, [pc, #60]	@ (80075e4 <xTaskPriorityDisinherit+0x10c>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	4a0d      	ldr	r2, [pc, #52]	@ (80075e4 <xTaskPriorityDisinherit+0x10c>)
 80075ae:	6013      	str	r3, [r2, #0]
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075b4:	4613      	mov	r3, r2
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	4413      	add	r3, r2
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	4a08      	ldr	r2, [pc, #32]	@ (80075e0 <xTaskPriorityDisinherit+0x108>)
 80075be:	441a      	add	r2, r3
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	3304      	adds	r3, #4
 80075c4:	4619      	mov	r1, r3
 80075c6:	4610      	mov	r0, r2
 80075c8:	f7fe fad7 	bl	8005b7a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80075cc:	2301      	movs	r3, #1
 80075ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80075d0:	697b      	ldr	r3, [r7, #20]
	}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3718      	adds	r7, #24
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	20000bc0 	.word	0x20000bc0
 80075e0:	20000bc4 	.word	0x20000bc4
 80075e4:	20000cc8 	.word	0x20000cc8

080075e8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b088      	sub	sp, #32
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80075f6:	2301      	movs	r3, #1
 80075f8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d079      	beq.n	80076f4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007600:	69bb      	ldr	r3, [r7, #24]
 8007602:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007604:	2b00      	cmp	r3, #0
 8007606:	d10b      	bne.n	8007620 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800760c:	f383 8811 	msr	BASEPRI, r3
 8007610:	f3bf 8f6f 	isb	sy
 8007614:	f3bf 8f4f 	dsb	sy
 8007618:	60fb      	str	r3, [r7, #12]
}
 800761a:	bf00      	nop
 800761c:	bf00      	nop
 800761e:	e7fd      	b.n	800761c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007624:	683a      	ldr	r2, [r7, #0]
 8007626:	429a      	cmp	r2, r3
 8007628:	d902      	bls.n	8007630 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	61fb      	str	r3, [r7, #28]
 800762e:	e002      	b.n	8007636 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007634:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800763a:	69fa      	ldr	r2, [r7, #28]
 800763c:	429a      	cmp	r2, r3
 800763e:	d059      	beq.n	80076f4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007644:	697a      	ldr	r2, [r7, #20]
 8007646:	429a      	cmp	r2, r3
 8007648:	d154      	bne.n	80076f4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800764a:	4b2c      	ldr	r3, [pc, #176]	@ (80076fc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	69ba      	ldr	r2, [r7, #24]
 8007650:	429a      	cmp	r2, r3
 8007652:	d10b      	bne.n	800766c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007658:	f383 8811 	msr	BASEPRI, r3
 800765c:	f3bf 8f6f 	isb	sy
 8007660:	f3bf 8f4f 	dsb	sy
 8007664:	60bb      	str	r3, [r7, #8]
}
 8007666:	bf00      	nop
 8007668:	bf00      	nop
 800766a:	e7fd      	b.n	8007668 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007670:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	69fa      	ldr	r2, [r7, #28]
 8007676:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	699b      	ldr	r3, [r3, #24]
 800767c:	2b00      	cmp	r3, #0
 800767e:	db04      	blt.n	800768a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	f1c3 0207 	rsb	r2, r3, #7
 8007686:	69bb      	ldr	r3, [r7, #24]
 8007688:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	6959      	ldr	r1, [r3, #20]
 800768e:	693a      	ldr	r2, [r7, #16]
 8007690:	4613      	mov	r3, r2
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	4413      	add	r3, r2
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	4a19      	ldr	r2, [pc, #100]	@ (8007700 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800769a:	4413      	add	r3, r2
 800769c:	4299      	cmp	r1, r3
 800769e:	d129      	bne.n	80076f4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	3304      	adds	r3, #4
 80076a4:	4618      	mov	r0, r3
 80076a6:	f7fe fac5 	bl	8005c34 <uxListRemove>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d10a      	bne.n	80076c6 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076b4:	2201      	movs	r2, #1
 80076b6:	fa02 f303 	lsl.w	r3, r2, r3
 80076ba:	43da      	mvns	r2, r3
 80076bc:	4b11      	ldr	r3, [pc, #68]	@ (8007704 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4013      	ands	r3, r2
 80076c2:	4a10      	ldr	r2, [pc, #64]	@ (8007704 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80076c4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ca:	2201      	movs	r2, #1
 80076cc:	409a      	lsls	r2, r3
 80076ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007704 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	4a0b      	ldr	r2, [pc, #44]	@ (8007704 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80076d6:	6013      	str	r3, [r2, #0]
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076dc:	4613      	mov	r3, r2
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	4413      	add	r3, r2
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	4a06      	ldr	r2, [pc, #24]	@ (8007700 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80076e6:	441a      	add	r2, r3
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	3304      	adds	r3, #4
 80076ec:	4619      	mov	r1, r3
 80076ee:	4610      	mov	r0, r2
 80076f0:	f7fe fa43 	bl	8005b7a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80076f4:	bf00      	nop
 80076f6:	3720      	adds	r7, #32
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	20000bc0 	.word	0x20000bc0
 8007700:	20000bc4 	.word	0x20000bc4
 8007704:	20000cc8 	.word	0x20000cc8

08007708 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007708:	b480      	push	{r7}
 800770a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800770c:	4b07      	ldr	r3, [pc, #28]	@ (800772c <pvTaskIncrementMutexHeldCount+0x24>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d004      	beq.n	800771e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007714:	4b05      	ldr	r3, [pc, #20]	@ (800772c <pvTaskIncrementMutexHeldCount+0x24>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800771a:	3201      	adds	r2, #1
 800771c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800771e:	4b03      	ldr	r3, [pc, #12]	@ (800772c <pvTaskIncrementMutexHeldCount+0x24>)
 8007720:	681b      	ldr	r3, [r3, #0]
	}
 8007722:	4618      	mov	r0, r3
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr
 800772c:	20000bc0 	.word	0x20000bc0

08007730 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800773a:	4b29      	ldr	r3, [pc, #164]	@ (80077e0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007740:	4b28      	ldr	r3, [pc, #160]	@ (80077e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	3304      	adds	r3, #4
 8007746:	4618      	mov	r0, r3
 8007748:	f7fe fa74 	bl	8005c34 <uxListRemove>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d10b      	bne.n	800776a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007752:	4b24      	ldr	r3, [pc, #144]	@ (80077e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007758:	2201      	movs	r2, #1
 800775a:	fa02 f303 	lsl.w	r3, r2, r3
 800775e:	43da      	mvns	r2, r3
 8007760:	4b21      	ldr	r3, [pc, #132]	@ (80077e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4013      	ands	r3, r2
 8007766:	4a20      	ldr	r2, [pc, #128]	@ (80077e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007768:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007770:	d10a      	bne.n	8007788 <prvAddCurrentTaskToDelayedList+0x58>
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d007      	beq.n	8007788 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007778:	4b1a      	ldr	r3, [pc, #104]	@ (80077e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	3304      	adds	r3, #4
 800777e:	4619      	mov	r1, r3
 8007780:	481a      	ldr	r0, [pc, #104]	@ (80077ec <prvAddCurrentTaskToDelayedList+0xbc>)
 8007782:	f7fe f9fa 	bl	8005b7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007786:	e026      	b.n	80077d6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4413      	add	r3, r2
 800778e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007790:	4b14      	ldr	r3, [pc, #80]	@ (80077e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68ba      	ldr	r2, [r7, #8]
 8007796:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007798:	68ba      	ldr	r2, [r7, #8]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	429a      	cmp	r2, r3
 800779e:	d209      	bcs.n	80077b4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077a0:	4b13      	ldr	r3, [pc, #76]	@ (80077f0 <prvAddCurrentTaskToDelayedList+0xc0>)
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	4b0f      	ldr	r3, [pc, #60]	@ (80077e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	3304      	adds	r3, #4
 80077aa:	4619      	mov	r1, r3
 80077ac:	4610      	mov	r0, r2
 80077ae:	f7fe fa08 	bl	8005bc2 <vListInsert>
}
 80077b2:	e010      	b.n	80077d6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077b4:	4b0f      	ldr	r3, [pc, #60]	@ (80077f4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	4b0a      	ldr	r3, [pc, #40]	@ (80077e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	3304      	adds	r3, #4
 80077be:	4619      	mov	r1, r3
 80077c0:	4610      	mov	r0, r2
 80077c2:	f7fe f9fe 	bl	8005bc2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80077c6:	4b0c      	ldr	r3, [pc, #48]	@ (80077f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68ba      	ldr	r2, [r7, #8]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d202      	bcs.n	80077d6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80077d0:	4a09      	ldr	r2, [pc, #36]	@ (80077f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	6013      	str	r3, [r2, #0]
}
 80077d6:	bf00      	nop
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	20000cc4 	.word	0x20000cc4
 80077e4:	20000bc0 	.word	0x20000bc0
 80077e8:	20000cc8 	.word	0x20000cc8
 80077ec:	20000cac 	.word	0x20000cac
 80077f0:	20000c7c 	.word	0x20000c7c
 80077f4:	20000c78 	.word	0x20000c78
 80077f8:	20000ce0 	.word	0x20000ce0

080077fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	3b04      	subs	r3, #4
 800780c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007814:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	3b04      	subs	r3, #4
 800781a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	f023 0201 	bic.w	r2, r3, #1
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	3b04      	subs	r3, #4
 800782a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800782c:	4a0c      	ldr	r2, [pc, #48]	@ (8007860 <pxPortInitialiseStack+0x64>)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	3b14      	subs	r3, #20
 8007836:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	3b04      	subs	r3, #4
 8007842:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f06f 0202 	mvn.w	r2, #2
 800784a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	3b20      	subs	r3, #32
 8007850:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007852:	68fb      	ldr	r3, [r7, #12]
}
 8007854:	4618      	mov	r0, r3
 8007856:	3714      	adds	r7, #20
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr
 8007860:	08007865 	.word	0x08007865

08007864 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007864:	b480      	push	{r7}
 8007866:	b085      	sub	sp, #20
 8007868:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800786a:	2300      	movs	r3, #0
 800786c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800786e:	4b13      	ldr	r3, [pc, #76]	@ (80078bc <prvTaskExitError+0x58>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007876:	d00b      	beq.n	8007890 <prvTaskExitError+0x2c>
	__asm volatile
 8007878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800787c:	f383 8811 	msr	BASEPRI, r3
 8007880:	f3bf 8f6f 	isb	sy
 8007884:	f3bf 8f4f 	dsb	sy
 8007888:	60fb      	str	r3, [r7, #12]
}
 800788a:	bf00      	nop
 800788c:	bf00      	nop
 800788e:	e7fd      	b.n	800788c <prvTaskExitError+0x28>
	__asm volatile
 8007890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007894:	f383 8811 	msr	BASEPRI, r3
 8007898:	f3bf 8f6f 	isb	sy
 800789c:	f3bf 8f4f 	dsb	sy
 80078a0:	60bb      	str	r3, [r7, #8]
}
 80078a2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80078a4:	bf00      	nop
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d0fc      	beq.n	80078a6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80078ac:	bf00      	nop
 80078ae:	bf00      	nop
 80078b0:	3714      	adds	r7, #20
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr
 80078ba:	bf00      	nop
 80078bc:	20000028 	.word	0x20000028

080078c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80078c0:	4b07      	ldr	r3, [pc, #28]	@ (80078e0 <pxCurrentTCBConst2>)
 80078c2:	6819      	ldr	r1, [r3, #0]
 80078c4:	6808      	ldr	r0, [r1, #0]
 80078c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ca:	f380 8809 	msr	PSP, r0
 80078ce:	f3bf 8f6f 	isb	sy
 80078d2:	f04f 0000 	mov.w	r0, #0
 80078d6:	f380 8811 	msr	BASEPRI, r0
 80078da:	4770      	bx	lr
 80078dc:	f3af 8000 	nop.w

080078e0 <pxCurrentTCBConst2>:
 80078e0:	20000bc0 	.word	0x20000bc0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80078e4:	bf00      	nop
 80078e6:	bf00      	nop

080078e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80078e8:	4808      	ldr	r0, [pc, #32]	@ (800790c <prvPortStartFirstTask+0x24>)
 80078ea:	6800      	ldr	r0, [r0, #0]
 80078ec:	6800      	ldr	r0, [r0, #0]
 80078ee:	f380 8808 	msr	MSP, r0
 80078f2:	f04f 0000 	mov.w	r0, #0
 80078f6:	f380 8814 	msr	CONTROL, r0
 80078fa:	b662      	cpsie	i
 80078fc:	b661      	cpsie	f
 80078fe:	f3bf 8f4f 	dsb	sy
 8007902:	f3bf 8f6f 	isb	sy
 8007906:	df00      	svc	0
 8007908:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800790a:	bf00      	nop
 800790c:	e000ed08 	.word	0xe000ed08

08007910 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b086      	sub	sp, #24
 8007914:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007916:	4b47      	ldr	r3, [pc, #284]	@ (8007a34 <xPortStartScheduler+0x124>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a47      	ldr	r2, [pc, #284]	@ (8007a38 <xPortStartScheduler+0x128>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d10b      	bne.n	8007938 <xPortStartScheduler+0x28>
	__asm volatile
 8007920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007924:	f383 8811 	msr	BASEPRI, r3
 8007928:	f3bf 8f6f 	isb	sy
 800792c:	f3bf 8f4f 	dsb	sy
 8007930:	613b      	str	r3, [r7, #16]
}
 8007932:	bf00      	nop
 8007934:	bf00      	nop
 8007936:	e7fd      	b.n	8007934 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007938:	4b3e      	ldr	r3, [pc, #248]	@ (8007a34 <xPortStartScheduler+0x124>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a3f      	ldr	r2, [pc, #252]	@ (8007a3c <xPortStartScheduler+0x12c>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d10b      	bne.n	800795a <xPortStartScheduler+0x4a>
	__asm volatile
 8007942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007946:	f383 8811 	msr	BASEPRI, r3
 800794a:	f3bf 8f6f 	isb	sy
 800794e:	f3bf 8f4f 	dsb	sy
 8007952:	60fb      	str	r3, [r7, #12]
}
 8007954:	bf00      	nop
 8007956:	bf00      	nop
 8007958:	e7fd      	b.n	8007956 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800795a:	4b39      	ldr	r3, [pc, #228]	@ (8007a40 <xPortStartScheduler+0x130>)
 800795c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	b2db      	uxtb	r3, r3
 8007964:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	22ff      	movs	r2, #255	@ 0xff
 800796a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	b2db      	uxtb	r3, r3
 8007972:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007974:	78fb      	ldrb	r3, [r7, #3]
 8007976:	b2db      	uxtb	r3, r3
 8007978:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800797c:	b2da      	uxtb	r2, r3
 800797e:	4b31      	ldr	r3, [pc, #196]	@ (8007a44 <xPortStartScheduler+0x134>)
 8007980:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007982:	4b31      	ldr	r3, [pc, #196]	@ (8007a48 <xPortStartScheduler+0x138>)
 8007984:	2207      	movs	r2, #7
 8007986:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007988:	e009      	b.n	800799e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800798a:	4b2f      	ldr	r3, [pc, #188]	@ (8007a48 <xPortStartScheduler+0x138>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	3b01      	subs	r3, #1
 8007990:	4a2d      	ldr	r2, [pc, #180]	@ (8007a48 <xPortStartScheduler+0x138>)
 8007992:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007994:	78fb      	ldrb	r3, [r7, #3]
 8007996:	b2db      	uxtb	r3, r3
 8007998:	005b      	lsls	r3, r3, #1
 800799a:	b2db      	uxtb	r3, r3
 800799c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800799e:	78fb      	ldrb	r3, [r7, #3]
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079a6:	2b80      	cmp	r3, #128	@ 0x80
 80079a8:	d0ef      	beq.n	800798a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80079aa:	4b27      	ldr	r3, [pc, #156]	@ (8007a48 <xPortStartScheduler+0x138>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f1c3 0307 	rsb	r3, r3, #7
 80079b2:	2b04      	cmp	r3, #4
 80079b4:	d00b      	beq.n	80079ce <xPortStartScheduler+0xbe>
	__asm volatile
 80079b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ba:	f383 8811 	msr	BASEPRI, r3
 80079be:	f3bf 8f6f 	isb	sy
 80079c2:	f3bf 8f4f 	dsb	sy
 80079c6:	60bb      	str	r3, [r7, #8]
}
 80079c8:	bf00      	nop
 80079ca:	bf00      	nop
 80079cc:	e7fd      	b.n	80079ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80079ce:	4b1e      	ldr	r3, [pc, #120]	@ (8007a48 <xPortStartScheduler+0x138>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	021b      	lsls	r3, r3, #8
 80079d4:	4a1c      	ldr	r2, [pc, #112]	@ (8007a48 <xPortStartScheduler+0x138>)
 80079d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80079d8:	4b1b      	ldr	r3, [pc, #108]	@ (8007a48 <xPortStartScheduler+0x138>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80079e0:	4a19      	ldr	r2, [pc, #100]	@ (8007a48 <xPortStartScheduler+0x138>)
 80079e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	b2da      	uxtb	r2, r3
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80079ec:	4b17      	ldr	r3, [pc, #92]	@ (8007a4c <xPortStartScheduler+0x13c>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a16      	ldr	r2, [pc, #88]	@ (8007a4c <xPortStartScheduler+0x13c>)
 80079f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80079f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80079f8:	4b14      	ldr	r3, [pc, #80]	@ (8007a4c <xPortStartScheduler+0x13c>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a13      	ldr	r2, [pc, #76]	@ (8007a4c <xPortStartScheduler+0x13c>)
 80079fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007a02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007a04:	f000 f8da 	bl	8007bbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007a08:	4b11      	ldr	r3, [pc, #68]	@ (8007a50 <xPortStartScheduler+0x140>)
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007a0e:	f000 f8f9 	bl	8007c04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007a12:	4b10      	ldr	r3, [pc, #64]	@ (8007a54 <xPortStartScheduler+0x144>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a0f      	ldr	r2, [pc, #60]	@ (8007a54 <xPortStartScheduler+0x144>)
 8007a18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007a1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007a1e:	f7ff ff63 	bl	80078e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007a22:	f7ff fa75 	bl	8006f10 <vTaskSwitchContext>
	prvTaskExitError();
 8007a26:	f7ff ff1d 	bl	8007864 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3718      	adds	r7, #24
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	e000ed00 	.word	0xe000ed00
 8007a38:	410fc271 	.word	0x410fc271
 8007a3c:	410fc270 	.word	0x410fc270
 8007a40:	e000e400 	.word	0xe000e400
 8007a44:	20000cec 	.word	0x20000cec
 8007a48:	20000cf0 	.word	0x20000cf0
 8007a4c:	e000ed20 	.word	0xe000ed20
 8007a50:	20000028 	.word	0x20000028
 8007a54:	e000ef34 	.word	0xe000ef34

08007a58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a62:	f383 8811 	msr	BASEPRI, r3
 8007a66:	f3bf 8f6f 	isb	sy
 8007a6a:	f3bf 8f4f 	dsb	sy
 8007a6e:	607b      	str	r3, [r7, #4]
}
 8007a70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007a72:	4b10      	ldr	r3, [pc, #64]	@ (8007ab4 <vPortEnterCritical+0x5c>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	3301      	adds	r3, #1
 8007a78:	4a0e      	ldr	r2, [pc, #56]	@ (8007ab4 <vPortEnterCritical+0x5c>)
 8007a7a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007a7c:	4b0d      	ldr	r3, [pc, #52]	@ (8007ab4 <vPortEnterCritical+0x5c>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d110      	bne.n	8007aa6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007a84:	4b0c      	ldr	r3, [pc, #48]	@ (8007ab8 <vPortEnterCritical+0x60>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00b      	beq.n	8007aa6 <vPortEnterCritical+0x4e>
	__asm volatile
 8007a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a92:	f383 8811 	msr	BASEPRI, r3
 8007a96:	f3bf 8f6f 	isb	sy
 8007a9a:	f3bf 8f4f 	dsb	sy
 8007a9e:	603b      	str	r3, [r7, #0]
}
 8007aa0:	bf00      	nop
 8007aa2:	bf00      	nop
 8007aa4:	e7fd      	b.n	8007aa2 <vPortEnterCritical+0x4a>
	}
}
 8007aa6:	bf00      	nop
 8007aa8:	370c      	adds	r7, #12
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop
 8007ab4:	20000028 	.word	0x20000028
 8007ab8:	e000ed04 	.word	0xe000ed04

08007abc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007ac2:	4b12      	ldr	r3, [pc, #72]	@ (8007b0c <vPortExitCritical+0x50>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d10b      	bne.n	8007ae2 <vPortExitCritical+0x26>
	__asm volatile
 8007aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ace:	f383 8811 	msr	BASEPRI, r3
 8007ad2:	f3bf 8f6f 	isb	sy
 8007ad6:	f3bf 8f4f 	dsb	sy
 8007ada:	607b      	str	r3, [r7, #4]
}
 8007adc:	bf00      	nop
 8007ade:	bf00      	nop
 8007ae0:	e7fd      	b.n	8007ade <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8007b0c <vPortExitCritical+0x50>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	4a08      	ldr	r2, [pc, #32]	@ (8007b0c <vPortExitCritical+0x50>)
 8007aea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007aec:	4b07      	ldr	r3, [pc, #28]	@ (8007b0c <vPortExitCritical+0x50>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d105      	bne.n	8007b00 <vPortExitCritical+0x44>
 8007af4:	2300      	movs	r3, #0
 8007af6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	f383 8811 	msr	BASEPRI, r3
}
 8007afe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007b00:	bf00      	nop
 8007b02:	370c      	adds	r7, #12
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr
 8007b0c:	20000028 	.word	0x20000028

08007b10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007b10:	f3ef 8009 	mrs	r0, PSP
 8007b14:	f3bf 8f6f 	isb	sy
 8007b18:	4b15      	ldr	r3, [pc, #84]	@ (8007b70 <pxCurrentTCBConst>)
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	f01e 0f10 	tst.w	lr, #16
 8007b20:	bf08      	it	eq
 8007b22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007b26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b2a:	6010      	str	r0, [r2, #0]
 8007b2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007b30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007b34:	f380 8811 	msr	BASEPRI, r0
 8007b38:	f3bf 8f4f 	dsb	sy
 8007b3c:	f3bf 8f6f 	isb	sy
 8007b40:	f7ff f9e6 	bl	8006f10 <vTaskSwitchContext>
 8007b44:	f04f 0000 	mov.w	r0, #0
 8007b48:	f380 8811 	msr	BASEPRI, r0
 8007b4c:	bc09      	pop	{r0, r3}
 8007b4e:	6819      	ldr	r1, [r3, #0]
 8007b50:	6808      	ldr	r0, [r1, #0]
 8007b52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b56:	f01e 0f10 	tst.w	lr, #16
 8007b5a:	bf08      	it	eq
 8007b5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007b60:	f380 8809 	msr	PSP, r0
 8007b64:	f3bf 8f6f 	isb	sy
 8007b68:	4770      	bx	lr
 8007b6a:	bf00      	nop
 8007b6c:	f3af 8000 	nop.w

08007b70 <pxCurrentTCBConst>:
 8007b70:	20000bc0 	.word	0x20000bc0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007b74:	bf00      	nop
 8007b76:	bf00      	nop

08007b78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b82:	f383 8811 	msr	BASEPRI, r3
 8007b86:	f3bf 8f6f 	isb	sy
 8007b8a:	f3bf 8f4f 	dsb	sy
 8007b8e:	607b      	str	r3, [r7, #4]
}
 8007b90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007b92:	f7ff f903 	bl	8006d9c <xTaskIncrementTick>
 8007b96:	4603      	mov	r3, r0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d003      	beq.n	8007ba4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007b9c:	4b06      	ldr	r3, [pc, #24]	@ (8007bb8 <SysTick_Handler+0x40>)
 8007b9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ba2:	601a      	str	r2, [r3, #0]
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	f383 8811 	msr	BASEPRI, r3
}
 8007bae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007bb0:	bf00      	nop
 8007bb2:	3708      	adds	r7, #8
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	e000ed04 	.word	0xe000ed04

08007bbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8007bf0 <vPortSetupTimerInterrupt+0x34>)
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8007bf4 <vPortSetupTimerInterrupt+0x38>)
 8007bc8:	2200      	movs	r2, #0
 8007bca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8007bf8 <vPortSetupTimerInterrupt+0x3c>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a0a      	ldr	r2, [pc, #40]	@ (8007bfc <vPortSetupTimerInterrupt+0x40>)
 8007bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8007bd6:	099b      	lsrs	r3, r3, #6
 8007bd8:	4a09      	ldr	r2, [pc, #36]	@ (8007c00 <vPortSetupTimerInterrupt+0x44>)
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007bde:	4b04      	ldr	r3, [pc, #16]	@ (8007bf0 <vPortSetupTimerInterrupt+0x34>)
 8007be0:	2207      	movs	r2, #7
 8007be2:	601a      	str	r2, [r3, #0]
}
 8007be4:	bf00      	nop
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	e000e010 	.word	0xe000e010
 8007bf4:	e000e018 	.word	0xe000e018
 8007bf8:	2000001c 	.word	0x2000001c
 8007bfc:	10624dd3 	.word	0x10624dd3
 8007c00:	e000e014 	.word	0xe000e014

08007c04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007c04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007c14 <vPortEnableVFP+0x10>
 8007c08:	6801      	ldr	r1, [r0, #0]
 8007c0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007c0e:	6001      	str	r1, [r0, #0]
 8007c10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007c12:	bf00      	nop
 8007c14:	e000ed88 	.word	0xe000ed88

08007c18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007c18:	b480      	push	{r7}
 8007c1a:	b085      	sub	sp, #20
 8007c1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007c1e:	f3ef 8305 	mrs	r3, IPSR
 8007c22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2b0f      	cmp	r3, #15
 8007c28:	d915      	bls.n	8007c56 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007c2a:	4a18      	ldr	r2, [pc, #96]	@ (8007c8c <vPortValidateInterruptPriority+0x74>)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	4413      	add	r3, r2
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007c34:	4b16      	ldr	r3, [pc, #88]	@ (8007c90 <vPortValidateInterruptPriority+0x78>)
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	7afa      	ldrb	r2, [r7, #11]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d20b      	bcs.n	8007c56 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c42:	f383 8811 	msr	BASEPRI, r3
 8007c46:	f3bf 8f6f 	isb	sy
 8007c4a:	f3bf 8f4f 	dsb	sy
 8007c4e:	607b      	str	r3, [r7, #4]
}
 8007c50:	bf00      	nop
 8007c52:	bf00      	nop
 8007c54:	e7fd      	b.n	8007c52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007c56:	4b0f      	ldr	r3, [pc, #60]	@ (8007c94 <vPortValidateInterruptPriority+0x7c>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8007c98 <vPortValidateInterruptPriority+0x80>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d90b      	bls.n	8007c7e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c6a:	f383 8811 	msr	BASEPRI, r3
 8007c6e:	f3bf 8f6f 	isb	sy
 8007c72:	f3bf 8f4f 	dsb	sy
 8007c76:	603b      	str	r3, [r7, #0]
}
 8007c78:	bf00      	nop
 8007c7a:	bf00      	nop
 8007c7c:	e7fd      	b.n	8007c7a <vPortValidateInterruptPriority+0x62>
	}
 8007c7e:	bf00      	nop
 8007c80:	3714      	adds	r7, #20
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	e000e3f0 	.word	0xe000e3f0
 8007c90:	20000cec 	.word	0x20000cec
 8007c94:	e000ed0c 	.word	0xe000ed0c
 8007c98:	20000cf0 	.word	0x20000cf0

08007c9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b08a      	sub	sp, #40	@ 0x28
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007ca8:	f7fe ffcc 	bl	8006c44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007cac:	4b5c      	ldr	r3, [pc, #368]	@ (8007e20 <pvPortMalloc+0x184>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d101      	bne.n	8007cb8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007cb4:	f000 f924 	bl	8007f00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007cb8:	4b5a      	ldr	r3, [pc, #360]	@ (8007e24 <pvPortMalloc+0x188>)
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	f040 8095 	bne.w	8007df0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d01e      	beq.n	8007d0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007ccc:	2208      	movs	r2, #8
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f003 0307 	and.w	r3, r3, #7
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d015      	beq.n	8007d0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f023 0307 	bic.w	r3, r3, #7
 8007ce4:	3308      	adds	r3, #8
 8007ce6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f003 0307 	and.w	r3, r3, #7
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00b      	beq.n	8007d0a <pvPortMalloc+0x6e>
	__asm volatile
 8007cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cf6:	f383 8811 	msr	BASEPRI, r3
 8007cfa:	f3bf 8f6f 	isb	sy
 8007cfe:	f3bf 8f4f 	dsb	sy
 8007d02:	617b      	str	r3, [r7, #20]
}
 8007d04:	bf00      	nop
 8007d06:	bf00      	nop
 8007d08:	e7fd      	b.n	8007d06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d06f      	beq.n	8007df0 <pvPortMalloc+0x154>
 8007d10:	4b45      	ldr	r3, [pc, #276]	@ (8007e28 <pvPortMalloc+0x18c>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d86a      	bhi.n	8007df0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007d1a:	4b44      	ldr	r3, [pc, #272]	@ (8007e2c <pvPortMalloc+0x190>)
 8007d1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007d1e:	4b43      	ldr	r3, [pc, #268]	@ (8007e2c <pvPortMalloc+0x190>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d24:	e004      	b.n	8007d30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d903      	bls.n	8007d42 <pvPortMalloc+0xa6>
 8007d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1f1      	bne.n	8007d26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d42:	4b37      	ldr	r3, [pc, #220]	@ (8007e20 <pvPortMalloc+0x184>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d051      	beq.n	8007df0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d4c:	6a3b      	ldr	r3, [r7, #32]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2208      	movs	r2, #8
 8007d52:	4413      	add	r3, r2
 8007d54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	6a3b      	ldr	r3, [r7, #32]
 8007d5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d60:	685a      	ldr	r2, [r3, #4]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	1ad2      	subs	r2, r2, r3
 8007d66:	2308      	movs	r3, #8
 8007d68:	005b      	lsls	r3, r3, #1
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d920      	bls.n	8007db0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007d6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4413      	add	r3, r2
 8007d74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	f003 0307 	and.w	r3, r3, #7
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d00b      	beq.n	8007d98 <pvPortMalloc+0xfc>
	__asm volatile
 8007d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d84:	f383 8811 	msr	BASEPRI, r3
 8007d88:	f3bf 8f6f 	isb	sy
 8007d8c:	f3bf 8f4f 	dsb	sy
 8007d90:	613b      	str	r3, [r7, #16]
}
 8007d92:	bf00      	nop
 8007d94:	bf00      	nop
 8007d96:	e7fd      	b.n	8007d94 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d9a:	685a      	ldr	r2, [r3, #4]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	1ad2      	subs	r2, r2, r3
 8007da0:	69bb      	ldr	r3, [r7, #24]
 8007da2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007daa:	69b8      	ldr	r0, [r7, #24]
 8007dac:	f000 f90a 	bl	8007fc4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007db0:	4b1d      	ldr	r3, [pc, #116]	@ (8007e28 <pvPortMalloc+0x18c>)
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	1ad3      	subs	r3, r2, r3
 8007dba:	4a1b      	ldr	r2, [pc, #108]	@ (8007e28 <pvPortMalloc+0x18c>)
 8007dbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8007e28 <pvPortMalloc+0x18c>)
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	4b1b      	ldr	r3, [pc, #108]	@ (8007e30 <pvPortMalloc+0x194>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d203      	bcs.n	8007dd2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007dca:	4b17      	ldr	r3, [pc, #92]	@ (8007e28 <pvPortMalloc+0x18c>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a18      	ldr	r2, [pc, #96]	@ (8007e30 <pvPortMalloc+0x194>)
 8007dd0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd4:	685a      	ldr	r2, [r3, #4]
 8007dd6:	4b13      	ldr	r3, [pc, #76]	@ (8007e24 <pvPortMalloc+0x188>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	431a      	orrs	r2, r3
 8007ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de2:	2200      	movs	r2, #0
 8007de4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007de6:	4b13      	ldr	r3, [pc, #76]	@ (8007e34 <pvPortMalloc+0x198>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	3301      	adds	r3, #1
 8007dec:	4a11      	ldr	r2, [pc, #68]	@ (8007e34 <pvPortMalloc+0x198>)
 8007dee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007df0:	f7fe ff36 	bl	8006c60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	f003 0307 	and.w	r3, r3, #7
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00b      	beq.n	8007e16 <pvPortMalloc+0x17a>
	__asm volatile
 8007dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e02:	f383 8811 	msr	BASEPRI, r3
 8007e06:	f3bf 8f6f 	isb	sy
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	60fb      	str	r3, [r7, #12]
}
 8007e10:	bf00      	nop
 8007e12:	bf00      	nop
 8007e14:	e7fd      	b.n	8007e12 <pvPortMalloc+0x176>
	return pvReturn;
 8007e16:	69fb      	ldr	r3, [r7, #28]
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3728      	adds	r7, #40	@ 0x28
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	200048fc 	.word	0x200048fc
 8007e24:	20004910 	.word	0x20004910
 8007e28:	20004900 	.word	0x20004900
 8007e2c:	200048f4 	.word	0x200048f4
 8007e30:	20004904 	.word	0x20004904
 8007e34:	20004908 	.word	0x20004908

08007e38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b086      	sub	sp, #24
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d04f      	beq.n	8007eea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e4a:	2308      	movs	r3, #8
 8007e4c:	425b      	negs	r3, r3
 8007e4e:	697a      	ldr	r2, [r7, #20]
 8007e50:	4413      	add	r3, r2
 8007e52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	685a      	ldr	r2, [r3, #4]
 8007e5c:	4b25      	ldr	r3, [pc, #148]	@ (8007ef4 <vPortFree+0xbc>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4013      	ands	r3, r2
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d10b      	bne.n	8007e7e <vPortFree+0x46>
	__asm volatile
 8007e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e6a:	f383 8811 	msr	BASEPRI, r3
 8007e6e:	f3bf 8f6f 	isb	sy
 8007e72:	f3bf 8f4f 	dsb	sy
 8007e76:	60fb      	str	r3, [r7, #12]
}
 8007e78:	bf00      	nop
 8007e7a:	bf00      	nop
 8007e7c:	e7fd      	b.n	8007e7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d00b      	beq.n	8007e9e <vPortFree+0x66>
	__asm volatile
 8007e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e8a:	f383 8811 	msr	BASEPRI, r3
 8007e8e:	f3bf 8f6f 	isb	sy
 8007e92:	f3bf 8f4f 	dsb	sy
 8007e96:	60bb      	str	r3, [r7, #8]
}
 8007e98:	bf00      	nop
 8007e9a:	bf00      	nop
 8007e9c:	e7fd      	b.n	8007e9a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	685a      	ldr	r2, [r3, #4]
 8007ea2:	4b14      	ldr	r3, [pc, #80]	@ (8007ef4 <vPortFree+0xbc>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4013      	ands	r3, r2
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d01e      	beq.n	8007eea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d11a      	bne.n	8007eea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	685a      	ldr	r2, [r3, #4]
 8007eb8:	4b0e      	ldr	r3, [pc, #56]	@ (8007ef4 <vPortFree+0xbc>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	43db      	mvns	r3, r3
 8007ebe:	401a      	ands	r2, r3
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ec4:	f7fe febe 	bl	8006c44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	685a      	ldr	r2, [r3, #4]
 8007ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8007ef8 <vPortFree+0xc0>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4413      	add	r3, r2
 8007ed2:	4a09      	ldr	r2, [pc, #36]	@ (8007ef8 <vPortFree+0xc0>)
 8007ed4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007ed6:	6938      	ldr	r0, [r7, #16]
 8007ed8:	f000 f874 	bl	8007fc4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007edc:	4b07      	ldr	r3, [pc, #28]	@ (8007efc <vPortFree+0xc4>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	4a06      	ldr	r2, [pc, #24]	@ (8007efc <vPortFree+0xc4>)
 8007ee4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007ee6:	f7fe febb 	bl	8006c60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007eea:	bf00      	nop
 8007eec:	3718      	adds	r7, #24
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	20004910 	.word	0x20004910
 8007ef8:	20004900 	.word	0x20004900
 8007efc:	2000490c 	.word	0x2000490c

08007f00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007f00:	b480      	push	{r7}
 8007f02:	b085      	sub	sp, #20
 8007f04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f06:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007f0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007f0c:	4b27      	ldr	r3, [pc, #156]	@ (8007fac <prvHeapInit+0xac>)
 8007f0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f003 0307 	and.w	r3, r3, #7
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00c      	beq.n	8007f34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	3307      	adds	r3, #7
 8007f1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f023 0307 	bic.w	r3, r3, #7
 8007f26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f28:	68ba      	ldr	r2, [r7, #8]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	1ad3      	subs	r3, r2, r3
 8007f2e:	4a1f      	ldr	r2, [pc, #124]	@ (8007fac <prvHeapInit+0xac>)
 8007f30:	4413      	add	r3, r2
 8007f32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f38:	4a1d      	ldr	r2, [pc, #116]	@ (8007fb0 <prvHeapInit+0xb0>)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f3e:	4b1c      	ldr	r3, [pc, #112]	@ (8007fb0 <prvHeapInit+0xb0>)
 8007f40:	2200      	movs	r2, #0
 8007f42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	68ba      	ldr	r2, [r7, #8]
 8007f48:	4413      	add	r3, r2
 8007f4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007f4c:	2208      	movs	r2, #8
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	1a9b      	subs	r3, r3, r2
 8007f52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f023 0307 	bic.w	r3, r3, #7
 8007f5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	4a15      	ldr	r2, [pc, #84]	@ (8007fb4 <prvHeapInit+0xb4>)
 8007f60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007f62:	4b14      	ldr	r3, [pc, #80]	@ (8007fb4 <prvHeapInit+0xb4>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2200      	movs	r2, #0
 8007f68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f6a:	4b12      	ldr	r3, [pc, #72]	@ (8007fb4 <prvHeapInit+0xb4>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	68fa      	ldr	r2, [r7, #12]
 8007f7a:	1ad2      	subs	r2, r2, r3
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f80:	4b0c      	ldr	r3, [pc, #48]	@ (8007fb4 <prvHeapInit+0xb4>)
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	4a0a      	ldr	r2, [pc, #40]	@ (8007fb8 <prvHeapInit+0xb8>)
 8007f8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	4a09      	ldr	r2, [pc, #36]	@ (8007fbc <prvHeapInit+0xbc>)
 8007f96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007f98:	4b09      	ldr	r3, [pc, #36]	@ (8007fc0 <prvHeapInit+0xc0>)
 8007f9a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007f9e:	601a      	str	r2, [r3, #0]
}
 8007fa0:	bf00      	nop
 8007fa2:	3714      	adds	r7, #20
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr
 8007fac:	20000cf4 	.word	0x20000cf4
 8007fb0:	200048f4 	.word	0x200048f4
 8007fb4:	200048fc 	.word	0x200048fc
 8007fb8:	20004904 	.word	0x20004904
 8007fbc:	20004900 	.word	0x20004900
 8007fc0:	20004910 	.word	0x20004910

08007fc4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007fcc:	4b28      	ldr	r3, [pc, #160]	@ (8008070 <prvInsertBlockIntoFreeList+0xac>)
 8007fce:	60fb      	str	r3, [r7, #12]
 8007fd0:	e002      	b.n	8007fd8 <prvInsertBlockIntoFreeList+0x14>
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	60fb      	str	r3, [r7, #12]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d8f7      	bhi.n	8007fd2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	68ba      	ldr	r2, [r7, #8]
 8007fec:	4413      	add	r3, r2
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d108      	bne.n	8008006 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	685a      	ldr	r2, [r3, #4]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	441a      	add	r2, r3
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	68ba      	ldr	r2, [r7, #8]
 8008010:	441a      	add	r2, r3
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	429a      	cmp	r2, r3
 8008018:	d118      	bne.n	800804c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	4b15      	ldr	r3, [pc, #84]	@ (8008074 <prvInsertBlockIntoFreeList+0xb0>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	429a      	cmp	r2, r3
 8008024:	d00d      	beq.n	8008042 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	685a      	ldr	r2, [r3, #4]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	441a      	add	r2, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	601a      	str	r2, [r3, #0]
 8008040:	e008      	b.n	8008054 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008042:	4b0c      	ldr	r3, [pc, #48]	@ (8008074 <prvInsertBlockIntoFreeList+0xb0>)
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	601a      	str	r2, [r3, #0]
 800804a:	e003      	b.n	8008054 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	429a      	cmp	r2, r3
 800805a:	d002      	beq.n	8008062 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008062:	bf00      	nop
 8008064:	3714      	adds	r7, #20
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop
 8008070:	200048f4 	.word	0x200048f4
 8008074:	200048fc 	.word	0x200048fc

08008078 <memset>:
 8008078:	4402      	add	r2, r0
 800807a:	4603      	mov	r3, r0
 800807c:	4293      	cmp	r3, r2
 800807e:	d100      	bne.n	8008082 <memset+0xa>
 8008080:	4770      	bx	lr
 8008082:	f803 1b01 	strb.w	r1, [r3], #1
 8008086:	e7f9      	b.n	800807c <memset+0x4>

08008088 <_reclaim_reent>:
 8008088:	4b29      	ldr	r3, [pc, #164]	@ (8008130 <_reclaim_reent+0xa8>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4283      	cmp	r3, r0
 800808e:	b570      	push	{r4, r5, r6, lr}
 8008090:	4604      	mov	r4, r0
 8008092:	d04b      	beq.n	800812c <_reclaim_reent+0xa4>
 8008094:	69c3      	ldr	r3, [r0, #28]
 8008096:	b1ab      	cbz	r3, 80080c4 <_reclaim_reent+0x3c>
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	b16b      	cbz	r3, 80080b8 <_reclaim_reent+0x30>
 800809c:	2500      	movs	r5, #0
 800809e:	69e3      	ldr	r3, [r4, #28]
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	5959      	ldr	r1, [r3, r5]
 80080a4:	2900      	cmp	r1, #0
 80080a6:	d13b      	bne.n	8008120 <_reclaim_reent+0x98>
 80080a8:	3504      	adds	r5, #4
 80080aa:	2d80      	cmp	r5, #128	@ 0x80
 80080ac:	d1f7      	bne.n	800809e <_reclaim_reent+0x16>
 80080ae:	69e3      	ldr	r3, [r4, #28]
 80080b0:	4620      	mov	r0, r4
 80080b2:	68d9      	ldr	r1, [r3, #12]
 80080b4:	f000 f872 	bl	800819c <_free_r>
 80080b8:	69e3      	ldr	r3, [r4, #28]
 80080ba:	6819      	ldr	r1, [r3, #0]
 80080bc:	b111      	cbz	r1, 80080c4 <_reclaim_reent+0x3c>
 80080be:	4620      	mov	r0, r4
 80080c0:	f000 f86c 	bl	800819c <_free_r>
 80080c4:	6961      	ldr	r1, [r4, #20]
 80080c6:	b111      	cbz	r1, 80080ce <_reclaim_reent+0x46>
 80080c8:	4620      	mov	r0, r4
 80080ca:	f000 f867 	bl	800819c <_free_r>
 80080ce:	69e1      	ldr	r1, [r4, #28]
 80080d0:	b111      	cbz	r1, 80080d8 <_reclaim_reent+0x50>
 80080d2:	4620      	mov	r0, r4
 80080d4:	f000 f862 	bl	800819c <_free_r>
 80080d8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80080da:	b111      	cbz	r1, 80080e2 <_reclaim_reent+0x5a>
 80080dc:	4620      	mov	r0, r4
 80080de:	f000 f85d 	bl	800819c <_free_r>
 80080e2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80080e4:	b111      	cbz	r1, 80080ec <_reclaim_reent+0x64>
 80080e6:	4620      	mov	r0, r4
 80080e8:	f000 f858 	bl	800819c <_free_r>
 80080ec:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80080ee:	b111      	cbz	r1, 80080f6 <_reclaim_reent+0x6e>
 80080f0:	4620      	mov	r0, r4
 80080f2:	f000 f853 	bl	800819c <_free_r>
 80080f6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80080f8:	b111      	cbz	r1, 8008100 <_reclaim_reent+0x78>
 80080fa:	4620      	mov	r0, r4
 80080fc:	f000 f84e 	bl	800819c <_free_r>
 8008100:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008102:	b111      	cbz	r1, 800810a <_reclaim_reent+0x82>
 8008104:	4620      	mov	r0, r4
 8008106:	f000 f849 	bl	800819c <_free_r>
 800810a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800810c:	b111      	cbz	r1, 8008114 <_reclaim_reent+0x8c>
 800810e:	4620      	mov	r0, r4
 8008110:	f000 f844 	bl	800819c <_free_r>
 8008114:	6a23      	ldr	r3, [r4, #32]
 8008116:	b14b      	cbz	r3, 800812c <_reclaim_reent+0xa4>
 8008118:	4620      	mov	r0, r4
 800811a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800811e:	4718      	bx	r3
 8008120:	680e      	ldr	r6, [r1, #0]
 8008122:	4620      	mov	r0, r4
 8008124:	f000 f83a 	bl	800819c <_free_r>
 8008128:	4631      	mov	r1, r6
 800812a:	e7bb      	b.n	80080a4 <_reclaim_reent+0x1c>
 800812c:	bd70      	pop	{r4, r5, r6, pc}
 800812e:	bf00      	nop
 8008130:	2000002c 	.word	0x2000002c

08008134 <__libc_init_array>:
 8008134:	b570      	push	{r4, r5, r6, lr}
 8008136:	4d0d      	ldr	r5, [pc, #52]	@ (800816c <__libc_init_array+0x38>)
 8008138:	4c0d      	ldr	r4, [pc, #52]	@ (8008170 <__libc_init_array+0x3c>)
 800813a:	1b64      	subs	r4, r4, r5
 800813c:	10a4      	asrs	r4, r4, #2
 800813e:	2600      	movs	r6, #0
 8008140:	42a6      	cmp	r6, r4
 8008142:	d109      	bne.n	8008158 <__libc_init_array+0x24>
 8008144:	4d0b      	ldr	r5, [pc, #44]	@ (8008174 <__libc_init_array+0x40>)
 8008146:	4c0c      	ldr	r4, [pc, #48]	@ (8008178 <__libc_init_array+0x44>)
 8008148:	f000 f87e 	bl	8008248 <_init>
 800814c:	1b64      	subs	r4, r4, r5
 800814e:	10a4      	asrs	r4, r4, #2
 8008150:	2600      	movs	r6, #0
 8008152:	42a6      	cmp	r6, r4
 8008154:	d105      	bne.n	8008162 <__libc_init_array+0x2e>
 8008156:	bd70      	pop	{r4, r5, r6, pc}
 8008158:	f855 3b04 	ldr.w	r3, [r5], #4
 800815c:	4798      	blx	r3
 800815e:	3601      	adds	r6, #1
 8008160:	e7ee      	b.n	8008140 <__libc_init_array+0xc>
 8008162:	f855 3b04 	ldr.w	r3, [r5], #4
 8008166:	4798      	blx	r3
 8008168:	3601      	adds	r6, #1
 800816a:	e7f2      	b.n	8008152 <__libc_init_array+0x1e>
 800816c:	08008300 	.word	0x08008300
 8008170:	08008300 	.word	0x08008300
 8008174:	08008300 	.word	0x08008300
 8008178:	08008304 	.word	0x08008304

0800817c <__retarget_lock_acquire_recursive>:
 800817c:	4770      	bx	lr

0800817e <__retarget_lock_release_recursive>:
 800817e:	4770      	bx	lr

08008180 <memcpy>:
 8008180:	440a      	add	r2, r1
 8008182:	4291      	cmp	r1, r2
 8008184:	f100 33ff 	add.w	r3, r0, #4294967295
 8008188:	d100      	bne.n	800818c <memcpy+0xc>
 800818a:	4770      	bx	lr
 800818c:	b510      	push	{r4, lr}
 800818e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008192:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008196:	4291      	cmp	r1, r2
 8008198:	d1f9      	bne.n	800818e <memcpy+0xe>
 800819a:	bd10      	pop	{r4, pc}

0800819c <_free_r>:
 800819c:	b538      	push	{r3, r4, r5, lr}
 800819e:	4605      	mov	r5, r0
 80081a0:	2900      	cmp	r1, #0
 80081a2:	d041      	beq.n	8008228 <_free_r+0x8c>
 80081a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081a8:	1f0c      	subs	r4, r1, #4
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	bfb8      	it	lt
 80081ae:	18e4      	addlt	r4, r4, r3
 80081b0:	f000 f83e 	bl	8008230 <__malloc_lock>
 80081b4:	4a1d      	ldr	r2, [pc, #116]	@ (800822c <_free_r+0x90>)
 80081b6:	6813      	ldr	r3, [r2, #0]
 80081b8:	b933      	cbnz	r3, 80081c8 <_free_r+0x2c>
 80081ba:	6063      	str	r3, [r4, #4]
 80081bc:	6014      	str	r4, [r2, #0]
 80081be:	4628      	mov	r0, r5
 80081c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081c4:	f000 b83a 	b.w	800823c <__malloc_unlock>
 80081c8:	42a3      	cmp	r3, r4
 80081ca:	d908      	bls.n	80081de <_free_r+0x42>
 80081cc:	6820      	ldr	r0, [r4, #0]
 80081ce:	1821      	adds	r1, r4, r0
 80081d0:	428b      	cmp	r3, r1
 80081d2:	bf01      	itttt	eq
 80081d4:	6819      	ldreq	r1, [r3, #0]
 80081d6:	685b      	ldreq	r3, [r3, #4]
 80081d8:	1809      	addeq	r1, r1, r0
 80081da:	6021      	streq	r1, [r4, #0]
 80081dc:	e7ed      	b.n	80081ba <_free_r+0x1e>
 80081de:	461a      	mov	r2, r3
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	b10b      	cbz	r3, 80081e8 <_free_r+0x4c>
 80081e4:	42a3      	cmp	r3, r4
 80081e6:	d9fa      	bls.n	80081de <_free_r+0x42>
 80081e8:	6811      	ldr	r1, [r2, #0]
 80081ea:	1850      	adds	r0, r2, r1
 80081ec:	42a0      	cmp	r0, r4
 80081ee:	d10b      	bne.n	8008208 <_free_r+0x6c>
 80081f0:	6820      	ldr	r0, [r4, #0]
 80081f2:	4401      	add	r1, r0
 80081f4:	1850      	adds	r0, r2, r1
 80081f6:	4283      	cmp	r3, r0
 80081f8:	6011      	str	r1, [r2, #0]
 80081fa:	d1e0      	bne.n	80081be <_free_r+0x22>
 80081fc:	6818      	ldr	r0, [r3, #0]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	6053      	str	r3, [r2, #4]
 8008202:	4408      	add	r0, r1
 8008204:	6010      	str	r0, [r2, #0]
 8008206:	e7da      	b.n	80081be <_free_r+0x22>
 8008208:	d902      	bls.n	8008210 <_free_r+0x74>
 800820a:	230c      	movs	r3, #12
 800820c:	602b      	str	r3, [r5, #0]
 800820e:	e7d6      	b.n	80081be <_free_r+0x22>
 8008210:	6820      	ldr	r0, [r4, #0]
 8008212:	1821      	adds	r1, r4, r0
 8008214:	428b      	cmp	r3, r1
 8008216:	bf04      	itt	eq
 8008218:	6819      	ldreq	r1, [r3, #0]
 800821a:	685b      	ldreq	r3, [r3, #4]
 800821c:	6063      	str	r3, [r4, #4]
 800821e:	bf04      	itt	eq
 8008220:	1809      	addeq	r1, r1, r0
 8008222:	6021      	streq	r1, [r4, #0]
 8008224:	6054      	str	r4, [r2, #4]
 8008226:	e7ca      	b.n	80081be <_free_r+0x22>
 8008228:	bd38      	pop	{r3, r4, r5, pc}
 800822a:	bf00      	nop
 800822c:	20004a50 	.word	0x20004a50

08008230 <__malloc_lock>:
 8008230:	4801      	ldr	r0, [pc, #4]	@ (8008238 <__malloc_lock+0x8>)
 8008232:	f7ff bfa3 	b.w	800817c <__retarget_lock_acquire_recursive>
 8008236:	bf00      	nop
 8008238:	20004a4c 	.word	0x20004a4c

0800823c <__malloc_unlock>:
 800823c:	4801      	ldr	r0, [pc, #4]	@ (8008244 <__malloc_unlock+0x8>)
 800823e:	f7ff bf9e 	b.w	800817e <__retarget_lock_release_recursive>
 8008242:	bf00      	nop
 8008244:	20004a4c 	.word	0x20004a4c

08008248 <_init>:
 8008248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800824a:	bf00      	nop
 800824c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800824e:	bc08      	pop	{r3}
 8008250:	469e      	mov	lr, r3
 8008252:	4770      	bx	lr

08008254 <_fini>:
 8008254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008256:	bf00      	nop
 8008258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800825a:	bc08      	pop	{r3}
 800825c:	469e      	mov	lr, r3
 800825e:	4770      	bx	lr
