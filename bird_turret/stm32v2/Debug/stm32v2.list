
stm32v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005258  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08005404  08005404  00006404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005420  08005420  00007018  2**0
                  CONTENTS
  4 .ARM          00000008  08005420  08005420  00006420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005428  08005428  00007018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005428  08005428  00006428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800542c  0800542c  0000642c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08005430  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007018  2**0
                  CONTENTS
 10 .bss          000008b0  20000018  20000018  00007018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008c8  200008c8  00007018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007018  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001404f  00000000  00000000  00007048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002538  00000000  00000000  0001b097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001150  00000000  00000000  0001d5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d9b  00000000  00000000  0001e720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024d30  00000000  00000000  0001f4bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001355f  00000000  00000000  000441eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e28d7  00000000  00000000  0005774a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013a021  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004afc  00000000  00000000  0013a064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0013eb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000018 	.word	0x20000018
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080053ec 	.word	0x080053ec

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000001c 	.word	0x2000001c
 80001e8:	080053ec 	.word	0x080053ec

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 80004e0:	f000 ff82 	bl	80013e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f88c 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 fb02 	bl	8000af0 <MX_GPIO_Init>
  MX_ETH_Init();
 80004ec:	f000 f906 	bl	80006fc <MX_ETH_Init>
  MX_USART3_UART_Init();
 80004f0:	f000 faa6 	bl	8000a40 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004f4:	f000 face 	bl	8000a94 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80004f8:	f000 f94e 	bl	8000798 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004fc:	f000 f99a 	bl	8000834 <MX_TIM3_Init>
  MX_UART5_Init();
 8000500:	f000 fa74 	bl	80009ec <MX_UART5_Init>
  MX_TIM4_Init();
 8000504:	f000 fa24 	bl	8000950 <MX_TIM4_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000508:	f000 f8e4 	bl	80006d4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800050c:	2100      	movs	r1, #0
 800050e:	4831      	ldr	r0, [pc, #196]	@ (80005d4 <main+0xf8>)
 8000510:	f002 fd80 	bl	8003014 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000514:	2108      	movs	r1, #8
 8000516:	482f      	ldr	r0, [pc, #188]	@ (80005d4 <main+0xf8>)
 8000518:	f002 fd7c 	bl	8003014 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800051c:	210c      	movs	r1, #12
 800051e:	482d      	ldr	r0, [pc, #180]	@ (80005d4 <main+0xf8>)
 8000520:	f002 fd78 	bl	8003014 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart5, &rxbuf, 1);
 8000524:	2201      	movs	r2, #1
 8000526:	492c      	ldr	r1, [pc, #176]	@ (80005d8 <main+0xfc>)
 8000528:	482c      	ldr	r0, [pc, #176]	@ (80005dc <main+0x100>)
 800052a:	f003 fd0f 	bl	8003f4c <HAL_UART_Receive_IT>
  TIM3->CCR3 = THTCENTER;
 800052e:	f240 22e3 	movw	r2, #739	@ 0x2e3
 8000532:	4b2b      	ldr	r3, [pc, #172]	@ (80005e0 <main+0x104>)
 8000534:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM3->CCR4 = PHICENTER;
 8000536:	f240 12c1 	movw	r2, #449	@ 0x1c1
 800053a:	4b29      	ldr	r3, [pc, #164]	@ (80005e0 <main+0x104>)
 800053c:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3->CCR1 = DFLTPULSE;
 800053e:	4b28      	ldr	r3, [pc, #160]	@ (80005e0 <main+0x104>)
 8000540:	22d2      	movs	r2, #210	@ 0xd2
 8000542:	635a      	str	r2, [r3, #52]	@ 0x34
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if (moveflag) {
 8000544:	4b27      	ldr	r3, [pc, #156]	@ (80005e4 <main+0x108>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d0fb      	beq.n	8000544 <main+0x68>
      // start dc motor
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800054c:	2201      	movs	r2, #1
 800054e:	2101      	movs	r1, #1
 8000550:	4825      	ldr	r0, [pc, #148]	@ (80005e8 <main+0x10c>)
 8000552:	f001 fe57 	bl	8002204 <HAL_GPIO_WritePin>

      // caculate pwm duty cycle
      phipulse += kpx * (-oper[1]);
 8000556:	4b25      	ldr	r3, [pc, #148]	@ (80005ec <main+0x110>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	ee07 3a90 	vmov	s15, r3
 800055e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000562:	4b23      	ldr	r3, [pc, #140]	@ (80005f0 <main+0x114>)
 8000564:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000568:	425b      	negs	r3, r3
 800056a:	ee07 3a90 	vmov	s15, r3
 800056e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000572:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80005f4 <main+0x118>
 8000576:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800057a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800057e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000582:	ee17 2a90 	vmov	r2, s15
 8000586:	4b19      	ldr	r3, [pc, #100]	@ (80005ec <main+0x110>)
 8000588:	601a      	str	r2, [r3, #0]
      thtpulse += kpy * (oper[2]);
 800058a:	4b1b      	ldr	r3, [pc, #108]	@ (80005f8 <main+0x11c>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	ee07 3a90 	vmov	s15, r3
 8000592:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000596:	4b16      	ldr	r3, [pc, #88]	@ (80005f0 <main+0x114>)
 8000598:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800059c:	ee07 3a90 	vmov	s15, r3
 80005a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005a4:	eddf 6a15 	vldr	s13, [pc, #84]	@ 80005fc <main+0x120>
 80005a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80005ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005b4:	ee17 2a90 	vmov	r2, s15
 80005b8:	4b0f      	ldr	r3, [pc, #60]	@ (80005f8 <main+0x11c>)
 80005ba:	601a      	str	r2, [r3, #0]

      // check bound
      // if out of bound, boundcnt--;

      // apply pwm duty cycle
      TIM3->CCR3 = thtpulse;
 80005bc:	4b0e      	ldr	r3, [pc, #56]	@ (80005f8 <main+0x11c>)
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	4b07      	ldr	r3, [pc, #28]	@ (80005e0 <main+0x104>)
 80005c2:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM3->CCR4 = phipulse;
 80005c4:	4b09      	ldr	r3, [pc, #36]	@ (80005ec <main+0x110>)
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	4b05      	ldr	r3, [pc, #20]	@ (80005e0 <main+0x104>)
 80005ca:	641a      	str	r2, [r3, #64]	@ 0x40

      // reset flag
      moveflag = 0;
 80005cc:	4b05      	ldr	r3, [pc, #20]	@ (80005e4 <main+0x108>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
    if (moveflag) {
 80005d2:	e7b7      	b.n	8000544 <main+0x68>
 80005d4:	200002a4 	.word	0x200002a4
 80005d8:	200008a8 	.word	0x200008a8
 80005dc:	20000334 	.word	0x20000334
 80005e0:	40000400 	.word	0x40000400
 80005e4:	200008b4 	.word	0x200008b4
 80005e8:	40020400 	.word	0x40020400
 80005ec:	20000000 	.word	0x20000000
 80005f0:	200008ac 	.word	0x200008ac
 80005f4:	3d75c28f 	.word	0x3d75c28f
 80005f8:	20000004 	.word	0x20000004
 80005fc:	3e051eb8 	.word	0x3e051eb8

08000600 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	@ 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	2230      	movs	r2, #48	@ 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f004 febf 	bl	8005392 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	4b28      	ldr	r3, [pc, #160]	@ (80006cc <SystemClock_Config+0xcc>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800062c:	4a27      	ldr	r2, [pc, #156]	@ (80006cc <SystemClock_Config+0xcc>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	@ 0x40
 8000634:	4b25      	ldr	r3, [pc, #148]	@ (80006cc <SystemClock_Config+0xcc>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	4b22      	ldr	r3, [pc, #136]	@ (80006d0 <SystemClock_Config+0xd0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a21      	ldr	r2, [pc, #132]	@ (80006d0 <SystemClock_Config+0xd0>)
 800064a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b1f      	ldr	r3, [pc, #124]	@ (80006d0 <SystemClock_Config+0xd0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800065c:	2301      	movs	r3, #1
 800065e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000660:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000664:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000666:	2302      	movs	r3, #2
 8000668:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800066e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000670:	2304      	movs	r3, #4
 8000672:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000674:	23a8      	movs	r3, #168	@ 0xa8
 8000676:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000678:	2302      	movs	r3, #2
 800067a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800067c:	2307      	movs	r3, #7
 800067e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000680:	f107 0320 	add.w	r3, r7, #32
 8000684:	4618      	mov	r0, r3
 8000686:	f001 fee5 	bl	8002454 <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x94>
    Error_Handler();
 8000690:	f000 fba8 	bl	8000de4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000694:	230f      	movs	r3, #15
 8000696:	60fb      	str	r3, [r7, #12]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000698:	2302      	movs	r3, #2
 800069a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2105      	movs	r1, #5
 80006b2:	4618      	mov	r0, r3
 80006b4:	f002 f946 	bl	8002944 <HAL_RCC_ClockConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0xc2>
    Error_Handler();
 80006be:	f000 fb91 	bl	8000de4 <Error_Handler>
  }
}
 80006c2:	bf00      	nop
 80006c4:	3750      	adds	r7, #80	@ 0x50
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40007000 	.word	0x40007000

080006d4 <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80006d8:	2200      	movs	r2, #0
 80006da:	2100      	movs	r1, #0
 80006dc:	201c      	movs	r0, #28
 80006de:	f000 fff4 	bl	80016ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80006e2:	201c      	movs	r0, #28
 80006e4:	f001 f80d 	bl	8001702 <HAL_NVIC_EnableIRQ>
  /* UART5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2100      	movs	r1, #0
 80006ec:	2035      	movs	r0, #53	@ 0x35
 80006ee:	f000 ffec 	bl	80016ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART5_IRQn);
 80006f2:	2035      	movs	r0, #53	@ 0x35
 80006f4:	f001 f805 	bl	8001702 <HAL_NVIC_EnableIRQ>
}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}

080006fc <MX_ETH_Init>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000700:	4b1f      	ldr	r3, [pc, #124]	@ (8000780 <MX_ETH_Init+0x84>)
 8000702:	4a20      	ldr	r2, [pc, #128]	@ (8000784 <MX_ETH_Init+0x88>)
 8000704:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000706:	4b20      	ldr	r3, [pc, #128]	@ (8000788 <MX_ETH_Init+0x8c>)
 8000708:	2200      	movs	r2, #0
 800070a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800070c:	4b1e      	ldr	r3, [pc, #120]	@ (8000788 <MX_ETH_Init+0x8c>)
 800070e:	2280      	movs	r2, #128	@ 0x80
 8000710:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000712:	4b1d      	ldr	r3, [pc, #116]	@ (8000788 <MX_ETH_Init+0x8c>)
 8000714:	22e1      	movs	r2, #225	@ 0xe1
 8000716:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000718:	4b1b      	ldr	r3, [pc, #108]	@ (8000788 <MX_ETH_Init+0x8c>)
 800071a:	2200      	movs	r2, #0
 800071c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800071e:	4b1a      	ldr	r3, [pc, #104]	@ (8000788 <MX_ETH_Init+0x8c>)
 8000720:	2200      	movs	r2, #0
 8000722:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000724:	4b18      	ldr	r3, [pc, #96]	@ (8000788 <MX_ETH_Init+0x8c>)
 8000726:	2200      	movs	r2, #0
 8000728:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800072a:	4b15      	ldr	r3, [pc, #84]	@ (8000780 <MX_ETH_Init+0x84>)
 800072c:	4a16      	ldr	r2, [pc, #88]	@ (8000788 <MX_ETH_Init+0x8c>)
 800072e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000730:	4b13      	ldr	r3, [pc, #76]	@ (8000780 <MX_ETH_Init+0x84>)
 8000732:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000736:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000738:	4b11      	ldr	r3, [pc, #68]	@ (8000780 <MX_ETH_Init+0x84>)
 800073a:	4a14      	ldr	r2, [pc, #80]	@ (800078c <MX_ETH_Init+0x90>)
 800073c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800073e:	4b10      	ldr	r3, [pc, #64]	@ (8000780 <MX_ETH_Init+0x84>)
 8000740:	4a13      	ldr	r2, [pc, #76]	@ (8000790 <MX_ETH_Init+0x94>)
 8000742:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000744:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <MX_ETH_Init+0x84>)
 8000746:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800074a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK) {
 800074c:	480c      	ldr	r0, [pc, #48]	@ (8000780 <MX_ETH_Init+0x84>)
 800074e:	f001 f885 	bl	800185c <HAL_ETH_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_ETH_Init+0x60>
    Error_Handler();
 8000758:	f000 fb44 	bl	8000de4 <Error_Handler>
  }

  memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 800075c:	2238      	movs	r2, #56	@ 0x38
 800075e:	2100      	movs	r1, #0
 8000760:	480c      	ldr	r0, [pc, #48]	@ (8000794 <MX_ETH_Init+0x98>)
 8000762:	f004 fe16 	bl	8005392 <memset>
  TxConfig.Attributes =
 8000766:	4b0b      	ldr	r3, [pc, #44]	@ (8000794 <MX_ETH_Init+0x98>)
 8000768:	2221      	movs	r2, #33	@ 0x21
 800076a:	601a      	str	r2, [r3, #0]
      ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800076c:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <MX_ETH_Init+0x98>)
 800076e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000772:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000774:	4b07      	ldr	r3, [pc, #28]	@ (8000794 <MX_ETH_Init+0x98>)
 8000776:	2200      	movs	r2, #0
 8000778:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	200001ac 	.word	0x200001ac
 8000784:	40028000 	.word	0x40028000
 8000788:	200008bc 	.word	0x200008bc
 800078c:	2000010c 	.word	0x2000010c
 8000790:	2000006c 	.word	0x2000006c
 8000794:	20000034 	.word	0x20000034

08000798 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800079e:	f107 0308 	add.w	r3, r7, #8
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ac:	463b      	mov	r3, r7
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000830 <MX_TIM2_Init+0x98>)
 80007b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42000 - 1;
 80007bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000830 <MX_TIM2_Init+0x98>)
 80007be:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 80007c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000830 <MX_TIM2_Init+0x98>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000 - 1;
 80007ca:	4b19      	ldr	r3, [pc, #100]	@ (8000830 <MX_TIM2_Init+0x98>)
 80007cc:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80007d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d2:	4b17      	ldr	r3, [pc, #92]	@ (8000830 <MX_TIM2_Init+0x98>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d8:	4b15      	ldr	r3, [pc, #84]	@ (8000830 <MX_TIM2_Init+0x98>)
 80007da:	2200      	movs	r2, #0
 80007dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80007de:	4814      	ldr	r0, [pc, #80]	@ (8000830 <MX_TIM2_Init+0x98>)
 80007e0:	f002 fad0 	bl	8002d84 <HAL_TIM_Base_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_TIM2_Init+0x56>
    Error_Handler();
 80007ea:	f000 fafb 	bl	8000de4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80007f4:	f107 0308 	add.w	r3, r7, #8
 80007f8:	4619      	mov	r1, r3
 80007fa:	480d      	ldr	r0, [pc, #52]	@ (8000830 <MX_TIM2_Init+0x98>)
 80007fc:	f002 fe84 	bl	8003508 <HAL_TIM_ConfigClockSource>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_TIM2_Init+0x72>
    Error_Handler();
 8000806:	f000 faed 	bl	8000de4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8000812:	463b      	mov	r3, r7
 8000814:	4619      	mov	r1, r3
 8000816:	4806      	ldr	r0, [pc, #24]	@ (8000830 <MX_TIM2_Init+0x98>)
 8000818:	f003 fa82 	bl	8003d20 <HAL_TIMEx_MasterConfigSynchronization>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_TIM2_Init+0x8e>
    Error_Handler();
 8000822:	f000 fadf 	bl	8000de4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
}
 8000826:	bf00      	nop
 8000828:	3718      	adds	r7, #24
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	2000025c 	.word	0x2000025c

08000834 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000834:	b580      	push	{r7, lr}
 8000836:	b08e      	sub	sp, #56	@ 0x38
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800083a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000848:	f107 0320 	add.w	r3, r7, #32
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
 8000860:	615a      	str	r2, [r3, #20]
 8000862:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000864:	4b38      	ldr	r3, [pc, #224]	@ (8000948 <MX_TIM3_Init+0x114>)
 8000866:	4a39      	ldr	r2, [pc, #228]	@ (800094c <MX_TIM3_Init+0x118>)
 8000868:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 280 - 1;
 800086a:	4b37      	ldr	r3, [pc, #220]	@ (8000948 <MX_TIM3_Init+0x114>)
 800086c:	f240 1217 	movw	r2, #279	@ 0x117
 8000870:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000872:	4b35      	ldr	r3, [pc, #212]	@ (8000948 <MX_TIM3_Init+0x114>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6000 - 1;
 8000878:	4b33      	ldr	r3, [pc, #204]	@ (8000948 <MX_TIM3_Init+0x114>)
 800087a:	f241 726f 	movw	r2, #5999	@ 0x176f
 800087e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000880:	4b31      	ldr	r3, [pc, #196]	@ (8000948 <MX_TIM3_Init+0x114>)
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000886:	4b30      	ldr	r3, [pc, #192]	@ (8000948 <MX_TIM3_Init+0x114>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800088c:	482e      	ldr	r0, [pc, #184]	@ (8000948 <MX_TIM3_Init+0x114>)
 800088e:	f002 fa79 	bl	8002d84 <HAL_TIM_Base_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM3_Init+0x68>
    Error_Handler();
 8000898:	f000 faa4 	bl	8000de4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800089c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80008a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008a6:	4619      	mov	r1, r3
 80008a8:	4827      	ldr	r0, [pc, #156]	@ (8000948 <MX_TIM3_Init+0x114>)
 80008aa:	f002 fe2d 	bl	8003508 <HAL_TIM_ConfigClockSource>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM3_Init+0x84>
    Error_Handler();
 80008b4:	f000 fa96 	bl	8000de4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80008b8:	4823      	ldr	r0, [pc, #140]	@ (8000948 <MX_TIM3_Init+0x114>)
 80008ba:	f002 fb52 	bl	8002f62 <HAL_TIM_PWM_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM3_Init+0x94>
    Error_Handler();
 80008c4:	f000 fa8e 	bl	8000de4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c8:	2300      	movs	r3, #0
 80008ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 80008d0:	f107 0320 	add.w	r3, r7, #32
 80008d4:	4619      	mov	r1, r3
 80008d6:	481c      	ldr	r0, [pc, #112]	@ (8000948 <MX_TIM3_Init+0x114>)
 80008d8:	f003 fa22 	bl	8003d20 <HAL_TIMEx_MasterConfigSynchronization>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM3_Init+0xb2>
    Error_Handler();
 80008e2:	f000 fa7f 	bl	8000de4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008e6:	2360      	movs	r3, #96	@ 0x60
 80008e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	2200      	movs	r2, #0
 80008fa:	4619      	mov	r1, r3
 80008fc:	4812      	ldr	r0, [pc, #72]	@ (8000948 <MX_TIM3_Init+0x114>)
 80008fe:	f002 fd41 	bl	8003384 <HAL_TIM_PWM_ConfigChannel>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM3_Init+0xd8>
    Error_Handler();
 8000908:	f000 fa6c 	bl	8000de4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	2208      	movs	r2, #8
 8000910:	4619      	mov	r1, r3
 8000912:	480d      	ldr	r0, [pc, #52]	@ (8000948 <MX_TIM3_Init+0x114>)
 8000914:	f002 fd36 	bl	8003384 <HAL_TIM_PWM_ConfigChannel>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM3_Init+0xee>
    Error_Handler();
 800091e:	f000 fa61 	bl	8000de4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	220c      	movs	r2, #12
 8000926:	4619      	mov	r1, r3
 8000928:	4807      	ldr	r0, [pc, #28]	@ (8000948 <MX_TIM3_Init+0x114>)
 800092a:	f002 fd2b 	bl	8003384 <HAL_TIM_PWM_ConfigChannel>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM3_Init+0x104>
    Error_Handler();
 8000934:	f000 fa56 	bl	8000de4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000938:	4803      	ldr	r0, [pc, #12]	@ (8000948 <MX_TIM3_Init+0x114>)
 800093a:	f000 fb99 	bl	8001070 <HAL_TIM_MspPostInit>
}
 800093e:	bf00      	nop
 8000940:	3738      	adds	r7, #56	@ 0x38
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	200002a4 	.word	0x200002a4
 800094c:	40000400 	.word	0x40000400

08000950 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000956:	f107 0308 	add.w	r3, r7, #8
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000964:	463b      	mov	r3, r7
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800096c:	4b1d      	ldr	r3, [pc, #116]	@ (80009e4 <MX_TIM4_Init+0x94>)
 800096e:	4a1e      	ldr	r2, [pc, #120]	@ (80009e8 <MX_TIM4_Init+0x98>)
 8000970:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 42000 - 1;
 8000972:	4b1c      	ldr	r3, [pc, #112]	@ (80009e4 <MX_TIM4_Init+0x94>)
 8000974:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8000978:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097a:	4b1a      	ldr	r3, [pc, #104]	@ (80009e4 <MX_TIM4_Init+0x94>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000 - 1;
 8000980:	4b18      	ldr	r3, [pc, #96]	@ (80009e4 <MX_TIM4_Init+0x94>)
 8000982:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000986:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000988:	4b16      	ldr	r3, [pc, #88]	@ (80009e4 <MX_TIM4_Init+0x94>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098e:	4b15      	ldr	r3, [pc, #84]	@ (80009e4 <MX_TIM4_Init+0x94>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8000994:	4813      	ldr	r0, [pc, #76]	@ (80009e4 <MX_TIM4_Init+0x94>)
 8000996:	f002 f9f5 	bl	8002d84 <HAL_TIM_Base_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM4_Init+0x54>
    Error_Handler();
 80009a0:	f000 fa20 	bl	8000de4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 80009aa:	f107 0308 	add.w	r3, r7, #8
 80009ae:	4619      	mov	r1, r3
 80009b0:	480c      	ldr	r0, [pc, #48]	@ (80009e4 <MX_TIM4_Init+0x94>)
 80009b2:	f002 fda9 	bl	8003508 <HAL_TIM_ConfigClockSource>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM4_Init+0x70>
    Error_Handler();
 80009bc:	f000 fa12 	bl	8000de4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c0:	2300      	movs	r3, #0
 80009c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 80009c8:	463b      	mov	r3, r7
 80009ca:	4619      	mov	r1, r3
 80009cc:	4805      	ldr	r0, [pc, #20]	@ (80009e4 <MX_TIM4_Init+0x94>)
 80009ce:	f003 f9a7 	bl	8003d20 <HAL_TIMEx_MasterConfigSynchronization>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM4_Init+0x8c>
    Error_Handler();
 80009d8:	f000 fa04 	bl	8000de4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
}
 80009dc:	bf00      	nop
 80009de:	3718      	adds	r7, #24
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	200002ec 	.word	0x200002ec
 80009e8:	40000800 	.word	0x40000800

080009ec <MX_UART5_Init>:
/**
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80009f0:	4b11      	ldr	r3, [pc, #68]	@ (8000a38 <MX_UART5_Init+0x4c>)
 80009f2:	4a12      	ldr	r2, [pc, #72]	@ (8000a3c <MX_UART5_Init+0x50>)
 80009f4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80009f6:	4b10      	ldr	r3, [pc, #64]	@ (8000a38 <MX_UART5_Init+0x4c>)
 80009f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009fc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000a38 <MX_UART5_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	@ (8000a38 <MX_UART5_Init+0x4c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a38 <MX_UART5_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000a10:	4b09      	ldr	r3, [pc, #36]	@ (8000a38 <MX_UART5_Init+0x4c>)
 8000a12:	220c      	movs	r2, #12
 8000a14:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a16:	4b08      	ldr	r3, [pc, #32]	@ (8000a38 <MX_UART5_Init+0x4c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <MX_UART5_Init+0x4c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK) {
 8000a22:	4805      	ldr	r0, [pc, #20]	@ (8000a38 <MX_UART5_Init+0x4c>)
 8000a24:	f003 fa0c 	bl	8003e40 <HAL_UART_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_UART5_Init+0x46>
    Error_Handler();
 8000a2e:	f000 f9d9 	bl	8000de4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000334 	.word	0x20000334
 8000a3c:	40005000 	.word	0x40005000

08000a40 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a44:	4b11      	ldr	r3, [pc, #68]	@ (8000a8c <MX_USART3_UART_Init+0x4c>)
 8000a46:	4a12      	ldr	r2, [pc, #72]	@ (8000a90 <MX_USART3_UART_Init+0x50>)
 8000a48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a4a:	4b10      	ldr	r3, [pc, #64]	@ (8000a8c <MX_USART3_UART_Init+0x4c>)
 8000a4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a52:	4b0e      	ldr	r3, [pc, #56]	@ (8000a8c <MX_USART3_UART_Init+0x4c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	@ (8000a8c <MX_USART3_UART_Init+0x4c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a8c <MX_USART3_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a64:	4b09      	ldr	r3, [pc, #36]	@ (8000a8c <MX_USART3_UART_Init+0x4c>)
 8000a66:	220c      	movs	r2, #12
 8000a68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6a:	4b08      	ldr	r3, [pc, #32]	@ (8000a8c <MX_USART3_UART_Init+0x4c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a70:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <MX_USART3_UART_Init+0x4c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000a76:	4805      	ldr	r0, [pc, #20]	@ (8000a8c <MX_USART3_UART_Init+0x4c>)
 8000a78:	f003 f9e2 	bl	8003e40 <HAL_UART_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_USART3_UART_Init+0x46>
    Error_Handler();
 8000a82:	f000 f9af 	bl	8000de4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	2000037c 	.word	0x2000037c
 8000a90:	40004800 	.word	0x40004800

08000a94 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a98:	4b14      	ldr	r3, [pc, #80]	@ (8000aec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a9a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000a9e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000aa0:	4b12      	ldr	r3, [pc, #72]	@ (8000aec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa2:	2204      	movs	r2, #4
 8000aa4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000aa6:	4b11      	ldr	r3, [pc, #68]	@ (8000aec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa8:	2202      	movs	r2, #2
 8000aaa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000aac:	4b0f      	ldr	r3, [pc, #60]	@ (8000aec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8000aec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab4:	2202      	movs	r2, #2
 8000ab6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8000aec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	@ (8000aec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ac4:	4b09      	ldr	r3, [pc, #36]	@ (8000aec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000aca:	4b08      	ldr	r3, [pc, #32]	@ (8000aec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8000ad6:	4805      	ldr	r0, [pc, #20]	@ (8000aec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad8:	f001 fbad 	bl	8002236 <HAL_PCD_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_USB_OTG_FS_PCD_Init+0x52>
    Error_Handler();
 8000ae2:	f000 f97f 	bl	8000de4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	200003c4 	.word	0x200003c4

08000af0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08c      	sub	sp, #48	@ 0x30
 8000af4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
 8000b04:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	61bb      	str	r3, [r7, #24]
 8000b0a:	4b4c      	ldr	r3, [pc, #304]	@ (8000c3c <MX_GPIO_Init+0x14c>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	4a4b      	ldr	r2, [pc, #300]	@ (8000c3c <MX_GPIO_Init+0x14c>)
 8000b10:	f043 0304 	orr.w	r3, r3, #4
 8000b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b16:	4b49      	ldr	r3, [pc, #292]	@ (8000c3c <MX_GPIO_Init+0x14c>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	f003 0304 	and.w	r3, r3, #4
 8000b1e:	61bb      	str	r3, [r7, #24]
 8000b20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]
 8000b26:	4b45      	ldr	r3, [pc, #276]	@ (8000c3c <MX_GPIO_Init+0x14c>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	4a44      	ldr	r2, [pc, #272]	@ (8000c3c <MX_GPIO_Init+0x14c>)
 8000b2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b32:	4b42      	ldr	r3, [pc, #264]	@ (8000c3c <MX_GPIO_Init+0x14c>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b3a:	617b      	str	r3, [r7, #20]
 8000b3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]
 8000b42:	4b3e      	ldr	r3, [pc, #248]	@ (8000c3c <MX_GPIO_Init+0x14c>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	4a3d      	ldr	r2, [pc, #244]	@ (8000c3c <MX_GPIO_Init+0x14c>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4e:	4b3b      	ldr	r3, [pc, #236]	@ (8000c3c <MX_GPIO_Init+0x14c>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	613b      	str	r3, [r7, #16]
 8000b58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	4b37      	ldr	r3, [pc, #220]	@ (8000c3c <MX_GPIO_Init+0x14c>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	4a36      	ldr	r2, [pc, #216]	@ (8000c3c <MX_GPIO_Init+0x14c>)
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6a:	4b34      	ldr	r3, [pc, #208]	@ (8000c3c <MX_GPIO_Init+0x14c>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60bb      	str	r3, [r7, #8]
 8000b7a:	4b30      	ldr	r3, [pc, #192]	@ (8000c3c <MX_GPIO_Init+0x14c>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	4a2f      	ldr	r2, [pc, #188]	@ (8000c3c <MX_GPIO_Init+0x14c>)
 8000b80:	f043 0308 	orr.w	r3, r3, #8
 8000b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b86:	4b2d      	ldr	r3, [pc, #180]	@ (8000c3c <MX_GPIO_Init+0x14c>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	f003 0308 	and.w	r3, r3, #8
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	4b29      	ldr	r3, [pc, #164]	@ (8000c3c <MX_GPIO_Init+0x14c>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	4a28      	ldr	r2, [pc, #160]	@ (8000c3c <MX_GPIO_Init+0x14c>)
 8000b9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba2:	4b26      	ldr	r3, [pc, #152]	@ (8000c3c <MX_GPIO_Init+0x14c>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000bb4:	4822      	ldr	r0, [pc, #136]	@ (8000c40 <MX_GPIO_Init+0x150>)
 8000bb6:	f001 fb25 	bl	8002204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2140      	movs	r1, #64	@ 0x40
 8000bbe:	4821      	ldr	r0, [pc, #132]	@ (8000c44 <MX_GPIO_Init+0x154>)
 8000bc0:	f001 fb20 	bl	8002204 <HAL_GPIO_WritePin>
                    GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000bc4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000bd4:	f107 031c 	add.w	r3, r7, #28
 8000bd8:	4619      	mov	r1, r3
 8000bda:	481b      	ldr	r0, [pc, #108]	@ (8000c48 <MX_GPIO_Init+0x158>)
 8000bdc:	f001 f966 	bl	8001eac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8000be0:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000be4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be6:	2301      	movs	r3, #1
 8000be8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf2:	f107 031c 	add.w	r3, r7, #28
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4811      	ldr	r0, [pc, #68]	@ (8000c40 <MX_GPIO_Init+0x150>)
 8000bfa:	f001 f957 	bl	8001eac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bfe:	2340      	movs	r3, #64	@ 0x40
 8000c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c02:	2301      	movs	r3, #1
 8000c04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	4619      	mov	r1, r3
 8000c14:	480b      	ldr	r0, [pc, #44]	@ (8000c44 <MX_GPIO_Init+0x154>)
 8000c16:	f001 f949 	bl	8001eac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c1a:	2380      	movs	r3, #128	@ 0x80
 8000c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c26:	f107 031c 	add.w	r3, r7, #28
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4805      	ldr	r0, [pc, #20]	@ (8000c44 <MX_GPIO_Init+0x154>)
 8000c2e:	f001 f93d 	bl	8001eac <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c32:	bf00      	nop
 8000c34:	3730      	adds	r7, #48	@ 0x30
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020400 	.word	0x40020400
 8000c44:	40021800 	.word	0x40021800
 8000c48:	40020800 	.word	0x40020800

08000c4c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c5c:	d10a      	bne.n	8000c74 <HAL_TIM_PeriodElapsedCallback+0x28>
    shotflag = 0;
 8000c5e:	4b2a      	ldr	r3, [pc, #168]	@ (8000d08 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2180      	movs	r1, #128	@ 0x80
 8000c68:	4828      	ldr	r0, [pc, #160]	@ (8000d0c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000c6a:	f001 facb 	bl	8002204 <HAL_GPIO_WritePin>
    HAL_TIM_Base_Stop_IT(&htim2);
 8000c6e:	4828      	ldr	r0, [pc, #160]	@ (8000d10 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000c70:	f002 f948 	bl	8002f04 <HAL_TIM_Base_Stop_IT>
  }
  if (htim->Instance == TIM4) {
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a26      	ldr	r2, [pc, #152]	@ (8000d14 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d140      	bne.n	8000d00 <HAL_TIM_PeriodElapsedCallback+0xb4>
    switch (trigprogress) {
 8000c7e:	4b26      	ldr	r3, [pc, #152]	@ (8000d18 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2b03      	cmp	r3, #3
 8000c84:	d813      	bhi.n	8000cae <HAL_TIM_PeriodElapsedCallback+0x62>
 8000c86:	a201      	add	r2, pc, #4	@ (adr r2, 8000c8c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c8c:	08000c9d 	.word	0x08000c9d
 8000c90:	08000ca7 	.word	0x08000ca7
 8000c94:	08000c9d 	.word	0x08000c9d
 8000c98:	08000ca7 	.word	0x08000ca7
    case 0:
    case 2:
      TIM3->CCR1 = TRIGPULSE;
 8000c9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000d1c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000c9e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8000ca2:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
 8000ca4:	e003      	b.n	8000cae <HAL_TIM_PeriodElapsedCallback+0x62>
    case 1:
    case 3:
      TIM3->CCR1 = DFLTPULSE;
 8000ca6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d1c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000ca8:	22d2      	movs	r2, #210	@ 0xd2
 8000caa:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
 8000cac:	bf00      	nop
    }
    if (trigprogress++ < 3)
 8000cae:	4b1a      	ldr	r3, [pc, #104]	@ (8000d18 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	1c5a      	adds	r2, r3, #1
 8000cb4:	4918      	ldr	r1, [pc, #96]	@ (8000d18 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000cb6:	600a      	str	r2, [r1, #0]
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	dc03      	bgt.n	8000cc4 <HAL_TIM_PeriodElapsedCallback+0x78>
      HAL_TIM_Base_Start_IT(&htim4);
 8000cbc:	4818      	ldr	r0, [pc, #96]	@ (8000d20 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000cbe:	f002 f8b1 	bl	8002e24 <HAL_TIM_Base_Start_IT>
      HAL_UART_Transmit_IT(&huart5, &RES_DON, 1);
      HAL_TIM_Base_Start_IT(&htim2);
      HAL_TIM_Base_Stop_IT(&htim4);
    }
  }
}
 8000cc2:	e01d      	b.n	8000d00 <HAL_TIM_PeriodElapsedCallback+0xb4>
      trigprogress = 0;
 8000cc4:	4b14      	ldr	r3, [pc, #80]	@ (8000d18 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
      boundcnt = MAXBOUNDCNT;
 8000cca:	4b16      	ldr	r3, [pc, #88]	@ (8000d24 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000ccc:	221e      	movs	r2, #30
 8000cce:	601a      	str	r2, [r3, #0]
      TIM3->CCR3 = THTCENTER, TIM3->CCR4 = PHICENTER;
 8000cd0:	f240 22e3 	movw	r2, #739	@ 0x2e3
 8000cd4:	4b11      	ldr	r3, [pc, #68]	@ (8000d1c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000cd6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000cd8:	f240 12c1 	movw	r2, #449	@ 0x1c1
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d1c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000cde:	641a      	str	r2, [r3, #64]	@ 0x40
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	4809      	ldr	r0, [pc, #36]	@ (8000d0c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000ce6:	f001 fa8d 	bl	8002204 <HAL_GPIO_WritePin>
      HAL_UART_Transmit_IT(&huart5, &RES_DON, 1);
 8000cea:	2201      	movs	r2, #1
 8000cec:	490e      	ldr	r1, [pc, #56]	@ (8000d28 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000cee:	480f      	ldr	r0, [pc, #60]	@ (8000d2c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000cf0:	f003 f8f6 	bl	8003ee0 <HAL_UART_Transmit_IT>
      HAL_TIM_Base_Start_IT(&htim2);
 8000cf4:	4806      	ldr	r0, [pc, #24]	@ (8000d10 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000cf6:	f002 f895 	bl	8002e24 <HAL_TIM_Base_Start_IT>
      HAL_TIM_Base_Stop_IT(&htim4);
 8000cfa:	4809      	ldr	r0, [pc, #36]	@ (8000d20 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000cfc:	f002 f902 	bl	8002f04 <HAL_TIM_Base_Stop_IT>
}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	200008b0 	.word	0x200008b0
 8000d0c:	40020400 	.word	0x40020400
 8000d10:	2000025c 	.word	0x2000025c
 8000d14:	40000800 	.word	0x40000800
 8000d18:	200008b8 	.word	0x200008b8
 8000d1c:	40000400 	.word	0x40000400
 8000d20:	200002ec 	.word	0x200002ec
 8000d24:	20000008 	.word	0x20000008
 8000d28:	08005404 	.word	0x08005404
 8000d2c:	20000334 	.word	0x20000334

08000d30 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  oper[0] = oper[1];
 8000d38:	4b23      	ldr	r3, [pc, #140]	@ (8000dc8 <HAL_UART_RxCpltCallback+0x98>)
 8000d3a:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8000d3e:	4b22      	ldr	r3, [pc, #136]	@ (8000dc8 <HAL_UART_RxCpltCallback+0x98>)
 8000d40:	701a      	strb	r2, [r3, #0]
  oper[1] = oper[2];
 8000d42:	4b21      	ldr	r3, [pc, #132]	@ (8000dc8 <HAL_UART_RxCpltCallback+0x98>)
 8000d44:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8000d48:	4b1f      	ldr	r3, [pc, #124]	@ (8000dc8 <HAL_UART_RxCpltCallback+0x98>)
 8000d4a:	705a      	strb	r2, [r3, #1]
  oper[2] = oper[3];
 8000d4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000dc8 <HAL_UART_RxCpltCallback+0x98>)
 8000d4e:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8000d52:	4b1d      	ldr	r3, [pc, #116]	@ (8000dc8 <HAL_UART_RxCpltCallback+0x98>)
 8000d54:	709a      	strb	r2, [r3, #2]
  oper[3] = rxbuf;
 8000d56:	4b1d      	ldr	r3, [pc, #116]	@ (8000dcc <HAL_UART_RxCpltCallback+0x9c>)
 8000d58:	f993 2000 	ldrsb.w	r2, [r3]
 8000d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc8 <HAL_UART_RxCpltCallback+0x98>)
 8000d5e:	70da      	strb	r2, [r3, #3]
  if (oper[3] == ENDOFDATA && oper[0] == MOVEOP && moveflag == 0)
 8000d60:	4b19      	ldr	r3, [pc, #100]	@ (8000dc8 <HAL_UART_RxCpltCallback+0x98>)
 8000d62:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d10c      	bne.n	8000d84 <HAL_UART_RxCpltCallback+0x54>
 8000d6a:	4b17      	ldr	r3, [pc, #92]	@ (8000dc8 <HAL_UART_RxCpltCallback+0x98>)
 8000d6c:	f993 3000 	ldrsb.w	r3, [r3]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d107      	bne.n	8000d84 <HAL_UART_RxCpltCallback+0x54>
 8000d74:	4b16      	ldr	r3, [pc, #88]	@ (8000dd0 <HAL_UART_RxCpltCallback+0xa0>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d103      	bne.n	8000d84 <HAL_UART_RxCpltCallback+0x54>
    moveflag = 1;
 8000d7c:	4b14      	ldr	r3, [pc, #80]	@ (8000dd0 <HAL_UART_RxCpltCallback+0xa0>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	e018      	b.n	8000db6 <HAL_UART_RxCpltCallback+0x86>
  else if (oper[3] == ENDOFDATA && oper[0] == TRIGOP && shotflag == 0) {
 8000d84:	4b10      	ldr	r3, [pc, #64]	@ (8000dc8 <HAL_UART_RxCpltCallback+0x98>)
 8000d86:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d113      	bne.n	8000db6 <HAL_UART_RxCpltCallback+0x86>
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc8 <HAL_UART_RxCpltCallback+0x98>)
 8000d90:	f993 3000 	ldrsb.w	r3, [r3]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d10e      	bne.n	8000db6 <HAL_UART_RxCpltCallback+0x86>
 8000d98:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd4 <HAL_UART_RxCpltCallback+0xa4>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d10a      	bne.n	8000db6 <HAL_UART_RxCpltCallback+0x86>
    shotflag = 1, HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8000da0:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd4 <HAL_UART_RxCpltCallback+0xa4>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	2201      	movs	r2, #1
 8000da8:	2180      	movs	r1, #128	@ 0x80
 8000daa:	480b      	ldr	r0, [pc, #44]	@ (8000dd8 <HAL_UART_RxCpltCallback+0xa8>)
 8000dac:	f001 fa2a 	bl	8002204 <HAL_GPIO_WritePin>
    HAL_TIM_Base_Start_IT(&htim4);
 8000db0:	480a      	ldr	r0, [pc, #40]	@ (8000ddc <HAL_UART_RxCpltCallback+0xac>)
 8000db2:	f002 f837 	bl	8002e24 <HAL_TIM_Base_Start_IT>
  }
  HAL_UART_Receive_IT(&huart5, &rxbuf, 1);
 8000db6:	2201      	movs	r2, #1
 8000db8:	4904      	ldr	r1, [pc, #16]	@ (8000dcc <HAL_UART_RxCpltCallback+0x9c>)
 8000dba:	4809      	ldr	r0, [pc, #36]	@ (8000de0 <HAL_UART_RxCpltCallback+0xb0>)
 8000dbc:	f003 f8c6 	bl	8003f4c <HAL_UART_Receive_IT>
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	200008ac 	.word	0x200008ac
 8000dcc:	200008a8 	.word	0x200008a8
 8000dd0:	200008b4 	.word	0x200008b4
 8000dd4:	200008b0 	.word	0x200008b0
 8000dd8:	40020400 	.word	0x40020400
 8000ddc:	200002ec 	.word	0x200002ec
 8000de0:	20000334 	.word	0x20000334

08000de4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de8:	b672      	cpsid	i
}
 8000dea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000dec:	bf00      	nop
 8000dee:	e7fd      	b.n	8000dec <Error_Handler+0x8>

08000df0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	4b10      	ldr	r3, [pc, #64]	@ (8000e3c <HAL_MspInit+0x4c>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dfe:	4a0f      	ldr	r2, [pc, #60]	@ (8000e3c <HAL_MspInit+0x4c>)
 8000e00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e06:	4b0d      	ldr	r3, [pc, #52]	@ (8000e3c <HAL_MspInit+0x4c>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	603b      	str	r3, [r7, #0]
 8000e16:	4b09      	ldr	r3, [pc, #36]	@ (8000e3c <HAL_MspInit+0x4c>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1a:	4a08      	ldr	r2, [pc, #32]	@ (8000e3c <HAL_MspInit+0x4c>)
 8000e1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e22:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <HAL_MspInit+0x4c>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e2a:	603b      	str	r3, [r7, #0]
 8000e2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	40023800 	.word	0x40023800

08000e40 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08e      	sub	sp, #56	@ 0x38
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a55      	ldr	r2, [pc, #340]	@ (8000fb4 <HAL_ETH_MspInit+0x174>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	f040 80a4 	bne.w	8000fac <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000e64:	2300      	movs	r3, #0
 8000e66:	623b      	str	r3, [r7, #32]
 8000e68:	4b53      	ldr	r3, [pc, #332]	@ (8000fb8 <HAL_ETH_MspInit+0x178>)
 8000e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6c:	4a52      	ldr	r2, [pc, #328]	@ (8000fb8 <HAL_ETH_MspInit+0x178>)
 8000e6e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e72:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e74:	4b50      	ldr	r3, [pc, #320]	@ (8000fb8 <HAL_ETH_MspInit+0x178>)
 8000e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e7c:	623b      	str	r3, [r7, #32]
 8000e7e:	6a3b      	ldr	r3, [r7, #32]
 8000e80:	2300      	movs	r3, #0
 8000e82:	61fb      	str	r3, [r7, #28]
 8000e84:	4b4c      	ldr	r3, [pc, #304]	@ (8000fb8 <HAL_ETH_MspInit+0x178>)
 8000e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e88:	4a4b      	ldr	r2, [pc, #300]	@ (8000fb8 <HAL_ETH_MspInit+0x178>)
 8000e8a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000e8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e90:	4b49      	ldr	r3, [pc, #292]	@ (8000fb8 <HAL_ETH_MspInit+0x178>)
 8000e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e94:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000e98:	61fb      	str	r3, [r7, #28]
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61bb      	str	r3, [r7, #24]
 8000ea0:	4b45      	ldr	r3, [pc, #276]	@ (8000fb8 <HAL_ETH_MspInit+0x178>)
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea4:	4a44      	ldr	r2, [pc, #272]	@ (8000fb8 <HAL_ETH_MspInit+0x178>)
 8000ea6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000eaa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eac:	4b42      	ldr	r3, [pc, #264]	@ (8000fb8 <HAL_ETH_MspInit+0x178>)
 8000eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000eb4:	61bb      	str	r3, [r7, #24]
 8000eb6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	4b3e      	ldr	r3, [pc, #248]	@ (8000fb8 <HAL_ETH_MspInit+0x178>)
 8000ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec0:	4a3d      	ldr	r2, [pc, #244]	@ (8000fb8 <HAL_ETH_MspInit+0x178>)
 8000ec2:	f043 0304 	orr.w	r3, r3, #4
 8000ec6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec8:	4b3b      	ldr	r3, [pc, #236]	@ (8000fb8 <HAL_ETH_MspInit+0x178>)
 8000eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ecc:	f003 0304 	and.w	r3, r3, #4
 8000ed0:	617b      	str	r3, [r7, #20]
 8000ed2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	4b37      	ldr	r3, [pc, #220]	@ (8000fb8 <HAL_ETH_MspInit+0x178>)
 8000eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000edc:	4a36      	ldr	r2, [pc, #216]	@ (8000fb8 <HAL_ETH_MspInit+0x178>)
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee4:	4b34      	ldr	r3, [pc, #208]	@ (8000fb8 <HAL_ETH_MspInit+0x178>)
 8000ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	613b      	str	r3, [r7, #16]
 8000eee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	4b30      	ldr	r3, [pc, #192]	@ (8000fb8 <HAL_ETH_MspInit+0x178>)
 8000ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef8:	4a2f      	ldr	r2, [pc, #188]	@ (8000fb8 <HAL_ETH_MspInit+0x178>)
 8000efa:	f043 0302 	orr.w	r3, r3, #2
 8000efe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f00:	4b2d      	ldr	r3, [pc, #180]	@ (8000fb8 <HAL_ETH_MspInit+0x178>)
 8000f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f04:	f003 0302 	and.w	r3, r3, #2
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	4b29      	ldr	r3, [pc, #164]	@ (8000fb8 <HAL_ETH_MspInit+0x178>)
 8000f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f14:	4a28      	ldr	r2, [pc, #160]	@ (8000fb8 <HAL_ETH_MspInit+0x178>)
 8000f16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1c:	4b26      	ldr	r3, [pc, #152]	@ (8000fb8 <HAL_ETH_MspInit+0x178>)
 8000f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f28:	2332      	movs	r3, #50	@ 0x32
 8000f2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f34:	2303      	movs	r3, #3
 8000f36:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f38:	230b      	movs	r3, #11
 8000f3a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f40:	4619      	mov	r1, r3
 8000f42:	481e      	ldr	r0, [pc, #120]	@ (8000fbc <HAL_ETH_MspInit+0x17c>)
 8000f44:	f000 ffb2 	bl	8001eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000f48:	2386      	movs	r3, #134	@ 0x86
 8000f4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f54:	2303      	movs	r3, #3
 8000f56:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f58:	230b      	movs	r3, #11
 8000f5a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f60:	4619      	mov	r1, r3
 8000f62:	4817      	ldr	r0, [pc, #92]	@ (8000fc0 <HAL_ETH_MspInit+0x180>)
 8000f64:	f000 ffa2 	bl	8001eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000f68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f76:	2303      	movs	r3, #3
 8000f78:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f7a:	230b      	movs	r3, #11
 8000f7c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f82:	4619      	mov	r1, r3
 8000f84:	480f      	ldr	r0, [pc, #60]	@ (8000fc4 <HAL_ETH_MspInit+0x184>)
 8000f86:	f000 ff91 	bl	8001eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000f8a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000f8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f9c:	230b      	movs	r3, #11
 8000f9e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fa0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4808      	ldr	r0, [pc, #32]	@ (8000fc8 <HAL_ETH_MspInit+0x188>)
 8000fa8:	f000 ff80 	bl	8001eac <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000fac:	bf00      	nop
 8000fae:	3738      	adds	r7, #56	@ 0x38
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40028000 	.word	0x40028000
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40020800 	.word	0x40020800
 8000fc0:	40020000 	.word	0x40020000
 8000fc4:	40020400 	.word	0x40020400
 8000fc8:	40021800 	.word	0x40021800

08000fcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fdc:	d10e      	bne.n	8000ffc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
 8000fe2:	4b20      	ldr	r3, [pc, #128]	@ (8001064 <HAL_TIM_Base_MspInit+0x98>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe6:	4a1f      	ldr	r2, [pc, #124]	@ (8001064 <HAL_TIM_Base_MspInit+0x98>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fee:	4b1d      	ldr	r3, [pc, #116]	@ (8001064 <HAL_TIM_Base_MspInit+0x98>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000ffa:	e02e      	b.n	800105a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a19      	ldr	r2, [pc, #100]	@ (8001068 <HAL_TIM_Base_MspInit+0x9c>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d10e      	bne.n	8001024 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	613b      	str	r3, [r7, #16]
 800100a:	4b16      	ldr	r3, [pc, #88]	@ (8001064 <HAL_TIM_Base_MspInit+0x98>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100e:	4a15      	ldr	r2, [pc, #84]	@ (8001064 <HAL_TIM_Base_MspInit+0x98>)
 8001010:	f043 0302 	orr.w	r3, r3, #2
 8001014:	6413      	str	r3, [r2, #64]	@ 0x40
 8001016:	4b13      	ldr	r3, [pc, #76]	@ (8001064 <HAL_TIM_Base_MspInit+0x98>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	693b      	ldr	r3, [r7, #16]
}
 8001022:	e01a      	b.n	800105a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM4)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a10      	ldr	r2, [pc, #64]	@ (800106c <HAL_TIM_Base_MspInit+0xa0>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d115      	bne.n	800105a <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	4b0c      	ldr	r3, [pc, #48]	@ (8001064 <HAL_TIM_Base_MspInit+0x98>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001036:	4a0b      	ldr	r2, [pc, #44]	@ (8001064 <HAL_TIM_Base_MspInit+0x98>)
 8001038:	f043 0304 	orr.w	r3, r3, #4
 800103c:	6413      	str	r3, [r2, #64]	@ 0x40
 800103e:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <HAL_TIM_Base_MspInit+0x98>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001042:	f003 0304 	and.w	r3, r3, #4
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2100      	movs	r1, #0
 800104e:	201e      	movs	r0, #30
 8001050:	f000 fb3b 	bl	80016ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001054:	201e      	movs	r0, #30
 8001056:	f000 fb54 	bl	8001702 <HAL_NVIC_EnableIRQ>
}
 800105a:	bf00      	nop
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40023800 	.word	0x40023800
 8001068:	40000400 	.word	0x40000400
 800106c:	40000800 	.word	0x40000800

08001070 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a12      	ldr	r2, [pc, #72]	@ (80010d8 <HAL_TIM_MspPostInit+0x68>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d11e      	bne.n	80010d0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	4b11      	ldr	r3, [pc, #68]	@ (80010dc <HAL_TIM_MspPostInit+0x6c>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	4a10      	ldr	r2, [pc, #64]	@ (80010dc <HAL_TIM_MspPostInit+0x6c>)
 800109c:	f043 0304 	orr.w	r3, r3, #4
 80010a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a2:	4b0e      	ldr	r3, [pc, #56]	@ (80010dc <HAL_TIM_MspPostInit+0x6c>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	f003 0304 	and.w	r3, r3, #4
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 80010ae:	f44f 7350 	mov.w	r3, #832	@ 0x340
 80010b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	2300      	movs	r3, #0
 80010be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010c0:	2302      	movs	r3, #2
 80010c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010c4:	f107 030c 	add.w	r3, r7, #12
 80010c8:	4619      	mov	r1, r3
 80010ca:	4805      	ldr	r0, [pc, #20]	@ (80010e0 <HAL_TIM_MspPostInit+0x70>)
 80010cc:	f000 feee 	bl	8001eac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80010d0:	bf00      	nop
 80010d2:	3720      	adds	r7, #32
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40000400 	.word	0x40000400
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40020800 	.word	0x40020800

080010e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08c      	sub	sp, #48	@ 0x30
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 031c 	add.w	r3, r7, #28
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a42      	ldr	r2, [pc, #264]	@ (800120c <HAL_UART_MspInit+0x128>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d14b      	bne.n	800119e <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	61bb      	str	r3, [r7, #24]
 800110a:	4b41      	ldr	r3, [pc, #260]	@ (8001210 <HAL_UART_MspInit+0x12c>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110e:	4a40      	ldr	r2, [pc, #256]	@ (8001210 <HAL_UART_MspInit+0x12c>)
 8001110:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001114:	6413      	str	r3, [r2, #64]	@ 0x40
 8001116:	4b3e      	ldr	r3, [pc, #248]	@ (8001210 <HAL_UART_MspInit+0x12c>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800111e:	61bb      	str	r3, [r7, #24]
 8001120:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	4b3a      	ldr	r3, [pc, #232]	@ (8001210 <HAL_UART_MspInit+0x12c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	4a39      	ldr	r2, [pc, #228]	@ (8001210 <HAL_UART_MspInit+0x12c>)
 800112c:	f043 0304 	orr.w	r3, r3, #4
 8001130:	6313      	str	r3, [r2, #48]	@ 0x30
 8001132:	4b37      	ldr	r3, [pc, #220]	@ (8001210 <HAL_UART_MspInit+0x12c>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	f003 0304 	and.w	r3, r3, #4
 800113a:	617b      	str	r3, [r7, #20]
 800113c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	4b33      	ldr	r3, [pc, #204]	@ (8001210 <HAL_UART_MspInit+0x12c>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	4a32      	ldr	r2, [pc, #200]	@ (8001210 <HAL_UART_MspInit+0x12c>)
 8001148:	f043 0308 	orr.w	r3, r3, #8
 800114c:	6313      	str	r3, [r2, #48]	@ 0x30
 800114e:	4b30      	ldr	r3, [pc, #192]	@ (8001210 <HAL_UART_MspInit+0x12c>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	f003 0308 	and.w	r3, r3, #8
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800115a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800115e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001160:	2302      	movs	r3, #2
 8001162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001168:	2303      	movs	r3, #3
 800116a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800116c:	2308      	movs	r3, #8
 800116e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001170:	f107 031c 	add.w	r3, r7, #28
 8001174:	4619      	mov	r1, r3
 8001176:	4827      	ldr	r0, [pc, #156]	@ (8001214 <HAL_UART_MspInit+0x130>)
 8001178:	f000 fe98 	bl	8001eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800117c:	2304      	movs	r3, #4
 800117e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001180:	2302      	movs	r3, #2
 8001182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001188:	2303      	movs	r3, #3
 800118a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800118c:	2308      	movs	r3, #8
 800118e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001190:	f107 031c 	add.w	r3, r7, #28
 8001194:	4619      	mov	r1, r3
 8001196:	4820      	ldr	r0, [pc, #128]	@ (8001218 <HAL_UART_MspInit+0x134>)
 8001198:	f000 fe88 	bl	8001eac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800119c:	e031      	b.n	8001202 <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART3)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a1e      	ldr	r2, [pc, #120]	@ (800121c <HAL_UART_MspInit+0x138>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d12c      	bne.n	8001202 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	4b18      	ldr	r3, [pc, #96]	@ (8001210 <HAL_UART_MspInit+0x12c>)
 80011ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b0:	4a17      	ldr	r2, [pc, #92]	@ (8001210 <HAL_UART_MspInit+0x12c>)
 80011b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80011b8:	4b15      	ldr	r3, [pc, #84]	@ (8001210 <HAL_UART_MspInit+0x12c>)
 80011ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c4:	2300      	movs	r3, #0
 80011c6:	60bb      	str	r3, [r7, #8]
 80011c8:	4b11      	ldr	r3, [pc, #68]	@ (8001210 <HAL_UART_MspInit+0x12c>)
 80011ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011cc:	4a10      	ldr	r2, [pc, #64]	@ (8001210 <HAL_UART_MspInit+0x12c>)
 80011ce:	f043 0308 	orr.w	r3, r3, #8
 80011d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001210 <HAL_UART_MspInit+0x12c>)
 80011d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d8:	f003 0308 	and.w	r3, r3, #8
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80011e0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ee:	2303      	movs	r3, #3
 80011f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011f2:	2307      	movs	r3, #7
 80011f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011f6:	f107 031c 	add.w	r3, r7, #28
 80011fa:	4619      	mov	r1, r3
 80011fc:	4806      	ldr	r0, [pc, #24]	@ (8001218 <HAL_UART_MspInit+0x134>)
 80011fe:	f000 fe55 	bl	8001eac <HAL_GPIO_Init>
}
 8001202:	bf00      	nop
 8001204:	3730      	adds	r7, #48	@ 0x30
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40005000 	.word	0x40005000
 8001210:	40023800 	.word	0x40023800
 8001214:	40020800 	.word	0x40020800
 8001218:	40020c00 	.word	0x40020c00
 800121c:	40004800 	.word	0x40004800

08001220 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	@ 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001240:	d13f      	bne.n	80012c2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	4b21      	ldr	r3, [pc, #132]	@ (80012cc <HAL_PCD_MspInit+0xac>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	4a20      	ldr	r2, [pc, #128]	@ (80012cc <HAL_PCD_MspInit+0xac>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6313      	str	r3, [r2, #48]	@ 0x30
 8001252:	4b1e      	ldr	r3, [pc, #120]	@ (80012cc <HAL_PCD_MspInit+0xac>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800125e:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001262:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126c:	2303      	movs	r3, #3
 800126e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001270:	230a      	movs	r3, #10
 8001272:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	4619      	mov	r1, r3
 800127a:	4815      	ldr	r0, [pc, #84]	@ (80012d0 <HAL_PCD_MspInit+0xb0>)
 800127c:	f000 fe16 	bl	8001eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001280:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001284:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001286:	2300      	movs	r3, #0
 8001288:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	480e      	ldr	r0, [pc, #56]	@ (80012d0 <HAL_PCD_MspInit+0xb0>)
 8001296:	f000 fe09 	bl	8001eac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800129a:	4b0c      	ldr	r3, [pc, #48]	@ (80012cc <HAL_PCD_MspInit+0xac>)
 800129c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800129e:	4a0b      	ldr	r2, [pc, #44]	@ (80012cc <HAL_PCD_MspInit+0xac>)
 80012a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012a4:	6353      	str	r3, [r2, #52]	@ 0x34
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	4b08      	ldr	r3, [pc, #32]	@ (80012cc <HAL_PCD_MspInit+0xac>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ae:	4a07      	ldr	r2, [pc, #28]	@ (80012cc <HAL_PCD_MspInit+0xac>)
 80012b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012b6:	4b05      	ldr	r3, [pc, #20]	@ (80012cc <HAL_PCD_MspInit+0xac>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80012c2:	bf00      	nop
 80012c4:	3728      	adds	r7, #40	@ 0x28
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40020000 	.word	0x40020000

080012d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012d8:	bf00      	nop
 80012da:	e7fd      	b.n	80012d8 <NMI_Handler+0x4>

080012dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e0:	bf00      	nop
 80012e2:	e7fd      	b.n	80012e0 <HardFault_Handler+0x4>

080012e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e8:	bf00      	nop
 80012ea:	e7fd      	b.n	80012e8 <MemManage_Handler+0x4>

080012ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <BusFault_Handler+0x4>

080012f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <UsageFault_Handler+0x4>

080012fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800132a:	f000 f8af 	bl	800148c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001338:	4802      	ldr	r0, [pc, #8]	@ (8001344 <TIM2_IRQHandler+0x10>)
 800133a:	f001 ff33 	bl	80031a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	2000025c 	.word	0x2000025c

08001348 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800134c:	4802      	ldr	r0, [pc, #8]	@ (8001358 <TIM4_IRQHandler+0x10>)
 800134e:	f001 ff29 	bl	80031a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200002ec 	.word	0x200002ec

0800135c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001360:	4802      	ldr	r0, [pc, #8]	@ (800136c <UART5_IRQHandler+0x10>)
 8001362:	f002 fe19 	bl	8003f98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000334 	.word	0x20000334

08001370 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001374:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <SystemInit+0x20>)
 8001376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800137a:	4a05      	ldr	r2, [pc, #20]	@ (8001390 <SystemInit+0x20>)
 800137c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001380:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001394:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001398:	f7ff ffea 	bl	8001370 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800139c:	480c      	ldr	r0, [pc, #48]	@ (80013d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800139e:	490d      	ldr	r1, [pc, #52]	@ (80013d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013a0:	4a0d      	ldr	r2, [pc, #52]	@ (80013d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a4:	e002      	b.n	80013ac <LoopCopyDataInit>

080013a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013aa:	3304      	adds	r3, #4

080013ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b0:	d3f9      	bcc.n	80013a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013b2:	4a0a      	ldr	r2, [pc, #40]	@ (80013dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013b4:	4c0a      	ldr	r4, [pc, #40]	@ (80013e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b8:	e001      	b.n	80013be <LoopFillZerobss>

080013ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013bc:	3204      	adds	r2, #4

080013be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c0:	d3fb      	bcc.n	80013ba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80013c2:	f003 ffef 	bl	80053a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013c6:	f7ff f889 	bl	80004dc <main>
  bx  lr    
 80013ca:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80013cc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80013d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d4:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80013d8:	08005430 	.word	0x08005430
  ldr r2, =_sbss
 80013dc:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80013e0:	200008c8 	.word	0x200008c8

080013e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013e4:	e7fe      	b.n	80013e4 <ADC_IRQHandler>
	...

080013e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001428 <HAL_Init+0x40>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001428 <HAL_Init+0x40>)
 80013f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001428 <HAL_Init+0x40>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001428 <HAL_Init+0x40>)
 80013fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001402:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001404:	4b08      	ldr	r3, [pc, #32]	@ (8001428 <HAL_Init+0x40>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a07      	ldr	r2, [pc, #28]	@ (8001428 <HAL_Init+0x40>)
 800140a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800140e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001410:	2003      	movs	r0, #3
 8001412:	f000 f94f 	bl	80016b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001416:	2000      	movs	r0, #0
 8001418:	f000 f808 	bl	800142c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800141c:	f7ff fce8 	bl	8000df0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40023c00 	.word	0x40023c00

0800142c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001434:	4b12      	ldr	r3, [pc, #72]	@ (8001480 <HAL_InitTick+0x54>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4b12      	ldr	r3, [pc, #72]	@ (8001484 <HAL_InitTick+0x58>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	4619      	mov	r1, r3
 800143e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001442:	fbb3 f3f1 	udiv	r3, r3, r1
 8001446:	fbb2 f3f3 	udiv	r3, r2, r3
 800144a:	4618      	mov	r0, r3
 800144c:	f000 f967 	bl	800171e <HAL_SYSTICK_Config>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e00e      	b.n	8001478 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b0f      	cmp	r3, #15
 800145e:	d80a      	bhi.n	8001476 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001460:	2200      	movs	r2, #0
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	f04f 30ff 	mov.w	r0, #4294967295
 8001468:	f000 f92f 	bl	80016ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800146c:	4a06      	ldr	r2, [pc, #24]	@ (8001488 <HAL_InitTick+0x5c>)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001472:	2300      	movs	r3, #0
 8001474:	e000      	b.n	8001478 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
}
 8001478:	4618      	mov	r0, r3
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	2000000c 	.word	0x2000000c
 8001484:	20000014 	.word	0x20000014
 8001488:	20000010 	.word	0x20000010

0800148c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001490:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <HAL_IncTick+0x20>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	461a      	mov	r2, r3
 8001496:	4b06      	ldr	r3, [pc, #24]	@ (80014b0 <HAL_IncTick+0x24>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4413      	add	r3, r2
 800149c:	4a04      	ldr	r2, [pc, #16]	@ (80014b0 <HAL_IncTick+0x24>)
 800149e:	6013      	str	r3, [r2, #0]
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	20000014 	.word	0x20000014
 80014b0:	200008c4 	.word	0x200008c4

080014b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  return uwTick;
 80014b8:	4b03      	ldr	r3, [pc, #12]	@ (80014c8 <HAL_GetTick+0x14>)
 80014ba:	681b      	ldr	r3, [r3, #0]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	200008c4 	.word	0x200008c4

080014cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014d4:	f7ff ffee 	bl	80014b4 <HAL_GetTick>
 80014d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e4:	d005      	beq.n	80014f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001510 <HAL_Delay+0x44>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	461a      	mov	r2, r3
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	4413      	add	r3, r2
 80014f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014f2:	bf00      	nop
 80014f4:	f7ff ffde 	bl	80014b4 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	429a      	cmp	r2, r3
 8001502:	d8f7      	bhi.n	80014f4 <HAL_Delay+0x28>
  {
  }
}
 8001504:	bf00      	nop
 8001506:	bf00      	nop
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000014 	.word	0x20000014

08001514 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001524:	4b0c      	ldr	r3, [pc, #48]	@ (8001558 <__NVIC_SetPriorityGrouping+0x44>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001530:	4013      	ands	r3, r2
 8001532:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800153c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001540:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001546:	4a04      	ldr	r2, [pc, #16]	@ (8001558 <__NVIC_SetPriorityGrouping+0x44>)
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	60d3      	str	r3, [r2, #12]
}
 800154c:	bf00      	nop
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001560:	4b04      	ldr	r3, [pc, #16]	@ (8001574 <__NVIC_GetPriorityGrouping+0x18>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	0a1b      	lsrs	r3, r3, #8
 8001566:	f003 0307 	and.w	r3, r3, #7
}
 800156a:	4618      	mov	r0, r3
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001586:	2b00      	cmp	r3, #0
 8001588:	db0b      	blt.n	80015a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	f003 021f 	and.w	r2, r3, #31
 8001590:	4907      	ldr	r1, [pc, #28]	@ (80015b0 <__NVIC_EnableIRQ+0x38>)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	095b      	lsrs	r3, r3, #5
 8001598:	2001      	movs	r0, #1
 800159a:	fa00 f202 	lsl.w	r2, r0, r2
 800159e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	e000e100 	.word	0xe000e100

080015b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	6039      	str	r1, [r7, #0]
 80015be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	db0a      	blt.n	80015de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	490c      	ldr	r1, [pc, #48]	@ (8001600 <__NVIC_SetPriority+0x4c>)
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	0112      	lsls	r2, r2, #4
 80015d4:	b2d2      	uxtb	r2, r2
 80015d6:	440b      	add	r3, r1
 80015d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015dc:	e00a      	b.n	80015f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	4908      	ldr	r1, [pc, #32]	@ (8001604 <__NVIC_SetPriority+0x50>)
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	f003 030f 	and.w	r3, r3, #15
 80015ea:	3b04      	subs	r3, #4
 80015ec:	0112      	lsls	r2, r2, #4
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	440b      	add	r3, r1
 80015f2:	761a      	strb	r2, [r3, #24]
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	e000e100 	.word	0xe000e100
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001608:	b480      	push	{r7}
 800160a:	b089      	sub	sp, #36	@ 0x24
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f1c3 0307 	rsb	r3, r3, #7
 8001622:	2b04      	cmp	r3, #4
 8001624:	bf28      	it	cs
 8001626:	2304      	movcs	r3, #4
 8001628:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	3304      	adds	r3, #4
 800162e:	2b06      	cmp	r3, #6
 8001630:	d902      	bls.n	8001638 <NVIC_EncodePriority+0x30>
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3b03      	subs	r3, #3
 8001636:	e000      	b.n	800163a <NVIC_EncodePriority+0x32>
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800163c:	f04f 32ff 	mov.w	r2, #4294967295
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	43da      	mvns	r2, r3
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	401a      	ands	r2, r3
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001650:	f04f 31ff 	mov.w	r1, #4294967295
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	fa01 f303 	lsl.w	r3, r1, r3
 800165a:	43d9      	mvns	r1, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001660:	4313      	orrs	r3, r2
         );
}
 8001662:	4618      	mov	r0, r3
 8001664:	3724      	adds	r7, #36	@ 0x24
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
	...

08001670 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3b01      	subs	r3, #1
 800167c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001680:	d301      	bcc.n	8001686 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001682:	2301      	movs	r3, #1
 8001684:	e00f      	b.n	80016a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001686:	4a0a      	ldr	r2, [pc, #40]	@ (80016b0 <SysTick_Config+0x40>)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3b01      	subs	r3, #1
 800168c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800168e:	210f      	movs	r1, #15
 8001690:	f04f 30ff 	mov.w	r0, #4294967295
 8001694:	f7ff ff8e 	bl	80015b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001698:	4b05      	ldr	r3, [pc, #20]	@ (80016b0 <SysTick_Config+0x40>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800169e:	4b04      	ldr	r3, [pc, #16]	@ (80016b0 <SysTick_Config+0x40>)
 80016a0:	2207      	movs	r2, #7
 80016a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	e000e010 	.word	0xe000e010

080016b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff ff29 	bl	8001514 <__NVIC_SetPriorityGrouping>
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b086      	sub	sp, #24
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	4603      	mov	r3, r0
 80016d2:	60b9      	str	r1, [r7, #8]
 80016d4:	607a      	str	r2, [r7, #4]
 80016d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016dc:	f7ff ff3e 	bl	800155c <__NVIC_GetPriorityGrouping>
 80016e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	68b9      	ldr	r1, [r7, #8]
 80016e6:	6978      	ldr	r0, [r7, #20]
 80016e8:	f7ff ff8e 	bl	8001608 <NVIC_EncodePriority>
 80016ec:	4602      	mov	r2, r0
 80016ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f2:	4611      	mov	r1, r2
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ff5d 	bl	80015b4 <__NVIC_SetPriority>
}
 80016fa:	bf00      	nop
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	4603      	mov	r3, r0
 800170a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800170c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff ff31 	bl	8001578 <__NVIC_EnableIRQ>
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff ffa2 	bl	8001670 <SysTick_Config>
 800172c:	4603      	mov	r3, r0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b084      	sub	sp, #16
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001742:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001744:	f7ff feb6 	bl	80014b4 <HAL_GetTick>
 8001748:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d008      	beq.n	8001768 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2280      	movs	r2, #128	@ 0x80
 800175a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e052      	b.n	800180e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f022 0216 	bic.w	r2, r2, #22
 8001776:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	695a      	ldr	r2, [r3, #20]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001786:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178c:	2b00      	cmp	r3, #0
 800178e:	d103      	bne.n	8001798 <HAL_DMA_Abort+0x62>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001794:	2b00      	cmp	r3, #0
 8001796:	d007      	beq.n	80017a8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f022 0208 	bic.w	r2, r2, #8
 80017a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0201 	bic.w	r2, r2, #1
 80017b6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017b8:	e013      	b.n	80017e2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017ba:	f7ff fe7b 	bl	80014b4 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b05      	cmp	r3, #5
 80017c6:	d90c      	bls.n	80017e2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2220      	movs	r2, #32
 80017cc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2203      	movs	r2, #3
 80017d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e015      	b.n	800180e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1e4      	bne.n	80017ba <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017f4:	223f      	movs	r2, #63	@ 0x3f
 80017f6:	409a      	lsls	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001816:	b480      	push	{r7}
 8001818:	b083      	sub	sp, #12
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d004      	beq.n	8001834 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2280      	movs	r2, #128	@ 0x80
 800182e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e00c      	b.n	800184e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2205      	movs	r2, #5
 8001838:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f022 0201 	bic.w	r2, r2, #1
 800184a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
	...

0800185c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e06c      	b.n	8001948 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001874:	2b00      	cmp	r3, #0
 8001876:	d106      	bne.n	8001886 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2223      	movs	r2, #35	@ 0x23
 800187c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff fadd 	bl	8000e40 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	4b31      	ldr	r3, [pc, #196]	@ (8001950 <HAL_ETH_Init+0xf4>)
 800188c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188e:	4a30      	ldr	r2, [pc, #192]	@ (8001950 <HAL_ETH_Init+0xf4>)
 8001890:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001894:	6453      	str	r3, [r2, #68]	@ 0x44
 8001896:	4b2e      	ldr	r3, [pc, #184]	@ (8001950 <HAL_ETH_Init+0xf4>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80018a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001954 <HAL_ETH_Init+0xf8>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	4a2b      	ldr	r2, [pc, #172]	@ (8001954 <HAL_ETH_Init+0xf8>)
 80018a8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80018ac:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80018ae:	4b29      	ldr	r3, [pc, #164]	@ (8001954 <HAL_ETH_Init+0xf8>)
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	4927      	ldr	r1, [pc, #156]	@ (8001954 <HAL_ETH_Init+0xf8>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80018bc:	4b25      	ldr	r3, [pc, #148]	@ (8001954 <HAL_ETH_Init+0xf8>)
 80018be:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6812      	ldr	r2, [r2, #0]
 80018ce:	f043 0301 	orr.w	r3, r3, #1
 80018d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018d8:	f7ff fdec 	bl	80014b4 <HAL_GetTick>
 80018dc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80018de:	e011      	b.n	8001904 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80018e0:	f7ff fde8 	bl	80014b4 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80018ee:	d909      	bls.n	8001904 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2204      	movs	r2, #4
 80018f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	22e0      	movs	r2, #224	@ 0xe0
 80018fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e021      	b.n	8001948 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1e4      	bne.n	80018e0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 f958 	bl	8001bcc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f000 f9ff 	bl	8001d20 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 fa55 	bl	8001dd2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	461a      	mov	r2, r3
 800192e:	2100      	movs	r1, #0
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 f9bd 	bl	8001cb0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2210      	movs	r2, #16
 8001942:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40023800 	.word	0x40023800
 8001954:	40013800 	.word	0x40013800

08001958 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	4b51      	ldr	r3, [pc, #324]	@ (8001ab4 <ETH_SetMACConfig+0x15c>)
 800196e:	4013      	ands	r3, r2
 8001970:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	7c1b      	ldrb	r3, [r3, #16]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d102      	bne.n	8001980 <ETH_SetMACConfig+0x28>
 800197a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800197e:	e000      	b.n	8001982 <ETH_SetMACConfig+0x2a>
 8001980:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	7c5b      	ldrb	r3, [r3, #17]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d102      	bne.n	8001990 <ETH_SetMACConfig+0x38>
 800198a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800198e:	e000      	b.n	8001992 <ETH_SetMACConfig+0x3a>
 8001990:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001992:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001998:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	7fdb      	ldrb	r3, [r3, #31]
 800199e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80019a0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80019a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	7f92      	ldrb	r2, [r2, #30]
 80019ac:	2a00      	cmp	r2, #0
 80019ae:	d102      	bne.n	80019b6 <ETH_SetMACConfig+0x5e>
 80019b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019b4:	e000      	b.n	80019b8 <ETH_SetMACConfig+0x60>
 80019b6:	2200      	movs	r2, #0
                        macconf->Speed |
 80019b8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	7f1b      	ldrb	r3, [r3, #28]
 80019be:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80019c0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80019c6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	791b      	ldrb	r3, [r3, #4]
 80019cc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80019ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80019d6:	2a00      	cmp	r2, #0
 80019d8:	d102      	bne.n	80019e0 <ETH_SetMACConfig+0x88>
 80019da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019de:	e000      	b.n	80019e2 <ETH_SetMACConfig+0x8a>
 80019e0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80019e2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	7bdb      	ldrb	r3, [r3, #15]
 80019e8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80019ea:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80019f0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80019f8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80019fa:	4313      	orrs	r3, r2
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a12:	2001      	movs	r0, #1
 8001a14:	f7ff fd5a 	bl	80014cc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001a2e:	4013      	ands	r3, r2
 8001a30:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a36:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001a3e:	2a00      	cmp	r2, #0
 8001a40:	d101      	bne.n	8001a46 <ETH_SetMACConfig+0xee>
 8001a42:	2280      	movs	r2, #128	@ 0x80
 8001a44:	e000      	b.n	8001a48 <ETH_SetMACConfig+0xf0>
 8001a46:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a48:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001a4e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001a56:	2a01      	cmp	r2, #1
 8001a58:	d101      	bne.n	8001a5e <ETH_SetMACConfig+0x106>
 8001a5a:	2208      	movs	r2, #8
 8001a5c:	e000      	b.n	8001a60 <ETH_SetMACConfig+0x108>
 8001a5e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001a60:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001a68:	2a01      	cmp	r2, #1
 8001a6a:	d101      	bne.n	8001a70 <ETH_SetMACConfig+0x118>
 8001a6c:	2204      	movs	r2, #4
 8001a6e:	e000      	b.n	8001a72 <ETH_SetMACConfig+0x11a>
 8001a70:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001a72:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001a7a:	2a01      	cmp	r2, #1
 8001a7c:	d101      	bne.n	8001a82 <ETH_SetMACConfig+0x12a>
 8001a7e:	2202      	movs	r2, #2
 8001a80:	e000      	b.n	8001a84 <ETH_SetMACConfig+0x12c>
 8001a82:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a84:	4313      	orrs	r3, r2
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	f7ff fd15 	bl	80014cc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	619a      	str	r2, [r3, #24]
}
 8001aaa:	bf00      	nop
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	ff20810f 	.word	0xff20810f

08001ab8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	4b3d      	ldr	r3, [pc, #244]	@ (8001bc8 <ETH_SetDMAConfig+0x110>)
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	7b1b      	ldrb	r3, [r3, #12]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d102      	bne.n	8001ae4 <ETH_SetDMAConfig+0x2c>
 8001ade:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001ae2:	e000      	b.n	8001ae6 <ETH_SetDMAConfig+0x2e>
 8001ae4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	7b5b      	ldrb	r3, [r3, #13]
 8001aea:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001aec:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	7f52      	ldrb	r2, [r2, #29]
 8001af2:	2a00      	cmp	r2, #0
 8001af4:	d102      	bne.n	8001afc <ETH_SetDMAConfig+0x44>
 8001af6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001afa:	e000      	b.n	8001afe <ETH_SetDMAConfig+0x46>
 8001afc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001afe:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	7b9b      	ldrb	r3, [r3, #14]
 8001b04:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001b06:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001b0c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	7f1b      	ldrb	r3, [r3, #28]
 8001b12:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001b14:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	7f9b      	ldrb	r3, [r3, #30]
 8001b1a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001b1c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001b22:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b2a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b4e:	2001      	movs	r0, #1
 8001b50:	f7ff fcbc 	bl	80014cc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	791b      	ldrb	r3, [r3, #4]
 8001b66:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b6c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001b72:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001b78:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b80:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001b82:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b88:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001b8a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001b90:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	6812      	ldr	r2, [r2, #0]
 8001b96:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b9a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b9e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bac:	2001      	movs	r0, #1
 8001bae:	f7ff fc8d 	bl	80014cc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bba:	461a      	mov	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6013      	str	r3, [r2, #0]
}
 8001bc0:	bf00      	nop
 8001bc2:	3710      	adds	r7, #16
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	f8de3f23 	.word	0xf8de3f23

08001bcc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b0a6      	sub	sp, #152	@ 0x98
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001be0:	2300      	movs	r3, #0
 8001be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001be4:	2300      	movs	r3, #0
 8001be6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001bea:	2301      	movs	r3, #1
 8001bec:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001c16:	2300      	movs	r3, #0
 8001c18:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001c2e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c32:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001c34:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001c38:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001c40:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c44:	4619      	mov	r1, r3
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff fe86 	bl	8001958 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001c50:	2301      	movs	r3, #1
 8001c52:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001c54:	2301      	movs	r3, #1
 8001c56:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001c62:	2300      	movs	r3, #0
 8001c64:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001c72:	2301      	movs	r3, #1
 8001c74:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001c7c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c80:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001c82:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c86:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001c88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c8c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001c94:	2300      	movs	r3, #0
 8001c96:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001c9c:	f107 0308 	add.w	r3, r7, #8
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff ff08 	bl	8001ab8 <ETH_SetDMAConfig>
}
 8001ca8:	bf00      	nop
 8001caa:	3798      	adds	r7, #152	@ 0x98
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b087      	sub	sp, #28
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3305      	adds	r3, #5
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	021b      	lsls	r3, r3, #8
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	3204      	adds	r2, #4
 8001cc8:	7812      	ldrb	r2, [r2, #0]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001cce:	68ba      	ldr	r2, [r7, #8]
 8001cd0:	4b11      	ldr	r3, [pc, #68]	@ (8001d18 <ETH_MACAddressConfig+0x68>)
 8001cd2:	4413      	add	r3, r2
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3303      	adds	r3, #3
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	061a      	lsls	r2, r3, #24
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3302      	adds	r3, #2
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	041b      	lsls	r3, r3, #16
 8001cea:	431a      	orrs	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	021b      	lsls	r3, r3, #8
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	7812      	ldrb	r2, [r2, #0]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001cfe:	68ba      	ldr	r2, [r7, #8]
 8001d00:	4b06      	ldr	r3, [pc, #24]	@ (8001d1c <ETH_MACAddressConfig+0x6c>)
 8001d02:	4413      	add	r3, r2
 8001d04:	461a      	mov	r2, r3
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	6013      	str	r3, [r2, #0]
}
 8001d0a:	bf00      	nop
 8001d0c:	371c      	adds	r7, #28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40028040 	.word	0x40028040
 8001d1c:	40028044 	.word	0x40028044

08001d20 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	e03e      	b.n	8001dac <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68d9      	ldr	r1, [r3, #12]
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	4613      	mov	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	440b      	add	r3, r1
 8001d3e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	2200      	movs	r2, #0
 8001d56:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001d58:	68b9      	ldr	r1, [r7, #8]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	3206      	adds	r2, #6
 8001d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d80c      	bhi.n	8001d90 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68d9      	ldr	r1, [r3, #12]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	1c5a      	adds	r2, r3, #1
 8001d7e:	4613      	mov	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4413      	add	r3, r2
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	440b      	add	r3, r1
 8001d88:	461a      	mov	r2, r3
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	e004      	b.n	8001d9a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	461a      	mov	r2, r3
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	3301      	adds	r3, #1
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2b03      	cmp	r3, #3
 8001db0:	d9bd      	bls.n	8001d2e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68da      	ldr	r2, [r3, #12]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dc4:	611a      	str	r2, [r3, #16]
}
 8001dc6:	bf00      	nop
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b085      	sub	sp, #20
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	e046      	b.n	8001e6e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6919      	ldr	r1, [r3, #16]
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	440b      	add	r3, r1
 8001df0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	2200      	movs	r2, #0
 8001e02:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	2200      	movs	r2, #0
 8001e08:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	2200      	movs	r2, #0
 8001e14:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001e1c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8001e24:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001e32:	68b9      	ldr	r1, [r7, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	3212      	adds	r2, #18
 8001e3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d80c      	bhi.n	8001e5e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6919      	ldr	r1, [r3, #16]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	1c5a      	adds	r2, r3, #1
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	440b      	add	r3, r1
 8001e56:	461a      	mov	r2, r3
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	60da      	str	r2, [r3, #12]
 8001e5c:	e004      	b.n	8001e68 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	461a      	mov	r2, r3
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2b03      	cmp	r3, #3
 8001e72:	d9b5      	bls.n	8001de0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	691a      	ldr	r2, [r3, #16]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e9e:	60da      	str	r2, [r3, #12]
}
 8001ea0:	bf00      	nop
 8001ea2:	3714      	adds	r7, #20
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b089      	sub	sp, #36	@ 0x24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61fb      	str	r3, [r7, #28]
 8001ec6:	e177      	b.n	80021b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ec8:	2201      	movs	r2, #1
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	f040 8166 	bne.w	80021b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d005      	beq.n	8001efe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d130      	bne.n	8001f60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	2203      	movs	r2, #3
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4013      	ands	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	68da      	ldr	r2, [r3, #12]
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f34:	2201      	movs	r2, #1
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	091b      	lsrs	r3, r3, #4
 8001f4a:	f003 0201 	and.w	r2, r3, #1
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f003 0303 	and.w	r3, r3, #3
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	d017      	beq.n	8001f9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	2203      	movs	r2, #3
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 0303 	and.w	r3, r3, #3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d123      	bne.n	8001ff0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	08da      	lsrs	r2, r3, #3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3208      	adds	r2, #8
 8001fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	220f      	movs	r2, #15
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	691a      	ldr	r2, [r3, #16]
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	08da      	lsrs	r2, r3, #3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	3208      	adds	r2, #8
 8001fea:	69b9      	ldr	r1, [r7, #24]
 8001fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4013      	ands	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 0203 	and.w	r2, r3, #3
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4313      	orrs	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 80c0 	beq.w	80021b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	4b66      	ldr	r3, [pc, #408]	@ (80021d0 <HAL_GPIO_Init+0x324>)
 8002038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800203a:	4a65      	ldr	r2, [pc, #404]	@ (80021d0 <HAL_GPIO_Init+0x324>)
 800203c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002040:	6453      	str	r3, [r2, #68]	@ 0x44
 8002042:	4b63      	ldr	r3, [pc, #396]	@ (80021d0 <HAL_GPIO_Init+0x324>)
 8002044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002046:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800204e:	4a61      	ldr	r2, [pc, #388]	@ (80021d4 <HAL_GPIO_Init+0x328>)
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	089b      	lsrs	r3, r3, #2
 8002054:	3302      	adds	r3, #2
 8002056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800205a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	220f      	movs	r2, #15
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43db      	mvns	r3, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4013      	ands	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a58      	ldr	r2, [pc, #352]	@ (80021d8 <HAL_GPIO_Init+0x32c>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d037      	beq.n	80020ea <HAL_GPIO_Init+0x23e>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a57      	ldr	r2, [pc, #348]	@ (80021dc <HAL_GPIO_Init+0x330>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d031      	beq.n	80020e6 <HAL_GPIO_Init+0x23a>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a56      	ldr	r2, [pc, #344]	@ (80021e0 <HAL_GPIO_Init+0x334>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d02b      	beq.n	80020e2 <HAL_GPIO_Init+0x236>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a55      	ldr	r2, [pc, #340]	@ (80021e4 <HAL_GPIO_Init+0x338>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d025      	beq.n	80020de <HAL_GPIO_Init+0x232>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a54      	ldr	r2, [pc, #336]	@ (80021e8 <HAL_GPIO_Init+0x33c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d01f      	beq.n	80020da <HAL_GPIO_Init+0x22e>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a53      	ldr	r2, [pc, #332]	@ (80021ec <HAL_GPIO_Init+0x340>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d019      	beq.n	80020d6 <HAL_GPIO_Init+0x22a>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a52      	ldr	r2, [pc, #328]	@ (80021f0 <HAL_GPIO_Init+0x344>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d013      	beq.n	80020d2 <HAL_GPIO_Init+0x226>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a51      	ldr	r2, [pc, #324]	@ (80021f4 <HAL_GPIO_Init+0x348>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d00d      	beq.n	80020ce <HAL_GPIO_Init+0x222>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a50      	ldr	r2, [pc, #320]	@ (80021f8 <HAL_GPIO_Init+0x34c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d007      	beq.n	80020ca <HAL_GPIO_Init+0x21e>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a4f      	ldr	r2, [pc, #316]	@ (80021fc <HAL_GPIO_Init+0x350>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d101      	bne.n	80020c6 <HAL_GPIO_Init+0x21a>
 80020c2:	2309      	movs	r3, #9
 80020c4:	e012      	b.n	80020ec <HAL_GPIO_Init+0x240>
 80020c6:	230a      	movs	r3, #10
 80020c8:	e010      	b.n	80020ec <HAL_GPIO_Init+0x240>
 80020ca:	2308      	movs	r3, #8
 80020cc:	e00e      	b.n	80020ec <HAL_GPIO_Init+0x240>
 80020ce:	2307      	movs	r3, #7
 80020d0:	e00c      	b.n	80020ec <HAL_GPIO_Init+0x240>
 80020d2:	2306      	movs	r3, #6
 80020d4:	e00a      	b.n	80020ec <HAL_GPIO_Init+0x240>
 80020d6:	2305      	movs	r3, #5
 80020d8:	e008      	b.n	80020ec <HAL_GPIO_Init+0x240>
 80020da:	2304      	movs	r3, #4
 80020dc:	e006      	b.n	80020ec <HAL_GPIO_Init+0x240>
 80020de:	2303      	movs	r3, #3
 80020e0:	e004      	b.n	80020ec <HAL_GPIO_Init+0x240>
 80020e2:	2302      	movs	r3, #2
 80020e4:	e002      	b.n	80020ec <HAL_GPIO_Init+0x240>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <HAL_GPIO_Init+0x240>
 80020ea:	2300      	movs	r3, #0
 80020ec:	69fa      	ldr	r2, [r7, #28]
 80020ee:	f002 0203 	and.w	r2, r2, #3
 80020f2:	0092      	lsls	r2, r2, #2
 80020f4:	4093      	lsls	r3, r2
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020fc:	4935      	ldr	r1, [pc, #212]	@ (80021d4 <HAL_GPIO_Init+0x328>)
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	089b      	lsrs	r3, r3, #2
 8002102:	3302      	adds	r3, #2
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800210a:	4b3d      	ldr	r3, [pc, #244]	@ (8002200 <HAL_GPIO_Init+0x354>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	43db      	mvns	r3, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4013      	ands	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	4313      	orrs	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800212e:	4a34      	ldr	r2, [pc, #208]	@ (8002200 <HAL_GPIO_Init+0x354>)
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002134:	4b32      	ldr	r3, [pc, #200]	@ (8002200 <HAL_GPIO_Init+0x354>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	43db      	mvns	r3, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4013      	ands	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d003      	beq.n	8002158 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	4313      	orrs	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002158:	4a29      	ldr	r2, [pc, #164]	@ (8002200 <HAL_GPIO_Init+0x354>)
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800215e:	4b28      	ldr	r3, [pc, #160]	@ (8002200 <HAL_GPIO_Init+0x354>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	43db      	mvns	r3, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4013      	ands	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	4313      	orrs	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002182:	4a1f      	ldr	r2, [pc, #124]	@ (8002200 <HAL_GPIO_Init+0x354>)
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002188:	4b1d      	ldr	r3, [pc, #116]	@ (8002200 <HAL_GPIO_Init+0x354>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	43db      	mvns	r3, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4013      	ands	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d003      	beq.n	80021ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021ac:	4a14      	ldr	r2, [pc, #80]	@ (8002200 <HAL_GPIO_Init+0x354>)
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	3301      	adds	r3, #1
 80021b6:	61fb      	str	r3, [r7, #28]
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	2b0f      	cmp	r3, #15
 80021bc:	f67f ae84 	bls.w	8001ec8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021c0:	bf00      	nop
 80021c2:	bf00      	nop
 80021c4:	3724      	adds	r7, #36	@ 0x24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40023800 	.word	0x40023800
 80021d4:	40013800 	.word	0x40013800
 80021d8:	40020000 	.word	0x40020000
 80021dc:	40020400 	.word	0x40020400
 80021e0:	40020800 	.word	0x40020800
 80021e4:	40020c00 	.word	0x40020c00
 80021e8:	40021000 	.word	0x40021000
 80021ec:	40021400 	.word	0x40021400
 80021f0:	40021800 	.word	0x40021800
 80021f4:	40021c00 	.word	0x40021c00
 80021f8:	40022000 	.word	0x40022000
 80021fc:	40022400 	.word	0x40022400
 8002200:	40013c00 	.word	0x40013c00

08002204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	807b      	strh	r3, [r7, #2]
 8002210:	4613      	mov	r3, r2
 8002212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002214:	787b      	ldrb	r3, [r7, #1]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800221a:	887a      	ldrh	r2, [r7, #2]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002220:	e003      	b.n	800222a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002222:	887b      	ldrh	r3, [r7, #2]
 8002224:	041a      	lsls	r2, r3, #16
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	619a      	str	r2, [r3, #24]
}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b086      	sub	sp, #24
 800223a:	af02      	add	r7, sp, #8
 800223c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e101      	b.n	800244c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d106      	bne.n	8002268 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7fe ffdc 	bl	8001220 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2203      	movs	r2, #3
 800226c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002276:	d102      	bne.n	800227e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f002 fdea 	bl	8004e5c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6818      	ldr	r0, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	7c1a      	ldrb	r2, [r3, #16]
 8002290:	f88d 2000 	strb.w	r2, [sp]
 8002294:	3304      	adds	r3, #4
 8002296:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002298:	f002 fd7c 	bl	8004d94 <USB_CoreInit>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d005      	beq.n	80022ae <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2202      	movs	r2, #2
 80022a6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e0ce      	b.n	800244c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2100      	movs	r1, #0
 80022b4:	4618      	mov	r0, r3
 80022b6:	f002 fde2 	bl	8004e7e <USB_SetCurrentMode>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d005      	beq.n	80022cc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2202      	movs	r2, #2
 80022c4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e0bf      	b.n	800244c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022cc:	2300      	movs	r3, #0
 80022ce:	73fb      	strb	r3, [r7, #15]
 80022d0:	e04a      	b.n	8002368 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022d2:	7bfa      	ldrb	r2, [r7, #15]
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	4413      	add	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	440b      	add	r3, r1
 80022e0:	3315      	adds	r3, #21
 80022e2:	2201      	movs	r2, #1
 80022e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022e6:	7bfa      	ldrb	r2, [r7, #15]
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	4413      	add	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	440b      	add	r3, r1
 80022f4:	3314      	adds	r3, #20
 80022f6:	7bfa      	ldrb	r2, [r7, #15]
 80022f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022fa:	7bfa      	ldrb	r2, [r7, #15]
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
 80022fe:	b298      	uxth	r0, r3
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	4613      	mov	r3, r2
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	4413      	add	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	440b      	add	r3, r1
 800230c:	332e      	adds	r3, #46	@ 0x2e
 800230e:	4602      	mov	r2, r0
 8002310:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002312:	7bfa      	ldrb	r2, [r7, #15]
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	4613      	mov	r3, r2
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	4413      	add	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	440b      	add	r3, r1
 8002320:	3318      	adds	r3, #24
 8002322:	2200      	movs	r2, #0
 8002324:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002326:	7bfa      	ldrb	r2, [r7, #15]
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	4413      	add	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	440b      	add	r3, r1
 8002334:	331c      	adds	r3, #28
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800233a:	7bfa      	ldrb	r2, [r7, #15]
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	4613      	mov	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	4413      	add	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	440b      	add	r3, r1
 8002348:	3320      	adds	r3, #32
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800234e:	7bfa      	ldrb	r2, [r7, #15]
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	4413      	add	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	440b      	add	r3, r1
 800235c:	3324      	adds	r3, #36	@ 0x24
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002362:	7bfb      	ldrb	r3, [r7, #15]
 8002364:	3301      	adds	r3, #1
 8002366:	73fb      	strb	r3, [r7, #15]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	791b      	ldrb	r3, [r3, #4]
 800236c:	7bfa      	ldrb	r2, [r7, #15]
 800236e:	429a      	cmp	r2, r3
 8002370:	d3af      	bcc.n	80022d2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002372:	2300      	movs	r3, #0
 8002374:	73fb      	strb	r3, [r7, #15]
 8002376:	e044      	b.n	8002402 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002378:	7bfa      	ldrb	r2, [r7, #15]
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	4413      	add	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800238a:	2200      	movs	r2, #0
 800238c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800238e:	7bfa      	ldrb	r2, [r7, #15]
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4413      	add	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80023a0:	7bfa      	ldrb	r2, [r7, #15]
 80023a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023a4:	7bfa      	ldrb	r2, [r7, #15]
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	4613      	mov	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	4413      	add	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80023b6:	2200      	movs	r2, #0
 80023b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023ba:	7bfa      	ldrb	r2, [r7, #15]
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	4413      	add	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023d0:	7bfa      	ldrb	r2, [r7, #15]
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	4613      	mov	r3, r2
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4413      	add	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023e6:	7bfa      	ldrb	r2, [r7, #15]
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	4613      	mov	r3, r2
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	4413      	add	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	440b      	add	r3, r1
 80023f4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023fc:	7bfb      	ldrb	r3, [r7, #15]
 80023fe:	3301      	adds	r3, #1
 8002400:	73fb      	strb	r3, [r7, #15]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	791b      	ldrb	r3, [r3, #4]
 8002406:	7bfa      	ldrb	r2, [r7, #15]
 8002408:	429a      	cmp	r2, r3
 800240a:	d3b5      	bcc.n	8002378 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6818      	ldr	r0, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	7c1a      	ldrb	r2, [r3, #16]
 8002414:	f88d 2000 	strb.w	r2, [sp]
 8002418:	3304      	adds	r3, #4
 800241a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800241c:	f002 fd7c 	bl	8004f18 <USB_DevInit>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d005      	beq.n	8002432 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2202      	movs	r2, #2
 800242a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e00c      	b.n	800244c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f002 ff44 	bl	80052d2 <USB_DevDisconnect>

  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e267      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d075      	beq.n	800255e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002472:	4b88      	ldr	r3, [pc, #544]	@ (8002694 <HAL_RCC_OscConfig+0x240>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 030c 	and.w	r3, r3, #12
 800247a:	2b04      	cmp	r3, #4
 800247c:	d00c      	beq.n	8002498 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800247e:	4b85      	ldr	r3, [pc, #532]	@ (8002694 <HAL_RCC_OscConfig+0x240>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002486:	2b08      	cmp	r3, #8
 8002488:	d112      	bne.n	80024b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800248a:	4b82      	ldr	r3, [pc, #520]	@ (8002694 <HAL_RCC_OscConfig+0x240>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002492:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002496:	d10b      	bne.n	80024b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002498:	4b7e      	ldr	r3, [pc, #504]	@ (8002694 <HAL_RCC_OscConfig+0x240>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d05b      	beq.n	800255c <HAL_RCC_OscConfig+0x108>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d157      	bne.n	800255c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e242      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024b8:	d106      	bne.n	80024c8 <HAL_RCC_OscConfig+0x74>
 80024ba:	4b76      	ldr	r3, [pc, #472]	@ (8002694 <HAL_RCC_OscConfig+0x240>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a75      	ldr	r2, [pc, #468]	@ (8002694 <HAL_RCC_OscConfig+0x240>)
 80024c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	e01d      	b.n	8002504 <HAL_RCC_OscConfig+0xb0>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024d0:	d10c      	bne.n	80024ec <HAL_RCC_OscConfig+0x98>
 80024d2:	4b70      	ldr	r3, [pc, #448]	@ (8002694 <HAL_RCC_OscConfig+0x240>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a6f      	ldr	r2, [pc, #444]	@ (8002694 <HAL_RCC_OscConfig+0x240>)
 80024d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	4b6d      	ldr	r3, [pc, #436]	@ (8002694 <HAL_RCC_OscConfig+0x240>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a6c      	ldr	r2, [pc, #432]	@ (8002694 <HAL_RCC_OscConfig+0x240>)
 80024e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	e00b      	b.n	8002504 <HAL_RCC_OscConfig+0xb0>
 80024ec:	4b69      	ldr	r3, [pc, #420]	@ (8002694 <HAL_RCC_OscConfig+0x240>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a68      	ldr	r2, [pc, #416]	@ (8002694 <HAL_RCC_OscConfig+0x240>)
 80024f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024f6:	6013      	str	r3, [r2, #0]
 80024f8:	4b66      	ldr	r3, [pc, #408]	@ (8002694 <HAL_RCC_OscConfig+0x240>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a65      	ldr	r2, [pc, #404]	@ (8002694 <HAL_RCC_OscConfig+0x240>)
 80024fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002502:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d013      	beq.n	8002534 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250c:	f7fe ffd2 	bl	80014b4 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002514:	f7fe ffce 	bl	80014b4 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b64      	cmp	r3, #100	@ 0x64
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e207      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002526:	4b5b      	ldr	r3, [pc, #364]	@ (8002694 <HAL_RCC_OscConfig+0x240>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0f0      	beq.n	8002514 <HAL_RCC_OscConfig+0xc0>
 8002532:	e014      	b.n	800255e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002534:	f7fe ffbe 	bl	80014b4 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800253c:	f7fe ffba 	bl	80014b4 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b64      	cmp	r3, #100	@ 0x64
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e1f3      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800254e:	4b51      	ldr	r3, [pc, #324]	@ (8002694 <HAL_RCC_OscConfig+0x240>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f0      	bne.n	800253c <HAL_RCC_OscConfig+0xe8>
 800255a:	e000      	b.n	800255e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800255c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d063      	beq.n	8002632 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800256a:	4b4a      	ldr	r3, [pc, #296]	@ (8002694 <HAL_RCC_OscConfig+0x240>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00b      	beq.n	800258e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002576:	4b47      	ldr	r3, [pc, #284]	@ (8002694 <HAL_RCC_OscConfig+0x240>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800257e:	2b08      	cmp	r3, #8
 8002580:	d11c      	bne.n	80025bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002582:	4b44      	ldr	r3, [pc, #272]	@ (8002694 <HAL_RCC_OscConfig+0x240>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d116      	bne.n	80025bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800258e:	4b41      	ldr	r3, [pc, #260]	@ (8002694 <HAL_RCC_OscConfig+0x240>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d005      	beq.n	80025a6 <HAL_RCC_OscConfig+0x152>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d001      	beq.n	80025a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e1c7      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002694 <HAL_RCC_OscConfig+0x240>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	4937      	ldr	r1, [pc, #220]	@ (8002694 <HAL_RCC_OscConfig+0x240>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ba:	e03a      	b.n	8002632 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d020      	beq.n	8002606 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025c4:	4b34      	ldr	r3, [pc, #208]	@ (8002698 <HAL_RCC_OscConfig+0x244>)
 80025c6:	2201      	movs	r2, #1
 80025c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ca:	f7fe ff73 	bl	80014b4 <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025d2:	f7fe ff6f 	bl	80014b4 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e1a8      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e4:	4b2b      	ldr	r3, [pc, #172]	@ (8002694 <HAL_RCC_OscConfig+0x240>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0f0      	beq.n	80025d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f0:	4b28      	ldr	r3, [pc, #160]	@ (8002694 <HAL_RCC_OscConfig+0x240>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	4925      	ldr	r1, [pc, #148]	@ (8002694 <HAL_RCC_OscConfig+0x240>)
 8002600:	4313      	orrs	r3, r2
 8002602:	600b      	str	r3, [r1, #0]
 8002604:	e015      	b.n	8002632 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002606:	4b24      	ldr	r3, [pc, #144]	@ (8002698 <HAL_RCC_OscConfig+0x244>)
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260c:	f7fe ff52 	bl	80014b4 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002614:	f7fe ff4e 	bl	80014b4 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e187      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002626:	4b1b      	ldr	r3, [pc, #108]	@ (8002694 <HAL_RCC_OscConfig+0x240>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f0      	bne.n	8002614 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0308 	and.w	r3, r3, #8
 800263a:	2b00      	cmp	r3, #0
 800263c:	d036      	beq.n	80026ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d016      	beq.n	8002674 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002646:	4b15      	ldr	r3, [pc, #84]	@ (800269c <HAL_RCC_OscConfig+0x248>)
 8002648:	2201      	movs	r2, #1
 800264a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264c:	f7fe ff32 	bl	80014b4 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002654:	f7fe ff2e 	bl	80014b4 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e167      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002666:	4b0b      	ldr	r3, [pc, #44]	@ (8002694 <HAL_RCC_OscConfig+0x240>)
 8002668:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0f0      	beq.n	8002654 <HAL_RCC_OscConfig+0x200>
 8002672:	e01b      	b.n	80026ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002674:	4b09      	ldr	r3, [pc, #36]	@ (800269c <HAL_RCC_OscConfig+0x248>)
 8002676:	2200      	movs	r2, #0
 8002678:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800267a:	f7fe ff1b 	bl	80014b4 <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002680:	e00e      	b.n	80026a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002682:	f7fe ff17 	bl	80014b4 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d907      	bls.n	80026a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e150      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
 8002694:	40023800 	.word	0x40023800
 8002698:	42470000 	.word	0x42470000
 800269c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a0:	4b88      	ldr	r3, [pc, #544]	@ (80028c4 <HAL_RCC_OscConfig+0x470>)
 80026a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1ea      	bne.n	8002682 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 8097 	beq.w	80027e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ba:	2300      	movs	r3, #0
 80026bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026be:	4b81      	ldr	r3, [pc, #516]	@ (80028c4 <HAL_RCC_OscConfig+0x470>)
 80026c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10f      	bne.n	80026ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	60bb      	str	r3, [r7, #8]
 80026ce:	4b7d      	ldr	r3, [pc, #500]	@ (80028c4 <HAL_RCC_OscConfig+0x470>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d2:	4a7c      	ldr	r2, [pc, #496]	@ (80028c4 <HAL_RCC_OscConfig+0x470>)
 80026d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80026da:	4b7a      	ldr	r3, [pc, #488]	@ (80028c4 <HAL_RCC_OscConfig+0x470>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026e2:	60bb      	str	r3, [r7, #8]
 80026e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026e6:	2301      	movs	r3, #1
 80026e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ea:	4b77      	ldr	r3, [pc, #476]	@ (80028c8 <HAL_RCC_OscConfig+0x474>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d118      	bne.n	8002728 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026f6:	4b74      	ldr	r3, [pc, #464]	@ (80028c8 <HAL_RCC_OscConfig+0x474>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a73      	ldr	r2, [pc, #460]	@ (80028c8 <HAL_RCC_OscConfig+0x474>)
 80026fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002700:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002702:	f7fe fed7 	bl	80014b4 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800270a:	f7fe fed3 	bl	80014b4 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e10c      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271c:	4b6a      	ldr	r3, [pc, #424]	@ (80028c8 <HAL_RCC_OscConfig+0x474>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0f0      	beq.n	800270a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d106      	bne.n	800273e <HAL_RCC_OscConfig+0x2ea>
 8002730:	4b64      	ldr	r3, [pc, #400]	@ (80028c4 <HAL_RCC_OscConfig+0x470>)
 8002732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002734:	4a63      	ldr	r2, [pc, #396]	@ (80028c4 <HAL_RCC_OscConfig+0x470>)
 8002736:	f043 0301 	orr.w	r3, r3, #1
 800273a:	6713      	str	r3, [r2, #112]	@ 0x70
 800273c:	e01c      	b.n	8002778 <HAL_RCC_OscConfig+0x324>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	2b05      	cmp	r3, #5
 8002744:	d10c      	bne.n	8002760 <HAL_RCC_OscConfig+0x30c>
 8002746:	4b5f      	ldr	r3, [pc, #380]	@ (80028c4 <HAL_RCC_OscConfig+0x470>)
 8002748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800274a:	4a5e      	ldr	r2, [pc, #376]	@ (80028c4 <HAL_RCC_OscConfig+0x470>)
 800274c:	f043 0304 	orr.w	r3, r3, #4
 8002750:	6713      	str	r3, [r2, #112]	@ 0x70
 8002752:	4b5c      	ldr	r3, [pc, #368]	@ (80028c4 <HAL_RCC_OscConfig+0x470>)
 8002754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002756:	4a5b      	ldr	r2, [pc, #364]	@ (80028c4 <HAL_RCC_OscConfig+0x470>)
 8002758:	f043 0301 	orr.w	r3, r3, #1
 800275c:	6713      	str	r3, [r2, #112]	@ 0x70
 800275e:	e00b      	b.n	8002778 <HAL_RCC_OscConfig+0x324>
 8002760:	4b58      	ldr	r3, [pc, #352]	@ (80028c4 <HAL_RCC_OscConfig+0x470>)
 8002762:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002764:	4a57      	ldr	r2, [pc, #348]	@ (80028c4 <HAL_RCC_OscConfig+0x470>)
 8002766:	f023 0301 	bic.w	r3, r3, #1
 800276a:	6713      	str	r3, [r2, #112]	@ 0x70
 800276c:	4b55      	ldr	r3, [pc, #340]	@ (80028c4 <HAL_RCC_OscConfig+0x470>)
 800276e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002770:	4a54      	ldr	r2, [pc, #336]	@ (80028c4 <HAL_RCC_OscConfig+0x470>)
 8002772:	f023 0304 	bic.w	r3, r3, #4
 8002776:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d015      	beq.n	80027ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002780:	f7fe fe98 	bl	80014b4 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002786:	e00a      	b.n	800279e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002788:	f7fe fe94 	bl	80014b4 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002796:	4293      	cmp	r3, r2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e0cb      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800279e:	4b49      	ldr	r3, [pc, #292]	@ (80028c4 <HAL_RCC_OscConfig+0x470>)
 80027a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0ee      	beq.n	8002788 <HAL_RCC_OscConfig+0x334>
 80027aa:	e014      	b.n	80027d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ac:	f7fe fe82 	bl	80014b4 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b2:	e00a      	b.n	80027ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027b4:	f7fe fe7e 	bl	80014b4 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e0b5      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ca:	4b3e      	ldr	r3, [pc, #248]	@ (80028c4 <HAL_RCC_OscConfig+0x470>)
 80027cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1ee      	bne.n	80027b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027d6:	7dfb      	ldrb	r3, [r7, #23]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d105      	bne.n	80027e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027dc:	4b39      	ldr	r3, [pc, #228]	@ (80028c4 <HAL_RCC_OscConfig+0x470>)
 80027de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e0:	4a38      	ldr	r2, [pc, #224]	@ (80028c4 <HAL_RCC_OscConfig+0x470>)
 80027e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 80a1 	beq.w	8002934 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027f2:	4b34      	ldr	r3, [pc, #208]	@ (80028c4 <HAL_RCC_OscConfig+0x470>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 030c 	and.w	r3, r3, #12
 80027fa:	2b08      	cmp	r3, #8
 80027fc:	d05c      	beq.n	80028b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	2b02      	cmp	r3, #2
 8002804:	d141      	bne.n	800288a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002806:	4b31      	ldr	r3, [pc, #196]	@ (80028cc <HAL_RCC_OscConfig+0x478>)
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280c:	f7fe fe52 	bl	80014b4 <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002814:	f7fe fe4e 	bl	80014b4 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e087      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002826:	4b27      	ldr	r3, [pc, #156]	@ (80028c4 <HAL_RCC_OscConfig+0x470>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f0      	bne.n	8002814 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69da      	ldr	r2, [r3, #28]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002840:	019b      	lsls	r3, r3, #6
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002848:	085b      	lsrs	r3, r3, #1
 800284a:	3b01      	subs	r3, #1
 800284c:	041b      	lsls	r3, r3, #16
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002854:	061b      	lsls	r3, r3, #24
 8002856:	491b      	ldr	r1, [pc, #108]	@ (80028c4 <HAL_RCC_OscConfig+0x470>)
 8002858:	4313      	orrs	r3, r2
 800285a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800285c:	4b1b      	ldr	r3, [pc, #108]	@ (80028cc <HAL_RCC_OscConfig+0x478>)
 800285e:	2201      	movs	r2, #1
 8002860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002862:	f7fe fe27 	bl	80014b4 <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800286a:	f7fe fe23 	bl	80014b4 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e05c      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287c:	4b11      	ldr	r3, [pc, #68]	@ (80028c4 <HAL_RCC_OscConfig+0x470>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0f0      	beq.n	800286a <HAL_RCC_OscConfig+0x416>
 8002888:	e054      	b.n	8002934 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288a:	4b10      	ldr	r3, [pc, #64]	@ (80028cc <HAL_RCC_OscConfig+0x478>)
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002890:	f7fe fe10 	bl	80014b4 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002898:	f7fe fe0c 	bl	80014b4 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e045      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028aa:	4b06      	ldr	r3, [pc, #24]	@ (80028c4 <HAL_RCC_OscConfig+0x470>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f0      	bne.n	8002898 <HAL_RCC_OscConfig+0x444>
 80028b6:	e03d      	b.n	8002934 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d107      	bne.n	80028d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e038      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
 80028c4:	40023800 	.word	0x40023800
 80028c8:	40007000 	.word	0x40007000
 80028cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002940 <HAL_RCC_OscConfig+0x4ec>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d028      	beq.n	8002930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d121      	bne.n	8002930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d11a      	bne.n	8002930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002900:	4013      	ands	r3, r2
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002906:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002908:	4293      	cmp	r3, r2
 800290a:	d111      	bne.n	8002930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002916:	085b      	lsrs	r3, r3, #1
 8002918:	3b01      	subs	r3, #1
 800291a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800291c:	429a      	cmp	r2, r3
 800291e:	d107      	bne.n	8002930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800292a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800292c:	429a      	cmp	r2, r3
 800292e:	d001      	beq.n	8002934 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e000      	b.n	8002936 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3718      	adds	r7, #24
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40023800 	.word	0x40023800

08002944 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0cc      	b.n	8002af2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002958:	4b68      	ldr	r3, [pc, #416]	@ (8002afc <HAL_RCC_ClockConfig+0x1b8>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 030f 	and.w	r3, r3, #15
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	d90c      	bls.n	8002980 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002966:	4b65      	ldr	r3, [pc, #404]	@ (8002afc <HAL_RCC_ClockConfig+0x1b8>)
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800296e:	4b63      	ldr	r3, [pc, #396]	@ (8002afc <HAL_RCC_ClockConfig+0x1b8>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 030f 	and.w	r3, r3, #15
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	429a      	cmp	r2, r3
 800297a:	d001      	beq.n	8002980 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e0b8      	b.n	8002af2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d020      	beq.n	80029ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	d005      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002998:	4b59      	ldr	r3, [pc, #356]	@ (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	4a58      	ldr	r2, [pc, #352]	@ (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80029a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0308 	and.w	r3, r3, #8
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d005      	beq.n	80029bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029b0:	4b53      	ldr	r3, [pc, #332]	@ (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	4a52      	ldr	r2, [pc, #328]	@ (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029bc:	4b50      	ldr	r3, [pc, #320]	@ (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	494d      	ldr	r1, [pc, #308]	@ (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d044      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d107      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e2:	4b47      	ldr	r3, [pc, #284]	@ (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d119      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e07f      	b.n	8002af2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d003      	beq.n	8002a02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029fe:	2b03      	cmp	r3, #3
 8002a00:	d107      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a02:	4b3f      	ldr	r3, [pc, #252]	@ (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d109      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e06f      	b.n	8002af2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a12:	4b3b      	ldr	r3, [pc, #236]	@ (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e067      	b.n	8002af2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a22:	4b37      	ldr	r3, [pc, #220]	@ (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f023 0203 	bic.w	r2, r3, #3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	4934      	ldr	r1, [pc, #208]	@ (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a34:	f7fe fd3e 	bl	80014b4 <HAL_GetTick>
 8002a38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a3a:	e00a      	b.n	8002a52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a3c:	f7fe fd3a 	bl	80014b4 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e04f      	b.n	8002af2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a52:	4b2b      	ldr	r3, [pc, #172]	@ (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 020c 	and.w	r2, r3, #12
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d1eb      	bne.n	8002a3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a64:	4b25      	ldr	r3, [pc, #148]	@ (8002afc <HAL_RCC_ClockConfig+0x1b8>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 030f 	and.w	r3, r3, #15
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d20c      	bcs.n	8002a8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a72:	4b22      	ldr	r3, [pc, #136]	@ (8002afc <HAL_RCC_ClockConfig+0x1b8>)
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7a:	4b20      	ldr	r3, [pc, #128]	@ (8002afc <HAL_RCC_ClockConfig+0x1b8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d001      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e032      	b.n	8002af2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d008      	beq.n	8002aaa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a98:	4b19      	ldr	r3, [pc, #100]	@ (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	4916      	ldr	r1, [pc, #88]	@ (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0308 	and.w	r3, r3, #8
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d009      	beq.n	8002aca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ab6:	4b12      	ldr	r3, [pc, #72]	@ (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	490e      	ldr	r1, [pc, #56]	@ (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002aca:	f000 f821 	bl	8002b10 <HAL_RCC_GetSysClockFreq>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	091b      	lsrs	r3, r3, #4
 8002ad6:	f003 030f 	and.w	r3, r3, #15
 8002ada:	490a      	ldr	r1, [pc, #40]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c0>)
 8002adc:	5ccb      	ldrb	r3, [r1, r3]
 8002ade:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae2:	4a09      	ldr	r2, [pc, #36]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ae6:	4b09      	ldr	r3, [pc, #36]	@ (8002b0c <HAL_RCC_ClockConfig+0x1c8>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fe fc9e 	bl	800142c <HAL_InitTick>

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40023c00 	.word	0x40023c00
 8002b00:	40023800 	.word	0x40023800
 8002b04:	08005408 	.word	0x08005408
 8002b08:	2000000c 	.word	0x2000000c
 8002b0c:	20000010 	.word	0x20000010

08002b10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b14:	b094      	sub	sp, #80	@ 0x50
 8002b16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b20:	2300      	movs	r3, #0
 8002b22:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b28:	4b79      	ldr	r3, [pc, #484]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 030c 	and.w	r3, r3, #12
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	d00d      	beq.n	8002b50 <HAL_RCC_GetSysClockFreq+0x40>
 8002b34:	2b08      	cmp	r3, #8
 8002b36:	f200 80e1 	bhi.w	8002cfc <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d002      	beq.n	8002b44 <HAL_RCC_GetSysClockFreq+0x34>
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d003      	beq.n	8002b4a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b42:	e0db      	b.n	8002cfc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b44:	4b73      	ldr	r3, [pc, #460]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b46:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002b48:	e0db      	b.n	8002d02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b4a:	4b73      	ldr	r3, [pc, #460]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b4c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b4e:	e0d8      	b.n	8002d02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b50:	4b6f      	ldr	r3, [pc, #444]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b58:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b5a:	4b6d      	ldr	r3, [pc, #436]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d063      	beq.n	8002c2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b66:	4b6a      	ldr	r3, [pc, #424]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	099b      	lsrs	r3, r3, #6
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b70:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b78:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b82:	4622      	mov	r2, r4
 8002b84:	462b      	mov	r3, r5
 8002b86:	f04f 0000 	mov.w	r0, #0
 8002b8a:	f04f 0100 	mov.w	r1, #0
 8002b8e:	0159      	lsls	r1, r3, #5
 8002b90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b94:	0150      	lsls	r0, r2, #5
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4621      	mov	r1, r4
 8002b9c:	1a51      	subs	r1, r2, r1
 8002b9e:	6139      	str	r1, [r7, #16]
 8002ba0:	4629      	mov	r1, r5
 8002ba2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	f04f 0200 	mov.w	r2, #0
 8002bac:	f04f 0300 	mov.w	r3, #0
 8002bb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bb4:	4659      	mov	r1, fp
 8002bb6:	018b      	lsls	r3, r1, #6
 8002bb8:	4651      	mov	r1, sl
 8002bba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bbe:	4651      	mov	r1, sl
 8002bc0:	018a      	lsls	r2, r1, #6
 8002bc2:	4651      	mov	r1, sl
 8002bc4:	ebb2 0801 	subs.w	r8, r2, r1
 8002bc8:	4659      	mov	r1, fp
 8002bca:	eb63 0901 	sbc.w	r9, r3, r1
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	f04f 0300 	mov.w	r3, #0
 8002bd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002be2:	4690      	mov	r8, r2
 8002be4:	4699      	mov	r9, r3
 8002be6:	4623      	mov	r3, r4
 8002be8:	eb18 0303 	adds.w	r3, r8, r3
 8002bec:	60bb      	str	r3, [r7, #8]
 8002bee:	462b      	mov	r3, r5
 8002bf0:	eb49 0303 	adc.w	r3, r9, r3
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	f04f 0300 	mov.w	r3, #0
 8002bfe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c02:	4629      	mov	r1, r5
 8002c04:	024b      	lsls	r3, r1, #9
 8002c06:	4621      	mov	r1, r4
 8002c08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c0c:	4621      	mov	r1, r4
 8002c0e:	024a      	lsls	r2, r1, #9
 8002c10:	4610      	mov	r0, r2
 8002c12:	4619      	mov	r1, r3
 8002c14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c16:	2200      	movs	r2, #0
 8002c18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c20:	f7fd fae4 	bl	80001ec <__aeabi_uldivmod>
 8002c24:	4602      	mov	r2, r0
 8002c26:	460b      	mov	r3, r1
 8002c28:	4613      	mov	r3, r2
 8002c2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c2c:	e058      	b.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c2e:	4b38      	ldr	r3, [pc, #224]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	099b      	lsrs	r3, r3, #6
 8002c34:	2200      	movs	r2, #0
 8002c36:	4618      	mov	r0, r3
 8002c38:	4611      	mov	r1, r2
 8002c3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c3e:	623b      	str	r3, [r7, #32]
 8002c40:	2300      	movs	r3, #0
 8002c42:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c48:	4642      	mov	r2, r8
 8002c4a:	464b      	mov	r3, r9
 8002c4c:	f04f 0000 	mov.w	r0, #0
 8002c50:	f04f 0100 	mov.w	r1, #0
 8002c54:	0159      	lsls	r1, r3, #5
 8002c56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c5a:	0150      	lsls	r0, r2, #5
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	460b      	mov	r3, r1
 8002c60:	4641      	mov	r1, r8
 8002c62:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c66:	4649      	mov	r1, r9
 8002c68:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c6c:	f04f 0200 	mov.w	r2, #0
 8002c70:	f04f 0300 	mov.w	r3, #0
 8002c74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c80:	ebb2 040a 	subs.w	r4, r2, sl
 8002c84:	eb63 050b 	sbc.w	r5, r3, fp
 8002c88:	f04f 0200 	mov.w	r2, #0
 8002c8c:	f04f 0300 	mov.w	r3, #0
 8002c90:	00eb      	lsls	r3, r5, #3
 8002c92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c96:	00e2      	lsls	r2, r4, #3
 8002c98:	4614      	mov	r4, r2
 8002c9a:	461d      	mov	r5, r3
 8002c9c:	4643      	mov	r3, r8
 8002c9e:	18e3      	adds	r3, r4, r3
 8002ca0:	603b      	str	r3, [r7, #0]
 8002ca2:	464b      	mov	r3, r9
 8002ca4:	eb45 0303 	adc.w	r3, r5, r3
 8002ca8:	607b      	str	r3, [r7, #4]
 8002caa:	f04f 0200 	mov.w	r2, #0
 8002cae:	f04f 0300 	mov.w	r3, #0
 8002cb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cb6:	4629      	mov	r1, r5
 8002cb8:	028b      	lsls	r3, r1, #10
 8002cba:	4621      	mov	r1, r4
 8002cbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cc0:	4621      	mov	r1, r4
 8002cc2:	028a      	lsls	r2, r1, #10
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cca:	2200      	movs	r2, #0
 8002ccc:	61bb      	str	r3, [r7, #24]
 8002cce:	61fa      	str	r2, [r7, #28]
 8002cd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cd4:	f7fd fa8a 	bl	80001ec <__aeabi_uldivmod>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4613      	mov	r3, r2
 8002cde:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	0c1b      	lsrs	r3, r3, #16
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	3301      	adds	r3, #1
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002cf0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002cf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cfa:	e002      	b.n	8002d02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cfc:	4b05      	ldr	r3, [pc, #20]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cfe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3750      	adds	r7, #80	@ 0x50
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d0e:	bf00      	nop
 8002d10:	40023800 	.word	0x40023800
 8002d14:	00f42400 	.word	0x00f42400
 8002d18:	007a1200 	.word	0x007a1200

08002d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d20:	4b03      	ldr	r3, [pc, #12]	@ (8002d30 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d22:	681b      	ldr	r3, [r3, #0]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	2000000c 	.word	0x2000000c

08002d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d38:	f7ff fff0 	bl	8002d1c <HAL_RCC_GetHCLKFreq>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	4b05      	ldr	r3, [pc, #20]	@ (8002d54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	0a9b      	lsrs	r3, r3, #10
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	4903      	ldr	r1, [pc, #12]	@ (8002d58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d4a:	5ccb      	ldrb	r3, [r1, r3]
 8002d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40023800 	.word	0x40023800
 8002d58:	08005418 	.word	0x08005418

08002d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d60:	f7ff ffdc 	bl	8002d1c <HAL_RCC_GetHCLKFreq>
 8002d64:	4602      	mov	r2, r0
 8002d66:	4b05      	ldr	r3, [pc, #20]	@ (8002d7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	0b5b      	lsrs	r3, r3, #13
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	4903      	ldr	r1, [pc, #12]	@ (8002d80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d72:	5ccb      	ldrb	r3, [r1, r3]
 8002d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	08005418 	.word	0x08005418

08002d84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e041      	b.n	8002e1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d106      	bne.n	8002db0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7fe f90e 	bl	8000fcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2202      	movs	r2, #2
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3304      	adds	r3, #4
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4610      	mov	r0, r2
 8002dc4:	f000 fc90 	bl	80036e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
	...

08002e24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d001      	beq.n	8002e3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e04e      	b.n	8002eda <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2202      	movs	r2, #2
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0201 	orr.w	r2, r2, #1
 8002e52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a23      	ldr	r2, [pc, #140]	@ (8002ee8 <HAL_TIM_Base_Start_IT+0xc4>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d022      	beq.n	8002ea4 <HAL_TIM_Base_Start_IT+0x80>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e66:	d01d      	beq.n	8002ea4 <HAL_TIM_Base_Start_IT+0x80>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a1f      	ldr	r2, [pc, #124]	@ (8002eec <HAL_TIM_Base_Start_IT+0xc8>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d018      	beq.n	8002ea4 <HAL_TIM_Base_Start_IT+0x80>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a1e      	ldr	r2, [pc, #120]	@ (8002ef0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d013      	beq.n	8002ea4 <HAL_TIM_Base_Start_IT+0x80>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a1c      	ldr	r2, [pc, #112]	@ (8002ef4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d00e      	beq.n	8002ea4 <HAL_TIM_Base_Start_IT+0x80>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ef8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d009      	beq.n	8002ea4 <HAL_TIM_Base_Start_IT+0x80>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a19      	ldr	r2, [pc, #100]	@ (8002efc <HAL_TIM_Base_Start_IT+0xd8>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d004      	beq.n	8002ea4 <HAL_TIM_Base_Start_IT+0x80>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a18      	ldr	r2, [pc, #96]	@ (8002f00 <HAL_TIM_Base_Start_IT+0xdc>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d111      	bne.n	8002ec8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 0307 	and.w	r3, r3, #7
 8002eae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2b06      	cmp	r3, #6
 8002eb4:	d010      	beq.n	8002ed8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f042 0201 	orr.w	r2, r2, #1
 8002ec4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ec6:	e007      	b.n	8002ed8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f042 0201 	orr.w	r2, r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3714      	adds	r7, #20
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	40010000 	.word	0x40010000
 8002eec:	40000400 	.word	0x40000400
 8002ef0:	40000800 	.word	0x40000800
 8002ef4:	40000c00 	.word	0x40000c00
 8002ef8:	40010400 	.word	0x40010400
 8002efc:	40014000 	.word	0x40014000
 8002f00:	40001800 	.word	0x40001800

08002f04 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68da      	ldr	r2, [r3, #12]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0201 	bic.w	r2, r2, #1
 8002f1a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6a1a      	ldr	r2, [r3, #32]
 8002f22:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002f26:	4013      	ands	r3, r2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10f      	bne.n	8002f4c <HAL_TIM_Base_Stop_IT+0x48>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6a1a      	ldr	r2, [r3, #32]
 8002f32:	f240 4344 	movw	r3, #1092	@ 0x444
 8002f36:	4013      	ands	r3, r2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d107      	bne.n	8002f4c <HAL_TIM_Base_Stop_IT+0x48>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0201 	bic.w	r2, r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b082      	sub	sp, #8
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e041      	b.n	8002ff8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d106      	bne.n	8002f8e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 f839 	bl	8003000 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2202      	movs	r2, #2
 8002f92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	3304      	adds	r3, #4
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	f000 fba1 	bl	80036e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d109      	bne.n	8003038 <HAL_TIM_PWM_Start+0x24>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b01      	cmp	r3, #1
 800302e:	bf14      	ite	ne
 8003030:	2301      	movne	r3, #1
 8003032:	2300      	moveq	r3, #0
 8003034:	b2db      	uxtb	r3, r3
 8003036:	e022      	b.n	800307e <HAL_TIM_PWM_Start+0x6a>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	2b04      	cmp	r3, #4
 800303c:	d109      	bne.n	8003052 <HAL_TIM_PWM_Start+0x3e>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b01      	cmp	r3, #1
 8003048:	bf14      	ite	ne
 800304a:	2301      	movne	r3, #1
 800304c:	2300      	moveq	r3, #0
 800304e:	b2db      	uxtb	r3, r3
 8003050:	e015      	b.n	800307e <HAL_TIM_PWM_Start+0x6a>
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	2b08      	cmp	r3, #8
 8003056:	d109      	bne.n	800306c <HAL_TIM_PWM_Start+0x58>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b01      	cmp	r3, #1
 8003062:	bf14      	ite	ne
 8003064:	2301      	movne	r3, #1
 8003066:	2300      	moveq	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	e008      	b.n	800307e <HAL_TIM_PWM_Start+0x6a>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b01      	cmp	r3, #1
 8003076:	bf14      	ite	ne
 8003078:	2301      	movne	r3, #1
 800307a:	2300      	moveq	r3, #0
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e07c      	b.n	8003180 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d104      	bne.n	8003096 <HAL_TIM_PWM_Start+0x82>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2202      	movs	r2, #2
 8003090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003094:	e013      	b.n	80030be <HAL_TIM_PWM_Start+0xaa>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	2b04      	cmp	r3, #4
 800309a:	d104      	bne.n	80030a6 <HAL_TIM_PWM_Start+0x92>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2202      	movs	r2, #2
 80030a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030a4:	e00b      	b.n	80030be <HAL_TIM_PWM_Start+0xaa>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d104      	bne.n	80030b6 <HAL_TIM_PWM_Start+0xa2>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2202      	movs	r2, #2
 80030b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030b4:	e003      	b.n	80030be <HAL_TIM_PWM_Start+0xaa>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2202      	movs	r2, #2
 80030ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2201      	movs	r2, #1
 80030c4:	6839      	ldr	r1, [r7, #0]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 fe04 	bl	8003cd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a2d      	ldr	r2, [pc, #180]	@ (8003188 <HAL_TIM_PWM_Start+0x174>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d004      	beq.n	80030e0 <HAL_TIM_PWM_Start+0xcc>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a2c      	ldr	r2, [pc, #176]	@ (800318c <HAL_TIM_PWM_Start+0x178>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d101      	bne.n	80030e4 <HAL_TIM_PWM_Start+0xd0>
 80030e0:	2301      	movs	r3, #1
 80030e2:	e000      	b.n	80030e6 <HAL_TIM_PWM_Start+0xd2>
 80030e4:	2300      	movs	r3, #0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d007      	beq.n	80030fa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a22      	ldr	r2, [pc, #136]	@ (8003188 <HAL_TIM_PWM_Start+0x174>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d022      	beq.n	800314a <HAL_TIM_PWM_Start+0x136>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800310c:	d01d      	beq.n	800314a <HAL_TIM_PWM_Start+0x136>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a1f      	ldr	r2, [pc, #124]	@ (8003190 <HAL_TIM_PWM_Start+0x17c>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d018      	beq.n	800314a <HAL_TIM_PWM_Start+0x136>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a1d      	ldr	r2, [pc, #116]	@ (8003194 <HAL_TIM_PWM_Start+0x180>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d013      	beq.n	800314a <HAL_TIM_PWM_Start+0x136>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a1c      	ldr	r2, [pc, #112]	@ (8003198 <HAL_TIM_PWM_Start+0x184>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d00e      	beq.n	800314a <HAL_TIM_PWM_Start+0x136>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a16      	ldr	r2, [pc, #88]	@ (800318c <HAL_TIM_PWM_Start+0x178>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d009      	beq.n	800314a <HAL_TIM_PWM_Start+0x136>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a18      	ldr	r2, [pc, #96]	@ (800319c <HAL_TIM_PWM_Start+0x188>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d004      	beq.n	800314a <HAL_TIM_PWM_Start+0x136>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a16      	ldr	r2, [pc, #88]	@ (80031a0 <HAL_TIM_PWM_Start+0x18c>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d111      	bne.n	800316e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2b06      	cmp	r3, #6
 800315a:	d010      	beq.n	800317e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f042 0201 	orr.w	r2, r2, #1
 800316a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800316c:	e007      	b.n	800317e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f042 0201 	orr.w	r2, r2, #1
 800317c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40010000 	.word	0x40010000
 800318c:	40010400 	.word	0x40010400
 8003190:	40000400 	.word	0x40000400
 8003194:	40000800 	.word	0x40000800
 8003198:	40000c00 	.word	0x40000c00
 800319c:	40014000 	.word	0x40014000
 80031a0:	40001800 	.word	0x40001800

080031a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d020      	beq.n	8003208 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d01b      	beq.n	8003208 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f06f 0202 	mvn.w	r2, #2
 80031d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 fa5b 	bl	80036aa <HAL_TIM_IC_CaptureCallback>
 80031f4:	e005      	b.n	8003202 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 fa4d 	bl	8003696 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 fa5e 	bl	80036be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	f003 0304 	and.w	r3, r3, #4
 800320e:	2b00      	cmp	r3, #0
 8003210:	d020      	beq.n	8003254 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b00      	cmp	r3, #0
 800321a:	d01b      	beq.n	8003254 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f06f 0204 	mvn.w	r2, #4
 8003224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2202      	movs	r2, #2
 800322a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 fa35 	bl	80036aa <HAL_TIM_IC_CaptureCallback>
 8003240:	e005      	b.n	800324e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 fa27 	bl	8003696 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 fa38 	bl	80036be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	2b00      	cmp	r3, #0
 800325c:	d020      	beq.n	80032a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f003 0308 	and.w	r3, r3, #8
 8003264:	2b00      	cmp	r3, #0
 8003266:	d01b      	beq.n	80032a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f06f 0208 	mvn.w	r2, #8
 8003270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2204      	movs	r2, #4
 8003276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	f003 0303 	and.w	r3, r3, #3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 fa0f 	bl	80036aa <HAL_TIM_IC_CaptureCallback>
 800328c:	e005      	b.n	800329a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 fa01 	bl	8003696 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 fa12 	bl	80036be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	f003 0310 	and.w	r3, r3, #16
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d020      	beq.n	80032ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f003 0310 	and.w	r3, r3, #16
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d01b      	beq.n	80032ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f06f 0210 	mvn.w	r2, #16
 80032bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2208      	movs	r2, #8
 80032c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f9e9 	bl	80036aa <HAL_TIM_IC_CaptureCallback>
 80032d8:	e005      	b.n	80032e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f9db 	bl	8003696 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 f9ec 	bl	80036be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00c      	beq.n	8003310 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d007      	beq.n	8003310 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f06f 0201 	mvn.w	r2, #1
 8003308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7fd fc9e 	bl	8000c4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00c      	beq.n	8003334 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003320:	2b00      	cmp	r3, #0
 8003322:	d007      	beq.n	8003334 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800332c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 fd7c 	bl	8003e2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00c      	beq.n	8003358 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003344:	2b00      	cmp	r3, #0
 8003346:	d007      	beq.n	8003358 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f9bd 	bl	80036d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	f003 0320 	and.w	r3, r3, #32
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00c      	beq.n	800337c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f003 0320 	and.w	r3, r3, #32
 8003368:	2b00      	cmp	r3, #0
 800336a:	d007      	beq.n	800337c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f06f 0220 	mvn.w	r2, #32
 8003374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 fd4e 	bl	8003e18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800337c:	bf00      	nop
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003390:	2300      	movs	r3, #0
 8003392:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800339a:	2b01      	cmp	r3, #1
 800339c:	d101      	bne.n	80033a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800339e:	2302      	movs	r3, #2
 80033a0:	e0ae      	b.n	8003500 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b0c      	cmp	r3, #12
 80033ae:	f200 809f 	bhi.w	80034f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80033b2:	a201      	add	r2, pc, #4	@ (adr r2, 80033b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80033b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b8:	080033ed 	.word	0x080033ed
 80033bc:	080034f1 	.word	0x080034f1
 80033c0:	080034f1 	.word	0x080034f1
 80033c4:	080034f1 	.word	0x080034f1
 80033c8:	0800342d 	.word	0x0800342d
 80033cc:	080034f1 	.word	0x080034f1
 80033d0:	080034f1 	.word	0x080034f1
 80033d4:	080034f1 	.word	0x080034f1
 80033d8:	0800346f 	.word	0x0800346f
 80033dc:	080034f1 	.word	0x080034f1
 80033e0:	080034f1 	.word	0x080034f1
 80033e4:	080034f1 	.word	0x080034f1
 80033e8:	080034af 	.word	0x080034af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68b9      	ldr	r1, [r7, #8]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 fa24 	bl	8003840 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	699a      	ldr	r2, [r3, #24]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0208 	orr.w	r2, r2, #8
 8003406:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	699a      	ldr	r2, [r3, #24]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0204 	bic.w	r2, r2, #4
 8003416:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6999      	ldr	r1, [r3, #24]
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	691a      	ldr	r2, [r3, #16]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	619a      	str	r2, [r3, #24]
      break;
 800342a:	e064      	b.n	80034f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68b9      	ldr	r1, [r7, #8]
 8003432:	4618      	mov	r0, r3
 8003434:	f000 fa74 	bl	8003920 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	699a      	ldr	r2, [r3, #24]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003446:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699a      	ldr	r2, [r3, #24]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003456:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6999      	ldr	r1, [r3, #24]
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	021a      	lsls	r2, r3, #8
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	619a      	str	r2, [r3, #24]
      break;
 800346c:	e043      	b.n	80034f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68b9      	ldr	r1, [r7, #8]
 8003474:	4618      	mov	r0, r3
 8003476:	f000 fac9 	bl	8003a0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	69da      	ldr	r2, [r3, #28]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f042 0208 	orr.w	r2, r2, #8
 8003488:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	69da      	ldr	r2, [r3, #28]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0204 	bic.w	r2, r2, #4
 8003498:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	69d9      	ldr	r1, [r3, #28]
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	691a      	ldr	r2, [r3, #16]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	61da      	str	r2, [r3, #28]
      break;
 80034ac:	e023      	b.n	80034f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68b9      	ldr	r1, [r7, #8]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 fb1d 	bl	8003af4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	69da      	ldr	r2, [r3, #28]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	69da      	ldr	r2, [r3, #28]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	69d9      	ldr	r1, [r3, #28]
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	021a      	lsls	r2, r3, #8
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	61da      	str	r2, [r3, #28]
      break;
 80034ee:	e002      	b.n	80034f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	75fb      	strb	r3, [r7, #23]
      break;
 80034f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80034fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003500:	4618      	mov	r0, r3
 8003502:	3718      	adds	r7, #24
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003512:	2300      	movs	r3, #0
 8003514:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800351c:	2b01      	cmp	r3, #1
 800351e:	d101      	bne.n	8003524 <HAL_TIM_ConfigClockSource+0x1c>
 8003520:	2302      	movs	r3, #2
 8003522:	e0b4      	b.n	800368e <HAL_TIM_ConfigClockSource+0x186>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003542:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800354a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68ba      	ldr	r2, [r7, #8]
 8003552:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800355c:	d03e      	beq.n	80035dc <HAL_TIM_ConfigClockSource+0xd4>
 800355e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003562:	f200 8087 	bhi.w	8003674 <HAL_TIM_ConfigClockSource+0x16c>
 8003566:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800356a:	f000 8086 	beq.w	800367a <HAL_TIM_ConfigClockSource+0x172>
 800356e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003572:	d87f      	bhi.n	8003674 <HAL_TIM_ConfigClockSource+0x16c>
 8003574:	2b70      	cmp	r3, #112	@ 0x70
 8003576:	d01a      	beq.n	80035ae <HAL_TIM_ConfigClockSource+0xa6>
 8003578:	2b70      	cmp	r3, #112	@ 0x70
 800357a:	d87b      	bhi.n	8003674 <HAL_TIM_ConfigClockSource+0x16c>
 800357c:	2b60      	cmp	r3, #96	@ 0x60
 800357e:	d050      	beq.n	8003622 <HAL_TIM_ConfigClockSource+0x11a>
 8003580:	2b60      	cmp	r3, #96	@ 0x60
 8003582:	d877      	bhi.n	8003674 <HAL_TIM_ConfigClockSource+0x16c>
 8003584:	2b50      	cmp	r3, #80	@ 0x50
 8003586:	d03c      	beq.n	8003602 <HAL_TIM_ConfigClockSource+0xfa>
 8003588:	2b50      	cmp	r3, #80	@ 0x50
 800358a:	d873      	bhi.n	8003674 <HAL_TIM_ConfigClockSource+0x16c>
 800358c:	2b40      	cmp	r3, #64	@ 0x40
 800358e:	d058      	beq.n	8003642 <HAL_TIM_ConfigClockSource+0x13a>
 8003590:	2b40      	cmp	r3, #64	@ 0x40
 8003592:	d86f      	bhi.n	8003674 <HAL_TIM_ConfigClockSource+0x16c>
 8003594:	2b30      	cmp	r3, #48	@ 0x30
 8003596:	d064      	beq.n	8003662 <HAL_TIM_ConfigClockSource+0x15a>
 8003598:	2b30      	cmp	r3, #48	@ 0x30
 800359a:	d86b      	bhi.n	8003674 <HAL_TIM_ConfigClockSource+0x16c>
 800359c:	2b20      	cmp	r3, #32
 800359e:	d060      	beq.n	8003662 <HAL_TIM_ConfigClockSource+0x15a>
 80035a0:	2b20      	cmp	r3, #32
 80035a2:	d867      	bhi.n	8003674 <HAL_TIM_ConfigClockSource+0x16c>
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d05c      	beq.n	8003662 <HAL_TIM_ConfigClockSource+0x15a>
 80035a8:	2b10      	cmp	r3, #16
 80035aa:	d05a      	beq.n	8003662 <HAL_TIM_ConfigClockSource+0x15a>
 80035ac:	e062      	b.n	8003674 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035be:	f000 fb69 	bl	8003c94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80035d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	609a      	str	r2, [r3, #8]
      break;
 80035da:	e04f      	b.n	800367c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035ec:	f000 fb52 	bl	8003c94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035fe:	609a      	str	r2, [r3, #8]
      break;
 8003600:	e03c      	b.n	800367c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800360e:	461a      	mov	r2, r3
 8003610:	f000 fac6 	bl	8003ba0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2150      	movs	r1, #80	@ 0x50
 800361a:	4618      	mov	r0, r3
 800361c:	f000 fb1f 	bl	8003c5e <TIM_ITRx_SetConfig>
      break;
 8003620:	e02c      	b.n	800367c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800362e:	461a      	mov	r2, r3
 8003630:	f000 fae5 	bl	8003bfe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2160      	movs	r1, #96	@ 0x60
 800363a:	4618      	mov	r0, r3
 800363c:	f000 fb0f 	bl	8003c5e <TIM_ITRx_SetConfig>
      break;
 8003640:	e01c      	b.n	800367c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800364e:	461a      	mov	r2, r3
 8003650:	f000 faa6 	bl	8003ba0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2140      	movs	r1, #64	@ 0x40
 800365a:	4618      	mov	r0, r3
 800365c:	f000 faff 	bl	8003c5e <TIM_ITRx_SetConfig>
      break;
 8003660:	e00c      	b.n	800367c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4619      	mov	r1, r3
 800366c:	4610      	mov	r0, r2
 800366e:	f000 faf6 	bl	8003c5e <TIM_ITRx_SetConfig>
      break;
 8003672:	e003      	b.n	800367c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	73fb      	strb	r3, [r7, #15]
      break;
 8003678:	e000      	b.n	800367c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800367a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800368c:	7bfb      	ldrb	r3, [r7, #15]
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003696:	b480      	push	{r7}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036c6:	bf00      	nop
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036d2:	b480      	push	{r7}
 80036d4:	b083      	sub	sp, #12
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036da:	bf00      	nop
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
	...

080036e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a46      	ldr	r2, [pc, #280]	@ (8003814 <TIM_Base_SetConfig+0x12c>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d013      	beq.n	8003728 <TIM_Base_SetConfig+0x40>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003706:	d00f      	beq.n	8003728 <TIM_Base_SetConfig+0x40>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a43      	ldr	r2, [pc, #268]	@ (8003818 <TIM_Base_SetConfig+0x130>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d00b      	beq.n	8003728 <TIM_Base_SetConfig+0x40>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a42      	ldr	r2, [pc, #264]	@ (800381c <TIM_Base_SetConfig+0x134>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d007      	beq.n	8003728 <TIM_Base_SetConfig+0x40>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a41      	ldr	r2, [pc, #260]	@ (8003820 <TIM_Base_SetConfig+0x138>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d003      	beq.n	8003728 <TIM_Base_SetConfig+0x40>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a40      	ldr	r2, [pc, #256]	@ (8003824 <TIM_Base_SetConfig+0x13c>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d108      	bne.n	800373a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800372e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	4313      	orrs	r3, r2
 8003738:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a35      	ldr	r2, [pc, #212]	@ (8003814 <TIM_Base_SetConfig+0x12c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d02b      	beq.n	800379a <TIM_Base_SetConfig+0xb2>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003748:	d027      	beq.n	800379a <TIM_Base_SetConfig+0xb2>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a32      	ldr	r2, [pc, #200]	@ (8003818 <TIM_Base_SetConfig+0x130>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d023      	beq.n	800379a <TIM_Base_SetConfig+0xb2>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a31      	ldr	r2, [pc, #196]	@ (800381c <TIM_Base_SetConfig+0x134>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d01f      	beq.n	800379a <TIM_Base_SetConfig+0xb2>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a30      	ldr	r2, [pc, #192]	@ (8003820 <TIM_Base_SetConfig+0x138>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d01b      	beq.n	800379a <TIM_Base_SetConfig+0xb2>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a2f      	ldr	r2, [pc, #188]	@ (8003824 <TIM_Base_SetConfig+0x13c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d017      	beq.n	800379a <TIM_Base_SetConfig+0xb2>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a2e      	ldr	r2, [pc, #184]	@ (8003828 <TIM_Base_SetConfig+0x140>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d013      	beq.n	800379a <TIM_Base_SetConfig+0xb2>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a2d      	ldr	r2, [pc, #180]	@ (800382c <TIM_Base_SetConfig+0x144>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d00f      	beq.n	800379a <TIM_Base_SetConfig+0xb2>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a2c      	ldr	r2, [pc, #176]	@ (8003830 <TIM_Base_SetConfig+0x148>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d00b      	beq.n	800379a <TIM_Base_SetConfig+0xb2>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a2b      	ldr	r2, [pc, #172]	@ (8003834 <TIM_Base_SetConfig+0x14c>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d007      	beq.n	800379a <TIM_Base_SetConfig+0xb2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a2a      	ldr	r2, [pc, #168]	@ (8003838 <TIM_Base_SetConfig+0x150>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d003      	beq.n	800379a <TIM_Base_SetConfig+0xb2>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a29      	ldr	r2, [pc, #164]	@ (800383c <TIM_Base_SetConfig+0x154>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d108      	bne.n	80037ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a10      	ldr	r2, [pc, #64]	@ (8003814 <TIM_Base_SetConfig+0x12c>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d003      	beq.n	80037e0 <TIM_Base_SetConfig+0xf8>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a12      	ldr	r2, [pc, #72]	@ (8003824 <TIM_Base_SetConfig+0x13c>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d103      	bne.n	80037e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	691a      	ldr	r2, [r3, #16]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d105      	bne.n	8003806 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	f023 0201 	bic.w	r2, r3, #1
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	611a      	str	r2, [r3, #16]
  }
}
 8003806:	bf00      	nop
 8003808:	3714      	adds	r7, #20
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	40010000 	.word	0x40010000
 8003818:	40000400 	.word	0x40000400
 800381c:	40000800 	.word	0x40000800
 8003820:	40000c00 	.word	0x40000c00
 8003824:	40010400 	.word	0x40010400
 8003828:	40014000 	.word	0x40014000
 800382c:	40014400 	.word	0x40014400
 8003830:	40014800 	.word	0x40014800
 8003834:	40001800 	.word	0x40001800
 8003838:	40001c00 	.word	0x40001c00
 800383c:	40002000 	.word	0x40002000

08003840 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003840:	b480      	push	{r7}
 8003842:	b087      	sub	sp, #28
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	f023 0201 	bic.w	r2, r3, #1
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800386e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f023 0303 	bic.w	r3, r3, #3
 8003876:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	4313      	orrs	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	f023 0302 	bic.w	r3, r3, #2
 8003888:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	4313      	orrs	r3, r2
 8003892:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a20      	ldr	r2, [pc, #128]	@ (8003918 <TIM_OC1_SetConfig+0xd8>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d003      	beq.n	80038a4 <TIM_OC1_SetConfig+0x64>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a1f      	ldr	r2, [pc, #124]	@ (800391c <TIM_OC1_SetConfig+0xdc>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d10c      	bne.n	80038be <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	f023 0308 	bic.w	r3, r3, #8
 80038aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f023 0304 	bic.w	r3, r3, #4
 80038bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a15      	ldr	r2, [pc, #84]	@ (8003918 <TIM_OC1_SetConfig+0xd8>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d003      	beq.n	80038ce <TIM_OC1_SetConfig+0x8e>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a14      	ldr	r2, [pc, #80]	@ (800391c <TIM_OC1_SetConfig+0xdc>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d111      	bne.n	80038f2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80038dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	621a      	str	r2, [r3, #32]
}
 800390c:	bf00      	nop
 800390e:	371c      	adds	r7, #28
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr
 8003918:	40010000 	.word	0x40010000
 800391c:	40010400 	.word	0x40010400

08003920 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003920:	b480      	push	{r7}
 8003922:	b087      	sub	sp, #28
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	f023 0210 	bic.w	r2, r3, #16
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800394e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003956:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	021b      	lsls	r3, r3, #8
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	4313      	orrs	r3, r2
 8003962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	f023 0320 	bic.w	r3, r3, #32
 800396a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	011b      	lsls	r3, r3, #4
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	4313      	orrs	r3, r2
 8003976:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a22      	ldr	r2, [pc, #136]	@ (8003a04 <TIM_OC2_SetConfig+0xe4>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d003      	beq.n	8003988 <TIM_OC2_SetConfig+0x68>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a21      	ldr	r2, [pc, #132]	@ (8003a08 <TIM_OC2_SetConfig+0xe8>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d10d      	bne.n	80039a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800398e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	011b      	lsls	r3, r3, #4
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	4313      	orrs	r3, r2
 800399a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a17      	ldr	r2, [pc, #92]	@ (8003a04 <TIM_OC2_SetConfig+0xe4>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d003      	beq.n	80039b4 <TIM_OC2_SetConfig+0x94>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a16      	ldr	r2, [pc, #88]	@ (8003a08 <TIM_OC2_SetConfig+0xe8>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d113      	bne.n	80039dc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80039ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80039c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	621a      	str	r2, [r3, #32]
}
 80039f6:	bf00      	nop
 80039f8:	371c      	adds	r7, #28
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	40010000 	.word	0x40010000
 8003a08:	40010400 	.word	0x40010400

08003a0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b087      	sub	sp, #28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f023 0303 	bic.w	r3, r3, #3
 8003a42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	021b      	lsls	r3, r3, #8
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a21      	ldr	r2, [pc, #132]	@ (8003aec <TIM_OC3_SetConfig+0xe0>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d003      	beq.n	8003a72 <TIM_OC3_SetConfig+0x66>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a20      	ldr	r2, [pc, #128]	@ (8003af0 <TIM_OC3_SetConfig+0xe4>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d10d      	bne.n	8003a8e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	021b      	lsls	r3, r3, #8
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a16      	ldr	r2, [pc, #88]	@ (8003aec <TIM_OC3_SetConfig+0xe0>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d003      	beq.n	8003a9e <TIM_OC3_SetConfig+0x92>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a15      	ldr	r2, [pc, #84]	@ (8003af0 <TIM_OC3_SetConfig+0xe4>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d113      	bne.n	8003ac6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003aa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003aac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	621a      	str	r2, [r3, #32]
}
 8003ae0:	bf00      	nop
 8003ae2:	371c      	adds	r7, #28
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	40010000 	.word	0x40010000
 8003af0:	40010400 	.word	0x40010400

08003af4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b087      	sub	sp, #28
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	021b      	lsls	r3, r3, #8
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	031b      	lsls	r3, r3, #12
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a12      	ldr	r2, [pc, #72]	@ (8003b98 <TIM_OC4_SetConfig+0xa4>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d003      	beq.n	8003b5c <TIM_OC4_SetConfig+0x68>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a11      	ldr	r2, [pc, #68]	@ (8003b9c <TIM_OC4_SetConfig+0xa8>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d109      	bne.n	8003b70 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	019b      	lsls	r3, r3, #6
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	621a      	str	r2, [r3, #32]
}
 8003b8a:	bf00      	nop
 8003b8c:	371c      	adds	r7, #28
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	40010000 	.word	0x40010000
 8003b9c:	40010400 	.word	0x40010400

08003ba0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b087      	sub	sp, #28
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	f023 0201 	bic.w	r2, r3, #1
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003bca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	011b      	lsls	r3, r3, #4
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f023 030a 	bic.w	r3, r3, #10
 8003bdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	621a      	str	r2, [r3, #32]
}
 8003bf2:	bf00      	nop
 8003bf4:	371c      	adds	r7, #28
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b087      	sub	sp, #28
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	60f8      	str	r0, [r7, #12]
 8003c06:	60b9      	str	r1, [r7, #8]
 8003c08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	f023 0210 	bic.w	r2, r3, #16
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	031b      	lsls	r3, r3, #12
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003c3a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	011b      	lsls	r3, r3, #4
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	621a      	str	r2, [r3, #32]
}
 8003c52:	bf00      	nop
 8003c54:	371c      	adds	r7, #28
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b085      	sub	sp, #20
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
 8003c66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	f043 0307 	orr.w	r3, r3, #7
 8003c80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	609a      	str	r2, [r3, #8]
}
 8003c88:	bf00      	nop
 8003c8a:	3714      	adds	r7, #20
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b087      	sub	sp, #28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
 8003ca0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003cae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	021a      	lsls	r2, r3, #8
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	609a      	str	r2, [r3, #8]
}
 8003cc8:	bf00      	nop
 8003cca:	371c      	adds	r7, #28
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b087      	sub	sp, #28
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	f003 031f 	and.w	r3, r3, #31
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6a1a      	ldr	r2, [r3, #32]
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	43db      	mvns	r3, r3
 8003cf6:	401a      	ands	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6a1a      	ldr	r2, [r3, #32]
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	f003 031f 	and.w	r3, r3, #31
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	621a      	str	r2, [r3, #32]
}
 8003d12:	bf00      	nop
 8003d14:	371c      	adds	r7, #28
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
	...

08003d20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d101      	bne.n	8003d38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d34:	2302      	movs	r3, #2
 8003d36:	e05a      	b.n	8003dee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2202      	movs	r2, #2
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a21      	ldr	r2, [pc, #132]	@ (8003dfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d022      	beq.n	8003dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d84:	d01d      	beq.n	8003dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a1d      	ldr	r2, [pc, #116]	@ (8003e00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d018      	beq.n	8003dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a1b      	ldr	r2, [pc, #108]	@ (8003e04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d013      	beq.n	8003dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a1a      	ldr	r2, [pc, #104]	@ (8003e08 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d00e      	beq.n	8003dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a18      	ldr	r2, [pc, #96]	@ (8003e0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d009      	beq.n	8003dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a17      	ldr	r2, [pc, #92]	@ (8003e10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d004      	beq.n	8003dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a15      	ldr	r2, [pc, #84]	@ (8003e14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d10c      	bne.n	8003ddc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	68ba      	ldr	r2, [r7, #8]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3714      	adds	r7, #20
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	40010000 	.word	0x40010000
 8003e00:	40000400 	.word	0x40000400
 8003e04:	40000800 	.word	0x40000800
 8003e08:	40000c00 	.word	0x40000c00
 8003e0c:	40010400 	.word	0x40010400
 8003e10:	40014000 	.word	0x40014000
 8003e14:	40001800 	.word	0x40001800

08003e18 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e042      	b.n	8003ed8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d106      	bne.n	8003e6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7fd f93c 	bl	80010e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2224      	movs	r2, #36	@ 0x24
 8003e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 fd11 	bl	80048ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	691a      	ldr	r2, [r3, #16]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	695a      	ldr	r2, [r3, #20]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ea8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68da      	ldr	r2, [r3, #12]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003eb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3708      	adds	r7, #8
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	4613      	mov	r3, r2
 8003eec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b20      	cmp	r3, #32
 8003ef8:	d121      	bne.n	8003f3e <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d002      	beq.n	8003f06 <HAL_UART_Transmit_IT+0x26>
 8003f00:	88fb      	ldrh	r3, [r7, #6]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e01a      	b.n	8003f40 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	88fa      	ldrh	r2, [r7, #6]
 8003f14:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	88fa      	ldrh	r2, [r7, #6]
 8003f1a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2221      	movs	r2, #33	@ 0x21
 8003f26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68da      	ldr	r2, [r3, #12]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003f38:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	e000      	b.n	8003f40 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003f3e:	2302      	movs	r3, #2
  }
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3714      	adds	r7, #20
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	4613      	mov	r3, r2
 8003f58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b20      	cmp	r3, #32
 8003f64:	d112      	bne.n	8003f8c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d002      	beq.n	8003f72 <HAL_UART_Receive_IT+0x26>
 8003f6c:	88fb      	ldrh	r3, [r7, #6]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e00b      	b.n	8003f8e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003f7c:	88fb      	ldrh	r3, [r7, #6]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	68b9      	ldr	r1, [r7, #8]
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 faba 	bl	80044fc <UART_Start_Receive_IT>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	e000      	b.n	8003f8e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003f8c:	2302      	movs	r3, #2
  }
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
	...

08003f98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b0ba      	sub	sp, #232	@ 0xe8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fce:	f003 030f 	and.w	r3, r3, #15
 8003fd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003fd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10f      	bne.n	8003ffe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fe2:	f003 0320 	and.w	r3, r3, #32
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d009      	beq.n	8003ffe <HAL_UART_IRQHandler+0x66>
 8003fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fee:	f003 0320 	and.w	r3, r3, #32
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 fb99 	bl	800472e <UART_Receive_IT>
      return;
 8003ffc:	e25b      	b.n	80044b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003ffe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 80de 	beq.w	80041c4 <HAL_UART_IRQHandler+0x22c>
 8004008:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b00      	cmp	r3, #0
 8004012:	d106      	bne.n	8004022 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004018:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 80d1 	beq.w	80041c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00b      	beq.n	8004046 <HAL_UART_IRQHandler+0xae>
 800402e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004036:	2b00      	cmp	r3, #0
 8004038:	d005      	beq.n	8004046 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800403e:	f043 0201 	orr.w	r2, r3, #1
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800404a:	f003 0304 	and.w	r3, r3, #4
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00b      	beq.n	800406a <HAL_UART_IRQHandler+0xd2>
 8004052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d005      	beq.n	800406a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004062:	f043 0202 	orr.w	r2, r3, #2
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800406a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00b      	beq.n	800408e <HAL_UART_IRQHandler+0xf6>
 8004076:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d005      	beq.n	800408e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004086:	f043 0204 	orr.w	r2, r3, #4
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800408e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004092:	f003 0308 	and.w	r3, r3, #8
 8004096:	2b00      	cmp	r3, #0
 8004098:	d011      	beq.n	80040be <HAL_UART_IRQHandler+0x126>
 800409a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800409e:	f003 0320 	and.w	r3, r3, #32
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d105      	bne.n	80040b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80040a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d005      	beq.n	80040be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b6:	f043 0208 	orr.w	r2, r3, #8
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f000 81f2 	beq.w	80044ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040cc:	f003 0320 	and.w	r3, r3, #32
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d008      	beq.n	80040e6 <HAL_UART_IRQHandler+0x14e>
 80040d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040d8:	f003 0320 	and.w	r3, r3, #32
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d002      	beq.n	80040e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 fb24 	bl	800472e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040f0:	2b40      	cmp	r3, #64	@ 0x40
 80040f2:	bf0c      	ite	eq
 80040f4:	2301      	moveq	r3, #1
 80040f6:	2300      	movne	r3, #0
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004102:	f003 0308 	and.w	r3, r3, #8
 8004106:	2b00      	cmp	r3, #0
 8004108:	d103      	bne.n	8004112 <HAL_UART_IRQHandler+0x17a>
 800410a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800410e:	2b00      	cmp	r3, #0
 8004110:	d04f      	beq.n	80041b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 fa2c 	bl	8004570 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004122:	2b40      	cmp	r3, #64	@ 0x40
 8004124:	d141      	bne.n	80041aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	3314      	adds	r3, #20
 800412c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004130:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004134:	e853 3f00 	ldrex	r3, [r3]
 8004138:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800413c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004140:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004144:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	3314      	adds	r3, #20
 800414e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004152:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004156:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800415e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004162:	e841 2300 	strex	r3, r2, [r1]
 8004166:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800416a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1d9      	bne.n	8004126 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004176:	2b00      	cmp	r3, #0
 8004178:	d013      	beq.n	80041a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800417e:	4a7e      	ldr	r2, [pc, #504]	@ (8004378 <HAL_UART_IRQHandler+0x3e0>)
 8004180:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004186:	4618      	mov	r0, r3
 8004188:	f7fd fb45 	bl	8001816 <HAL_DMA_Abort_IT>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d016      	beq.n	80041c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004196:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800419c:	4610      	mov	r0, r2
 800419e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041a0:	e00e      	b.n	80041c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f994 	bl	80044d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041a8:	e00a      	b.n	80041c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f990 	bl	80044d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b0:	e006      	b.n	80041c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f98c 	bl	80044d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80041be:	e175      	b.n	80044ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041c0:	bf00      	nop
    return;
 80041c2:	e173      	b.n	80044ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	f040 814f 	bne.w	800446c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80041ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041d2:	f003 0310 	and.w	r3, r3, #16
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f000 8148 	beq.w	800446c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80041dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041e0:	f003 0310 	and.w	r3, r3, #16
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 8141 	beq.w	800446c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041ea:	2300      	movs	r3, #0
 80041ec:	60bb      	str	r3, [r7, #8]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	60bb      	str	r3, [r7, #8]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	60bb      	str	r3, [r7, #8]
 80041fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800420a:	2b40      	cmp	r3, #64	@ 0x40
 800420c:	f040 80b6 	bne.w	800437c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800421c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 8145 	beq.w	80044b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800422a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800422e:	429a      	cmp	r2, r3
 8004230:	f080 813e 	bcs.w	80044b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800423a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004246:	f000 8088 	beq.w	800435a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	330c      	adds	r3, #12
 8004250:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004254:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004258:	e853 3f00 	ldrex	r3, [r3]
 800425c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004260:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004264:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004268:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	330c      	adds	r3, #12
 8004272:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004276:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800427a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004282:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004286:	e841 2300 	strex	r3, r2, [r1]
 800428a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800428e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1d9      	bne.n	800424a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	3314      	adds	r3, #20
 800429c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042a0:	e853 3f00 	ldrex	r3, [r3]
 80042a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80042a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042a8:	f023 0301 	bic.w	r3, r3, #1
 80042ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	3314      	adds	r3, #20
 80042b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80042ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80042be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80042c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80042c6:	e841 2300 	strex	r3, r2, [r1]
 80042ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80042cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1e1      	bne.n	8004296 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	3314      	adds	r3, #20
 80042d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042dc:	e853 3f00 	ldrex	r3, [r3]
 80042e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80042e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	3314      	adds	r3, #20
 80042f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80042f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80042f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80042fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80042fe:	e841 2300 	strex	r3, r2, [r1]
 8004302:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004304:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1e3      	bne.n	80042d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2220      	movs	r2, #32
 800430e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	330c      	adds	r3, #12
 800431e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004320:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004322:	e853 3f00 	ldrex	r3, [r3]
 8004326:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004328:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800432a:	f023 0310 	bic.w	r3, r3, #16
 800432e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	330c      	adds	r3, #12
 8004338:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800433c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800433e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004340:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004342:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004344:	e841 2300 	strex	r3, r2, [r1]
 8004348:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800434a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1e3      	bne.n	8004318 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004354:	4618      	mov	r0, r3
 8004356:	f7fd f9ee 	bl	8001736 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2202      	movs	r2, #2
 800435e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004368:	b29b      	uxth	r3, r3
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	b29b      	uxth	r3, r3
 800436e:	4619      	mov	r1, r3
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 f8b7 	bl	80044e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004376:	e09b      	b.n	80044b0 <HAL_UART_IRQHandler+0x518>
 8004378:	08004637 	.word	0x08004637
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004384:	b29b      	uxth	r3, r3
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004390:	b29b      	uxth	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	f000 808e 	beq.w	80044b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004398:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 8089 	beq.w	80044b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	330c      	adds	r3, #12
 80043a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ac:	e853 3f00 	ldrex	r3, [r3]
 80043b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	330c      	adds	r3, #12
 80043c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80043c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80043c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043ce:	e841 2300 	strex	r3, r2, [r1]
 80043d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80043d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1e3      	bne.n	80043a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	3314      	adds	r3, #20
 80043e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e4:	e853 3f00 	ldrex	r3, [r3]
 80043e8:	623b      	str	r3, [r7, #32]
   return(result);
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	f023 0301 	bic.w	r3, r3, #1
 80043f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	3314      	adds	r3, #20
 80043fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80043fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8004400:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004402:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004404:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004406:	e841 2300 	strex	r3, r2, [r1]
 800440a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800440c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1e3      	bne.n	80043da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2220      	movs	r2, #32
 8004416:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	330c      	adds	r3, #12
 8004426:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	e853 3f00 	ldrex	r3, [r3]
 800442e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f023 0310 	bic.w	r3, r3, #16
 8004436:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	330c      	adds	r3, #12
 8004440:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004444:	61fa      	str	r2, [r7, #28]
 8004446:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004448:	69b9      	ldr	r1, [r7, #24]
 800444a:	69fa      	ldr	r2, [r7, #28]
 800444c:	e841 2300 	strex	r3, r2, [r1]
 8004450:	617b      	str	r3, [r7, #20]
   return(result);
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1e3      	bne.n	8004420 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800445e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004462:	4619      	mov	r1, r3
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f83d 	bl	80044e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800446a:	e023      	b.n	80044b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800446c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004470:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004474:	2b00      	cmp	r3, #0
 8004476:	d009      	beq.n	800448c <HAL_UART_IRQHandler+0x4f4>
 8004478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800447c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004480:	2b00      	cmp	r3, #0
 8004482:	d003      	beq.n	800448c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 f8ea 	bl	800465e <UART_Transmit_IT>
    return;
 800448a:	e014      	b.n	80044b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800448c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00e      	beq.n	80044b6 <HAL_UART_IRQHandler+0x51e>
 8004498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800449c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d008      	beq.n	80044b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 f92a 	bl	80046fe <UART_EndTransmit_IT>
    return;
 80044aa:	e004      	b.n	80044b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80044ac:	bf00      	nop
 80044ae:	e002      	b.n	80044b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80044b0:	bf00      	nop
 80044b2:	e000      	b.n	80044b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80044b4:	bf00      	nop
  }
}
 80044b6:	37e8      	adds	r7, #232	@ 0xe8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	460b      	mov	r3, r1
 80044ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	4613      	mov	r3, r2
 8004508:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	88fa      	ldrh	r2, [r7, #6]
 8004514:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	88fa      	ldrh	r2, [r7, #6]
 800451a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2222      	movs	r2, #34	@ 0x22
 8004526:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d007      	beq.n	8004542 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004540:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	695a      	ldr	r2, [r3, #20]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f042 0201 	orr.w	r2, r2, #1
 8004550:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68da      	ldr	r2, [r3, #12]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f042 0220 	orr.w	r2, r2, #32
 8004560:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3714      	adds	r7, #20
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004570:	b480      	push	{r7}
 8004572:	b095      	sub	sp, #84	@ 0x54
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	330c      	adds	r3, #12
 800457e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004582:	e853 3f00 	ldrex	r3, [r3]
 8004586:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800458a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800458e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	330c      	adds	r3, #12
 8004596:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004598:	643a      	str	r2, [r7, #64]	@ 0x40
 800459a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800459e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045a0:	e841 2300 	strex	r3, r2, [r1]
 80045a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80045a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1e5      	bne.n	8004578 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3314      	adds	r3, #20
 80045b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	e853 3f00 	ldrex	r3, [r3]
 80045ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	f023 0301 	bic.w	r3, r3, #1
 80045c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	3314      	adds	r3, #20
 80045ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045d4:	e841 2300 	strex	r3, r2, [r1]
 80045d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1e5      	bne.n	80045ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d119      	bne.n	800461c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	330c      	adds	r3, #12
 80045ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	e853 3f00 	ldrex	r3, [r3]
 80045f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	f023 0310 	bic.w	r3, r3, #16
 80045fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	330c      	adds	r3, #12
 8004606:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004608:	61ba      	str	r2, [r7, #24]
 800460a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460c:	6979      	ldr	r1, [r7, #20]
 800460e:	69ba      	ldr	r2, [r7, #24]
 8004610:	e841 2300 	strex	r3, r2, [r1]
 8004614:	613b      	str	r3, [r7, #16]
   return(result);
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1e5      	bne.n	80045e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2220      	movs	r2, #32
 8004620:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800462a:	bf00      	nop
 800462c:	3754      	adds	r7, #84	@ 0x54
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr

08004636 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b084      	sub	sp, #16
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004642:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f7ff ff3d 	bl	80044d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004656:	bf00      	nop
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800465e:	b480      	push	{r7}
 8004660:	b085      	sub	sp, #20
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b21      	cmp	r3, #33	@ 0x21
 8004670:	d13e      	bne.n	80046f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800467a:	d114      	bne.n	80046a6 <UART_Transmit_IT+0x48>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d110      	bne.n	80046a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	881b      	ldrh	r3, [r3, #0]
 800468e:	461a      	mov	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004698:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	1c9a      	adds	r2, r3, #2
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	621a      	str	r2, [r3, #32]
 80046a4:	e008      	b.n	80046b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	1c59      	adds	r1, r3, #1
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	6211      	str	r1, [r2, #32]
 80046b0:	781a      	ldrb	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80046bc:	b29b      	uxth	r3, r3
 80046be:	3b01      	subs	r3, #1
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	4619      	mov	r1, r3
 80046c6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10f      	bne.n	80046ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68da      	ldr	r2, [r3, #12]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80046da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68da      	ldr	r2, [r3, #12]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80046ec:	2300      	movs	r3, #0
 80046ee:	e000      	b.n	80046f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80046f0:	2302      	movs	r3, #2
  }
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3714      	adds	r7, #20
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b082      	sub	sp, #8
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68da      	ldr	r2, [r3, #12]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004714:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2220      	movs	r2, #32
 800471a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7ff fecc 	bl	80044bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b08c      	sub	sp, #48	@ 0x30
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b22      	cmp	r3, #34	@ 0x22
 8004740:	f040 80ae 	bne.w	80048a0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800474c:	d117      	bne.n	800477e <UART_Receive_IT+0x50>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d113      	bne.n	800477e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004756:	2300      	movs	r3, #0
 8004758:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800475e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	b29b      	uxth	r3, r3
 8004768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800476c:	b29a      	uxth	r2, r3
 800476e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004770:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004776:	1c9a      	adds	r2, r3, #2
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	629a      	str	r2, [r3, #40]	@ 0x28
 800477c:	e026      	b.n	80047cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004782:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004784:	2300      	movs	r3, #0
 8004786:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004790:	d007      	beq.n	80047a2 <UART_Receive_IT+0x74>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10a      	bne.n	80047b0 <UART_Receive_IT+0x82>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d106      	bne.n	80047b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ac:	701a      	strb	r2, [r3, #0]
 80047ae:	e008      	b.n	80047c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047bc:	b2da      	uxtb	r2, r3
 80047be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c6:	1c5a      	adds	r2, r3, #1
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	3b01      	subs	r3, #1
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	4619      	mov	r1, r3
 80047da:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d15d      	bne.n	800489c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68da      	ldr	r2, [r3, #12]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 0220 	bic.w	r2, r2, #32
 80047ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68da      	ldr	r2, [r3, #12]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	695a      	ldr	r2, [r3, #20]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0201 	bic.w	r2, r2, #1
 800480e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2220      	movs	r2, #32
 8004814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004822:	2b01      	cmp	r3, #1
 8004824:	d135      	bne.n	8004892 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	330c      	adds	r3, #12
 8004832:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	e853 3f00 	ldrex	r3, [r3]
 800483a:	613b      	str	r3, [r7, #16]
   return(result);
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	f023 0310 	bic.w	r3, r3, #16
 8004842:	627b      	str	r3, [r7, #36]	@ 0x24
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	330c      	adds	r3, #12
 800484a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800484c:	623a      	str	r2, [r7, #32]
 800484e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004850:	69f9      	ldr	r1, [r7, #28]
 8004852:	6a3a      	ldr	r2, [r7, #32]
 8004854:	e841 2300 	strex	r3, r2, [r1]
 8004858:	61bb      	str	r3, [r7, #24]
   return(result);
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1e5      	bne.n	800482c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0310 	and.w	r3, r3, #16
 800486a:	2b10      	cmp	r3, #16
 800486c:	d10a      	bne.n	8004884 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800486e:	2300      	movs	r3, #0
 8004870:	60fb      	str	r3, [r7, #12]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	60fb      	str	r3, [r7, #12]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	60fb      	str	r3, [r7, #12]
 8004882:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004888:	4619      	mov	r1, r3
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7ff fe2a 	bl	80044e4 <HAL_UARTEx_RxEventCallback>
 8004890:	e002      	b.n	8004898 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f7fc fa4c 	bl	8000d30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004898:	2300      	movs	r3, #0
 800489a:	e002      	b.n	80048a2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800489c:	2300      	movs	r3, #0
 800489e:	e000      	b.n	80048a2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80048a0:	2302      	movs	r3, #2
  }
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3730      	adds	r7, #48	@ 0x30
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
	...

080048ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048b0:	b0c0      	sub	sp, #256	@ 0x100
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80048c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048c8:	68d9      	ldr	r1, [r3, #12]
 80048ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	ea40 0301 	orr.w	r3, r0, r1
 80048d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048da:	689a      	ldr	r2, [r3, #8]
 80048dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	431a      	orrs	r2, r3
 80048e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	431a      	orrs	r2, r3
 80048ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80048f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004904:	f021 010c 	bic.w	r1, r1, #12
 8004908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004912:	430b      	orrs	r3, r1
 8004914:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004926:	6999      	ldr	r1, [r3, #24]
 8004928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	ea40 0301 	orr.w	r3, r0, r1
 8004932:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	4b8f      	ldr	r3, [pc, #572]	@ (8004b78 <UART_SetConfig+0x2cc>)
 800493c:	429a      	cmp	r2, r3
 800493e:	d005      	beq.n	800494c <UART_SetConfig+0xa0>
 8004940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	4b8d      	ldr	r3, [pc, #564]	@ (8004b7c <UART_SetConfig+0x2d0>)
 8004948:	429a      	cmp	r2, r3
 800494a:	d104      	bne.n	8004956 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800494c:	f7fe fa06 	bl	8002d5c <HAL_RCC_GetPCLK2Freq>
 8004950:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004954:	e003      	b.n	800495e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004956:	f7fe f9ed 	bl	8002d34 <HAL_RCC_GetPCLK1Freq>
 800495a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800495e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004962:	69db      	ldr	r3, [r3, #28]
 8004964:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004968:	f040 810c 	bne.w	8004b84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800496c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004970:	2200      	movs	r2, #0
 8004972:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004976:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800497a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800497e:	4622      	mov	r2, r4
 8004980:	462b      	mov	r3, r5
 8004982:	1891      	adds	r1, r2, r2
 8004984:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004986:	415b      	adcs	r3, r3
 8004988:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800498a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800498e:	4621      	mov	r1, r4
 8004990:	eb12 0801 	adds.w	r8, r2, r1
 8004994:	4629      	mov	r1, r5
 8004996:	eb43 0901 	adc.w	r9, r3, r1
 800499a:	f04f 0200 	mov.w	r2, #0
 800499e:	f04f 0300 	mov.w	r3, #0
 80049a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049ae:	4690      	mov	r8, r2
 80049b0:	4699      	mov	r9, r3
 80049b2:	4623      	mov	r3, r4
 80049b4:	eb18 0303 	adds.w	r3, r8, r3
 80049b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80049bc:	462b      	mov	r3, r5
 80049be:	eb49 0303 	adc.w	r3, r9, r3
 80049c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80049c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80049d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80049d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80049da:	460b      	mov	r3, r1
 80049dc:	18db      	adds	r3, r3, r3
 80049de:	653b      	str	r3, [r7, #80]	@ 0x50
 80049e0:	4613      	mov	r3, r2
 80049e2:	eb42 0303 	adc.w	r3, r2, r3
 80049e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80049e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80049ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80049f0:	f7fb fbfc 	bl	80001ec <__aeabi_uldivmod>
 80049f4:	4602      	mov	r2, r0
 80049f6:	460b      	mov	r3, r1
 80049f8:	4b61      	ldr	r3, [pc, #388]	@ (8004b80 <UART_SetConfig+0x2d4>)
 80049fa:	fba3 2302 	umull	r2, r3, r3, r2
 80049fe:	095b      	lsrs	r3, r3, #5
 8004a00:	011c      	lsls	r4, r3, #4
 8004a02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a06:	2200      	movs	r2, #0
 8004a08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a0c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004a10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004a14:	4642      	mov	r2, r8
 8004a16:	464b      	mov	r3, r9
 8004a18:	1891      	adds	r1, r2, r2
 8004a1a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004a1c:	415b      	adcs	r3, r3
 8004a1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004a24:	4641      	mov	r1, r8
 8004a26:	eb12 0a01 	adds.w	sl, r2, r1
 8004a2a:	4649      	mov	r1, r9
 8004a2c:	eb43 0b01 	adc.w	fp, r3, r1
 8004a30:	f04f 0200 	mov.w	r2, #0
 8004a34:	f04f 0300 	mov.w	r3, #0
 8004a38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a44:	4692      	mov	sl, r2
 8004a46:	469b      	mov	fp, r3
 8004a48:	4643      	mov	r3, r8
 8004a4a:	eb1a 0303 	adds.w	r3, sl, r3
 8004a4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a52:	464b      	mov	r3, r9
 8004a54:	eb4b 0303 	adc.w	r3, fp, r3
 8004a58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a68:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004a6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004a70:	460b      	mov	r3, r1
 8004a72:	18db      	adds	r3, r3, r3
 8004a74:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a76:	4613      	mov	r3, r2
 8004a78:	eb42 0303 	adc.w	r3, r2, r3
 8004a7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004a82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004a86:	f7fb fbb1 	bl	80001ec <__aeabi_uldivmod>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	4611      	mov	r1, r2
 8004a90:	4b3b      	ldr	r3, [pc, #236]	@ (8004b80 <UART_SetConfig+0x2d4>)
 8004a92:	fba3 2301 	umull	r2, r3, r3, r1
 8004a96:	095b      	lsrs	r3, r3, #5
 8004a98:	2264      	movs	r2, #100	@ 0x64
 8004a9a:	fb02 f303 	mul.w	r3, r2, r3
 8004a9e:	1acb      	subs	r3, r1, r3
 8004aa0:	00db      	lsls	r3, r3, #3
 8004aa2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004aa6:	4b36      	ldr	r3, [pc, #216]	@ (8004b80 <UART_SetConfig+0x2d4>)
 8004aa8:	fba3 2302 	umull	r2, r3, r3, r2
 8004aac:	095b      	lsrs	r3, r3, #5
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004ab4:	441c      	add	r4, r3
 8004ab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004aba:	2200      	movs	r2, #0
 8004abc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ac0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004ac4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004ac8:	4642      	mov	r2, r8
 8004aca:	464b      	mov	r3, r9
 8004acc:	1891      	adds	r1, r2, r2
 8004ace:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004ad0:	415b      	adcs	r3, r3
 8004ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ad4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004ad8:	4641      	mov	r1, r8
 8004ada:	1851      	adds	r1, r2, r1
 8004adc:	6339      	str	r1, [r7, #48]	@ 0x30
 8004ade:	4649      	mov	r1, r9
 8004ae0:	414b      	adcs	r3, r1
 8004ae2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ae4:	f04f 0200 	mov.w	r2, #0
 8004ae8:	f04f 0300 	mov.w	r3, #0
 8004aec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004af0:	4659      	mov	r1, fp
 8004af2:	00cb      	lsls	r3, r1, #3
 8004af4:	4651      	mov	r1, sl
 8004af6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004afa:	4651      	mov	r1, sl
 8004afc:	00ca      	lsls	r2, r1, #3
 8004afe:	4610      	mov	r0, r2
 8004b00:	4619      	mov	r1, r3
 8004b02:	4603      	mov	r3, r0
 8004b04:	4642      	mov	r2, r8
 8004b06:	189b      	adds	r3, r3, r2
 8004b08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b0c:	464b      	mov	r3, r9
 8004b0e:	460a      	mov	r2, r1
 8004b10:	eb42 0303 	adc.w	r3, r2, r3
 8004b14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004b24:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004b28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	18db      	adds	r3, r3, r3
 8004b30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b32:	4613      	mov	r3, r2
 8004b34:	eb42 0303 	adc.w	r3, r2, r3
 8004b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004b42:	f7fb fb53 	bl	80001ec <__aeabi_uldivmod>
 8004b46:	4602      	mov	r2, r0
 8004b48:	460b      	mov	r3, r1
 8004b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004b80 <UART_SetConfig+0x2d4>)
 8004b4c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b50:	095b      	lsrs	r3, r3, #5
 8004b52:	2164      	movs	r1, #100	@ 0x64
 8004b54:	fb01 f303 	mul.w	r3, r1, r3
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	3332      	adds	r3, #50	@ 0x32
 8004b5e:	4a08      	ldr	r2, [pc, #32]	@ (8004b80 <UART_SetConfig+0x2d4>)
 8004b60:	fba2 2303 	umull	r2, r3, r2, r3
 8004b64:	095b      	lsrs	r3, r3, #5
 8004b66:	f003 0207 	and.w	r2, r3, #7
 8004b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4422      	add	r2, r4
 8004b72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b74:	e106      	b.n	8004d84 <UART_SetConfig+0x4d8>
 8004b76:	bf00      	nop
 8004b78:	40011000 	.word	0x40011000
 8004b7c:	40011400 	.word	0x40011400
 8004b80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004b8e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004b92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004b96:	4642      	mov	r2, r8
 8004b98:	464b      	mov	r3, r9
 8004b9a:	1891      	adds	r1, r2, r2
 8004b9c:	6239      	str	r1, [r7, #32]
 8004b9e:	415b      	adcs	r3, r3
 8004ba0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ba2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ba6:	4641      	mov	r1, r8
 8004ba8:	1854      	adds	r4, r2, r1
 8004baa:	4649      	mov	r1, r9
 8004bac:	eb43 0501 	adc.w	r5, r3, r1
 8004bb0:	f04f 0200 	mov.w	r2, #0
 8004bb4:	f04f 0300 	mov.w	r3, #0
 8004bb8:	00eb      	lsls	r3, r5, #3
 8004bba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bbe:	00e2      	lsls	r2, r4, #3
 8004bc0:	4614      	mov	r4, r2
 8004bc2:	461d      	mov	r5, r3
 8004bc4:	4643      	mov	r3, r8
 8004bc6:	18e3      	adds	r3, r4, r3
 8004bc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004bcc:	464b      	mov	r3, r9
 8004bce:	eb45 0303 	adc.w	r3, r5, r3
 8004bd2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004be2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004be6:	f04f 0200 	mov.w	r2, #0
 8004bea:	f04f 0300 	mov.w	r3, #0
 8004bee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004bf2:	4629      	mov	r1, r5
 8004bf4:	008b      	lsls	r3, r1, #2
 8004bf6:	4621      	mov	r1, r4
 8004bf8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bfc:	4621      	mov	r1, r4
 8004bfe:	008a      	lsls	r2, r1, #2
 8004c00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004c04:	f7fb faf2 	bl	80001ec <__aeabi_uldivmod>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	4b60      	ldr	r3, [pc, #384]	@ (8004d90 <UART_SetConfig+0x4e4>)
 8004c0e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c12:	095b      	lsrs	r3, r3, #5
 8004c14:	011c      	lsls	r4, r3, #4
 8004c16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004c20:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004c24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004c28:	4642      	mov	r2, r8
 8004c2a:	464b      	mov	r3, r9
 8004c2c:	1891      	adds	r1, r2, r2
 8004c2e:	61b9      	str	r1, [r7, #24]
 8004c30:	415b      	adcs	r3, r3
 8004c32:	61fb      	str	r3, [r7, #28]
 8004c34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c38:	4641      	mov	r1, r8
 8004c3a:	1851      	adds	r1, r2, r1
 8004c3c:	6139      	str	r1, [r7, #16]
 8004c3e:	4649      	mov	r1, r9
 8004c40:	414b      	adcs	r3, r1
 8004c42:	617b      	str	r3, [r7, #20]
 8004c44:	f04f 0200 	mov.w	r2, #0
 8004c48:	f04f 0300 	mov.w	r3, #0
 8004c4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c50:	4659      	mov	r1, fp
 8004c52:	00cb      	lsls	r3, r1, #3
 8004c54:	4651      	mov	r1, sl
 8004c56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c5a:	4651      	mov	r1, sl
 8004c5c:	00ca      	lsls	r2, r1, #3
 8004c5e:	4610      	mov	r0, r2
 8004c60:	4619      	mov	r1, r3
 8004c62:	4603      	mov	r3, r0
 8004c64:	4642      	mov	r2, r8
 8004c66:	189b      	adds	r3, r3, r2
 8004c68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c6c:	464b      	mov	r3, r9
 8004c6e:	460a      	mov	r2, r1
 8004c70:	eb42 0303 	adc.w	r3, r2, r3
 8004c74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c82:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004c84:	f04f 0200 	mov.w	r2, #0
 8004c88:	f04f 0300 	mov.w	r3, #0
 8004c8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004c90:	4649      	mov	r1, r9
 8004c92:	008b      	lsls	r3, r1, #2
 8004c94:	4641      	mov	r1, r8
 8004c96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c9a:	4641      	mov	r1, r8
 8004c9c:	008a      	lsls	r2, r1, #2
 8004c9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004ca2:	f7fb faa3 	bl	80001ec <__aeabi_uldivmod>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	460b      	mov	r3, r1
 8004caa:	4611      	mov	r1, r2
 8004cac:	4b38      	ldr	r3, [pc, #224]	@ (8004d90 <UART_SetConfig+0x4e4>)
 8004cae:	fba3 2301 	umull	r2, r3, r3, r1
 8004cb2:	095b      	lsrs	r3, r3, #5
 8004cb4:	2264      	movs	r2, #100	@ 0x64
 8004cb6:	fb02 f303 	mul.w	r3, r2, r3
 8004cba:	1acb      	subs	r3, r1, r3
 8004cbc:	011b      	lsls	r3, r3, #4
 8004cbe:	3332      	adds	r3, #50	@ 0x32
 8004cc0:	4a33      	ldr	r2, [pc, #204]	@ (8004d90 <UART_SetConfig+0x4e4>)
 8004cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc6:	095b      	lsrs	r3, r3, #5
 8004cc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ccc:	441c      	add	r4, r3
 8004cce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	673b      	str	r3, [r7, #112]	@ 0x70
 8004cd6:	677a      	str	r2, [r7, #116]	@ 0x74
 8004cd8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004cdc:	4642      	mov	r2, r8
 8004cde:	464b      	mov	r3, r9
 8004ce0:	1891      	adds	r1, r2, r2
 8004ce2:	60b9      	str	r1, [r7, #8]
 8004ce4:	415b      	adcs	r3, r3
 8004ce6:	60fb      	str	r3, [r7, #12]
 8004ce8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cec:	4641      	mov	r1, r8
 8004cee:	1851      	adds	r1, r2, r1
 8004cf0:	6039      	str	r1, [r7, #0]
 8004cf2:	4649      	mov	r1, r9
 8004cf4:	414b      	adcs	r3, r1
 8004cf6:	607b      	str	r3, [r7, #4]
 8004cf8:	f04f 0200 	mov.w	r2, #0
 8004cfc:	f04f 0300 	mov.w	r3, #0
 8004d00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d04:	4659      	mov	r1, fp
 8004d06:	00cb      	lsls	r3, r1, #3
 8004d08:	4651      	mov	r1, sl
 8004d0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d0e:	4651      	mov	r1, sl
 8004d10:	00ca      	lsls	r2, r1, #3
 8004d12:	4610      	mov	r0, r2
 8004d14:	4619      	mov	r1, r3
 8004d16:	4603      	mov	r3, r0
 8004d18:	4642      	mov	r2, r8
 8004d1a:	189b      	adds	r3, r3, r2
 8004d1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d1e:	464b      	mov	r3, r9
 8004d20:	460a      	mov	r2, r1
 8004d22:	eb42 0303 	adc.w	r3, r2, r3
 8004d26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d32:	667a      	str	r2, [r7, #100]	@ 0x64
 8004d34:	f04f 0200 	mov.w	r2, #0
 8004d38:	f04f 0300 	mov.w	r3, #0
 8004d3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004d40:	4649      	mov	r1, r9
 8004d42:	008b      	lsls	r3, r1, #2
 8004d44:	4641      	mov	r1, r8
 8004d46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d4a:	4641      	mov	r1, r8
 8004d4c:	008a      	lsls	r2, r1, #2
 8004d4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004d52:	f7fb fa4b 	bl	80001ec <__aeabi_uldivmod>
 8004d56:	4602      	mov	r2, r0
 8004d58:	460b      	mov	r3, r1
 8004d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8004d90 <UART_SetConfig+0x4e4>)
 8004d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d60:	095b      	lsrs	r3, r3, #5
 8004d62:	2164      	movs	r1, #100	@ 0x64
 8004d64:	fb01 f303 	mul.w	r3, r1, r3
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	011b      	lsls	r3, r3, #4
 8004d6c:	3332      	adds	r3, #50	@ 0x32
 8004d6e:	4a08      	ldr	r2, [pc, #32]	@ (8004d90 <UART_SetConfig+0x4e4>)
 8004d70:	fba2 2303 	umull	r2, r3, r2, r3
 8004d74:	095b      	lsrs	r3, r3, #5
 8004d76:	f003 020f 	and.w	r2, r3, #15
 8004d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4422      	add	r2, r4
 8004d82:	609a      	str	r2, [r3, #8]
}
 8004d84:	bf00      	nop
 8004d86:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d90:	51eb851f 	.word	0x51eb851f

08004d94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d94:	b084      	sub	sp, #16
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b084      	sub	sp, #16
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
 8004d9e:	f107 001c 	add.w	r0, r7, #28
 8004da2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004da6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d123      	bne.n	8004df6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004dc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004dd6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d105      	bne.n	8004dea <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 faa0 	bl	8005330 <USB_CoreReset>
 8004df0:	4603      	mov	r3, r0
 8004df2:	73fb      	strb	r3, [r7, #15]
 8004df4:	e01b      	b.n	8004e2e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 fa94 	bl	8005330 <USB_CoreReset>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e0c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d106      	bne.n	8004e22 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e18:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	639a      	str	r2, [r3, #56]	@ 0x38
 8004e20:	e005      	b.n	8004e2e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e26:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e2e:	7fbb      	ldrb	r3, [r7, #30]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d10b      	bne.n	8004e4c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f043 0206 	orr.w	r2, r3, #6
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f043 0220 	orr.w	r2, r3, #32
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e58:	b004      	add	sp, #16
 8004e5a:	4770      	bx	lr

08004e5c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f023 0201 	bic.w	r2, r3, #1
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr

08004e7e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b084      	sub	sp, #16
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
 8004e86:	460b      	mov	r3, r1
 8004e88:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e9a:	78fb      	ldrb	r3, [r7, #3]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d115      	bne.n	8004ecc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004eac:	200a      	movs	r0, #10
 8004eae:	f7fc fb0d 	bl	80014cc <HAL_Delay>
      ms += 10U;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	330a      	adds	r3, #10
 8004eb6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 fa2b 	bl	8005314 <USB_GetMode>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d01e      	beq.n	8004f02 <USB_SetCurrentMode+0x84>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2bc7      	cmp	r3, #199	@ 0xc7
 8004ec8:	d9f0      	bls.n	8004eac <USB_SetCurrentMode+0x2e>
 8004eca:	e01a      	b.n	8004f02 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ecc:	78fb      	ldrb	r3, [r7, #3]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d115      	bne.n	8004efe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004ede:	200a      	movs	r0, #10
 8004ee0:	f7fc faf4 	bl	80014cc <HAL_Delay>
      ms += 10U;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	330a      	adds	r3, #10
 8004ee8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 fa12 	bl	8005314 <USB_GetMode>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d005      	beq.n	8004f02 <USB_SetCurrentMode+0x84>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2bc7      	cmp	r3, #199	@ 0xc7
 8004efa:	d9f0      	bls.n	8004ede <USB_SetCurrentMode+0x60>
 8004efc:	e001      	b.n	8004f02 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e005      	b.n	8004f0e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2bc8      	cmp	r3, #200	@ 0xc8
 8004f06:	d101      	bne.n	8004f0c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e000      	b.n	8004f0e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
	...

08004f18 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f18:	b084      	sub	sp, #16
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b086      	sub	sp, #24
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
 8004f22:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004f26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f32:	2300      	movs	r3, #0
 8004f34:	613b      	str	r3, [r7, #16]
 8004f36:	e009      	b.n	8004f4c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	3340      	adds	r3, #64	@ 0x40
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4413      	add	r3, r2
 8004f42:	2200      	movs	r2, #0
 8004f44:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	3301      	adds	r3, #1
 8004f4a:	613b      	str	r3, [r7, #16]
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	2b0e      	cmp	r3, #14
 8004f50:	d9f2      	bls.n	8004f38 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004f52:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d11c      	bne.n	8004f94 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f68:	f043 0302 	orr.w	r3, r3, #2
 8004f6c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f72:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f7e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f8a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	639a      	str	r2, [r3, #56]	@ 0x38
 8004f92:	e00b      	b.n	8004fac <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f98:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fb8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d10d      	bne.n	8004fdc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004fc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d104      	bne.n	8004fd2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004fc8:	2100      	movs	r1, #0
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f968 	bl	80052a0 <USB_SetDevSpeed>
 8004fd0:	e008      	b.n	8004fe4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004fd2:	2101      	movs	r1, #1
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 f963 	bl	80052a0 <USB_SetDevSpeed>
 8004fda:	e003      	b.n	8004fe4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004fdc:	2103      	movs	r1, #3
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 f95e 	bl	80052a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004fe4:	2110      	movs	r1, #16
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f8fa 	bl	80051e0 <USB_FlushTxFifo>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f924 	bl	8005244 <USB_FlushRxFifo>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d001      	beq.n	8005006 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800500c:	461a      	mov	r2, r3
 800500e:	2300      	movs	r3, #0
 8005010:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005018:	461a      	mov	r2, r3
 800501a:	2300      	movs	r3, #0
 800501c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005024:	461a      	mov	r2, r3
 8005026:	2300      	movs	r3, #0
 8005028:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800502a:	2300      	movs	r3, #0
 800502c:	613b      	str	r3, [r7, #16]
 800502e:	e043      	b.n	80050b8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	015a      	lsls	r2, r3, #5
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4413      	add	r3, r2
 8005038:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005042:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005046:	d118      	bne.n	800507a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10a      	bne.n	8005064 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	015a      	lsls	r2, r3, #5
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	4413      	add	r3, r2
 8005056:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800505a:	461a      	mov	r2, r3
 800505c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005060:	6013      	str	r3, [r2, #0]
 8005062:	e013      	b.n	800508c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	015a      	lsls	r2, r3, #5
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	4413      	add	r3, r2
 800506c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005070:	461a      	mov	r2, r3
 8005072:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005076:	6013      	str	r3, [r2, #0]
 8005078:	e008      	b.n	800508c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	015a      	lsls	r2, r3, #5
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	4413      	add	r3, r2
 8005082:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005086:	461a      	mov	r2, r3
 8005088:	2300      	movs	r3, #0
 800508a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	4413      	add	r3, r2
 8005094:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005098:	461a      	mov	r2, r3
 800509a:	2300      	movs	r3, #0
 800509c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	015a      	lsls	r2, r3, #5
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	4413      	add	r3, r2
 80050a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050aa:	461a      	mov	r2, r3
 80050ac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80050b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	3301      	adds	r3, #1
 80050b6:	613b      	str	r3, [r7, #16]
 80050b8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80050bc:	461a      	mov	r2, r3
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d3b5      	bcc.n	8005030 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050c4:	2300      	movs	r3, #0
 80050c6:	613b      	str	r3, [r7, #16]
 80050c8:	e043      	b.n	8005152 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	015a      	lsls	r2, r3, #5
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80050dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050e0:	d118      	bne.n	8005114 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d10a      	bne.n	80050fe <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050f4:	461a      	mov	r2, r3
 80050f6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80050fa:	6013      	str	r3, [r2, #0]
 80050fc:	e013      	b.n	8005126 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	015a      	lsls	r2, r3, #5
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	4413      	add	r3, r2
 8005106:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800510a:	461a      	mov	r2, r3
 800510c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005110:	6013      	str	r3, [r2, #0]
 8005112:	e008      	b.n	8005126 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	015a      	lsls	r2, r3, #5
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4413      	add	r3, r2
 800511c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005120:	461a      	mov	r2, r3
 8005122:	2300      	movs	r3, #0
 8005124:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	4413      	add	r3, r2
 800512e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005132:	461a      	mov	r2, r3
 8005134:	2300      	movs	r3, #0
 8005136:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4413      	add	r3, r2
 8005140:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005144:	461a      	mov	r2, r3
 8005146:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800514a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	3301      	adds	r3, #1
 8005150:	613b      	str	r3, [r7, #16]
 8005152:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005156:	461a      	mov	r2, r3
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	4293      	cmp	r3, r2
 800515c:	d3b5      	bcc.n	80050ca <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800516c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005170:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800517e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005180:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005184:	2b00      	cmp	r3, #0
 8005186:	d105      	bne.n	8005194 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	f043 0210 	orr.w	r2, r3, #16
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	699a      	ldr	r2, [r3, #24]
 8005198:	4b10      	ldr	r3, [pc, #64]	@ (80051dc <USB_DevInit+0x2c4>)
 800519a:	4313      	orrs	r3, r2
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80051a0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d005      	beq.n	80051b4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	f043 0208 	orr.w	r2, r3, #8
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80051b4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d107      	bne.n	80051cc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80051c4:	f043 0304 	orr.w	r3, r3, #4
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80051cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3718      	adds	r7, #24
 80051d2:	46bd      	mov	sp, r7
 80051d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051d8:	b004      	add	sp, #16
 80051da:	4770      	bx	lr
 80051dc:	803c3800 	.word	0x803c3800

080051e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80051ea:	2300      	movs	r3, #0
 80051ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	3301      	adds	r3, #1
 80051f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80051fa:	d901      	bls.n	8005200 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e01b      	b.n	8005238 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	2b00      	cmp	r3, #0
 8005206:	daf2      	bge.n	80051ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005208:	2300      	movs	r3, #0
 800520a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	019b      	lsls	r3, r3, #6
 8005210:	f043 0220 	orr.w	r2, r3, #32
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	3301      	adds	r3, #1
 800521c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005224:	d901      	bls.n	800522a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e006      	b.n	8005238 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	f003 0320 	and.w	r3, r3, #32
 8005232:	2b20      	cmp	r3, #32
 8005234:	d0f0      	beq.n	8005218 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3714      	adds	r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800524c:	2300      	movs	r3, #0
 800524e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	3301      	adds	r3, #1
 8005254:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800525c:	d901      	bls.n	8005262 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e018      	b.n	8005294 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	2b00      	cmp	r3, #0
 8005268:	daf2      	bge.n	8005250 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800526a:	2300      	movs	r3, #0
 800526c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2210      	movs	r2, #16
 8005272:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	3301      	adds	r3, #1
 8005278:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005280:	d901      	bls.n	8005286 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e006      	b.n	8005294 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	f003 0310 	and.w	r3, r3, #16
 800528e:	2b10      	cmp	r3, #16
 8005290:	d0f0      	beq.n	8005274 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3714      	adds	r7, #20
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	460b      	mov	r3, r1
 80052aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	78fb      	ldrb	r3, [r7, #3]
 80052ba:	68f9      	ldr	r1, [r7, #12]
 80052bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80052c0:	4313      	orrs	r3, r2
 80052c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3714      	adds	r7, #20
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b085      	sub	sp, #20
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80052ec:	f023 0303 	bic.w	r3, r3, #3
 80052f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005300:	f043 0302 	orr.w	r3, r3, #2
 8005304:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	f003 0301 	and.w	r3, r3, #1
}
 8005324:	4618      	mov	r0, r3
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005338:	2300      	movs	r3, #0
 800533a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	3301      	adds	r3, #1
 8005340:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005348:	d901      	bls.n	800534e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e01b      	b.n	8005386 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	2b00      	cmp	r3, #0
 8005354:	daf2      	bge.n	800533c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005356:	2300      	movs	r3, #0
 8005358:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	f043 0201 	orr.w	r2, r3, #1
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	3301      	adds	r3, #1
 800536a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005372:	d901      	bls.n	8005378 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e006      	b.n	8005386 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	f003 0301 	and.w	r3, r3, #1
 8005380:	2b01      	cmp	r3, #1
 8005382:	d0f0      	beq.n	8005366 <USB_CoreReset+0x36>

  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3714      	adds	r7, #20
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr

08005392 <memset>:
 8005392:	4402      	add	r2, r0
 8005394:	4603      	mov	r3, r0
 8005396:	4293      	cmp	r3, r2
 8005398:	d100      	bne.n	800539c <memset+0xa>
 800539a:	4770      	bx	lr
 800539c:	f803 1b01 	strb.w	r1, [r3], #1
 80053a0:	e7f9      	b.n	8005396 <memset+0x4>
	...

080053a4 <__libc_init_array>:
 80053a4:	b570      	push	{r4, r5, r6, lr}
 80053a6:	4d0d      	ldr	r5, [pc, #52]	@ (80053dc <__libc_init_array+0x38>)
 80053a8:	4c0d      	ldr	r4, [pc, #52]	@ (80053e0 <__libc_init_array+0x3c>)
 80053aa:	1b64      	subs	r4, r4, r5
 80053ac:	10a4      	asrs	r4, r4, #2
 80053ae:	2600      	movs	r6, #0
 80053b0:	42a6      	cmp	r6, r4
 80053b2:	d109      	bne.n	80053c8 <__libc_init_array+0x24>
 80053b4:	4d0b      	ldr	r5, [pc, #44]	@ (80053e4 <__libc_init_array+0x40>)
 80053b6:	4c0c      	ldr	r4, [pc, #48]	@ (80053e8 <__libc_init_array+0x44>)
 80053b8:	f000 f818 	bl	80053ec <_init>
 80053bc:	1b64      	subs	r4, r4, r5
 80053be:	10a4      	asrs	r4, r4, #2
 80053c0:	2600      	movs	r6, #0
 80053c2:	42a6      	cmp	r6, r4
 80053c4:	d105      	bne.n	80053d2 <__libc_init_array+0x2e>
 80053c6:	bd70      	pop	{r4, r5, r6, pc}
 80053c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80053cc:	4798      	blx	r3
 80053ce:	3601      	adds	r6, #1
 80053d0:	e7ee      	b.n	80053b0 <__libc_init_array+0xc>
 80053d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80053d6:	4798      	blx	r3
 80053d8:	3601      	adds	r6, #1
 80053da:	e7f2      	b.n	80053c2 <__libc_init_array+0x1e>
 80053dc:	08005428 	.word	0x08005428
 80053e0:	08005428 	.word	0x08005428
 80053e4:	08005428 	.word	0x08005428
 80053e8:	0800542c 	.word	0x0800542c

080053ec <_init>:
 80053ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ee:	bf00      	nop
 80053f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053f2:	bc08      	pop	{r3}
 80053f4:	469e      	mov	lr, r3
 80053f6:	4770      	bx	lr

080053f8 <_fini>:
 80053f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053fa:	bf00      	nop
 80053fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053fe:	bc08      	pop	{r3}
 8005400:	469e      	mov	lr, r3
 8005402:	4770      	bx	lr
