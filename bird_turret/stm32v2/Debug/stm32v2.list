
stm32v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000514c  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080052f8  080052f8  000062f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005310  08005310  00007018  2**0
                  CONTENTS
  4 .ARM          00000008  08005310  08005310  00006310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005318  08005318  00007018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005318  08005318  00006318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800531c  0800531c  0000631c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08005320  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007018  2**0
                  CONTENTS
 10 .bss          000008b0  20000018  20000018  00007018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008c8  200008c8  00007018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014019  00000000  00000000  00007048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002538  00000000  00000000  0001b061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001150  00000000  00000000  0001d5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d9b  00000000  00000000  0001e6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024d30  00000000  00000000  0001f48b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013552  00000000  00000000  000441bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e28d7  00000000  00000000  0005770d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00139fe4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004afc  00000000  00000000  0013a028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0013eb24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000018 	.word	0x20000018
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080052e0 	.word	0x080052e0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000001c 	.word	0x2000001c
 80001e8:	080052e0 	.word	0x080052e0

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 80004e0:	f000 ff60 	bl	80013a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f88a 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 fb00 	bl	8000aec <MX_GPIO_Init>
  MX_ETH_Init();
 80004ec:	f000 f904 	bl	80006f8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80004f0:	f000 faa4 	bl	8000a3c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004f4:	f000 facc 	bl	8000a90 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80004f8:	f000 f94c 	bl	8000794 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004fc:	f000 f998 	bl	8000830 <MX_TIM3_Init>
  MX_UART5_Init();
 8000500:	f000 fa72 	bl	80009e8 <MX_UART5_Init>
  MX_TIM4_Init();
 8000504:	f000 fa22 	bl	800094c <MX_TIM4_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000508:	f000 f8e2 	bl	80006d0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800050c:	2100      	movs	r1, #0
 800050e:	4831      	ldr	r0, [pc, #196]	@ (80005d4 <main+0xf8>)
 8000510:	f002 fd30 	bl	8002f74 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000514:	2108      	movs	r1, #8
 8000516:	482f      	ldr	r0, [pc, #188]	@ (80005d4 <main+0xf8>)
 8000518:	f002 fd2c 	bl	8002f74 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800051c:	210c      	movs	r1, #12
 800051e:	482d      	ldr	r0, [pc, #180]	@ (80005d4 <main+0xf8>)
 8000520:	f002 fd28 	bl	8002f74 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart5, &rxbuf, 1);
 8000524:	2201      	movs	r2, #1
 8000526:	492c      	ldr	r1, [pc, #176]	@ (80005d8 <main+0xfc>)
 8000528:	482c      	ldr	r0, [pc, #176]	@ (80005dc <main+0x100>)
 800052a:	f003 fc89 	bl	8003e40 <HAL_UART_Receive_IT>
  TIM3->CCR3 = THTCENTER;
 800052e:	f240 22e3 	movw	r2, #739	@ 0x2e3
 8000532:	4b2b      	ldr	r3, [pc, #172]	@ (80005e0 <main+0x104>)
 8000534:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM3->CCR4 = PHICENTER;
 8000536:	f240 12c1 	movw	r2, #449	@ 0x1c1
 800053a:	4b29      	ldr	r3, [pc, #164]	@ (80005e0 <main+0x104>)
 800053c:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3->CCR1 = DFLTPULSE;
 800053e:	4b28      	ldr	r3, [pc, #160]	@ (80005e0 <main+0x104>)
 8000540:	22d2      	movs	r2, #210	@ 0xd2
 8000542:	635a      	str	r2, [r3, #52]	@ 0x34
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if (moveflag) {
 8000544:	4b27      	ldr	r3, [pc, #156]	@ (80005e4 <main+0x108>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d0fb      	beq.n	8000544 <main+0x68>
      // start dc motor
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800054c:	2201      	movs	r2, #1
 800054e:	2101      	movs	r1, #1
 8000550:	4825      	ldr	r0, [pc, #148]	@ (80005e8 <main+0x10c>)
 8000552:	f001 fe35 	bl	80021c0 <HAL_GPIO_WritePin>

      // caculate pwm duty cycle
      phipulse += kpx * (-oper[1]);
 8000556:	4b25      	ldr	r3, [pc, #148]	@ (80005ec <main+0x110>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	ee07 3a90 	vmov	s15, r3
 800055e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000562:	4b23      	ldr	r3, [pc, #140]	@ (80005f0 <main+0x114>)
 8000564:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000568:	425b      	negs	r3, r3
 800056a:	ee07 3a90 	vmov	s15, r3
 800056e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000572:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80005f4 <main+0x118>
 8000576:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800057a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800057e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000582:	ee17 2a90 	vmov	r2, s15
 8000586:	4b19      	ldr	r3, [pc, #100]	@ (80005ec <main+0x110>)
 8000588:	601a      	str	r2, [r3, #0]
      thtpulse += kpy * (oper[2]);
 800058a:	4b1b      	ldr	r3, [pc, #108]	@ (80005f8 <main+0x11c>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	ee07 3a90 	vmov	s15, r3
 8000592:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000596:	4b16      	ldr	r3, [pc, #88]	@ (80005f0 <main+0x114>)
 8000598:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800059c:	ee07 3a90 	vmov	s15, r3
 80005a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005a4:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80005f4 <main+0x118>
 80005a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80005ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005b4:	ee17 2a90 	vmov	r2, s15
 80005b8:	4b0f      	ldr	r3, [pc, #60]	@ (80005f8 <main+0x11c>)
 80005ba:	601a      	str	r2, [r3, #0]

      // check bound
      // if out of bound, boundcnt--;

      // apply pwm duty cycle
      TIM3->CCR3 = thtpulse;
 80005bc:	4b0e      	ldr	r3, [pc, #56]	@ (80005f8 <main+0x11c>)
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	4b07      	ldr	r3, [pc, #28]	@ (80005e0 <main+0x104>)
 80005c2:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM3->CCR4 = phipulse;
 80005c4:	4b09      	ldr	r3, [pc, #36]	@ (80005ec <main+0x110>)
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	4b05      	ldr	r3, [pc, #20]	@ (80005e0 <main+0x104>)
 80005ca:	641a      	str	r2, [r3, #64]	@ 0x40

      // reset flag
      moveflag = 0;
 80005cc:	4b05      	ldr	r3, [pc, #20]	@ (80005e4 <main+0x108>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
    if (moveflag) {
 80005d2:	e7b7      	b.n	8000544 <main+0x68>
 80005d4:	200002a4 	.word	0x200002a4
 80005d8:	200008a8 	.word	0x200008a8
 80005dc:	20000334 	.word	0x20000334
 80005e0:	40000400 	.word	0x40000400
 80005e4:	200008b4 	.word	0x200008b4
 80005e8:	40020400 	.word	0x40020400
 80005ec:	20000000 	.word	0x20000000
 80005f0:	200008ac 	.word	0x200008ac
 80005f4:	3e051eb8 	.word	0x3e051eb8
 80005f8:	20000004 	.word	0x20000004

080005fc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	@ 0x50
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	2230      	movs	r2, #48	@ 0x30
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f004 fe3b 	bl	8005286 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	4b28      	ldr	r3, [pc, #160]	@ (80006c8 <SystemClock_Config+0xcc>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000628:	4a27      	ldr	r2, [pc, #156]	@ (80006c8 <SystemClock_Config+0xcc>)
 800062a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800062e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000630:	4b25      	ldr	r3, [pc, #148]	@ (80006c8 <SystemClock_Config+0xcc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000634:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	4b22      	ldr	r3, [pc, #136]	@ (80006cc <SystemClock_Config+0xd0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a21      	ldr	r2, [pc, #132]	@ (80006cc <SystemClock_Config+0xd0>)
 8000646:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	4b1f      	ldr	r3, [pc, #124]	@ (80006cc <SystemClock_Config+0xd0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000658:	2301      	movs	r3, #1
 800065a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800065c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000660:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000662:	2302      	movs	r3, #2
 8000664:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000666:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800066a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800066c:	2304      	movs	r3, #4
 800066e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000670:	23a8      	movs	r3, #168	@ 0xa8
 8000672:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000674:	2302      	movs	r3, #2
 8000676:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000678:	2307      	movs	r3, #7
 800067a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800067c:	f107 0320 	add.w	r3, r7, #32
 8000680:	4618      	mov	r0, r3
 8000682:	f001 fec5 	bl	8002410 <HAL_RCC_OscConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0x94>
    Error_Handler();
 800068c:	f000 fb88 	bl	8000da0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000690:	230f      	movs	r3, #15
 8000692:	60fb      	str	r3, [r7, #12]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000694:	2302      	movs	r3, #2
 8000696:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800069c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2105      	movs	r1, #5
 80006ae:	4618      	mov	r0, r3
 80006b0:	f002 f926 	bl	8002900 <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0xc2>
    Error_Handler();
 80006ba:	f000 fb71 	bl	8000da0 <Error_Handler>
  }
}
 80006be:	bf00      	nop
 80006c0:	3750      	adds	r7, #80	@ 0x50
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2100      	movs	r1, #0
 80006d8:	201c      	movs	r0, #28
 80006da:	f000 ffd4 	bl	8001686 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80006de:	201c      	movs	r0, #28
 80006e0:	f000 ffed 	bl	80016be <HAL_NVIC_EnableIRQ>
  /* UART5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2100      	movs	r1, #0
 80006e8:	2035      	movs	r0, #53	@ 0x35
 80006ea:	f000 ffcc 	bl	8001686 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART5_IRQn);
 80006ee:	2035      	movs	r0, #53	@ 0x35
 80006f0:	f000 ffe5 	bl	80016be <HAL_NVIC_EnableIRQ>
}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <MX_ETH_Init>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006fc:	4b1f      	ldr	r3, [pc, #124]	@ (800077c <MX_ETH_Init+0x84>)
 80006fe:	4a20      	ldr	r2, [pc, #128]	@ (8000780 <MX_ETH_Init+0x88>)
 8000700:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <MX_ETH_Init+0x8c>)
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000708:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <MX_ETH_Init+0x8c>)
 800070a:	2280      	movs	r2, #128	@ 0x80
 800070c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800070e:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <MX_ETH_Init+0x8c>)
 8000710:	22e1      	movs	r2, #225	@ 0xe1
 8000712:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000714:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <MX_ETH_Init+0x8c>)
 8000716:	2200      	movs	r2, #0
 8000718:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <MX_ETH_Init+0x8c>)
 800071c:	2200      	movs	r2, #0
 800071e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <MX_ETH_Init+0x8c>)
 8000722:	2200      	movs	r2, #0
 8000724:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000726:	4b15      	ldr	r3, [pc, #84]	@ (800077c <MX_ETH_Init+0x84>)
 8000728:	4a16      	ldr	r2, [pc, #88]	@ (8000784 <MX_ETH_Init+0x8c>)
 800072a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800072c:	4b13      	ldr	r3, [pc, #76]	@ (800077c <MX_ETH_Init+0x84>)
 800072e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000732:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000734:	4b11      	ldr	r3, [pc, #68]	@ (800077c <MX_ETH_Init+0x84>)
 8000736:	4a14      	ldr	r2, [pc, #80]	@ (8000788 <MX_ETH_Init+0x90>)
 8000738:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800073a:	4b10      	ldr	r3, [pc, #64]	@ (800077c <MX_ETH_Init+0x84>)
 800073c:	4a13      	ldr	r2, [pc, #76]	@ (800078c <MX_ETH_Init+0x94>)
 800073e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000740:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <MX_ETH_Init+0x84>)
 8000742:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000746:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK) {
 8000748:	480c      	ldr	r0, [pc, #48]	@ (800077c <MX_ETH_Init+0x84>)
 800074a:	f001 f865 	bl	8001818 <HAL_ETH_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_ETH_Init+0x60>
    Error_Handler();
 8000754:	f000 fb24 	bl	8000da0 <Error_Handler>
  }

  memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 8000758:	2238      	movs	r2, #56	@ 0x38
 800075a:	2100      	movs	r1, #0
 800075c:	480c      	ldr	r0, [pc, #48]	@ (8000790 <MX_ETH_Init+0x98>)
 800075e:	f004 fd92 	bl	8005286 <memset>
  TxConfig.Attributes =
 8000762:	4b0b      	ldr	r3, [pc, #44]	@ (8000790 <MX_ETH_Init+0x98>)
 8000764:	2221      	movs	r2, #33	@ 0x21
 8000766:	601a      	str	r2, [r3, #0]
      ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000768:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <MX_ETH_Init+0x98>)
 800076a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800076e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000770:	4b07      	ldr	r3, [pc, #28]	@ (8000790 <MX_ETH_Init+0x98>)
 8000772:	2200      	movs	r2, #0
 8000774:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200001ac 	.word	0x200001ac
 8000780:	40028000 	.word	0x40028000
 8000784:	200008bc 	.word	0x200008bc
 8000788:	2000010c 	.word	0x2000010c
 800078c:	2000006c 	.word	0x2000006c
 8000790:	20000034 	.word	0x20000034

08000794 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800079a:	f107 0308 	add.w	r3, r7, #8
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a8:	463b      	mov	r3, r7
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007b0:	4b1e      	ldr	r3, [pc, #120]	@ (800082c <MX_TIM2_Init+0x98>)
 80007b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42000 - 1;
 80007b8:	4b1c      	ldr	r3, [pc, #112]	@ (800082c <MX_TIM2_Init+0x98>)
 80007ba:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 80007be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c0:	4b1a      	ldr	r3, [pc, #104]	@ (800082c <MX_TIM2_Init+0x98>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000 - 1;
 80007c6:	4b19      	ldr	r3, [pc, #100]	@ (800082c <MX_TIM2_Init+0x98>)
 80007c8:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80007cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ce:	4b17      	ldr	r3, [pc, #92]	@ (800082c <MX_TIM2_Init+0x98>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d4:	4b15      	ldr	r3, [pc, #84]	@ (800082c <MX_TIM2_Init+0x98>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80007da:	4814      	ldr	r0, [pc, #80]	@ (800082c <MX_TIM2_Init+0x98>)
 80007dc:	f002 fab0 	bl	8002d40 <HAL_TIM_Base_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM2_Init+0x56>
    Error_Handler();
 80007e6:	f000 fadb 	bl	8000da0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80007f0:	f107 0308 	add.w	r3, r7, #8
 80007f4:	4619      	mov	r1, r3
 80007f6:	480d      	ldr	r0, [pc, #52]	@ (800082c <MX_TIM2_Init+0x98>)
 80007f8:	f002 fe36 	bl	8003468 <HAL_TIM_ConfigClockSource>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM2_Init+0x72>
    Error_Handler();
 8000802:	f000 facd 	bl	8000da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000806:	2300      	movs	r3, #0
 8000808:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 800080e:	463b      	mov	r3, r7
 8000810:	4619      	mov	r1, r3
 8000812:	4806      	ldr	r0, [pc, #24]	@ (800082c <MX_TIM2_Init+0x98>)
 8000814:	f003 fa34 	bl	8003c80 <HAL_TIMEx_MasterConfigSynchronization>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM2_Init+0x8e>
    Error_Handler();
 800081e:	f000 fabf 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
}
 8000822:	bf00      	nop
 8000824:	3718      	adds	r7, #24
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	2000025c 	.word	0x2000025c

08000830 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b08e      	sub	sp, #56	@ 0x38
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000836:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000844:	f107 0320 	add.w	r3, r7, #32
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
 800085c:	615a      	str	r2, [r3, #20]
 800085e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000860:	4b38      	ldr	r3, [pc, #224]	@ (8000944 <MX_TIM3_Init+0x114>)
 8000862:	4a39      	ldr	r2, [pc, #228]	@ (8000948 <MX_TIM3_Init+0x118>)
 8000864:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 280 - 1;
 8000866:	4b37      	ldr	r3, [pc, #220]	@ (8000944 <MX_TIM3_Init+0x114>)
 8000868:	f240 1217 	movw	r2, #279	@ 0x117
 800086c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086e:	4b35      	ldr	r3, [pc, #212]	@ (8000944 <MX_TIM3_Init+0x114>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6000 - 1;
 8000874:	4b33      	ldr	r3, [pc, #204]	@ (8000944 <MX_TIM3_Init+0x114>)
 8000876:	f241 726f 	movw	r2, #5999	@ 0x176f
 800087a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800087c:	4b31      	ldr	r3, [pc, #196]	@ (8000944 <MX_TIM3_Init+0x114>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000882:	4b30      	ldr	r3, [pc, #192]	@ (8000944 <MX_TIM3_Init+0x114>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000888:	482e      	ldr	r0, [pc, #184]	@ (8000944 <MX_TIM3_Init+0x114>)
 800088a:	f002 fa59 	bl	8002d40 <HAL_TIM_Base_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_TIM3_Init+0x68>
    Error_Handler();
 8000894:	f000 fa84 	bl	8000da0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000898:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800089c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800089e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008a2:	4619      	mov	r1, r3
 80008a4:	4827      	ldr	r0, [pc, #156]	@ (8000944 <MX_TIM3_Init+0x114>)
 80008a6:	f002 fddf 	bl	8003468 <HAL_TIM_ConfigClockSource>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM3_Init+0x84>
    Error_Handler();
 80008b0:	f000 fa76 	bl	8000da0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80008b4:	4823      	ldr	r0, [pc, #140]	@ (8000944 <MX_TIM3_Init+0x114>)
 80008b6:	f002 fb03 	bl	8002ec0 <HAL_TIM_PWM_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM3_Init+0x94>
    Error_Handler();
 80008c0:	f000 fa6e 	bl	8000da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c4:	2300      	movs	r3, #0
 80008c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 80008cc:	f107 0320 	add.w	r3, r7, #32
 80008d0:	4619      	mov	r1, r3
 80008d2:	481c      	ldr	r0, [pc, #112]	@ (8000944 <MX_TIM3_Init+0x114>)
 80008d4:	f003 f9d4 	bl	8003c80 <HAL_TIMEx_MasterConfigSynchronization>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM3_Init+0xb2>
    Error_Handler();
 80008de:	f000 fa5f 	bl	8000da0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008e2:	2360      	movs	r3, #96	@ 0x60
 80008e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	2200      	movs	r2, #0
 80008f6:	4619      	mov	r1, r3
 80008f8:	4812      	ldr	r0, [pc, #72]	@ (8000944 <MX_TIM3_Init+0x114>)
 80008fa:	f002 fcf3 	bl	80032e4 <HAL_TIM_PWM_ConfigChannel>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM3_Init+0xd8>
    Error_Handler();
 8000904:	f000 fa4c 	bl	8000da0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2208      	movs	r2, #8
 800090c:	4619      	mov	r1, r3
 800090e:	480d      	ldr	r0, [pc, #52]	@ (8000944 <MX_TIM3_Init+0x114>)
 8000910:	f002 fce8 	bl	80032e4 <HAL_TIM_PWM_ConfigChannel>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM3_Init+0xee>
    Error_Handler();
 800091a:	f000 fa41 	bl	8000da0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	220c      	movs	r2, #12
 8000922:	4619      	mov	r1, r3
 8000924:	4807      	ldr	r0, [pc, #28]	@ (8000944 <MX_TIM3_Init+0x114>)
 8000926:	f002 fcdd 	bl	80032e4 <HAL_TIM_PWM_ConfigChannel>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM3_Init+0x104>
    Error_Handler();
 8000930:	f000 fa36 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000934:	4803      	ldr	r0, [pc, #12]	@ (8000944 <MX_TIM3_Init+0x114>)
 8000936:	f000 fb79 	bl	800102c <HAL_TIM_MspPostInit>
}
 800093a:	bf00      	nop
 800093c:	3738      	adds	r7, #56	@ 0x38
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	200002a4 	.word	0x200002a4
 8000948:	40000400 	.word	0x40000400

0800094c <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000952:	f107 0308 	add.w	r3, r7, #8
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000960:	463b      	mov	r3, r7
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000968:	4b1d      	ldr	r3, [pc, #116]	@ (80009e0 <MX_TIM4_Init+0x94>)
 800096a:	4a1e      	ldr	r2, [pc, #120]	@ (80009e4 <MX_TIM4_Init+0x98>)
 800096c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 42000 - 1;
 800096e:	4b1c      	ldr	r3, [pc, #112]	@ (80009e0 <MX_TIM4_Init+0x94>)
 8000970:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8000974:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000976:	4b1a      	ldr	r3, [pc, #104]	@ (80009e0 <MX_TIM4_Init+0x94>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000 - 1;
 800097c:	4b18      	ldr	r3, [pc, #96]	@ (80009e0 <MX_TIM4_Init+0x94>)
 800097e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000982:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000984:	4b16      	ldr	r3, [pc, #88]	@ (80009e0 <MX_TIM4_Init+0x94>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098a:	4b15      	ldr	r3, [pc, #84]	@ (80009e0 <MX_TIM4_Init+0x94>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8000990:	4813      	ldr	r0, [pc, #76]	@ (80009e0 <MX_TIM4_Init+0x94>)
 8000992:	f002 f9d5 	bl	8002d40 <HAL_TIM_Base_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM4_Init+0x54>
    Error_Handler();
 800099c:	f000 fa00 	bl	8000da0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 80009a6:	f107 0308 	add.w	r3, r7, #8
 80009aa:	4619      	mov	r1, r3
 80009ac:	480c      	ldr	r0, [pc, #48]	@ (80009e0 <MX_TIM4_Init+0x94>)
 80009ae:	f002 fd5b 	bl	8003468 <HAL_TIM_ConfigClockSource>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM4_Init+0x70>
    Error_Handler();
 80009b8:	f000 f9f2 	bl	8000da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009bc:	2300      	movs	r3, #0
 80009be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 80009c4:	463b      	mov	r3, r7
 80009c6:	4619      	mov	r1, r3
 80009c8:	4805      	ldr	r0, [pc, #20]	@ (80009e0 <MX_TIM4_Init+0x94>)
 80009ca:	f003 f959 	bl	8003c80 <HAL_TIMEx_MasterConfigSynchronization>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM4_Init+0x8c>
    Error_Handler();
 80009d4:	f000 f9e4 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
}
 80009d8:	bf00      	nop
 80009da:	3718      	adds	r7, #24
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	200002ec 	.word	0x200002ec
 80009e4:	40000800 	.word	0x40000800

080009e8 <MX_UART5_Init>:
/**
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80009ec:	4b11      	ldr	r3, [pc, #68]	@ (8000a34 <MX_UART5_Init+0x4c>)
 80009ee:	4a12      	ldr	r2, [pc, #72]	@ (8000a38 <MX_UART5_Init+0x50>)
 80009f0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80009f2:	4b10      	ldr	r3, [pc, #64]	@ (8000a34 <MX_UART5_Init+0x4c>)
 80009f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009f8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000a34 <MX_UART5_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	@ (8000a34 <MX_UART5_Init+0x4c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	@ (8000a34 <MX_UART5_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <MX_UART5_Init+0x4c>)
 8000a0e:	220c      	movs	r2, #12
 8000a10:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a12:	4b08      	ldr	r3, [pc, #32]	@ (8000a34 <MX_UART5_Init+0x4c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a18:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <MX_UART5_Init+0x4c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK) {
 8000a1e:	4805      	ldr	r0, [pc, #20]	@ (8000a34 <MX_UART5_Init+0x4c>)
 8000a20:	f003 f9be 	bl	8003da0 <HAL_UART_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_UART5_Init+0x46>
    Error_Handler();
 8000a2a:	f000 f9b9 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000334 	.word	0x20000334
 8000a38:	40005000 	.word	0x40005000

08000a3c <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a40:	4b11      	ldr	r3, [pc, #68]	@ (8000a88 <MX_USART3_UART_Init+0x4c>)
 8000a42:	4a12      	ldr	r2, [pc, #72]	@ (8000a8c <MX_USART3_UART_Init+0x50>)
 8000a44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a46:	4b10      	ldr	r3, [pc, #64]	@ (8000a88 <MX_USART3_UART_Init+0x4c>)
 8000a48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a88 <MX_USART3_UART_Init+0x4c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a54:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <MX_USART3_UART_Init+0x4c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a88 <MX_USART3_UART_Init+0x4c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a60:	4b09      	ldr	r3, [pc, #36]	@ (8000a88 <MX_USART3_UART_Init+0x4c>)
 8000a62:	220c      	movs	r2, #12
 8000a64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a66:	4b08      	ldr	r3, [pc, #32]	@ (8000a88 <MX_USART3_UART_Init+0x4c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <MX_USART3_UART_Init+0x4c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000a72:	4805      	ldr	r0, [pc, #20]	@ (8000a88 <MX_USART3_UART_Init+0x4c>)
 8000a74:	f003 f994 	bl	8003da0 <HAL_UART_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_USART3_UART_Init+0x46>
    Error_Handler();
 8000a7e:	f000 f98f 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	2000037c 	.word	0x2000037c
 8000a8c:	40004800 	.word	0x40004800

08000a90 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a94:	4b14      	ldr	r3, [pc, #80]	@ (8000ae8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a96:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000a9a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000a9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ae8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a9e:	2204      	movs	r2, #4
 8000aa0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000aa2:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa4:	2202      	movs	r2, #2
 8000aa6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab0:	2202      	movs	r2, #2
 8000ab2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ac0:	4b09      	ldr	r3, [pc, #36]	@ (8000ae8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000acc:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8000ad2:	4805      	ldr	r0, [pc, #20]	@ (8000ae8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad4:	f001 fb8d 	bl	80021f2 <HAL_PCD_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_USB_OTG_FS_PCD_Init+0x52>
    Error_Handler();
 8000ade:	f000 f95f 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200003c4 	.word	0x200003c4

08000aec <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08c      	sub	sp, #48	@ 0x30
 8000af0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
 8000b00:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	61bb      	str	r3, [r7, #24]
 8000b06:	4b4c      	ldr	r3, [pc, #304]	@ (8000c38 <MX_GPIO_Init+0x14c>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	4a4b      	ldr	r2, [pc, #300]	@ (8000c38 <MX_GPIO_Init+0x14c>)
 8000b0c:	f043 0304 	orr.w	r3, r3, #4
 8000b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b12:	4b49      	ldr	r3, [pc, #292]	@ (8000c38 <MX_GPIO_Init+0x14c>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	f003 0304 	and.w	r3, r3, #4
 8000b1a:	61bb      	str	r3, [r7, #24]
 8000b1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]
 8000b22:	4b45      	ldr	r3, [pc, #276]	@ (8000c38 <MX_GPIO_Init+0x14c>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	4a44      	ldr	r2, [pc, #272]	@ (8000c38 <MX_GPIO_Init+0x14c>)
 8000b28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2e:	4b42      	ldr	r3, [pc, #264]	@ (8000c38 <MX_GPIO_Init+0x14c>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	4b3e      	ldr	r3, [pc, #248]	@ (8000c38 <MX_GPIO_Init+0x14c>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b42:	4a3d      	ldr	r2, [pc, #244]	@ (8000c38 <MX_GPIO_Init+0x14c>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4a:	4b3b      	ldr	r3, [pc, #236]	@ (8000c38 <MX_GPIO_Init+0x14c>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	4b37      	ldr	r3, [pc, #220]	@ (8000c38 <MX_GPIO_Init+0x14c>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	4a36      	ldr	r2, [pc, #216]	@ (8000c38 <MX_GPIO_Init+0x14c>)
 8000b60:	f043 0302 	orr.w	r3, r3, #2
 8000b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b66:	4b34      	ldr	r3, [pc, #208]	@ (8000c38 <MX_GPIO_Init+0x14c>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	f003 0302 	and.w	r3, r3, #2
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	4b30      	ldr	r3, [pc, #192]	@ (8000c38 <MX_GPIO_Init+0x14c>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	4a2f      	ldr	r2, [pc, #188]	@ (8000c38 <MX_GPIO_Init+0x14c>)
 8000b7c:	f043 0308 	orr.w	r3, r3, #8
 8000b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b82:	4b2d      	ldr	r3, [pc, #180]	@ (8000c38 <MX_GPIO_Init+0x14c>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b86:	f003 0308 	and.w	r3, r3, #8
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	4b29      	ldr	r3, [pc, #164]	@ (8000c38 <MX_GPIO_Init+0x14c>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	4a28      	ldr	r2, [pc, #160]	@ (8000c38 <MX_GPIO_Init+0x14c>)
 8000b98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9e:	4b26      	ldr	r3, [pc, #152]	@ (8000c38 <MX_GPIO_Init+0x14c>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000bb0:	4822      	ldr	r0, [pc, #136]	@ (8000c3c <MX_GPIO_Init+0x150>)
 8000bb2:	f001 fb05 	bl	80021c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2140      	movs	r1, #64	@ 0x40
 8000bba:	4821      	ldr	r0, [pc, #132]	@ (8000c40 <MX_GPIO_Init+0x154>)
 8000bbc:	f001 fb00 	bl	80021c0 <HAL_GPIO_WritePin>
                    GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000bc0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bc6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f107 031c 	add.w	r3, r7, #28
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	481b      	ldr	r0, [pc, #108]	@ (8000c44 <MX_GPIO_Init+0x158>)
 8000bd8:	f001 f946 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8000bdc:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be2:	2301      	movs	r3, #1
 8000be4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4811      	ldr	r0, [pc, #68]	@ (8000c3c <MX_GPIO_Init+0x150>)
 8000bf6:	f001 f937 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bfa:	2340      	movs	r3, #64	@ 0x40
 8000bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c0a:	f107 031c 	add.w	r3, r7, #28
 8000c0e:	4619      	mov	r1, r3
 8000c10:	480b      	ldr	r0, [pc, #44]	@ (8000c40 <MX_GPIO_Init+0x154>)
 8000c12:	f001 f929 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c16:	2380      	movs	r3, #128	@ 0x80
 8000c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 031c 	add.w	r3, r7, #28
 8000c26:	4619      	mov	r1, r3
 8000c28:	4805      	ldr	r0, [pc, #20]	@ (8000c40 <MX_GPIO_Init+0x154>)
 8000c2a:	f001 f91d 	bl	8001e68 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c2e:	bf00      	nop
 8000c30:	3730      	adds	r7, #48	@ 0x30
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020400 	.word	0x40020400
 8000c40:	40021800 	.word	0x40021800
 8000c44:	40020800 	.word	0x40020800

08000c48 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c58:	d102      	bne.n	8000c60 <HAL_TIM_PeriodElapsedCallback+0x18>
    shotflag = 0;
 8000c5a:	4b20      	ldr	r3, [pc, #128]	@ (8000cdc <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
  }
  if (htim->Instance == TIM4) {
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a1e      	ldr	r2, [pc, #120]	@ (8000ce0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d133      	bne.n	8000cd2 <HAL_TIM_PeriodElapsedCallback+0x8a>
    switch (trigprogress) {
 8000c6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2b03      	cmp	r3, #3
 8000c70:	d813      	bhi.n	8000c9a <HAL_TIM_PeriodElapsedCallback+0x52>
 8000c72:	a201      	add	r2, pc, #4	@ (adr r2, 8000c78 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c78:	08000c89 	.word	0x08000c89
 8000c7c:	08000c93 	.word	0x08000c93
 8000c80:	08000c89 	.word	0x08000c89
 8000c84:	08000c93 	.word	0x08000c93
    case 0:
    case 2:
      TIM3->CCR1 = TRIGPULSE;
 8000c88:	4b17      	ldr	r3, [pc, #92]	@ (8000ce8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000c8a:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8000c8e:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
 8000c90:	e003      	b.n	8000c9a <HAL_TIM_PeriodElapsedCallback+0x52>
    case 1:
    case 3:
      TIM3->CCR1 = DFLTPULSE;
 8000c92:	4b15      	ldr	r3, [pc, #84]	@ (8000ce8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000c94:	22d2      	movs	r2, #210	@ 0xd2
 8000c96:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
 8000c98:	bf00      	nop
    }
    if (trigprogress++ < 3)
 8000c9a:	4b12      	ldr	r3, [pc, #72]	@ (8000ce4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	1c5a      	adds	r2, r3, #1
 8000ca0:	4910      	ldr	r1, [pc, #64]	@ (8000ce4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000ca2:	600a      	str	r2, [r1, #0]
 8000ca4:	2b02      	cmp	r3, #2
 8000ca6:	dc03      	bgt.n	8000cb0 <HAL_TIM_PeriodElapsedCallback+0x68>
      HAL_TIM_Base_Start_IT(&htim4);
 8000ca8:	4810      	ldr	r0, [pc, #64]	@ (8000cec <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000caa:	f002 f899 	bl	8002de0 <HAL_TIM_Base_Start_IT>
      boundcnt = MAXBOUNDCNT;
      TIM3->CCR3 = THTCENTER, TIM3->CCR4 = PHICENTER;
      HAL_TIM_Base_Start_IT(&htim2);
    }
  }
}
 8000cae:	e010      	b.n	8000cd2 <HAL_TIM_PeriodElapsedCallback+0x8a>
      trigprogress = 0;
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
      boundcnt = MAXBOUNDCNT;
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000cb8:	221e      	movs	r2, #30
 8000cba:	601a      	str	r2, [r3, #0]
      TIM3->CCR3 = THTCENTER, TIM3->CCR4 = PHICENTER;
 8000cbc:	f240 22e3 	movw	r2, #739	@ 0x2e3
 8000cc0:	4b09      	ldr	r3, [pc, #36]	@ (8000ce8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000cc2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000cc4:	f240 12c1 	movw	r2, #449	@ 0x1c1
 8000cc8:	4b07      	ldr	r3, [pc, #28]	@ (8000ce8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000cca:	641a      	str	r2, [r3, #64]	@ 0x40
      HAL_TIM_Base_Start_IT(&htim2);
 8000ccc:	4809      	ldr	r0, [pc, #36]	@ (8000cf4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000cce:	f002 f887 	bl	8002de0 <HAL_TIM_Base_Start_IT>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200008b0 	.word	0x200008b0
 8000ce0:	40000800 	.word	0x40000800
 8000ce4:	200008b8 	.word	0x200008b8
 8000ce8:	40000400 	.word	0x40000400
 8000cec:	200002ec 	.word	0x200002ec
 8000cf0:	20000008 	.word	0x20000008
 8000cf4:	2000025c 	.word	0x2000025c

08000cf8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  oper[0] = oper[1];
 8000d00:	4b21      	ldr	r3, [pc, #132]	@ (8000d88 <HAL_UART_RxCpltCallback+0x90>)
 8000d02:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8000d06:	4b20      	ldr	r3, [pc, #128]	@ (8000d88 <HAL_UART_RxCpltCallback+0x90>)
 8000d08:	701a      	strb	r2, [r3, #0]
  oper[1] = oper[2];
 8000d0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000d88 <HAL_UART_RxCpltCallback+0x90>)
 8000d0c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8000d10:	4b1d      	ldr	r3, [pc, #116]	@ (8000d88 <HAL_UART_RxCpltCallback+0x90>)
 8000d12:	705a      	strb	r2, [r3, #1]
  oper[2] = oper[3];
 8000d14:	4b1c      	ldr	r3, [pc, #112]	@ (8000d88 <HAL_UART_RxCpltCallback+0x90>)
 8000d16:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8000d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000d88 <HAL_UART_RxCpltCallback+0x90>)
 8000d1c:	709a      	strb	r2, [r3, #2]
  oper[3] = rxbuf;
 8000d1e:	4b1b      	ldr	r3, [pc, #108]	@ (8000d8c <HAL_UART_RxCpltCallback+0x94>)
 8000d20:	f993 2000 	ldrsb.w	r2, [r3]
 8000d24:	4b18      	ldr	r3, [pc, #96]	@ (8000d88 <HAL_UART_RxCpltCallback+0x90>)
 8000d26:	70da      	strb	r2, [r3, #3]
  if (oper[3] == ENDOFDATA && oper[0] == MOVEOP && moveflag == 0)
 8000d28:	4b17      	ldr	r3, [pc, #92]	@ (8000d88 <HAL_UART_RxCpltCallback+0x90>)
 8000d2a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d10c      	bne.n	8000d4c <HAL_UART_RxCpltCallback+0x54>
 8000d32:	4b15      	ldr	r3, [pc, #84]	@ (8000d88 <HAL_UART_RxCpltCallback+0x90>)
 8000d34:	f993 3000 	ldrsb.w	r3, [r3]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d107      	bne.n	8000d4c <HAL_UART_RxCpltCallback+0x54>
 8000d3c:	4b14      	ldr	r3, [pc, #80]	@ (8000d90 <HAL_UART_RxCpltCallback+0x98>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d103      	bne.n	8000d4c <HAL_UART_RxCpltCallback+0x54>
    moveflag = 1;
 8000d44:	4b12      	ldr	r3, [pc, #72]	@ (8000d90 <HAL_UART_RxCpltCallback+0x98>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	e013      	b.n	8000d74 <HAL_UART_RxCpltCallback+0x7c>
  else if (oper[3] == ENDOFDATA && oper[0] == TRIGOP && shotflag == 0)
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d88 <HAL_UART_RxCpltCallback+0x90>)
 8000d4e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	d10e      	bne.n	8000d74 <HAL_UART_RxCpltCallback+0x7c>
 8000d56:	4b0c      	ldr	r3, [pc, #48]	@ (8000d88 <HAL_UART_RxCpltCallback+0x90>)
 8000d58:	f993 3000 	ldrsb.w	r3, [r3]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d109      	bne.n	8000d74 <HAL_UART_RxCpltCallback+0x7c>
 8000d60:	4b0c      	ldr	r3, [pc, #48]	@ (8000d94 <HAL_UART_RxCpltCallback+0x9c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d105      	bne.n	8000d74 <HAL_UART_RxCpltCallback+0x7c>
    shotflag = 1, HAL_TIM_Base_Start_IT(&htim4);
 8000d68:	4b0a      	ldr	r3, [pc, #40]	@ (8000d94 <HAL_UART_RxCpltCallback+0x9c>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	480a      	ldr	r0, [pc, #40]	@ (8000d98 <HAL_UART_RxCpltCallback+0xa0>)
 8000d70:	f002 f836 	bl	8002de0 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart5, &rxbuf, 1);
 8000d74:	2201      	movs	r2, #1
 8000d76:	4905      	ldr	r1, [pc, #20]	@ (8000d8c <HAL_UART_RxCpltCallback+0x94>)
 8000d78:	4808      	ldr	r0, [pc, #32]	@ (8000d9c <HAL_UART_RxCpltCallback+0xa4>)
 8000d7a:	f003 f861 	bl	8003e40 <HAL_UART_Receive_IT>
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	200008ac 	.word	0x200008ac
 8000d8c:	200008a8 	.word	0x200008a8
 8000d90:	200008b4 	.word	0x200008b4
 8000d94:	200008b0 	.word	0x200008b0
 8000d98:	200002ec 	.word	0x200002ec
 8000d9c:	20000334 	.word	0x20000334

08000da0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da4:	b672      	cpsid	i
}
 8000da6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <Error_Handler+0x8>

08000dac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	4b10      	ldr	r3, [pc, #64]	@ (8000df8 <HAL_MspInit+0x4c>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dba:	4a0f      	ldr	r2, [pc, #60]	@ (8000df8 <HAL_MspInit+0x4c>)
 8000dbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000df8 <HAL_MspInit+0x4c>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	603b      	str	r3, [r7, #0]
 8000dd2:	4b09      	ldr	r3, [pc, #36]	@ (8000df8 <HAL_MspInit+0x4c>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd6:	4a08      	ldr	r2, [pc, #32]	@ (8000df8 <HAL_MspInit+0x4c>)
 8000dd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ddc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dde:	4b06      	ldr	r3, [pc, #24]	@ (8000df8 <HAL_MspInit+0x4c>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000de6:	603b      	str	r3, [r7, #0]
 8000de8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	40023800 	.word	0x40023800

08000dfc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08e      	sub	sp, #56	@ 0x38
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a55      	ldr	r2, [pc, #340]	@ (8000f70 <HAL_ETH_MspInit+0x174>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	f040 80a4 	bne.w	8000f68 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000e20:	2300      	movs	r3, #0
 8000e22:	623b      	str	r3, [r7, #32]
 8000e24:	4b53      	ldr	r3, [pc, #332]	@ (8000f74 <HAL_ETH_MspInit+0x178>)
 8000e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e28:	4a52      	ldr	r2, [pc, #328]	@ (8000f74 <HAL_ETH_MspInit+0x178>)
 8000e2a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e30:	4b50      	ldr	r3, [pc, #320]	@ (8000f74 <HAL_ETH_MspInit+0x178>)
 8000e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e38:	623b      	str	r3, [r7, #32]
 8000e3a:	6a3b      	ldr	r3, [r7, #32]
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61fb      	str	r3, [r7, #28]
 8000e40:	4b4c      	ldr	r3, [pc, #304]	@ (8000f74 <HAL_ETH_MspInit+0x178>)
 8000e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e44:	4a4b      	ldr	r2, [pc, #300]	@ (8000f74 <HAL_ETH_MspInit+0x178>)
 8000e46:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000e4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4c:	4b49      	ldr	r3, [pc, #292]	@ (8000f74 <HAL_ETH_MspInit+0x178>)
 8000e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e50:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000e54:	61fb      	str	r3, [r7, #28]
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61bb      	str	r3, [r7, #24]
 8000e5c:	4b45      	ldr	r3, [pc, #276]	@ (8000f74 <HAL_ETH_MspInit+0x178>)
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e60:	4a44      	ldr	r2, [pc, #272]	@ (8000f74 <HAL_ETH_MspInit+0x178>)
 8000e62:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000e66:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e68:	4b42      	ldr	r3, [pc, #264]	@ (8000f74 <HAL_ETH_MspInit+0x178>)
 8000e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000e70:	61bb      	str	r3, [r7, #24]
 8000e72:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	4b3e      	ldr	r3, [pc, #248]	@ (8000f74 <HAL_ETH_MspInit+0x178>)
 8000e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7c:	4a3d      	ldr	r2, [pc, #244]	@ (8000f74 <HAL_ETH_MspInit+0x178>)
 8000e7e:	f043 0304 	orr.w	r3, r3, #4
 8000e82:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e84:	4b3b      	ldr	r3, [pc, #236]	@ (8000f74 <HAL_ETH_MspInit+0x178>)
 8000e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e88:	f003 0304 	and.w	r3, r3, #4
 8000e8c:	617b      	str	r3, [r7, #20]
 8000e8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e90:	2300      	movs	r3, #0
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	4b37      	ldr	r3, [pc, #220]	@ (8000f74 <HAL_ETH_MspInit+0x178>)
 8000e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e98:	4a36      	ldr	r2, [pc, #216]	@ (8000f74 <HAL_ETH_MspInit+0x178>)
 8000e9a:	f043 0301 	orr.w	r3, r3, #1
 8000e9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea0:	4b34      	ldr	r3, [pc, #208]	@ (8000f74 <HAL_ETH_MspInit+0x178>)
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea4:	f003 0301 	and.w	r3, r3, #1
 8000ea8:	613b      	str	r3, [r7, #16]
 8000eaa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eac:	2300      	movs	r3, #0
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	4b30      	ldr	r3, [pc, #192]	@ (8000f74 <HAL_ETH_MspInit+0x178>)
 8000eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb4:	4a2f      	ldr	r2, [pc, #188]	@ (8000f74 <HAL_ETH_MspInit+0x178>)
 8000eb6:	f043 0302 	orr.w	r3, r3, #2
 8000eba:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ebc:	4b2d      	ldr	r3, [pc, #180]	@ (8000f74 <HAL_ETH_MspInit+0x178>)
 8000ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	4b29      	ldr	r3, [pc, #164]	@ (8000f74 <HAL_ETH_MspInit+0x178>)
 8000ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed0:	4a28      	ldr	r2, [pc, #160]	@ (8000f74 <HAL_ETH_MspInit+0x178>)
 8000ed2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ed6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed8:	4b26      	ldr	r3, [pc, #152]	@ (8000f74 <HAL_ETH_MspInit+0x178>)
 8000eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ee4:	2332      	movs	r3, #50	@ 0x32
 8000ee6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ef4:	230b      	movs	r3, #11
 8000ef6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000efc:	4619      	mov	r1, r3
 8000efe:	481e      	ldr	r0, [pc, #120]	@ (8000f78 <HAL_ETH_MspInit+0x17c>)
 8000f00:	f000 ffb2 	bl	8001e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000f04:	2386      	movs	r3, #134	@ 0x86
 8000f06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f10:	2303      	movs	r3, #3
 8000f12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f14:	230b      	movs	r3, #11
 8000f16:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4817      	ldr	r0, [pc, #92]	@ (8000f7c <HAL_ETH_MspInit+0x180>)
 8000f20:	f000 ffa2 	bl	8001e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000f24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f32:	2303      	movs	r3, #3
 8000f34:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f36:	230b      	movs	r3, #11
 8000f38:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f3e:	4619      	mov	r1, r3
 8000f40:	480f      	ldr	r0, [pc, #60]	@ (8000f80 <HAL_ETH_MspInit+0x184>)
 8000f42:	f000 ff91 	bl	8001e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000f46:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000f4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f54:	2303      	movs	r3, #3
 8000f56:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f58:	230b      	movs	r3, #11
 8000f5a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f60:	4619      	mov	r1, r3
 8000f62:	4808      	ldr	r0, [pc, #32]	@ (8000f84 <HAL_ETH_MspInit+0x188>)
 8000f64:	f000 ff80 	bl	8001e68 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000f68:	bf00      	nop
 8000f6a:	3738      	adds	r7, #56	@ 0x38
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40028000 	.word	0x40028000
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40020800 	.word	0x40020800
 8000f7c:	40020000 	.word	0x40020000
 8000f80:	40020400 	.word	0x40020400
 8000f84:	40021800 	.word	0x40021800

08000f88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f98:	d10e      	bne.n	8000fb8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
 8000f9e:	4b20      	ldr	r3, [pc, #128]	@ (8001020 <HAL_TIM_Base_MspInit+0x98>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa2:	4a1f      	ldr	r2, [pc, #124]	@ (8001020 <HAL_TIM_Base_MspInit+0x98>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000faa:	4b1d      	ldr	r3, [pc, #116]	@ (8001020 <HAL_TIM_Base_MspInit+0x98>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000fb6:	e02e      	b.n	8001016 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a19      	ldr	r2, [pc, #100]	@ (8001024 <HAL_TIM_Base_MspInit+0x9c>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d10e      	bne.n	8000fe0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
 8000fc6:	4b16      	ldr	r3, [pc, #88]	@ (8001020 <HAL_TIM_Base_MspInit+0x98>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fca:	4a15      	ldr	r2, [pc, #84]	@ (8001020 <HAL_TIM_Base_MspInit+0x98>)
 8000fcc:	f043 0302 	orr.w	r3, r3, #2
 8000fd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fd2:	4b13      	ldr	r3, [pc, #76]	@ (8001020 <HAL_TIM_Base_MspInit+0x98>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	693b      	ldr	r3, [r7, #16]
}
 8000fde:	e01a      	b.n	8001016 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM4)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a10      	ldr	r2, [pc, #64]	@ (8001028 <HAL_TIM_Base_MspInit+0xa0>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d115      	bne.n	8001016 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	4b0c      	ldr	r3, [pc, #48]	@ (8001020 <HAL_TIM_Base_MspInit+0x98>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff2:	4a0b      	ldr	r2, [pc, #44]	@ (8001020 <HAL_TIM_Base_MspInit+0x98>)
 8000ff4:	f043 0304 	orr.w	r3, r3, #4
 8000ff8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ffa:	4b09      	ldr	r3, [pc, #36]	@ (8001020 <HAL_TIM_Base_MspInit+0x98>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffe:	f003 0304 	and.w	r3, r3, #4
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	2100      	movs	r1, #0
 800100a:	201e      	movs	r0, #30
 800100c:	f000 fb3b 	bl	8001686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001010:	201e      	movs	r0, #30
 8001012:	f000 fb54 	bl	80016be <HAL_NVIC_EnableIRQ>
}
 8001016:	bf00      	nop
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40023800 	.word	0x40023800
 8001024:	40000400 	.word	0x40000400
 8001028:	40000800 	.word	0x40000800

0800102c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a12      	ldr	r2, [pc, #72]	@ (8001094 <HAL_TIM_MspPostInit+0x68>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d11e      	bne.n	800108c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <HAL_TIM_MspPostInit+0x6c>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	4a10      	ldr	r2, [pc, #64]	@ (8001098 <HAL_TIM_MspPostInit+0x6c>)
 8001058:	f043 0304 	orr.w	r3, r3, #4
 800105c:	6313      	str	r3, [r2, #48]	@ 0x30
 800105e:	4b0e      	ldr	r3, [pc, #56]	@ (8001098 <HAL_TIM_MspPostInit+0x6c>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	f003 0304 	and.w	r3, r3, #4
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 800106a:	f44f 7350 	mov.w	r3, #832	@ 0x340
 800106e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001078:	2300      	movs	r3, #0
 800107a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800107c:	2302      	movs	r3, #2
 800107e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	4619      	mov	r1, r3
 8001086:	4805      	ldr	r0, [pc, #20]	@ (800109c <HAL_TIM_MspPostInit+0x70>)
 8001088:	f000 feee 	bl	8001e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800108c:	bf00      	nop
 800108e:	3720      	adds	r7, #32
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40000400 	.word	0x40000400
 8001098:	40023800 	.word	0x40023800
 800109c:	40020800 	.word	0x40020800

080010a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08c      	sub	sp, #48	@ 0x30
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 031c 	add.w	r3, r7, #28
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a42      	ldr	r2, [pc, #264]	@ (80011c8 <HAL_UART_MspInit+0x128>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d14b      	bne.n	800115a <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	61bb      	str	r3, [r7, #24]
 80010c6:	4b41      	ldr	r3, [pc, #260]	@ (80011cc <HAL_UART_MspInit+0x12c>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ca:	4a40      	ldr	r2, [pc, #256]	@ (80011cc <HAL_UART_MspInit+0x12c>)
 80010cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80010d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010d2:	4b3e      	ldr	r3, [pc, #248]	@ (80011cc <HAL_UART_MspInit+0x12c>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010da:	61bb      	str	r3, [r7, #24]
 80010dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
 80010e2:	4b3a      	ldr	r3, [pc, #232]	@ (80011cc <HAL_UART_MspInit+0x12c>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	4a39      	ldr	r2, [pc, #228]	@ (80011cc <HAL_UART_MspInit+0x12c>)
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ee:	4b37      	ldr	r3, [pc, #220]	@ (80011cc <HAL_UART_MspInit+0x12c>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	4b33      	ldr	r3, [pc, #204]	@ (80011cc <HAL_UART_MspInit+0x12c>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001102:	4a32      	ldr	r2, [pc, #200]	@ (80011cc <HAL_UART_MspInit+0x12c>)
 8001104:	f043 0308 	orr.w	r3, r3, #8
 8001108:	6313      	str	r3, [r2, #48]	@ 0x30
 800110a:	4b30      	ldr	r3, [pc, #192]	@ (80011cc <HAL_UART_MspInit+0x12c>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110e:	f003 0308 	and.w	r3, r3, #8
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001116:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800111a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	2302      	movs	r3, #2
 800111e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001124:	2303      	movs	r3, #3
 8001126:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001128:	2308      	movs	r3, #8
 800112a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800112c:	f107 031c 	add.w	r3, r7, #28
 8001130:	4619      	mov	r1, r3
 8001132:	4827      	ldr	r0, [pc, #156]	@ (80011d0 <HAL_UART_MspInit+0x130>)
 8001134:	f000 fe98 	bl	8001e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001138:	2304      	movs	r3, #4
 800113a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001144:	2303      	movs	r3, #3
 8001146:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001148:	2308      	movs	r3, #8
 800114a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800114c:	f107 031c 	add.w	r3, r7, #28
 8001150:	4619      	mov	r1, r3
 8001152:	4820      	ldr	r0, [pc, #128]	@ (80011d4 <HAL_UART_MspInit+0x134>)
 8001154:	f000 fe88 	bl	8001e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001158:	e031      	b.n	80011be <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART3)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a1e      	ldr	r2, [pc, #120]	@ (80011d8 <HAL_UART_MspInit+0x138>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d12c      	bne.n	80011be <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001164:	2300      	movs	r3, #0
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	4b18      	ldr	r3, [pc, #96]	@ (80011cc <HAL_UART_MspInit+0x12c>)
 800116a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116c:	4a17      	ldr	r2, [pc, #92]	@ (80011cc <HAL_UART_MspInit+0x12c>)
 800116e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001172:	6413      	str	r3, [r2, #64]	@ 0x40
 8001174:	4b15      	ldr	r3, [pc, #84]	@ (80011cc <HAL_UART_MspInit+0x12c>)
 8001176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001178:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001180:	2300      	movs	r3, #0
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	4b11      	ldr	r3, [pc, #68]	@ (80011cc <HAL_UART_MspInit+0x12c>)
 8001186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001188:	4a10      	ldr	r2, [pc, #64]	@ (80011cc <HAL_UART_MspInit+0x12c>)
 800118a:	f043 0308 	orr.w	r3, r3, #8
 800118e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001190:	4b0e      	ldr	r3, [pc, #56]	@ (80011cc <HAL_UART_MspInit+0x12c>)
 8001192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001194:	f003 0308 	and.w	r3, r3, #8
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800119c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	2302      	movs	r3, #2
 80011a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011aa:	2303      	movs	r3, #3
 80011ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011ae:	2307      	movs	r3, #7
 80011b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011b2:	f107 031c 	add.w	r3, r7, #28
 80011b6:	4619      	mov	r1, r3
 80011b8:	4806      	ldr	r0, [pc, #24]	@ (80011d4 <HAL_UART_MspInit+0x134>)
 80011ba:	f000 fe55 	bl	8001e68 <HAL_GPIO_Init>
}
 80011be:	bf00      	nop
 80011c0:	3730      	adds	r7, #48	@ 0x30
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40005000 	.word	0x40005000
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020800 	.word	0x40020800
 80011d4:	40020c00 	.word	0x40020c00
 80011d8:	40004800 	.word	0x40004800

080011dc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	@ 0x28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011fc:	d13f      	bne.n	800127e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	4b21      	ldr	r3, [pc, #132]	@ (8001288 <HAL_PCD_MspInit+0xac>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	4a20      	ldr	r2, [pc, #128]	@ (8001288 <HAL_PCD_MspInit+0xac>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6313      	str	r3, [r2, #48]	@ 0x30
 800120e:	4b1e      	ldr	r3, [pc, #120]	@ (8001288 <HAL_PCD_MspInit+0xac>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800121a:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800121e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	2302      	movs	r3, #2
 8001222:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001228:	2303      	movs	r3, #3
 800122a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800122c:	230a      	movs	r3, #10
 800122e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	4619      	mov	r1, r3
 8001236:	4815      	ldr	r0, [pc, #84]	@ (800128c <HAL_PCD_MspInit+0xb0>)
 8001238:	f000 fe16 	bl	8001e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800123c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001240:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001242:	2300      	movs	r3, #0
 8001244:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	4619      	mov	r1, r3
 8001250:	480e      	ldr	r0, [pc, #56]	@ (800128c <HAL_PCD_MspInit+0xb0>)
 8001252:	f000 fe09 	bl	8001e68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001256:	4b0c      	ldr	r3, [pc, #48]	@ (8001288 <HAL_PCD_MspInit+0xac>)
 8001258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800125a:	4a0b      	ldr	r2, [pc, #44]	@ (8001288 <HAL_PCD_MspInit+0xac>)
 800125c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001260:	6353      	str	r3, [r2, #52]	@ 0x34
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	4b08      	ldr	r3, [pc, #32]	@ (8001288 <HAL_PCD_MspInit+0xac>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126a:	4a07      	ldr	r2, [pc, #28]	@ (8001288 <HAL_PCD_MspInit+0xac>)
 800126c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001270:	6453      	str	r3, [r2, #68]	@ 0x44
 8001272:	4b05      	ldr	r3, [pc, #20]	@ (8001288 <HAL_PCD_MspInit+0xac>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001276:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800127e:	bf00      	nop
 8001280:	3728      	adds	r7, #40	@ 0x28
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800
 800128c:	40020000 	.word	0x40020000

08001290 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001294:	bf00      	nop
 8001296:	e7fd      	b.n	8001294 <NMI_Handler+0x4>

08001298 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800129c:	bf00      	nop
 800129e:	e7fd      	b.n	800129c <HardFault_Handler+0x4>

080012a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <MemManage_Handler+0x4>

080012a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <BusFault_Handler+0x4>

080012b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <UsageFault_Handler+0x4>

080012b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e6:	f000 f8af 	bl	8001448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012f4:	4802      	ldr	r0, [pc, #8]	@ (8001300 <TIM2_IRQHandler+0x10>)
 80012f6:	f001 ff05 	bl	8003104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	2000025c 	.word	0x2000025c

08001304 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001308:	4802      	ldr	r0, [pc, #8]	@ (8001314 <TIM4_IRQHandler+0x10>)
 800130a:	f001 fefb 	bl	8003104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	200002ec 	.word	0x200002ec

08001318 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800131c:	4802      	ldr	r0, [pc, #8]	@ (8001328 <UART5_IRQHandler+0x10>)
 800131e:	f002 fdb5 	bl	8003e8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000334 	.word	0x20000334

0800132c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001330:	4b06      	ldr	r3, [pc, #24]	@ (800134c <SystemInit+0x20>)
 8001332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001336:	4a05      	ldr	r2, [pc, #20]	@ (800134c <SystemInit+0x20>)
 8001338:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800133c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001350:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001388 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001354:	f7ff ffea 	bl	800132c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001358:	480c      	ldr	r0, [pc, #48]	@ (800138c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800135a:	490d      	ldr	r1, [pc, #52]	@ (8001390 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800135c:	4a0d      	ldr	r2, [pc, #52]	@ (8001394 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800135e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001360:	e002      	b.n	8001368 <LoopCopyDataInit>

08001362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001366:	3304      	adds	r3, #4

08001368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800136a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800136c:	d3f9      	bcc.n	8001362 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800136e:	4a0a      	ldr	r2, [pc, #40]	@ (8001398 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001370:	4c0a      	ldr	r4, [pc, #40]	@ (800139c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001374:	e001      	b.n	800137a <LoopFillZerobss>

08001376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001378:	3204      	adds	r2, #4

0800137a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800137a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800137c:	d3fb      	bcc.n	8001376 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800137e:	f003 ff8b 	bl	8005298 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001382:	f7ff f8ab 	bl	80004dc <main>
  bx  lr    
 8001386:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001388:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800138c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001390:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001394:	08005320 	.word	0x08005320
  ldr r2, =_sbss
 8001398:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800139c:	200008c8 	.word	0x200008c8

080013a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013a0:	e7fe      	b.n	80013a0 <ADC_IRQHandler>
	...

080013a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013a8:	4b0e      	ldr	r3, [pc, #56]	@ (80013e4 <HAL_Init+0x40>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a0d      	ldr	r2, [pc, #52]	@ (80013e4 <HAL_Init+0x40>)
 80013ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013b4:	4b0b      	ldr	r3, [pc, #44]	@ (80013e4 <HAL_Init+0x40>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a0a      	ldr	r2, [pc, #40]	@ (80013e4 <HAL_Init+0x40>)
 80013ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c0:	4b08      	ldr	r3, [pc, #32]	@ (80013e4 <HAL_Init+0x40>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a07      	ldr	r2, [pc, #28]	@ (80013e4 <HAL_Init+0x40>)
 80013c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013cc:	2003      	movs	r0, #3
 80013ce:	f000 f94f 	bl	8001670 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013d2:	2000      	movs	r0, #0
 80013d4:	f000 f808 	bl	80013e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013d8:	f7ff fce8 	bl	8000dac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40023c00 	.word	0x40023c00

080013e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013f0:	4b12      	ldr	r3, [pc, #72]	@ (800143c <HAL_InitTick+0x54>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b12      	ldr	r3, [pc, #72]	@ (8001440 <HAL_InitTick+0x58>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	4619      	mov	r1, r3
 80013fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001402:	fbb2 f3f3 	udiv	r3, r2, r3
 8001406:	4618      	mov	r0, r3
 8001408:	f000 f967 	bl	80016da <HAL_SYSTICK_Config>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e00e      	b.n	8001434 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b0f      	cmp	r3, #15
 800141a:	d80a      	bhi.n	8001432 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800141c:	2200      	movs	r2, #0
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	f04f 30ff 	mov.w	r0, #4294967295
 8001424:	f000 f92f 	bl	8001686 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001428:	4a06      	ldr	r2, [pc, #24]	@ (8001444 <HAL_InitTick+0x5c>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800142e:	2300      	movs	r3, #0
 8001430:	e000      	b.n	8001434 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
}
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	2000000c 	.word	0x2000000c
 8001440:	20000014 	.word	0x20000014
 8001444:	20000010 	.word	0x20000010

08001448 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800144c:	4b06      	ldr	r3, [pc, #24]	@ (8001468 <HAL_IncTick+0x20>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	461a      	mov	r2, r3
 8001452:	4b06      	ldr	r3, [pc, #24]	@ (800146c <HAL_IncTick+0x24>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4413      	add	r3, r2
 8001458:	4a04      	ldr	r2, [pc, #16]	@ (800146c <HAL_IncTick+0x24>)
 800145a:	6013      	str	r3, [r2, #0]
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	20000014 	.word	0x20000014
 800146c:	200008c4 	.word	0x200008c4

08001470 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return uwTick;
 8001474:	4b03      	ldr	r3, [pc, #12]	@ (8001484 <HAL_GetTick+0x14>)
 8001476:	681b      	ldr	r3, [r3, #0]
}
 8001478:	4618      	mov	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	200008c4 	.word	0x200008c4

08001488 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001490:	f7ff ffee 	bl	8001470 <HAL_GetTick>
 8001494:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a0:	d005      	beq.n	80014ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014a2:	4b0a      	ldr	r3, [pc, #40]	@ (80014cc <HAL_Delay+0x44>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	461a      	mov	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4413      	add	r3, r2
 80014ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014ae:	bf00      	nop
 80014b0:	f7ff ffde 	bl	8001470 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d8f7      	bhi.n	80014b0 <HAL_Delay+0x28>
  {
  }
}
 80014c0:	bf00      	nop
 80014c2:	bf00      	nop
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000014 	.word	0x20000014

080014d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014ec:	4013      	ands	r3, r2
 80014ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001502:	4a04      	ldr	r2, [pc, #16]	@ (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	60d3      	str	r3, [r2, #12]
}
 8001508:	bf00      	nop
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800151c:	4b04      	ldr	r3, [pc, #16]	@ (8001530 <__NVIC_GetPriorityGrouping+0x18>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	0a1b      	lsrs	r3, r3, #8
 8001522:	f003 0307 	and.w	r3, r3, #7
}
 8001526:	4618      	mov	r0, r3
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	2b00      	cmp	r3, #0
 8001544:	db0b      	blt.n	800155e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	f003 021f 	and.w	r2, r3, #31
 800154c:	4907      	ldr	r1, [pc, #28]	@ (800156c <__NVIC_EnableIRQ+0x38>)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	095b      	lsrs	r3, r3, #5
 8001554:	2001      	movs	r0, #1
 8001556:	fa00 f202 	lsl.w	r2, r0, r2
 800155a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	e000e100 	.word	0xe000e100

08001570 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	6039      	str	r1, [r7, #0]
 800157a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800157c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001580:	2b00      	cmp	r3, #0
 8001582:	db0a      	blt.n	800159a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	b2da      	uxtb	r2, r3
 8001588:	490c      	ldr	r1, [pc, #48]	@ (80015bc <__NVIC_SetPriority+0x4c>)
 800158a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158e:	0112      	lsls	r2, r2, #4
 8001590:	b2d2      	uxtb	r2, r2
 8001592:	440b      	add	r3, r1
 8001594:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001598:	e00a      	b.n	80015b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	b2da      	uxtb	r2, r3
 800159e:	4908      	ldr	r1, [pc, #32]	@ (80015c0 <__NVIC_SetPriority+0x50>)
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	f003 030f 	and.w	r3, r3, #15
 80015a6:	3b04      	subs	r3, #4
 80015a8:	0112      	lsls	r2, r2, #4
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	440b      	add	r3, r1
 80015ae:	761a      	strb	r2, [r3, #24]
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	e000e100 	.word	0xe000e100
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b089      	sub	sp, #36	@ 0x24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	f1c3 0307 	rsb	r3, r3, #7
 80015de:	2b04      	cmp	r3, #4
 80015e0:	bf28      	it	cs
 80015e2:	2304      	movcs	r3, #4
 80015e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	3304      	adds	r3, #4
 80015ea:	2b06      	cmp	r3, #6
 80015ec:	d902      	bls.n	80015f4 <NVIC_EncodePriority+0x30>
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3b03      	subs	r3, #3
 80015f2:	e000      	b.n	80015f6 <NVIC_EncodePriority+0x32>
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f8:	f04f 32ff 	mov.w	r2, #4294967295
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43da      	mvns	r2, r3
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	401a      	ands	r2, r3
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800160c:	f04f 31ff 	mov.w	r1, #4294967295
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	fa01 f303 	lsl.w	r3, r1, r3
 8001616:	43d9      	mvns	r1, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161c:	4313      	orrs	r3, r2
         );
}
 800161e:	4618      	mov	r0, r3
 8001620:	3724      	adds	r7, #36	@ 0x24
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
	...

0800162c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3b01      	subs	r3, #1
 8001638:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800163c:	d301      	bcc.n	8001642 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800163e:	2301      	movs	r3, #1
 8001640:	e00f      	b.n	8001662 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001642:	4a0a      	ldr	r2, [pc, #40]	@ (800166c <SysTick_Config+0x40>)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3b01      	subs	r3, #1
 8001648:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800164a:	210f      	movs	r1, #15
 800164c:	f04f 30ff 	mov.w	r0, #4294967295
 8001650:	f7ff ff8e 	bl	8001570 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001654:	4b05      	ldr	r3, [pc, #20]	@ (800166c <SysTick_Config+0x40>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800165a:	4b04      	ldr	r3, [pc, #16]	@ (800166c <SysTick_Config+0x40>)
 800165c:	2207      	movs	r2, #7
 800165e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	e000e010 	.word	0xe000e010

08001670 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff ff29 	bl	80014d0 <__NVIC_SetPriorityGrouping>
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001686:	b580      	push	{r7, lr}
 8001688:	b086      	sub	sp, #24
 800168a:	af00      	add	r7, sp, #0
 800168c:	4603      	mov	r3, r0
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	607a      	str	r2, [r7, #4]
 8001692:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001698:	f7ff ff3e 	bl	8001518 <__NVIC_GetPriorityGrouping>
 800169c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	68b9      	ldr	r1, [r7, #8]
 80016a2:	6978      	ldr	r0, [r7, #20]
 80016a4:	f7ff ff8e 	bl	80015c4 <NVIC_EncodePriority>
 80016a8:	4602      	mov	r2, r0
 80016aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ae:	4611      	mov	r1, r2
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff ff5d 	bl	8001570 <__NVIC_SetPriority>
}
 80016b6:	bf00      	nop
 80016b8:	3718      	adds	r7, #24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	4603      	mov	r3, r0
 80016c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ff31 	bl	8001534 <__NVIC_EnableIRQ>
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff ffa2 	bl	800162c <SysTick_Config>
 80016e8:	4603      	mov	r3, r0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b084      	sub	sp, #16
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016fe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001700:	f7ff feb6 	bl	8001470 <HAL_GetTick>
 8001704:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d008      	beq.n	8001724 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2280      	movs	r2, #128	@ 0x80
 8001716:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e052      	b.n	80017ca <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 0216 	bic.w	r2, r2, #22
 8001732:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	695a      	ldr	r2, [r3, #20]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001742:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001748:	2b00      	cmp	r3, #0
 800174a:	d103      	bne.n	8001754 <HAL_DMA_Abort+0x62>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001750:	2b00      	cmp	r3, #0
 8001752:	d007      	beq.n	8001764 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 0208 	bic.w	r2, r2, #8
 8001762:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f022 0201 	bic.w	r2, r2, #1
 8001772:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001774:	e013      	b.n	800179e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001776:	f7ff fe7b 	bl	8001470 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b05      	cmp	r3, #5
 8001782:	d90c      	bls.n	800179e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2220      	movs	r2, #32
 8001788:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2203      	movs	r2, #3
 800178e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e015      	b.n	80017ca <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1e4      	bne.n	8001776 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017b0:	223f      	movs	r2, #63	@ 0x3f
 80017b2:	409a      	lsls	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b083      	sub	sp, #12
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d004      	beq.n	80017f0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2280      	movs	r2, #128	@ 0x80
 80017ea:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e00c      	b.n	800180a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2205      	movs	r2, #5
 80017f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f022 0201 	bic.w	r2, r2, #1
 8001806:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
	...

08001818 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e06c      	b.n	8001904 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001830:	2b00      	cmp	r3, #0
 8001832:	d106      	bne.n	8001842 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2223      	movs	r2, #35	@ 0x23
 8001838:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff fadd 	bl	8000dfc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	4b31      	ldr	r3, [pc, #196]	@ (800190c <HAL_ETH_Init+0xf4>)
 8001848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800184a:	4a30      	ldr	r2, [pc, #192]	@ (800190c <HAL_ETH_Init+0xf4>)
 800184c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001850:	6453      	str	r3, [r2, #68]	@ 0x44
 8001852:	4b2e      	ldr	r3, [pc, #184]	@ (800190c <HAL_ETH_Init+0xf4>)
 8001854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001856:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800185e:	4b2c      	ldr	r3, [pc, #176]	@ (8001910 <HAL_ETH_Init+0xf8>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	4a2b      	ldr	r2, [pc, #172]	@ (8001910 <HAL_ETH_Init+0xf8>)
 8001864:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001868:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800186a:	4b29      	ldr	r3, [pc, #164]	@ (8001910 <HAL_ETH_Init+0xf8>)
 800186c:	685a      	ldr	r2, [r3, #4]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	4927      	ldr	r1, [pc, #156]	@ (8001910 <HAL_ETH_Init+0xf8>)
 8001874:	4313      	orrs	r3, r2
 8001876:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001878:	4b25      	ldr	r3, [pc, #148]	@ (8001910 <HAL_ETH_Init+0xf8>)
 800187a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	6812      	ldr	r2, [r2, #0]
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001892:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001894:	f7ff fdec 	bl	8001470 <HAL_GetTick>
 8001898:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800189a:	e011      	b.n	80018c0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800189c:	f7ff fde8 	bl	8001470 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80018aa:	d909      	bls.n	80018c0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2204      	movs	r2, #4
 80018b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	22e0      	movs	r2, #224	@ 0xe0
 80018b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e021      	b.n	8001904 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1e4      	bne.n	800189c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 f958 	bl	8001b88 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f000 f9ff 	bl	8001cdc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 fa55 	bl	8001d8e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	461a      	mov	r2, r3
 80018ea:	2100      	movs	r1, #0
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 f9bd 	bl	8001c6c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2210      	movs	r2, #16
 80018fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40023800 	.word	0x40023800
 8001910:	40013800 	.word	0x40013800

08001914 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	4b51      	ldr	r3, [pc, #324]	@ (8001a70 <ETH_SetMACConfig+0x15c>)
 800192a:	4013      	ands	r3, r2
 800192c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	7c1b      	ldrb	r3, [r3, #16]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d102      	bne.n	800193c <ETH_SetMACConfig+0x28>
 8001936:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800193a:	e000      	b.n	800193e <ETH_SetMACConfig+0x2a>
 800193c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	7c5b      	ldrb	r3, [r3, #17]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d102      	bne.n	800194c <ETH_SetMACConfig+0x38>
 8001946:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800194a:	e000      	b.n	800194e <ETH_SetMACConfig+0x3a>
 800194c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800194e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001954:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	7fdb      	ldrb	r3, [r3, #31]
 800195a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800195c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001962:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	7f92      	ldrb	r2, [r2, #30]
 8001968:	2a00      	cmp	r2, #0
 800196a:	d102      	bne.n	8001972 <ETH_SetMACConfig+0x5e>
 800196c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001970:	e000      	b.n	8001974 <ETH_SetMACConfig+0x60>
 8001972:	2200      	movs	r2, #0
                        macconf->Speed |
 8001974:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	7f1b      	ldrb	r3, [r3, #28]
 800197a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800197c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001982:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	791b      	ldrb	r3, [r3, #4]
 8001988:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800198a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001992:	2a00      	cmp	r2, #0
 8001994:	d102      	bne.n	800199c <ETH_SetMACConfig+0x88>
 8001996:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800199a:	e000      	b.n	800199e <ETH_SetMACConfig+0x8a>
 800199c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800199e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	7bdb      	ldrb	r3, [r3, #15]
 80019a4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80019a6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80019ac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80019b4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80019b6:	4313      	orrs	r3, r2
 80019b8:	68fa      	ldr	r2, [r7, #12]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80019ce:	2001      	movs	r0, #1
 80019d0:	f7ff fd5a 	bl	8001488 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80019e4:	68fa      	ldr	r2, [r7, #12]
 80019e6:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80019ea:	4013      	ands	r3, r2
 80019ec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019f2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80019fa:	2a00      	cmp	r2, #0
 80019fc:	d101      	bne.n	8001a02 <ETH_SetMACConfig+0xee>
 80019fe:	2280      	movs	r2, #128	@ 0x80
 8001a00:	e000      	b.n	8001a04 <ETH_SetMACConfig+0xf0>
 8001a02:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a04:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001a0a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001a12:	2a01      	cmp	r2, #1
 8001a14:	d101      	bne.n	8001a1a <ETH_SetMACConfig+0x106>
 8001a16:	2208      	movs	r2, #8
 8001a18:	e000      	b.n	8001a1c <ETH_SetMACConfig+0x108>
 8001a1a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001a1c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001a24:	2a01      	cmp	r2, #1
 8001a26:	d101      	bne.n	8001a2c <ETH_SetMACConfig+0x118>
 8001a28:	2204      	movs	r2, #4
 8001a2a:	e000      	b.n	8001a2e <ETH_SetMACConfig+0x11a>
 8001a2c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001a2e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001a36:	2a01      	cmp	r2, #1
 8001a38:	d101      	bne.n	8001a3e <ETH_SetMACConfig+0x12a>
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	e000      	b.n	8001a40 <ETH_SetMACConfig+0x12c>
 8001a3e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a40:	4313      	orrs	r3, r2
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a58:	2001      	movs	r0, #1
 8001a5a:	f7ff fd15 	bl	8001488 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	619a      	str	r2, [r3, #24]
}
 8001a66:	bf00      	nop
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	ff20810f 	.word	0xff20810f

08001a74 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	4b3d      	ldr	r3, [pc, #244]	@ (8001b84 <ETH_SetDMAConfig+0x110>)
 8001a8e:	4013      	ands	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	7b1b      	ldrb	r3, [r3, #12]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d102      	bne.n	8001aa0 <ETH_SetDMAConfig+0x2c>
 8001a9a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001a9e:	e000      	b.n	8001aa2 <ETH_SetDMAConfig+0x2e>
 8001aa0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	7b5b      	ldrb	r3, [r3, #13]
 8001aa6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001aa8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	7f52      	ldrb	r2, [r2, #29]
 8001aae:	2a00      	cmp	r2, #0
 8001ab0:	d102      	bne.n	8001ab8 <ETH_SetDMAConfig+0x44>
 8001ab2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001ab6:	e000      	b.n	8001aba <ETH_SetDMAConfig+0x46>
 8001ab8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001aba:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	7b9b      	ldrb	r3, [r3, #14]
 8001ac0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001ac2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001ac8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	7f1b      	ldrb	r3, [r3, #28]
 8001ace:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001ad0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	7f9b      	ldrb	r3, [r3, #30]
 8001ad6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001ad8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001ade:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ae6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001af8:	461a      	mov	r2, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b0a:	2001      	movs	r0, #1
 8001b0c:	f7ff fcbc 	bl	8001488 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b18:	461a      	mov	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	791b      	ldrb	r3, [r3, #4]
 8001b22:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b28:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001b2e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001b34:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b3c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001b3e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b44:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001b46:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001b4c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	6812      	ldr	r2, [r2, #0]
 8001b52:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b56:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b5a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b68:	2001      	movs	r0, #1
 8001b6a:	f7ff fc8d 	bl	8001488 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b76:	461a      	mov	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6013      	str	r3, [r2, #0]
}
 8001b7c:	bf00      	nop
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	f8de3f23 	.word	0xf8de3f23

08001b88 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b0a6      	sub	sp, #152	@ 0x98
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001b90:	2301      	movs	r3, #1
 8001b92:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001b96:	2301      	movs	r3, #1
 8001b98:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001be4:	2300      	movs	r3, #0
 8001be6:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001bea:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001bee:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001bf0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001bf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001bfc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c00:	4619      	mov	r1, r3
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff fe86 	bl	8001914 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001c10:	2301      	movs	r3, #1
 8001c12:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001c16:	2301      	movs	r3, #1
 8001c18:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001c24:	2300      	movs	r3, #0
 8001c26:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001c34:	2301      	movs	r3, #1
 8001c36:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001c38:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c3c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001c3e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c42:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001c44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c48:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001c50:	2300      	movs	r3, #0
 8001c52:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001c54:	2300      	movs	r3, #0
 8001c56:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001c58:	f107 0308 	add.w	r3, r7, #8
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff ff08 	bl	8001a74 <ETH_SetDMAConfig>
}
 8001c64:	bf00      	nop
 8001c66:	3798      	adds	r7, #152	@ 0x98
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b087      	sub	sp, #28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3305      	adds	r3, #5
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	021b      	lsls	r3, r3, #8
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	3204      	adds	r2, #4
 8001c84:	7812      	ldrb	r2, [r2, #0]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001c8a:	68ba      	ldr	r2, [r7, #8]
 8001c8c:	4b11      	ldr	r3, [pc, #68]	@ (8001cd4 <ETH_MACAddressConfig+0x68>)
 8001c8e:	4413      	add	r3, r2
 8001c90:	461a      	mov	r2, r3
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3303      	adds	r3, #3
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	061a      	lsls	r2, r3, #24
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	3302      	adds	r3, #2
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	041b      	lsls	r3, r3, #16
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3301      	adds	r3, #1
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	021b      	lsls	r3, r3, #8
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	7812      	ldrb	r2, [r2, #0]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	4b06      	ldr	r3, [pc, #24]	@ (8001cd8 <ETH_MACAddressConfig+0x6c>)
 8001cbe:	4413      	add	r3, r2
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	6013      	str	r3, [r2, #0]
}
 8001cc6:	bf00      	nop
 8001cc8:	371c      	adds	r7, #28
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	40028040 	.word	0x40028040
 8001cd8:	40028044 	.word	0x40028044

08001cdc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	e03e      	b.n	8001d68 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68d9      	ldr	r1, [r3, #12]
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	440b      	add	r3, r1
 8001cfa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	2200      	movs	r2, #0
 8001d06:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	2200      	movs	r2, #0
 8001d12:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001d14:	68b9      	ldr	r1, [r7, #8]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	3206      	adds	r2, #6
 8001d1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d80c      	bhi.n	8001d4c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68d9      	ldr	r1, [r3, #12]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	1c5a      	adds	r2, r3, #1
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	440b      	add	r3, r1
 8001d44:	461a      	mov	r2, r3
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	e004      	b.n	8001d56 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	461a      	mov	r2, r3
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	3301      	adds	r3, #1
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2b03      	cmp	r3, #3
 8001d6c:	d9bd      	bls.n	8001cea <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68da      	ldr	r2, [r3, #12]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d80:	611a      	str	r2, [r3, #16]
}
 8001d82:	bf00      	nop
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b085      	sub	sp, #20
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	e046      	b.n	8001e2a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6919      	ldr	r1, [r3, #16]
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	4613      	mov	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4413      	add	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	440b      	add	r3, r1
 8001dac:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	2200      	movs	r2, #0
 8001db8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001dd8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8001de0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001dee:	68b9      	ldr	r1, [r7, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	3212      	adds	r2, #18
 8001df6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d80c      	bhi.n	8001e1a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6919      	ldr	r1, [r3, #16]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	1c5a      	adds	r2, r3, #1
 8001e08:	4613      	mov	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4413      	add	r3, r2
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	440b      	add	r3, r1
 8001e12:	461a      	mov	r2, r3
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	60da      	str	r2, [r3, #12]
 8001e18:	e004      	b.n	8001e24 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	3301      	adds	r3, #1
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2b03      	cmp	r3, #3
 8001e2e:	d9b5      	bls.n	8001d9c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	691a      	ldr	r2, [r3, #16]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e5a:	60da      	str	r2, [r3, #12]
}
 8001e5c:	bf00      	nop
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b089      	sub	sp, #36	@ 0x24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e76:	2300      	movs	r3, #0
 8001e78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
 8001e82:	e177      	b.n	8002174 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e84:	2201      	movs	r2, #1
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	4013      	ands	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	f040 8166 	bne.w	800216e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d005      	beq.n	8001eba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d130      	bne.n	8001f1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	68da      	ldr	r2, [r3, #12]
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	091b      	lsrs	r3, r3, #4
 8001f06:	f003 0201 	and.w	r2, r3, #1
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 0303 	and.w	r3, r3, #3
 8001f24:	2b03      	cmp	r3, #3
 8001f26:	d017      	beq.n	8001f58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	2203      	movs	r2, #3
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d123      	bne.n	8001fac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	08da      	lsrs	r2, r3, #3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3208      	adds	r2, #8
 8001f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	f003 0307 	and.w	r3, r3, #7
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	220f      	movs	r2, #15
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	691a      	ldr	r2, [r3, #16]
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	08da      	lsrs	r2, r3, #3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	3208      	adds	r2, #8
 8001fa6:	69b9      	ldr	r1, [r7, #24]
 8001fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 0203 	and.w	r2, r3, #3
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 80c0 	beq.w	800216e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	4b66      	ldr	r3, [pc, #408]	@ (800218c <HAL_GPIO_Init+0x324>)
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff6:	4a65      	ldr	r2, [pc, #404]	@ (800218c <HAL_GPIO_Init+0x324>)
 8001ff8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ffc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ffe:	4b63      	ldr	r3, [pc, #396]	@ (800218c <HAL_GPIO_Init+0x324>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002002:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800200a:	4a61      	ldr	r2, [pc, #388]	@ (8002190 <HAL_GPIO_Init+0x328>)
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	089b      	lsrs	r3, r3, #2
 8002010:	3302      	adds	r3, #2
 8002012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002016:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	220f      	movs	r2, #15
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	43db      	mvns	r3, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4013      	ands	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a58      	ldr	r2, [pc, #352]	@ (8002194 <HAL_GPIO_Init+0x32c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d037      	beq.n	80020a6 <HAL_GPIO_Init+0x23e>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a57      	ldr	r2, [pc, #348]	@ (8002198 <HAL_GPIO_Init+0x330>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d031      	beq.n	80020a2 <HAL_GPIO_Init+0x23a>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a56      	ldr	r2, [pc, #344]	@ (800219c <HAL_GPIO_Init+0x334>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d02b      	beq.n	800209e <HAL_GPIO_Init+0x236>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a55      	ldr	r2, [pc, #340]	@ (80021a0 <HAL_GPIO_Init+0x338>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d025      	beq.n	800209a <HAL_GPIO_Init+0x232>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a54      	ldr	r2, [pc, #336]	@ (80021a4 <HAL_GPIO_Init+0x33c>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d01f      	beq.n	8002096 <HAL_GPIO_Init+0x22e>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a53      	ldr	r2, [pc, #332]	@ (80021a8 <HAL_GPIO_Init+0x340>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d019      	beq.n	8002092 <HAL_GPIO_Init+0x22a>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a52      	ldr	r2, [pc, #328]	@ (80021ac <HAL_GPIO_Init+0x344>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d013      	beq.n	800208e <HAL_GPIO_Init+0x226>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a51      	ldr	r2, [pc, #324]	@ (80021b0 <HAL_GPIO_Init+0x348>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d00d      	beq.n	800208a <HAL_GPIO_Init+0x222>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a50      	ldr	r2, [pc, #320]	@ (80021b4 <HAL_GPIO_Init+0x34c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d007      	beq.n	8002086 <HAL_GPIO_Init+0x21e>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a4f      	ldr	r2, [pc, #316]	@ (80021b8 <HAL_GPIO_Init+0x350>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d101      	bne.n	8002082 <HAL_GPIO_Init+0x21a>
 800207e:	2309      	movs	r3, #9
 8002080:	e012      	b.n	80020a8 <HAL_GPIO_Init+0x240>
 8002082:	230a      	movs	r3, #10
 8002084:	e010      	b.n	80020a8 <HAL_GPIO_Init+0x240>
 8002086:	2308      	movs	r3, #8
 8002088:	e00e      	b.n	80020a8 <HAL_GPIO_Init+0x240>
 800208a:	2307      	movs	r3, #7
 800208c:	e00c      	b.n	80020a8 <HAL_GPIO_Init+0x240>
 800208e:	2306      	movs	r3, #6
 8002090:	e00a      	b.n	80020a8 <HAL_GPIO_Init+0x240>
 8002092:	2305      	movs	r3, #5
 8002094:	e008      	b.n	80020a8 <HAL_GPIO_Init+0x240>
 8002096:	2304      	movs	r3, #4
 8002098:	e006      	b.n	80020a8 <HAL_GPIO_Init+0x240>
 800209a:	2303      	movs	r3, #3
 800209c:	e004      	b.n	80020a8 <HAL_GPIO_Init+0x240>
 800209e:	2302      	movs	r3, #2
 80020a0:	e002      	b.n	80020a8 <HAL_GPIO_Init+0x240>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <HAL_GPIO_Init+0x240>
 80020a6:	2300      	movs	r3, #0
 80020a8:	69fa      	ldr	r2, [r7, #28]
 80020aa:	f002 0203 	and.w	r2, r2, #3
 80020ae:	0092      	lsls	r2, r2, #2
 80020b0:	4093      	lsls	r3, r2
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020b8:	4935      	ldr	r1, [pc, #212]	@ (8002190 <HAL_GPIO_Init+0x328>)
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	089b      	lsrs	r3, r3, #2
 80020be:	3302      	adds	r3, #2
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020c6:	4b3d      	ldr	r3, [pc, #244]	@ (80021bc <HAL_GPIO_Init+0x354>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	43db      	mvns	r3, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4013      	ands	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020ea:	4a34      	ldr	r2, [pc, #208]	@ (80021bc <HAL_GPIO_Init+0x354>)
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020f0:	4b32      	ldr	r3, [pc, #200]	@ (80021bc <HAL_GPIO_Init+0x354>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	4313      	orrs	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002114:	4a29      	ldr	r2, [pc, #164]	@ (80021bc <HAL_GPIO_Init+0x354>)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800211a:	4b28      	ldr	r3, [pc, #160]	@ (80021bc <HAL_GPIO_Init+0x354>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	43db      	mvns	r3, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4013      	ands	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800213e:	4a1f      	ldr	r2, [pc, #124]	@ (80021bc <HAL_GPIO_Init+0x354>)
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002144:	4b1d      	ldr	r3, [pc, #116]	@ (80021bc <HAL_GPIO_Init+0x354>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	43db      	mvns	r3, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	4313      	orrs	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002168:	4a14      	ldr	r2, [pc, #80]	@ (80021bc <HAL_GPIO_Init+0x354>)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	3301      	adds	r3, #1
 8002172:	61fb      	str	r3, [r7, #28]
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	2b0f      	cmp	r3, #15
 8002178:	f67f ae84 	bls.w	8001e84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800217c:	bf00      	nop
 800217e:	bf00      	nop
 8002180:	3724      	adds	r7, #36	@ 0x24
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40023800 	.word	0x40023800
 8002190:	40013800 	.word	0x40013800
 8002194:	40020000 	.word	0x40020000
 8002198:	40020400 	.word	0x40020400
 800219c:	40020800 	.word	0x40020800
 80021a0:	40020c00 	.word	0x40020c00
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40021400 	.word	0x40021400
 80021ac:	40021800 	.word	0x40021800
 80021b0:	40021c00 	.word	0x40021c00
 80021b4:	40022000 	.word	0x40022000
 80021b8:	40022400 	.word	0x40022400
 80021bc:	40013c00 	.word	0x40013c00

080021c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	807b      	strh	r3, [r7, #2]
 80021cc:	4613      	mov	r3, r2
 80021ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021d0:	787b      	ldrb	r3, [r7, #1]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021d6:	887a      	ldrh	r2, [r7, #2]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021dc:	e003      	b.n	80021e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021de:	887b      	ldrh	r3, [r7, #2]
 80021e0:	041a      	lsls	r2, r3, #16
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	619a      	str	r2, [r3, #24]
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b086      	sub	sp, #24
 80021f6:	af02      	add	r7, sp, #8
 80021f8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e101      	b.n	8002408 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d106      	bne.n	8002224 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7fe ffdc 	bl	80011dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2203      	movs	r2, #3
 8002228:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002232:	d102      	bne.n	800223a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f002 fd86 	bl	8004d50 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6818      	ldr	r0, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	7c1a      	ldrb	r2, [r3, #16]
 800224c:	f88d 2000 	strb.w	r2, [sp]
 8002250:	3304      	adds	r3, #4
 8002252:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002254:	f002 fd18 	bl	8004c88 <USB_CoreInit>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d005      	beq.n	800226a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2202      	movs	r2, #2
 8002262:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e0ce      	b.n	8002408 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2100      	movs	r1, #0
 8002270:	4618      	mov	r0, r3
 8002272:	f002 fd7e 	bl	8004d72 <USB_SetCurrentMode>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d005      	beq.n	8002288 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2202      	movs	r2, #2
 8002280:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e0bf      	b.n	8002408 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002288:	2300      	movs	r3, #0
 800228a:	73fb      	strb	r3, [r7, #15]
 800228c:	e04a      	b.n	8002324 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800228e:	7bfa      	ldrb	r2, [r7, #15]
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	4613      	mov	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	4413      	add	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	440b      	add	r3, r1
 800229c:	3315      	adds	r3, #21
 800229e:	2201      	movs	r2, #1
 80022a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022a2:	7bfa      	ldrb	r2, [r7, #15]
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4413      	add	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	440b      	add	r3, r1
 80022b0:	3314      	adds	r3, #20
 80022b2:	7bfa      	ldrb	r2, [r7, #15]
 80022b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022b6:	7bfa      	ldrb	r2, [r7, #15]
 80022b8:	7bfb      	ldrb	r3, [r7, #15]
 80022ba:	b298      	uxth	r0, r3
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	4613      	mov	r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	4413      	add	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	440b      	add	r3, r1
 80022c8:	332e      	adds	r3, #46	@ 0x2e
 80022ca:	4602      	mov	r2, r0
 80022cc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022ce:	7bfa      	ldrb	r2, [r7, #15]
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	4613      	mov	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	4413      	add	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	440b      	add	r3, r1
 80022dc:	3318      	adds	r3, #24
 80022de:	2200      	movs	r2, #0
 80022e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022e2:	7bfa      	ldrb	r2, [r7, #15]
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	4613      	mov	r3, r2
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	4413      	add	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	440b      	add	r3, r1
 80022f0:	331c      	adds	r3, #28
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022f6:	7bfa      	ldrb	r2, [r7, #15]
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	4413      	add	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	440b      	add	r3, r1
 8002304:	3320      	adds	r3, #32
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800230a:	7bfa      	ldrb	r2, [r7, #15]
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	4613      	mov	r3, r2
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	4413      	add	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	440b      	add	r3, r1
 8002318:	3324      	adds	r3, #36	@ 0x24
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800231e:	7bfb      	ldrb	r3, [r7, #15]
 8002320:	3301      	adds	r3, #1
 8002322:	73fb      	strb	r3, [r7, #15]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	791b      	ldrb	r3, [r3, #4]
 8002328:	7bfa      	ldrb	r2, [r7, #15]
 800232a:	429a      	cmp	r2, r3
 800232c:	d3af      	bcc.n	800228e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800232e:	2300      	movs	r3, #0
 8002330:	73fb      	strb	r3, [r7, #15]
 8002332:	e044      	b.n	80023be <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002334:	7bfa      	ldrb	r2, [r7, #15]
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4413      	add	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002346:	2200      	movs	r2, #0
 8002348:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800234a:	7bfa      	ldrb	r2, [r7, #15]
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	4413      	add	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	440b      	add	r3, r1
 8002358:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800235c:	7bfa      	ldrb	r2, [r7, #15]
 800235e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002360:	7bfa      	ldrb	r2, [r7, #15]
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	4413      	add	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002372:	2200      	movs	r2, #0
 8002374:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002376:	7bfa      	ldrb	r2, [r7, #15]
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	4613      	mov	r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	4413      	add	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	440b      	add	r3, r1
 8002384:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800238c:	7bfa      	ldrb	r2, [r7, #15]
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	4613      	mov	r3, r2
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	4413      	add	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023a2:	7bfa      	ldrb	r2, [r7, #15]
 80023a4:	6879      	ldr	r1, [r7, #4]
 80023a6:	4613      	mov	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	4413      	add	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	440b      	add	r3, r1
 80023b0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
 80023ba:	3301      	adds	r3, #1
 80023bc:	73fb      	strb	r3, [r7, #15]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	791b      	ldrb	r3, [r3, #4]
 80023c2:	7bfa      	ldrb	r2, [r7, #15]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d3b5      	bcc.n	8002334 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6818      	ldr	r0, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	7c1a      	ldrb	r2, [r3, #16]
 80023d0:	f88d 2000 	strb.w	r2, [sp]
 80023d4:	3304      	adds	r3, #4
 80023d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023d8:	f002 fd18 	bl	8004e0c <USB_DevInit>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d005      	beq.n	80023ee <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2202      	movs	r2, #2
 80023e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e00c      	b.n	8002408 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f002 fee0 	bl	80051c6 <USB_DevDisconnect>

  return HAL_OK;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e267      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d075      	beq.n	800251a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800242e:	4b88      	ldr	r3, [pc, #544]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 030c 	and.w	r3, r3, #12
 8002436:	2b04      	cmp	r3, #4
 8002438:	d00c      	beq.n	8002454 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800243a:	4b85      	ldr	r3, [pc, #532]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002442:	2b08      	cmp	r3, #8
 8002444:	d112      	bne.n	800246c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002446:	4b82      	ldr	r3, [pc, #520]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800244e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002452:	d10b      	bne.n	800246c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002454:	4b7e      	ldr	r3, [pc, #504]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d05b      	beq.n	8002518 <HAL_RCC_OscConfig+0x108>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d157      	bne.n	8002518 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e242      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002474:	d106      	bne.n	8002484 <HAL_RCC_OscConfig+0x74>
 8002476:	4b76      	ldr	r3, [pc, #472]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a75      	ldr	r2, [pc, #468]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 800247c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	e01d      	b.n	80024c0 <HAL_RCC_OscConfig+0xb0>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800248c:	d10c      	bne.n	80024a8 <HAL_RCC_OscConfig+0x98>
 800248e:	4b70      	ldr	r3, [pc, #448]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a6f      	ldr	r2, [pc, #444]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 8002494:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	4b6d      	ldr	r3, [pc, #436]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a6c      	ldr	r2, [pc, #432]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 80024a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	e00b      	b.n	80024c0 <HAL_RCC_OscConfig+0xb0>
 80024a8:	4b69      	ldr	r3, [pc, #420]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a68      	ldr	r2, [pc, #416]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 80024ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	4b66      	ldr	r3, [pc, #408]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a65      	ldr	r2, [pc, #404]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 80024ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d013      	beq.n	80024f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c8:	f7fe ffd2 	bl	8001470 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024d0:	f7fe ffce 	bl	8001470 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b64      	cmp	r3, #100	@ 0x64
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e207      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e2:	4b5b      	ldr	r3, [pc, #364]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f0      	beq.n	80024d0 <HAL_RCC_OscConfig+0xc0>
 80024ee:	e014      	b.n	800251a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f0:	f7fe ffbe 	bl	8001470 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024f8:	f7fe ffba 	bl	8001470 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b64      	cmp	r3, #100	@ 0x64
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e1f3      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800250a:	4b51      	ldr	r3, [pc, #324]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0xe8>
 8002516:	e000      	b.n	800251a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d063      	beq.n	80025ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002526:	4b4a      	ldr	r3, [pc, #296]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 030c 	and.w	r3, r3, #12
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00b      	beq.n	800254a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002532:	4b47      	ldr	r3, [pc, #284]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800253a:	2b08      	cmp	r3, #8
 800253c:	d11c      	bne.n	8002578 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800253e:	4b44      	ldr	r3, [pc, #272]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d116      	bne.n	8002578 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800254a:	4b41      	ldr	r3, [pc, #260]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d005      	beq.n	8002562 <HAL_RCC_OscConfig+0x152>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d001      	beq.n	8002562 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e1c7      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002562:	4b3b      	ldr	r3, [pc, #236]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	4937      	ldr	r1, [pc, #220]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 8002572:	4313      	orrs	r3, r2
 8002574:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002576:	e03a      	b.n	80025ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d020      	beq.n	80025c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002580:	4b34      	ldr	r3, [pc, #208]	@ (8002654 <HAL_RCC_OscConfig+0x244>)
 8002582:	2201      	movs	r2, #1
 8002584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002586:	f7fe ff73 	bl	8001470 <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800258c:	e008      	b.n	80025a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800258e:	f7fe ff6f 	bl	8001470 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e1a8      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0f0      	beq.n	800258e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ac:	4b28      	ldr	r3, [pc, #160]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	4925      	ldr	r1, [pc, #148]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	600b      	str	r3, [r1, #0]
 80025c0:	e015      	b.n	80025ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025c2:	4b24      	ldr	r3, [pc, #144]	@ (8002654 <HAL_RCC_OscConfig+0x244>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c8:	f7fe ff52 	bl	8001470 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025d0:	f7fe ff4e 	bl	8001470 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e187      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f0      	bne.n	80025d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0308 	and.w	r3, r3, #8
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d036      	beq.n	8002668 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d016      	beq.n	8002630 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002602:	4b15      	ldr	r3, [pc, #84]	@ (8002658 <HAL_RCC_OscConfig+0x248>)
 8002604:	2201      	movs	r2, #1
 8002606:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002608:	f7fe ff32 	bl	8001470 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002610:	f7fe ff2e 	bl	8001470 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e167      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002622:	4b0b      	ldr	r3, [pc, #44]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 8002624:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0f0      	beq.n	8002610 <HAL_RCC_OscConfig+0x200>
 800262e:	e01b      	b.n	8002668 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002630:	4b09      	ldr	r3, [pc, #36]	@ (8002658 <HAL_RCC_OscConfig+0x248>)
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002636:	f7fe ff1b 	bl	8001470 <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800263c:	e00e      	b.n	800265c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800263e:	f7fe ff17 	bl	8001470 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d907      	bls.n	800265c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e150      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
 8002650:	40023800 	.word	0x40023800
 8002654:	42470000 	.word	0x42470000
 8002658:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800265c:	4b88      	ldr	r3, [pc, #544]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 800265e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1ea      	bne.n	800263e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 8097 	beq.w	80027a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002676:	2300      	movs	r3, #0
 8002678:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800267a:	4b81      	ldr	r3, [pc, #516]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10f      	bne.n	80026a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	60bb      	str	r3, [r7, #8]
 800268a:	4b7d      	ldr	r3, [pc, #500]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268e:	4a7c      	ldr	r2, [pc, #496]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 8002690:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002694:	6413      	str	r3, [r2, #64]	@ 0x40
 8002696:	4b7a      	ldr	r3, [pc, #488]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 8002698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800269e:	60bb      	str	r3, [r7, #8]
 80026a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026a2:	2301      	movs	r3, #1
 80026a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a6:	4b77      	ldr	r3, [pc, #476]	@ (8002884 <HAL_RCC_OscConfig+0x474>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d118      	bne.n	80026e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026b2:	4b74      	ldr	r3, [pc, #464]	@ (8002884 <HAL_RCC_OscConfig+0x474>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a73      	ldr	r2, [pc, #460]	@ (8002884 <HAL_RCC_OscConfig+0x474>)
 80026b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026be:	f7fe fed7 	bl	8001470 <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c6:	f7fe fed3 	bl	8001470 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e10c      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d8:	4b6a      	ldr	r3, [pc, #424]	@ (8002884 <HAL_RCC_OscConfig+0x474>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0f0      	beq.n	80026c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d106      	bne.n	80026fa <HAL_RCC_OscConfig+0x2ea>
 80026ec:	4b64      	ldr	r3, [pc, #400]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 80026ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f0:	4a63      	ldr	r2, [pc, #396]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 80026f2:	f043 0301 	orr.w	r3, r3, #1
 80026f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80026f8:	e01c      	b.n	8002734 <HAL_RCC_OscConfig+0x324>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	2b05      	cmp	r3, #5
 8002700:	d10c      	bne.n	800271c <HAL_RCC_OscConfig+0x30c>
 8002702:	4b5f      	ldr	r3, [pc, #380]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 8002704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002706:	4a5e      	ldr	r2, [pc, #376]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 8002708:	f043 0304 	orr.w	r3, r3, #4
 800270c:	6713      	str	r3, [r2, #112]	@ 0x70
 800270e:	4b5c      	ldr	r3, [pc, #368]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 8002710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002712:	4a5b      	ldr	r2, [pc, #364]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 8002714:	f043 0301 	orr.w	r3, r3, #1
 8002718:	6713      	str	r3, [r2, #112]	@ 0x70
 800271a:	e00b      	b.n	8002734 <HAL_RCC_OscConfig+0x324>
 800271c:	4b58      	ldr	r3, [pc, #352]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 800271e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002720:	4a57      	ldr	r2, [pc, #348]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 8002722:	f023 0301 	bic.w	r3, r3, #1
 8002726:	6713      	str	r3, [r2, #112]	@ 0x70
 8002728:	4b55      	ldr	r3, [pc, #340]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 800272a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800272c:	4a54      	ldr	r2, [pc, #336]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 800272e:	f023 0304 	bic.w	r3, r3, #4
 8002732:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d015      	beq.n	8002768 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273c:	f7fe fe98 	bl	8001470 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002742:	e00a      	b.n	800275a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002744:	f7fe fe94 	bl	8001470 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002752:	4293      	cmp	r3, r2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e0cb      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800275a:	4b49      	ldr	r3, [pc, #292]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 800275c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0ee      	beq.n	8002744 <HAL_RCC_OscConfig+0x334>
 8002766:	e014      	b.n	8002792 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002768:	f7fe fe82 	bl	8001470 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800276e:	e00a      	b.n	8002786 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002770:	f7fe fe7e 	bl	8001470 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800277e:	4293      	cmp	r3, r2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e0b5      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002786:	4b3e      	ldr	r3, [pc, #248]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 8002788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1ee      	bne.n	8002770 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002792:	7dfb      	ldrb	r3, [r7, #23]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d105      	bne.n	80027a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002798:	4b39      	ldr	r3, [pc, #228]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 800279a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279c:	4a38      	ldr	r2, [pc, #224]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 800279e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 80a1 	beq.w	80028f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027ae:	4b34      	ldr	r3, [pc, #208]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 030c 	and.w	r3, r3, #12
 80027b6:	2b08      	cmp	r3, #8
 80027b8:	d05c      	beq.n	8002874 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d141      	bne.n	8002846 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c2:	4b31      	ldr	r3, [pc, #196]	@ (8002888 <HAL_RCC_OscConfig+0x478>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c8:	f7fe fe52 	bl	8001470 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027d0:	f7fe fe4e 	bl	8001470 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e087      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e2:	4b27      	ldr	r3, [pc, #156]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1f0      	bne.n	80027d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69da      	ldr	r2, [r3, #28]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fc:	019b      	lsls	r3, r3, #6
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002804:	085b      	lsrs	r3, r3, #1
 8002806:	3b01      	subs	r3, #1
 8002808:	041b      	lsls	r3, r3, #16
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002810:	061b      	lsls	r3, r3, #24
 8002812:	491b      	ldr	r1, [pc, #108]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 8002814:	4313      	orrs	r3, r2
 8002816:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002818:	4b1b      	ldr	r3, [pc, #108]	@ (8002888 <HAL_RCC_OscConfig+0x478>)
 800281a:	2201      	movs	r2, #1
 800281c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281e:	f7fe fe27 	bl	8001470 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002826:	f7fe fe23 	bl	8001470 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e05c      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002838:	4b11      	ldr	r3, [pc, #68]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0f0      	beq.n	8002826 <HAL_RCC_OscConfig+0x416>
 8002844:	e054      	b.n	80028f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002846:	4b10      	ldr	r3, [pc, #64]	@ (8002888 <HAL_RCC_OscConfig+0x478>)
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284c:	f7fe fe10 	bl	8001470 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002854:	f7fe fe0c 	bl	8001470 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e045      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002866:	4b06      	ldr	r3, [pc, #24]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f0      	bne.n	8002854 <HAL_RCC_OscConfig+0x444>
 8002872:	e03d      	b.n	80028f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d107      	bne.n	800288c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e038      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
 8002880:	40023800 	.word	0x40023800
 8002884:	40007000 	.word	0x40007000
 8002888:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800288c:	4b1b      	ldr	r3, [pc, #108]	@ (80028fc <HAL_RCC_OscConfig+0x4ec>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d028      	beq.n	80028ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d121      	bne.n	80028ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d11a      	bne.n	80028ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80028bc:	4013      	ands	r3, r2
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d111      	bne.n	80028ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d2:	085b      	lsrs	r3, r3, #1
 80028d4:	3b01      	subs	r3, #1
 80028d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028d8:	429a      	cmp	r2, r3
 80028da:	d107      	bne.n	80028ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d001      	beq.n	80028f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e000      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3718      	adds	r7, #24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40023800 	.word	0x40023800

08002900 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e0cc      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002914:	4b68      	ldr	r3, [pc, #416]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 030f 	and.w	r3, r3, #15
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	429a      	cmp	r2, r3
 8002920:	d90c      	bls.n	800293c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002922:	4b65      	ldr	r3, [pc, #404]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800292a:	4b63      	ldr	r3, [pc, #396]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1b8>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	429a      	cmp	r2, r3
 8002936:	d001      	beq.n	800293c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e0b8      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d020      	beq.n	800298a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d005      	beq.n	8002960 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002954:	4b59      	ldr	r3, [pc, #356]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	4a58      	ldr	r2, [pc, #352]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 800295a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800295e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0308 	and.w	r3, r3, #8
 8002968:	2b00      	cmp	r3, #0
 800296a:	d005      	beq.n	8002978 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800296c:	4b53      	ldr	r3, [pc, #332]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	4a52      	ldr	r2, [pc, #328]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002976:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002978:	4b50      	ldr	r3, [pc, #320]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	494d      	ldr	r1, [pc, #308]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002986:	4313      	orrs	r3, r2
 8002988:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b00      	cmp	r3, #0
 8002994:	d044      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d107      	bne.n	80029ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299e:	4b47      	ldr	r3, [pc, #284]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d119      	bne.n	80029de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e07f      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d003      	beq.n	80029be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ba:	2b03      	cmp	r3, #3
 80029bc:	d107      	bne.n	80029ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029be:	4b3f      	ldr	r3, [pc, #252]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d109      	bne.n	80029de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e06f      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ce:	4b3b      	ldr	r3, [pc, #236]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e067      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029de:	4b37      	ldr	r3, [pc, #220]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f023 0203 	bic.w	r2, r3, #3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	4934      	ldr	r1, [pc, #208]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029f0:	f7fe fd3e 	bl	8001470 <HAL_GetTick>
 80029f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f6:	e00a      	b.n	8002a0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029f8:	f7fe fd3a 	bl	8001470 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e04f      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0e:	4b2b      	ldr	r3, [pc, #172]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 020c 	and.w	r2, r3, #12
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d1eb      	bne.n	80029f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a20:	4b25      	ldr	r3, [pc, #148]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 030f 	and.w	r3, r3, #15
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d20c      	bcs.n	8002a48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a2e:	4b22      	ldr	r3, [pc, #136]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a36:	4b20      	ldr	r3, [pc, #128]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d001      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e032      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d008      	beq.n	8002a66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a54:	4b19      	ldr	r3, [pc, #100]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	4916      	ldr	r1, [pc, #88]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d009      	beq.n	8002a86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a72:	4b12      	ldr	r3, [pc, #72]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	490e      	ldr	r1, [pc, #56]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a86:	f000 f821 	bl	8002acc <HAL_RCC_GetSysClockFreq>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	091b      	lsrs	r3, r3, #4
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	490a      	ldr	r1, [pc, #40]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a98:	5ccb      	ldrb	r3, [r1, r3]
 8002a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a9e:	4a09      	ldr	r2, [pc, #36]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002aa2:	4b09      	ldr	r3, [pc, #36]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7fe fc9e 	bl	80013e8 <HAL_InitTick>

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40023c00 	.word	0x40023c00
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	080052f8 	.word	0x080052f8
 8002ac4:	2000000c 	.word	0x2000000c
 8002ac8:	20000010 	.word	0x20000010

08002acc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002acc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ad0:	b094      	sub	sp, #80	@ 0x50
 8002ad2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ad8:	2300      	movs	r3, #0
 8002ada:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002adc:	2300      	movs	r3, #0
 8002ade:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ae4:	4b79      	ldr	r3, [pc, #484]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 030c 	and.w	r3, r3, #12
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d00d      	beq.n	8002b0c <HAL_RCC_GetSysClockFreq+0x40>
 8002af0:	2b08      	cmp	r3, #8
 8002af2:	f200 80e1 	bhi.w	8002cb8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d002      	beq.n	8002b00 <HAL_RCC_GetSysClockFreq+0x34>
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d003      	beq.n	8002b06 <HAL_RCC_GetSysClockFreq+0x3a>
 8002afe:	e0db      	b.n	8002cb8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b00:	4b73      	ldr	r3, [pc, #460]	@ (8002cd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b02:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002b04:	e0db      	b.n	8002cbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b06:	4b73      	ldr	r3, [pc, #460]	@ (8002cd4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b0a:	e0d8      	b.n	8002cbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b0c:	4b6f      	ldr	r3, [pc, #444]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b14:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b16:	4b6d      	ldr	r3, [pc, #436]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d063      	beq.n	8002bea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b22:	4b6a      	ldr	r3, [pc, #424]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	099b      	lsrs	r3, r3, #6
 8002b28:	2200      	movs	r2, #0
 8002b2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b34:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b36:	2300      	movs	r3, #0
 8002b38:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b3e:	4622      	mov	r2, r4
 8002b40:	462b      	mov	r3, r5
 8002b42:	f04f 0000 	mov.w	r0, #0
 8002b46:	f04f 0100 	mov.w	r1, #0
 8002b4a:	0159      	lsls	r1, r3, #5
 8002b4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b50:	0150      	lsls	r0, r2, #5
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	4621      	mov	r1, r4
 8002b58:	1a51      	subs	r1, r2, r1
 8002b5a:	6139      	str	r1, [r7, #16]
 8002b5c:	4629      	mov	r1, r5
 8002b5e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b62:	617b      	str	r3, [r7, #20]
 8002b64:	f04f 0200 	mov.w	r2, #0
 8002b68:	f04f 0300 	mov.w	r3, #0
 8002b6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b70:	4659      	mov	r1, fp
 8002b72:	018b      	lsls	r3, r1, #6
 8002b74:	4651      	mov	r1, sl
 8002b76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b7a:	4651      	mov	r1, sl
 8002b7c:	018a      	lsls	r2, r1, #6
 8002b7e:	4651      	mov	r1, sl
 8002b80:	ebb2 0801 	subs.w	r8, r2, r1
 8002b84:	4659      	mov	r1, fp
 8002b86:	eb63 0901 	sbc.w	r9, r3, r1
 8002b8a:	f04f 0200 	mov.w	r2, #0
 8002b8e:	f04f 0300 	mov.w	r3, #0
 8002b92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b9e:	4690      	mov	r8, r2
 8002ba0:	4699      	mov	r9, r3
 8002ba2:	4623      	mov	r3, r4
 8002ba4:	eb18 0303 	adds.w	r3, r8, r3
 8002ba8:	60bb      	str	r3, [r7, #8]
 8002baa:	462b      	mov	r3, r5
 8002bac:	eb49 0303 	adc.w	r3, r9, r3
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	f04f 0200 	mov.w	r2, #0
 8002bb6:	f04f 0300 	mov.w	r3, #0
 8002bba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bbe:	4629      	mov	r1, r5
 8002bc0:	024b      	lsls	r3, r1, #9
 8002bc2:	4621      	mov	r1, r4
 8002bc4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bc8:	4621      	mov	r1, r4
 8002bca:	024a      	lsls	r2, r1, #9
 8002bcc:	4610      	mov	r0, r2
 8002bce:	4619      	mov	r1, r3
 8002bd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bd6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002bd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002bdc:	f7fd fb06 	bl	80001ec <__aeabi_uldivmod>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	4613      	mov	r3, r2
 8002be6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002be8:	e058      	b.n	8002c9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bea:	4b38      	ldr	r3, [pc, #224]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	099b      	lsrs	r3, r3, #6
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	4611      	mov	r1, r2
 8002bf6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002bfa:	623b      	str	r3, [r7, #32]
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c04:	4642      	mov	r2, r8
 8002c06:	464b      	mov	r3, r9
 8002c08:	f04f 0000 	mov.w	r0, #0
 8002c0c:	f04f 0100 	mov.w	r1, #0
 8002c10:	0159      	lsls	r1, r3, #5
 8002c12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c16:	0150      	lsls	r0, r2, #5
 8002c18:	4602      	mov	r2, r0
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	4641      	mov	r1, r8
 8002c1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c22:	4649      	mov	r1, r9
 8002c24:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c28:	f04f 0200 	mov.w	r2, #0
 8002c2c:	f04f 0300 	mov.w	r3, #0
 8002c30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c3c:	ebb2 040a 	subs.w	r4, r2, sl
 8002c40:	eb63 050b 	sbc.w	r5, r3, fp
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	00eb      	lsls	r3, r5, #3
 8002c4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c52:	00e2      	lsls	r2, r4, #3
 8002c54:	4614      	mov	r4, r2
 8002c56:	461d      	mov	r5, r3
 8002c58:	4643      	mov	r3, r8
 8002c5a:	18e3      	adds	r3, r4, r3
 8002c5c:	603b      	str	r3, [r7, #0]
 8002c5e:	464b      	mov	r3, r9
 8002c60:	eb45 0303 	adc.w	r3, r5, r3
 8002c64:	607b      	str	r3, [r7, #4]
 8002c66:	f04f 0200 	mov.w	r2, #0
 8002c6a:	f04f 0300 	mov.w	r3, #0
 8002c6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c72:	4629      	mov	r1, r5
 8002c74:	028b      	lsls	r3, r1, #10
 8002c76:	4621      	mov	r1, r4
 8002c78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c7c:	4621      	mov	r1, r4
 8002c7e:	028a      	lsls	r2, r1, #10
 8002c80:	4610      	mov	r0, r2
 8002c82:	4619      	mov	r1, r3
 8002c84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c86:	2200      	movs	r2, #0
 8002c88:	61bb      	str	r3, [r7, #24]
 8002c8a:	61fa      	str	r2, [r7, #28]
 8002c8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c90:	f7fd faac 	bl	80001ec <__aeabi_uldivmod>
 8002c94:	4602      	mov	r2, r0
 8002c96:	460b      	mov	r3, r1
 8002c98:	4613      	mov	r3, r2
 8002c9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	0c1b      	lsrs	r3, r3, #16
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002cac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002cae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cb6:	e002      	b.n	8002cbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cb8:	4b05      	ldr	r3, [pc, #20]	@ (8002cd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3750      	adds	r7, #80	@ 0x50
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cca:	bf00      	nop
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	00f42400 	.word	0x00f42400
 8002cd4:	007a1200 	.word	0x007a1200

08002cd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cdc:	4b03      	ldr	r3, [pc, #12]	@ (8002cec <HAL_RCC_GetHCLKFreq+0x14>)
 8002cde:	681b      	ldr	r3, [r3, #0]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	2000000c 	.word	0x2000000c

08002cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cf4:	f7ff fff0 	bl	8002cd8 <HAL_RCC_GetHCLKFreq>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	4b05      	ldr	r3, [pc, #20]	@ (8002d10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	0a9b      	lsrs	r3, r3, #10
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	4903      	ldr	r1, [pc, #12]	@ (8002d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d06:	5ccb      	ldrb	r3, [r1, r3]
 8002d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40023800 	.word	0x40023800
 8002d14:	08005308 	.word	0x08005308

08002d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d1c:	f7ff ffdc 	bl	8002cd8 <HAL_RCC_GetHCLKFreq>
 8002d20:	4602      	mov	r2, r0
 8002d22:	4b05      	ldr	r3, [pc, #20]	@ (8002d38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	0b5b      	lsrs	r3, r3, #13
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	4903      	ldr	r1, [pc, #12]	@ (8002d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d2e:	5ccb      	ldrb	r3, [r1, r3]
 8002d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	08005308 	.word	0x08005308

08002d40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e041      	b.n	8002dd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d106      	bne.n	8002d6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7fe f90e 	bl	8000f88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2202      	movs	r2, #2
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3304      	adds	r3, #4
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4610      	mov	r0, r2
 8002d80:	f000 fc62 	bl	8003648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
	...

08002de0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d001      	beq.n	8002df8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e04e      	b.n	8002e96 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68da      	ldr	r2, [r3, #12]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 0201 	orr.w	r2, r2, #1
 8002e0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a23      	ldr	r2, [pc, #140]	@ (8002ea4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d022      	beq.n	8002e60 <HAL_TIM_Base_Start_IT+0x80>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e22:	d01d      	beq.n	8002e60 <HAL_TIM_Base_Start_IT+0x80>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a1f      	ldr	r2, [pc, #124]	@ (8002ea8 <HAL_TIM_Base_Start_IT+0xc8>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d018      	beq.n	8002e60 <HAL_TIM_Base_Start_IT+0x80>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a1e      	ldr	r2, [pc, #120]	@ (8002eac <HAL_TIM_Base_Start_IT+0xcc>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d013      	beq.n	8002e60 <HAL_TIM_Base_Start_IT+0x80>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a1c      	ldr	r2, [pc, #112]	@ (8002eb0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d00e      	beq.n	8002e60 <HAL_TIM_Base_Start_IT+0x80>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a1b      	ldr	r2, [pc, #108]	@ (8002eb4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d009      	beq.n	8002e60 <HAL_TIM_Base_Start_IT+0x80>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a19      	ldr	r2, [pc, #100]	@ (8002eb8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d004      	beq.n	8002e60 <HAL_TIM_Base_Start_IT+0x80>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a18      	ldr	r2, [pc, #96]	@ (8002ebc <HAL_TIM_Base_Start_IT+0xdc>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d111      	bne.n	8002e84 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2b06      	cmp	r3, #6
 8002e70:	d010      	beq.n	8002e94 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f042 0201 	orr.w	r2, r2, #1
 8002e80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e82:	e007      	b.n	8002e94 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 0201 	orr.w	r2, r2, #1
 8002e92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3714      	adds	r7, #20
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	40010000 	.word	0x40010000
 8002ea8:	40000400 	.word	0x40000400
 8002eac:	40000800 	.word	0x40000800
 8002eb0:	40000c00 	.word	0x40000c00
 8002eb4:	40010400 	.word	0x40010400
 8002eb8:	40014000 	.word	0x40014000
 8002ebc:	40001800 	.word	0x40001800

08002ec0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e041      	b.n	8002f56 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d106      	bne.n	8002eec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f839 	bl	8002f5e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2202      	movs	r2, #2
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3304      	adds	r3, #4
 8002efc:	4619      	mov	r1, r3
 8002efe:	4610      	mov	r0, r2
 8002f00:	f000 fba2 	bl	8003648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f66:	bf00      	nop
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
	...

08002f74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d109      	bne.n	8002f98 <HAL_TIM_PWM_Start+0x24>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	bf14      	ite	ne
 8002f90:	2301      	movne	r3, #1
 8002f92:	2300      	moveq	r3, #0
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	e022      	b.n	8002fde <HAL_TIM_PWM_Start+0x6a>
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	d109      	bne.n	8002fb2 <HAL_TIM_PWM_Start+0x3e>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	bf14      	ite	ne
 8002faa:	2301      	movne	r3, #1
 8002fac:	2300      	moveq	r3, #0
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	e015      	b.n	8002fde <HAL_TIM_PWM_Start+0x6a>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d109      	bne.n	8002fcc <HAL_TIM_PWM_Start+0x58>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	bf14      	ite	ne
 8002fc4:	2301      	movne	r3, #1
 8002fc6:	2300      	moveq	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	e008      	b.n	8002fde <HAL_TIM_PWM_Start+0x6a>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	bf14      	ite	ne
 8002fd8:	2301      	movne	r3, #1
 8002fda:	2300      	moveq	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e07c      	b.n	80030e0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d104      	bne.n	8002ff6 <HAL_TIM_PWM_Start+0x82>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2202      	movs	r2, #2
 8002ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ff4:	e013      	b.n	800301e <HAL_TIM_PWM_Start+0xaa>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2b04      	cmp	r3, #4
 8002ffa:	d104      	bne.n	8003006 <HAL_TIM_PWM_Start+0x92>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2202      	movs	r2, #2
 8003000:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003004:	e00b      	b.n	800301e <HAL_TIM_PWM_Start+0xaa>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	2b08      	cmp	r3, #8
 800300a:	d104      	bne.n	8003016 <HAL_TIM_PWM_Start+0xa2>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2202      	movs	r2, #2
 8003010:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003014:	e003      	b.n	800301e <HAL_TIM_PWM_Start+0xaa>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2202      	movs	r2, #2
 800301a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2201      	movs	r2, #1
 8003024:	6839      	ldr	r1, [r7, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f000 fe04 	bl	8003c34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a2d      	ldr	r2, [pc, #180]	@ (80030e8 <HAL_TIM_PWM_Start+0x174>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d004      	beq.n	8003040 <HAL_TIM_PWM_Start+0xcc>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a2c      	ldr	r2, [pc, #176]	@ (80030ec <HAL_TIM_PWM_Start+0x178>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d101      	bne.n	8003044 <HAL_TIM_PWM_Start+0xd0>
 8003040:	2301      	movs	r3, #1
 8003042:	e000      	b.n	8003046 <HAL_TIM_PWM_Start+0xd2>
 8003044:	2300      	movs	r3, #0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d007      	beq.n	800305a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003058:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a22      	ldr	r2, [pc, #136]	@ (80030e8 <HAL_TIM_PWM_Start+0x174>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d022      	beq.n	80030aa <HAL_TIM_PWM_Start+0x136>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800306c:	d01d      	beq.n	80030aa <HAL_TIM_PWM_Start+0x136>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a1f      	ldr	r2, [pc, #124]	@ (80030f0 <HAL_TIM_PWM_Start+0x17c>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d018      	beq.n	80030aa <HAL_TIM_PWM_Start+0x136>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a1d      	ldr	r2, [pc, #116]	@ (80030f4 <HAL_TIM_PWM_Start+0x180>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d013      	beq.n	80030aa <HAL_TIM_PWM_Start+0x136>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a1c      	ldr	r2, [pc, #112]	@ (80030f8 <HAL_TIM_PWM_Start+0x184>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d00e      	beq.n	80030aa <HAL_TIM_PWM_Start+0x136>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a16      	ldr	r2, [pc, #88]	@ (80030ec <HAL_TIM_PWM_Start+0x178>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d009      	beq.n	80030aa <HAL_TIM_PWM_Start+0x136>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a18      	ldr	r2, [pc, #96]	@ (80030fc <HAL_TIM_PWM_Start+0x188>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d004      	beq.n	80030aa <HAL_TIM_PWM_Start+0x136>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a16      	ldr	r2, [pc, #88]	@ (8003100 <HAL_TIM_PWM_Start+0x18c>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d111      	bne.n	80030ce <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2b06      	cmp	r3, #6
 80030ba:	d010      	beq.n	80030de <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f042 0201 	orr.w	r2, r2, #1
 80030ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030cc:	e007      	b.n	80030de <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f042 0201 	orr.w	r2, r2, #1
 80030dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40010000 	.word	0x40010000
 80030ec:	40010400 	.word	0x40010400
 80030f0:	40000400 	.word	0x40000400
 80030f4:	40000800 	.word	0x40000800
 80030f8:	40000c00 	.word	0x40000c00
 80030fc:	40014000 	.word	0x40014000
 8003100:	40001800 	.word	0x40001800

08003104 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d020      	beq.n	8003168 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d01b      	beq.n	8003168 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f06f 0202 	mvn.w	r2, #2
 8003138:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	f003 0303 	and.w	r3, r3, #3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 fa5b 	bl	800360a <HAL_TIM_IC_CaptureCallback>
 8003154:	e005      	b.n	8003162 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 fa4d 	bl	80035f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 fa5e 	bl	800361e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	f003 0304 	and.w	r3, r3, #4
 800316e:	2b00      	cmp	r3, #0
 8003170:	d020      	beq.n	80031b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	d01b      	beq.n	80031b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f06f 0204 	mvn.w	r2, #4
 8003184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2202      	movs	r2, #2
 800318a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 fa35 	bl	800360a <HAL_TIM_IC_CaptureCallback>
 80031a0:	e005      	b.n	80031ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 fa27 	bl	80035f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 fa38 	bl	800361e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d020      	beq.n	8003200 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f003 0308 	and.w	r3, r3, #8
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d01b      	beq.n	8003200 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f06f 0208 	mvn.w	r2, #8
 80031d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2204      	movs	r2, #4
 80031d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	f003 0303 	and.w	r3, r3, #3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 fa0f 	bl	800360a <HAL_TIM_IC_CaptureCallback>
 80031ec:	e005      	b.n	80031fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 fa01 	bl	80035f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 fa12 	bl	800361e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	f003 0310 	and.w	r3, r3, #16
 8003206:	2b00      	cmp	r3, #0
 8003208:	d020      	beq.n	800324c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f003 0310 	and.w	r3, r3, #16
 8003210:	2b00      	cmp	r3, #0
 8003212:	d01b      	beq.n	800324c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f06f 0210 	mvn.w	r2, #16
 800321c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2208      	movs	r2, #8
 8003222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f9e9 	bl	800360a <HAL_TIM_IC_CaptureCallback>
 8003238:	e005      	b.n	8003246 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 f9db 	bl	80035f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 f9ec 	bl	800361e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00c      	beq.n	8003270 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b00      	cmp	r3, #0
 800325e:	d007      	beq.n	8003270 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f06f 0201 	mvn.w	r2, #1
 8003268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7fd fcec 	bl	8000c48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00c      	beq.n	8003294 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003280:	2b00      	cmp	r3, #0
 8003282:	d007      	beq.n	8003294 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800328c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 fd7c 	bl	8003d8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00c      	beq.n	80032b8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d007      	beq.n	80032b8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80032b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f9bd 	bl	8003632 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	f003 0320 	and.w	r3, r3, #32
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00c      	beq.n	80032dc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f003 0320 	and.w	r3, r3, #32
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d007      	beq.n	80032dc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f06f 0220 	mvn.w	r2, #32
 80032d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 fd4e 	bl	8003d78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032dc:	bf00      	nop
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032f0:	2300      	movs	r3, #0
 80032f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d101      	bne.n	8003302 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80032fe:	2302      	movs	r3, #2
 8003300:	e0ae      	b.n	8003460 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b0c      	cmp	r3, #12
 800330e:	f200 809f 	bhi.w	8003450 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003312:	a201      	add	r2, pc, #4	@ (adr r2, 8003318 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003318:	0800334d 	.word	0x0800334d
 800331c:	08003451 	.word	0x08003451
 8003320:	08003451 	.word	0x08003451
 8003324:	08003451 	.word	0x08003451
 8003328:	0800338d 	.word	0x0800338d
 800332c:	08003451 	.word	0x08003451
 8003330:	08003451 	.word	0x08003451
 8003334:	08003451 	.word	0x08003451
 8003338:	080033cf 	.word	0x080033cf
 800333c:	08003451 	.word	0x08003451
 8003340:	08003451 	.word	0x08003451
 8003344:	08003451 	.word	0x08003451
 8003348:	0800340f 	.word	0x0800340f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68b9      	ldr	r1, [r7, #8]
 8003352:	4618      	mov	r0, r3
 8003354:	f000 fa24 	bl	80037a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	699a      	ldr	r2, [r3, #24]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f042 0208 	orr.w	r2, r2, #8
 8003366:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	699a      	ldr	r2, [r3, #24]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 0204 	bic.w	r2, r2, #4
 8003376:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6999      	ldr	r1, [r3, #24]
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	691a      	ldr	r2, [r3, #16]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	619a      	str	r2, [r3, #24]
      break;
 800338a:	e064      	b.n	8003456 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68b9      	ldr	r1, [r7, #8]
 8003392:	4618      	mov	r0, r3
 8003394:	f000 fa74 	bl	8003880 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	699a      	ldr	r2, [r3, #24]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	699a      	ldr	r2, [r3, #24]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6999      	ldr	r1, [r3, #24]
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	021a      	lsls	r2, r3, #8
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	619a      	str	r2, [r3, #24]
      break;
 80033cc:	e043      	b.n	8003456 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68b9      	ldr	r1, [r7, #8]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 fac9 	bl	800396c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	69da      	ldr	r2, [r3, #28]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f042 0208 	orr.w	r2, r2, #8
 80033e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	69da      	ldr	r2, [r3, #28]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 0204 	bic.w	r2, r2, #4
 80033f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	69d9      	ldr	r1, [r3, #28]
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	691a      	ldr	r2, [r3, #16]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	61da      	str	r2, [r3, #28]
      break;
 800340c:	e023      	b.n	8003456 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68b9      	ldr	r1, [r7, #8]
 8003414:	4618      	mov	r0, r3
 8003416:	f000 fb1d 	bl	8003a54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	69da      	ldr	r2, [r3, #28]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003428:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	69da      	ldr	r2, [r3, #28]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003438:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	69d9      	ldr	r1, [r3, #28]
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	021a      	lsls	r2, r3, #8
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	61da      	str	r2, [r3, #28]
      break;
 800344e:	e002      	b.n	8003456 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	75fb      	strb	r3, [r7, #23]
      break;
 8003454:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800345e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003472:	2300      	movs	r3, #0
 8003474:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800347c:	2b01      	cmp	r3, #1
 800347e:	d101      	bne.n	8003484 <HAL_TIM_ConfigClockSource+0x1c>
 8003480:	2302      	movs	r3, #2
 8003482:	e0b4      	b.n	80035ee <HAL_TIM_ConfigClockSource+0x186>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80034a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80034aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034bc:	d03e      	beq.n	800353c <HAL_TIM_ConfigClockSource+0xd4>
 80034be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034c2:	f200 8087 	bhi.w	80035d4 <HAL_TIM_ConfigClockSource+0x16c>
 80034c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034ca:	f000 8086 	beq.w	80035da <HAL_TIM_ConfigClockSource+0x172>
 80034ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034d2:	d87f      	bhi.n	80035d4 <HAL_TIM_ConfigClockSource+0x16c>
 80034d4:	2b70      	cmp	r3, #112	@ 0x70
 80034d6:	d01a      	beq.n	800350e <HAL_TIM_ConfigClockSource+0xa6>
 80034d8:	2b70      	cmp	r3, #112	@ 0x70
 80034da:	d87b      	bhi.n	80035d4 <HAL_TIM_ConfigClockSource+0x16c>
 80034dc:	2b60      	cmp	r3, #96	@ 0x60
 80034de:	d050      	beq.n	8003582 <HAL_TIM_ConfigClockSource+0x11a>
 80034e0:	2b60      	cmp	r3, #96	@ 0x60
 80034e2:	d877      	bhi.n	80035d4 <HAL_TIM_ConfigClockSource+0x16c>
 80034e4:	2b50      	cmp	r3, #80	@ 0x50
 80034e6:	d03c      	beq.n	8003562 <HAL_TIM_ConfigClockSource+0xfa>
 80034e8:	2b50      	cmp	r3, #80	@ 0x50
 80034ea:	d873      	bhi.n	80035d4 <HAL_TIM_ConfigClockSource+0x16c>
 80034ec:	2b40      	cmp	r3, #64	@ 0x40
 80034ee:	d058      	beq.n	80035a2 <HAL_TIM_ConfigClockSource+0x13a>
 80034f0:	2b40      	cmp	r3, #64	@ 0x40
 80034f2:	d86f      	bhi.n	80035d4 <HAL_TIM_ConfigClockSource+0x16c>
 80034f4:	2b30      	cmp	r3, #48	@ 0x30
 80034f6:	d064      	beq.n	80035c2 <HAL_TIM_ConfigClockSource+0x15a>
 80034f8:	2b30      	cmp	r3, #48	@ 0x30
 80034fa:	d86b      	bhi.n	80035d4 <HAL_TIM_ConfigClockSource+0x16c>
 80034fc:	2b20      	cmp	r3, #32
 80034fe:	d060      	beq.n	80035c2 <HAL_TIM_ConfigClockSource+0x15a>
 8003500:	2b20      	cmp	r3, #32
 8003502:	d867      	bhi.n	80035d4 <HAL_TIM_ConfigClockSource+0x16c>
 8003504:	2b00      	cmp	r3, #0
 8003506:	d05c      	beq.n	80035c2 <HAL_TIM_ConfigClockSource+0x15a>
 8003508:	2b10      	cmp	r3, #16
 800350a:	d05a      	beq.n	80035c2 <HAL_TIM_ConfigClockSource+0x15a>
 800350c:	e062      	b.n	80035d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800351e:	f000 fb69 	bl	8003bf4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003530:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	609a      	str	r2, [r3, #8]
      break;
 800353a:	e04f      	b.n	80035dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800354c:	f000 fb52 	bl	8003bf4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689a      	ldr	r2, [r3, #8]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800355e:	609a      	str	r2, [r3, #8]
      break;
 8003560:	e03c      	b.n	80035dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800356e:	461a      	mov	r2, r3
 8003570:	f000 fac6 	bl	8003b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2150      	movs	r1, #80	@ 0x50
 800357a:	4618      	mov	r0, r3
 800357c:	f000 fb1f 	bl	8003bbe <TIM_ITRx_SetConfig>
      break;
 8003580:	e02c      	b.n	80035dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800358e:	461a      	mov	r2, r3
 8003590:	f000 fae5 	bl	8003b5e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2160      	movs	r1, #96	@ 0x60
 800359a:	4618      	mov	r0, r3
 800359c:	f000 fb0f 	bl	8003bbe <TIM_ITRx_SetConfig>
      break;
 80035a0:	e01c      	b.n	80035dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ae:	461a      	mov	r2, r3
 80035b0:	f000 faa6 	bl	8003b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2140      	movs	r1, #64	@ 0x40
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 faff 	bl	8003bbe <TIM_ITRx_SetConfig>
      break;
 80035c0:	e00c      	b.n	80035dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4619      	mov	r1, r3
 80035cc:	4610      	mov	r0, r2
 80035ce:	f000 faf6 	bl	8003bbe <TIM_ITRx_SetConfig>
      break;
 80035d2:	e003      	b.n	80035dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	73fb      	strb	r3, [r7, #15]
      break;
 80035d8:	e000      	b.n	80035dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80035da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80035ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr

0800361e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800361e:	b480      	push	{r7}
 8003620:	b083      	sub	sp, #12
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003626:	bf00      	nop
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003632:	b480      	push	{r7}
 8003634:	b083      	sub	sp, #12
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
	...

08003648 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a46      	ldr	r2, [pc, #280]	@ (8003774 <TIM_Base_SetConfig+0x12c>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d013      	beq.n	8003688 <TIM_Base_SetConfig+0x40>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003666:	d00f      	beq.n	8003688 <TIM_Base_SetConfig+0x40>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a43      	ldr	r2, [pc, #268]	@ (8003778 <TIM_Base_SetConfig+0x130>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d00b      	beq.n	8003688 <TIM_Base_SetConfig+0x40>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a42      	ldr	r2, [pc, #264]	@ (800377c <TIM_Base_SetConfig+0x134>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d007      	beq.n	8003688 <TIM_Base_SetConfig+0x40>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a41      	ldr	r2, [pc, #260]	@ (8003780 <TIM_Base_SetConfig+0x138>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d003      	beq.n	8003688 <TIM_Base_SetConfig+0x40>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a40      	ldr	r2, [pc, #256]	@ (8003784 <TIM_Base_SetConfig+0x13c>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d108      	bne.n	800369a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800368e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	4313      	orrs	r3, r2
 8003698:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a35      	ldr	r2, [pc, #212]	@ (8003774 <TIM_Base_SetConfig+0x12c>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d02b      	beq.n	80036fa <TIM_Base_SetConfig+0xb2>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036a8:	d027      	beq.n	80036fa <TIM_Base_SetConfig+0xb2>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a32      	ldr	r2, [pc, #200]	@ (8003778 <TIM_Base_SetConfig+0x130>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d023      	beq.n	80036fa <TIM_Base_SetConfig+0xb2>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a31      	ldr	r2, [pc, #196]	@ (800377c <TIM_Base_SetConfig+0x134>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d01f      	beq.n	80036fa <TIM_Base_SetConfig+0xb2>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a30      	ldr	r2, [pc, #192]	@ (8003780 <TIM_Base_SetConfig+0x138>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d01b      	beq.n	80036fa <TIM_Base_SetConfig+0xb2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a2f      	ldr	r2, [pc, #188]	@ (8003784 <TIM_Base_SetConfig+0x13c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d017      	beq.n	80036fa <TIM_Base_SetConfig+0xb2>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a2e      	ldr	r2, [pc, #184]	@ (8003788 <TIM_Base_SetConfig+0x140>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d013      	beq.n	80036fa <TIM_Base_SetConfig+0xb2>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a2d      	ldr	r2, [pc, #180]	@ (800378c <TIM_Base_SetConfig+0x144>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d00f      	beq.n	80036fa <TIM_Base_SetConfig+0xb2>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a2c      	ldr	r2, [pc, #176]	@ (8003790 <TIM_Base_SetConfig+0x148>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d00b      	beq.n	80036fa <TIM_Base_SetConfig+0xb2>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a2b      	ldr	r2, [pc, #172]	@ (8003794 <TIM_Base_SetConfig+0x14c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d007      	beq.n	80036fa <TIM_Base_SetConfig+0xb2>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a2a      	ldr	r2, [pc, #168]	@ (8003798 <TIM_Base_SetConfig+0x150>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d003      	beq.n	80036fa <TIM_Base_SetConfig+0xb2>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a29      	ldr	r2, [pc, #164]	@ (800379c <TIM_Base_SetConfig+0x154>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d108      	bne.n	800370c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003700:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	4313      	orrs	r3, r2
 800370a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	4313      	orrs	r3, r2
 8003718:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a10      	ldr	r2, [pc, #64]	@ (8003774 <TIM_Base_SetConfig+0x12c>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d003      	beq.n	8003740 <TIM_Base_SetConfig+0xf8>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a12      	ldr	r2, [pc, #72]	@ (8003784 <TIM_Base_SetConfig+0x13c>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d103      	bne.n	8003748 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	691a      	ldr	r2, [r3, #16]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b01      	cmp	r3, #1
 8003758:	d105      	bne.n	8003766 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	f023 0201 	bic.w	r2, r3, #1
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	611a      	str	r2, [r3, #16]
  }
}
 8003766:	bf00      	nop
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	40010000 	.word	0x40010000
 8003778:	40000400 	.word	0x40000400
 800377c:	40000800 	.word	0x40000800
 8003780:	40000c00 	.word	0x40000c00
 8003784:	40010400 	.word	0x40010400
 8003788:	40014000 	.word	0x40014000
 800378c:	40014400 	.word	0x40014400
 8003790:	40014800 	.word	0x40014800
 8003794:	40001800 	.word	0x40001800
 8003798:	40001c00 	.word	0x40001c00
 800379c:	40002000 	.word	0x40002000

080037a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b087      	sub	sp, #28
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	f023 0201 	bic.w	r2, r3, #1
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f023 0303 	bic.w	r3, r3, #3
 80037d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	4313      	orrs	r3, r2
 80037e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f023 0302 	bic.w	r3, r3, #2
 80037e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a20      	ldr	r2, [pc, #128]	@ (8003878 <TIM_OC1_SetConfig+0xd8>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d003      	beq.n	8003804 <TIM_OC1_SetConfig+0x64>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a1f      	ldr	r2, [pc, #124]	@ (800387c <TIM_OC1_SetConfig+0xdc>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d10c      	bne.n	800381e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f023 0308 	bic.w	r3, r3, #8
 800380a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	4313      	orrs	r3, r2
 8003814:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f023 0304 	bic.w	r3, r3, #4
 800381c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a15      	ldr	r2, [pc, #84]	@ (8003878 <TIM_OC1_SetConfig+0xd8>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d003      	beq.n	800382e <TIM_OC1_SetConfig+0x8e>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a14      	ldr	r2, [pc, #80]	@ (800387c <TIM_OC1_SetConfig+0xdc>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d111      	bne.n	8003852 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003834:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800383c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	4313      	orrs	r3, r2
 8003846:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	4313      	orrs	r3, r2
 8003850:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	621a      	str	r2, [r3, #32]
}
 800386c:	bf00      	nop
 800386e:	371c      	adds	r7, #28
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	40010000 	.word	0x40010000
 800387c:	40010400 	.word	0x40010400

08003880 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003880:	b480      	push	{r7}
 8003882:	b087      	sub	sp, #28
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	f023 0210 	bic.w	r2, r3, #16
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	021b      	lsls	r3, r3, #8
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f023 0320 	bic.w	r3, r3, #32
 80038ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	011b      	lsls	r3, r3, #4
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a22      	ldr	r2, [pc, #136]	@ (8003964 <TIM_OC2_SetConfig+0xe4>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d003      	beq.n	80038e8 <TIM_OC2_SetConfig+0x68>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a21      	ldr	r2, [pc, #132]	@ (8003968 <TIM_OC2_SetConfig+0xe8>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d10d      	bne.n	8003904 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	011b      	lsls	r3, r3, #4
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003902:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a17      	ldr	r2, [pc, #92]	@ (8003964 <TIM_OC2_SetConfig+0xe4>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d003      	beq.n	8003914 <TIM_OC2_SetConfig+0x94>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a16      	ldr	r2, [pc, #88]	@ (8003968 <TIM_OC2_SetConfig+0xe8>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d113      	bne.n	800393c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800391a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003922:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	4313      	orrs	r3, r2
 800392e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	4313      	orrs	r3, r2
 800393a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	621a      	str	r2, [r3, #32]
}
 8003956:	bf00      	nop
 8003958:	371c      	adds	r7, #28
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	40010000 	.word	0x40010000
 8003968:	40010400 	.word	0x40010400

0800396c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800396c:	b480      	push	{r7}
 800396e:	b087      	sub	sp, #28
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800399a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f023 0303 	bic.w	r3, r3, #3
 80039a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80039b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	021b      	lsls	r3, r3, #8
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	4313      	orrs	r3, r2
 80039c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a21      	ldr	r2, [pc, #132]	@ (8003a4c <TIM_OC3_SetConfig+0xe0>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d003      	beq.n	80039d2 <TIM_OC3_SetConfig+0x66>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a20      	ldr	r2, [pc, #128]	@ (8003a50 <TIM_OC3_SetConfig+0xe4>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d10d      	bne.n	80039ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80039d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	021b      	lsls	r3, r3, #8
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80039ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a16      	ldr	r2, [pc, #88]	@ (8003a4c <TIM_OC3_SetConfig+0xe0>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d003      	beq.n	80039fe <TIM_OC3_SetConfig+0x92>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a15      	ldr	r2, [pc, #84]	@ (8003a50 <TIM_OC3_SetConfig+0xe4>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d113      	bne.n	8003a26 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	011b      	lsls	r3, r3, #4
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	011b      	lsls	r3, r3, #4
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	621a      	str	r2, [r3, #32]
}
 8003a40:	bf00      	nop
 8003a42:	371c      	adds	r7, #28
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	40010000 	.word	0x40010000
 8003a50:	40010400 	.word	0x40010400

08003a54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b087      	sub	sp, #28
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	021b      	lsls	r3, r3, #8
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	031b      	lsls	r3, r3, #12
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a12      	ldr	r2, [pc, #72]	@ (8003af8 <TIM_OC4_SetConfig+0xa4>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d003      	beq.n	8003abc <TIM_OC4_SetConfig+0x68>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a11      	ldr	r2, [pc, #68]	@ (8003afc <TIM_OC4_SetConfig+0xa8>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d109      	bne.n	8003ad0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ac2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	019b      	lsls	r3, r3, #6
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	621a      	str	r2, [r3, #32]
}
 8003aea:	bf00      	nop
 8003aec:	371c      	adds	r7, #28
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	40010000 	.word	0x40010000
 8003afc:	40010400 	.word	0x40010400

08003b00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b087      	sub	sp, #28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	f023 0201 	bic.w	r2, r3, #1
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f023 030a 	bic.w	r3, r3, #10
 8003b3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	621a      	str	r2, [r3, #32]
}
 8003b52:	bf00      	nop
 8003b54:	371c      	adds	r7, #28
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b087      	sub	sp, #28
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	60f8      	str	r0, [r7, #12]
 8003b66:	60b9      	str	r1, [r7, #8]
 8003b68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	f023 0210 	bic.w	r2, r3, #16
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	031b      	lsls	r3, r3, #12
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003b9a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	621a      	str	r2, [r3, #32]
}
 8003bb2:	bf00      	nop
 8003bb4:	371c      	adds	r7, #28
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b085      	sub	sp, #20
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
 8003bc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	f043 0307 	orr.w	r3, r3, #7
 8003be0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	609a      	str	r2, [r3, #8]
}
 8003be8:	bf00      	nop
 8003bea:	3714      	adds	r7, #20
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
 8003c00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	021a      	lsls	r2, r3, #8
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	431a      	orrs	r2, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	609a      	str	r2, [r3, #8]
}
 8003c28:	bf00      	nop
 8003c2a:	371c      	adds	r7, #28
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	f003 031f 	and.w	r3, r3, #31
 8003c46:	2201      	movs	r2, #1
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a1a      	ldr	r2, [r3, #32]
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	43db      	mvns	r3, r3
 8003c56:	401a      	ands	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6a1a      	ldr	r2, [r3, #32]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f003 031f 	and.w	r3, r3, #31
 8003c66:	6879      	ldr	r1, [r7, #4]
 8003c68:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	621a      	str	r2, [r3, #32]
}
 8003c72:	bf00      	nop
 8003c74:	371c      	adds	r7, #28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
	...

08003c80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d101      	bne.n	8003c98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c94:	2302      	movs	r3, #2
 8003c96:	e05a      	b.n	8003d4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a21      	ldr	r2, [pc, #132]	@ (8003d5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d022      	beq.n	8003d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ce4:	d01d      	beq.n	8003d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a1d      	ldr	r2, [pc, #116]	@ (8003d60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d018      	beq.n	8003d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a1b      	ldr	r2, [pc, #108]	@ (8003d64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d013      	beq.n	8003d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a1a      	ldr	r2, [pc, #104]	@ (8003d68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d00e      	beq.n	8003d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a18      	ldr	r2, [pc, #96]	@ (8003d6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d009      	beq.n	8003d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a17      	ldr	r2, [pc, #92]	@ (8003d70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d004      	beq.n	8003d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a15      	ldr	r2, [pc, #84]	@ (8003d74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d10c      	bne.n	8003d3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3714      	adds	r7, #20
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	40010000 	.word	0x40010000
 8003d60:	40000400 	.word	0x40000400
 8003d64:	40000800 	.word	0x40000800
 8003d68:	40000c00 	.word	0x40000c00
 8003d6c:	40010400 	.word	0x40010400
 8003d70:	40014000 	.word	0x40014000
 8003d74:	40001800 	.word	0x40001800

08003d78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e042      	b.n	8003e38 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d106      	bne.n	8003dcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7fd f96a 	bl	80010a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2224      	movs	r2, #36	@ 0x24
 8003dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68da      	ldr	r2, [r3, #12]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003de2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 fcdb 	bl	80047a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	691a      	ldr	r2, [r3, #16]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003df8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	695a      	ldr	r2, [r3, #20]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68da      	ldr	r2, [r3, #12]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3708      	adds	r7, #8
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b20      	cmp	r3, #32
 8003e58:	d112      	bne.n	8003e80 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d002      	beq.n	8003e66 <HAL_UART_Receive_IT+0x26>
 8003e60:	88fb      	ldrh	r3, [r7, #6]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e00b      	b.n	8003e82 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e70:	88fb      	ldrh	r3, [r7, #6]
 8003e72:	461a      	mov	r2, r3
 8003e74:	68b9      	ldr	r1, [r7, #8]
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f000 faba 	bl	80043f0 <UART_Start_Receive_IT>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	e000      	b.n	8003e82 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003e80:	2302      	movs	r3, #2
  }
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
	...

08003e8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b0ba      	sub	sp, #232	@ 0xe8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ec2:	f003 030f 	and.w	r3, r3, #15
 8003ec6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003eca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10f      	bne.n	8003ef2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ed6:	f003 0320 	and.w	r3, r3, #32
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d009      	beq.n	8003ef2 <HAL_UART_IRQHandler+0x66>
 8003ede:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ee2:	f003 0320 	and.w	r3, r3, #32
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 fb99 	bl	8004622 <UART_Receive_IT>
      return;
 8003ef0:	e25b      	b.n	80043aa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003ef2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f000 80de 	beq.w	80040b8 <HAL_UART_IRQHandler+0x22c>
 8003efc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d106      	bne.n	8003f16 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f0c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 80d1 	beq.w	80040b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00b      	beq.n	8003f3a <HAL_UART_IRQHandler+0xae>
 8003f22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d005      	beq.n	8003f3a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f32:	f043 0201 	orr.w	r2, r3, #1
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f3e:	f003 0304 	and.w	r3, r3, #4
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00b      	beq.n	8003f5e <HAL_UART_IRQHandler+0xd2>
 8003f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d005      	beq.n	8003f5e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f56:	f043 0202 	orr.w	r2, r3, #2
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00b      	beq.n	8003f82 <HAL_UART_IRQHandler+0xf6>
 8003f6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d005      	beq.n	8003f82 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f7a:	f043 0204 	orr.w	r2, r3, #4
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f86:	f003 0308 	and.w	r3, r3, #8
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d011      	beq.n	8003fb2 <HAL_UART_IRQHandler+0x126>
 8003f8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f92:	f003 0320 	and.w	r3, r3, #32
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d105      	bne.n	8003fa6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d005      	beq.n	8003fb2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003faa:	f043 0208 	orr.w	r2, r3, #8
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 81f2 	beq.w	80043a0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fc0:	f003 0320 	and.w	r3, r3, #32
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d008      	beq.n	8003fda <HAL_UART_IRQHandler+0x14e>
 8003fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fcc:	f003 0320 	and.w	r3, r3, #32
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d002      	beq.n	8003fda <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 fb24 	bl	8004622 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe4:	2b40      	cmp	r3, #64	@ 0x40
 8003fe6:	bf0c      	ite	eq
 8003fe8:	2301      	moveq	r3, #1
 8003fea:	2300      	movne	r3, #0
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff6:	f003 0308 	and.w	r3, r3, #8
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d103      	bne.n	8004006 <HAL_UART_IRQHandler+0x17a>
 8003ffe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004002:	2b00      	cmp	r3, #0
 8004004:	d04f      	beq.n	80040a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 fa2c 	bl	8004464 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004016:	2b40      	cmp	r3, #64	@ 0x40
 8004018:	d141      	bne.n	800409e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	3314      	adds	r3, #20
 8004020:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004024:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004028:	e853 3f00 	ldrex	r3, [r3]
 800402c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004030:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004034:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004038:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3314      	adds	r3, #20
 8004042:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004046:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800404a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004052:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004056:	e841 2300 	strex	r3, r2, [r1]
 800405a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800405e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1d9      	bne.n	800401a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800406a:	2b00      	cmp	r3, #0
 800406c:	d013      	beq.n	8004096 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004072:	4a7e      	ldr	r2, [pc, #504]	@ (800426c <HAL_UART_IRQHandler+0x3e0>)
 8004074:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800407a:	4618      	mov	r0, r3
 800407c:	f7fd fba9 	bl	80017d2 <HAL_DMA_Abort_IT>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d016      	beq.n	80040b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800408a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004090:	4610      	mov	r0, r2
 8004092:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004094:	e00e      	b.n	80040b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f994 	bl	80043c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800409c:	e00a      	b.n	80040b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f990 	bl	80043c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a4:	e006      	b.n	80040b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f98c 	bl	80043c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80040b2:	e175      	b.n	80043a0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b4:	bf00      	nop
    return;
 80040b6:	e173      	b.n	80043a0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040bc:	2b01      	cmp	r3, #1
 80040be:	f040 814f 	bne.w	8004360 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80040c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040c6:	f003 0310 	and.w	r3, r3, #16
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 8148 	beq.w	8004360 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80040d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040d4:	f003 0310 	and.w	r3, r3, #16
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 8141 	beq.w	8004360 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040de:	2300      	movs	r3, #0
 80040e0:	60bb      	str	r3, [r7, #8]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	60bb      	str	r3, [r7, #8]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	60bb      	str	r3, [r7, #8]
 80040f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040fe:	2b40      	cmp	r3, #64	@ 0x40
 8004100:	f040 80b6 	bne.w	8004270 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004110:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004114:	2b00      	cmp	r3, #0
 8004116:	f000 8145 	beq.w	80043a4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800411e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004122:	429a      	cmp	r2, r3
 8004124:	f080 813e 	bcs.w	80043a4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800412e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800413a:	f000 8088 	beq.w	800424e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	330c      	adds	r3, #12
 8004144:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004148:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800414c:	e853 3f00 	ldrex	r3, [r3]
 8004150:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004154:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004158:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800415c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	330c      	adds	r3, #12
 8004166:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800416a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800416e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004172:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004176:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800417a:	e841 2300 	strex	r3, r2, [r1]
 800417e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004182:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1d9      	bne.n	800413e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	3314      	adds	r3, #20
 8004190:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004192:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004194:	e853 3f00 	ldrex	r3, [r3]
 8004198:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800419a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800419c:	f023 0301 	bic.w	r3, r3, #1
 80041a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	3314      	adds	r3, #20
 80041aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80041ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80041b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80041b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80041ba:	e841 2300 	strex	r3, r2, [r1]
 80041be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80041c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1e1      	bne.n	800418a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	3314      	adds	r3, #20
 80041cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041d0:	e853 3f00 	ldrex	r3, [r3]
 80041d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80041d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3314      	adds	r3, #20
 80041e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80041ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80041ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80041f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80041f2:	e841 2300 	strex	r3, r2, [r1]
 80041f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80041f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1e3      	bne.n	80041c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2220      	movs	r2, #32
 8004202:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	330c      	adds	r3, #12
 8004212:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004214:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004216:	e853 3f00 	ldrex	r3, [r3]
 800421a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800421c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800421e:	f023 0310 	bic.w	r3, r3, #16
 8004222:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	330c      	adds	r3, #12
 800422c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004230:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004232:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004234:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004236:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004238:	e841 2300 	strex	r3, r2, [r1]
 800423c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800423e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1e3      	bne.n	800420c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004248:	4618      	mov	r0, r3
 800424a:	f7fd fa52 	bl	80016f2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2202      	movs	r2, #2
 8004252:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800425c:	b29b      	uxth	r3, r3
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	b29b      	uxth	r3, r3
 8004262:	4619      	mov	r1, r3
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f8b7 	bl	80043d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800426a:	e09b      	b.n	80043a4 <HAL_UART_IRQHandler+0x518>
 800426c:	0800452b 	.word	0x0800452b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004278:	b29b      	uxth	r3, r3
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004284:	b29b      	uxth	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 808e 	beq.w	80043a8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800428c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 8089 	beq.w	80043a8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	330c      	adds	r3, #12
 800429c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042a0:	e853 3f00 	ldrex	r3, [r3]
 80042a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80042a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	330c      	adds	r3, #12
 80042b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80042ba:	647a      	str	r2, [r7, #68]	@ 0x44
 80042bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042c2:	e841 2300 	strex	r3, r2, [r1]
 80042c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1e3      	bne.n	8004296 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	3314      	adds	r3, #20
 80042d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d8:	e853 3f00 	ldrex	r3, [r3]
 80042dc:	623b      	str	r3, [r7, #32]
   return(result);
 80042de:	6a3b      	ldr	r3, [r7, #32]
 80042e0:	f023 0301 	bic.w	r3, r3, #1
 80042e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	3314      	adds	r3, #20
 80042ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80042f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80042f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042fa:	e841 2300 	strex	r3, r2, [r1]
 80042fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1e3      	bne.n	80042ce <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2220      	movs	r2, #32
 800430a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	330c      	adds	r3, #12
 800431a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	e853 3f00 	ldrex	r3, [r3]
 8004322:	60fb      	str	r3, [r7, #12]
   return(result);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f023 0310 	bic.w	r3, r3, #16
 800432a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	330c      	adds	r3, #12
 8004334:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004338:	61fa      	str	r2, [r7, #28]
 800433a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433c:	69b9      	ldr	r1, [r7, #24]
 800433e:	69fa      	ldr	r2, [r7, #28]
 8004340:	e841 2300 	strex	r3, r2, [r1]
 8004344:	617b      	str	r3, [r7, #20]
   return(result);
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1e3      	bne.n	8004314 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004352:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004356:	4619      	mov	r1, r3
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 f83d 	bl	80043d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800435e:	e023      	b.n	80043a8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004368:	2b00      	cmp	r3, #0
 800436a:	d009      	beq.n	8004380 <HAL_UART_IRQHandler+0x4f4>
 800436c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004370:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 f8ea 	bl	8004552 <UART_Transmit_IT>
    return;
 800437e:	e014      	b.n	80043aa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00e      	beq.n	80043aa <HAL_UART_IRQHandler+0x51e>
 800438c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004394:	2b00      	cmp	r3, #0
 8004396:	d008      	beq.n	80043aa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f92a 	bl	80045f2 <UART_EndTransmit_IT>
    return;
 800439e:	e004      	b.n	80043aa <HAL_UART_IRQHandler+0x51e>
    return;
 80043a0:	bf00      	nop
 80043a2:	e002      	b.n	80043aa <HAL_UART_IRQHandler+0x51e>
      return;
 80043a4:	bf00      	nop
 80043a6:	e000      	b.n	80043aa <HAL_UART_IRQHandler+0x51e>
      return;
 80043a8:	bf00      	nop
  }
}
 80043aa:	37e8      	adds	r7, #232	@ 0xe8
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	460b      	mov	r3, r1
 80043e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	4613      	mov	r3, r2
 80043fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	88fa      	ldrh	r2, [r7, #6]
 8004408:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	88fa      	ldrh	r2, [r7, #6]
 800440e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2222      	movs	r2, #34	@ 0x22
 800441a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d007      	beq.n	8004436 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004434:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	695a      	ldr	r2, [r3, #20]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f042 0201 	orr.w	r2, r2, #1
 8004444:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68da      	ldr	r2, [r3, #12]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f042 0220 	orr.w	r2, r2, #32
 8004454:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004464:	b480      	push	{r7}
 8004466:	b095      	sub	sp, #84	@ 0x54
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	330c      	adds	r3, #12
 8004472:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004476:	e853 3f00 	ldrex	r3, [r3]
 800447a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800447c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800447e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004482:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	330c      	adds	r3, #12
 800448a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800448c:	643a      	str	r2, [r7, #64]	@ 0x40
 800448e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004490:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004492:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004494:	e841 2300 	strex	r3, r2, [r1]
 8004498:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800449a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1e5      	bne.n	800446c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	3314      	adds	r3, #20
 80044a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a8:	6a3b      	ldr	r3, [r7, #32]
 80044aa:	e853 3f00 	ldrex	r3, [r3]
 80044ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	f023 0301 	bic.w	r3, r3, #1
 80044b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	3314      	adds	r3, #20
 80044be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044c8:	e841 2300 	strex	r3, r2, [r1]
 80044cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1e5      	bne.n	80044a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d119      	bne.n	8004510 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	330c      	adds	r3, #12
 80044e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	e853 3f00 	ldrex	r3, [r3]
 80044ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	f023 0310 	bic.w	r3, r3, #16
 80044f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	330c      	adds	r3, #12
 80044fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044fc:	61ba      	str	r2, [r7, #24]
 80044fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004500:	6979      	ldr	r1, [r7, #20]
 8004502:	69ba      	ldr	r2, [r7, #24]
 8004504:	e841 2300 	strex	r3, r2, [r1]
 8004508:	613b      	str	r3, [r7, #16]
   return(result);
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1e5      	bne.n	80044dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2220      	movs	r2, #32
 8004514:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800451e:	bf00      	nop
 8004520:	3754      	adds	r7, #84	@ 0x54
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b084      	sub	sp, #16
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004536:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f7ff ff3d 	bl	80043c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800454a:	bf00      	nop
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004552:	b480      	push	{r7}
 8004554:	b085      	sub	sp, #20
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b21      	cmp	r3, #33	@ 0x21
 8004564:	d13e      	bne.n	80045e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800456e:	d114      	bne.n	800459a <UART_Transmit_IT+0x48>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d110      	bne.n	800459a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	881b      	ldrh	r3, [r3, #0]
 8004582:	461a      	mov	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800458c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	1c9a      	adds	r2, r3, #2
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	621a      	str	r2, [r3, #32]
 8004598:	e008      	b.n	80045ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	1c59      	adds	r1, r3, #1
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	6211      	str	r1, [r2, #32]
 80045a4:	781a      	ldrb	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	3b01      	subs	r3, #1
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	4619      	mov	r1, r3
 80045ba:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10f      	bne.n	80045e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68da      	ldr	r2, [r3, #12]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80045ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045e0:	2300      	movs	r3, #0
 80045e2:	e000      	b.n	80045e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045e4:	2302      	movs	r3, #2
  }
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3714      	adds	r7, #20
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b082      	sub	sp, #8
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68da      	ldr	r2, [r3, #12]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004608:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2220      	movs	r2, #32
 800460e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7ff fecc 	bl	80043b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3708      	adds	r7, #8
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b08c      	sub	sp, #48	@ 0x30
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b22      	cmp	r3, #34	@ 0x22
 8004634:	f040 80ae 	bne.w	8004794 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004640:	d117      	bne.n	8004672 <UART_Receive_IT+0x50>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d113      	bne.n	8004672 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800464a:	2300      	movs	r3, #0
 800464c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004652:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	b29b      	uxth	r3, r3
 800465c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004660:	b29a      	uxth	r2, r3
 8004662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004664:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800466a:	1c9a      	adds	r2, r3, #2
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004670:	e026      	b.n	80046c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004676:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004678:	2300      	movs	r3, #0
 800467a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004684:	d007      	beq.n	8004696 <UART_Receive_IT+0x74>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10a      	bne.n	80046a4 <UART_Receive_IT+0x82>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d106      	bne.n	80046a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	b2da      	uxtb	r2, r3
 800469e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046a0:	701a      	strb	r2, [r3, #0]
 80046a2:	e008      	b.n	80046b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046b0:	b2da      	uxtb	r2, r3
 80046b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ba:	1c5a      	adds	r2, r3, #1
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	4619      	mov	r1, r3
 80046ce:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d15d      	bne.n	8004790 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68da      	ldr	r2, [r3, #12]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0220 	bic.w	r2, r2, #32
 80046e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80046f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	695a      	ldr	r2, [r3, #20]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 0201 	bic.w	r2, r2, #1
 8004702:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2220      	movs	r2, #32
 8004708:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004716:	2b01      	cmp	r3, #1
 8004718:	d135      	bne.n	8004786 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	330c      	adds	r3, #12
 8004726:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	e853 3f00 	ldrex	r3, [r3]
 800472e:	613b      	str	r3, [r7, #16]
   return(result);
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	f023 0310 	bic.w	r3, r3, #16
 8004736:	627b      	str	r3, [r7, #36]	@ 0x24
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	330c      	adds	r3, #12
 800473e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004740:	623a      	str	r2, [r7, #32]
 8004742:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004744:	69f9      	ldr	r1, [r7, #28]
 8004746:	6a3a      	ldr	r2, [r7, #32]
 8004748:	e841 2300 	strex	r3, r2, [r1]
 800474c:	61bb      	str	r3, [r7, #24]
   return(result);
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1e5      	bne.n	8004720 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0310 	and.w	r3, r3, #16
 800475e:	2b10      	cmp	r3, #16
 8004760:	d10a      	bne.n	8004778 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004762:	2300      	movs	r3, #0
 8004764:	60fb      	str	r3, [r7, #12]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	60fb      	str	r3, [r7, #12]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	60fb      	str	r3, [r7, #12]
 8004776:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800477c:	4619      	mov	r1, r3
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7ff fe2a 	bl	80043d8 <HAL_UARTEx_RxEventCallback>
 8004784:	e002      	b.n	800478c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f7fc fab6 	bl	8000cf8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800478c:	2300      	movs	r3, #0
 800478e:	e002      	b.n	8004796 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004790:	2300      	movs	r3, #0
 8004792:	e000      	b.n	8004796 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004794:	2302      	movs	r3, #2
  }
}
 8004796:	4618      	mov	r0, r3
 8004798:	3730      	adds	r7, #48	@ 0x30
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
	...

080047a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047a4:	b0c0      	sub	sp, #256	@ 0x100
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80047b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047bc:	68d9      	ldr	r1, [r3, #12]
 80047be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	ea40 0301 	orr.w	r3, r0, r1
 80047c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ce:	689a      	ldr	r2, [r3, #8]
 80047d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	431a      	orrs	r2, r3
 80047d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	431a      	orrs	r2, r3
 80047e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80047ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80047f8:	f021 010c 	bic.w	r1, r1, #12
 80047fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004806:	430b      	orrs	r3, r1
 8004808:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800480a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800481a:	6999      	ldr	r1, [r3, #24]
 800481c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	ea40 0301 	orr.w	r3, r0, r1
 8004826:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	4b8f      	ldr	r3, [pc, #572]	@ (8004a6c <UART_SetConfig+0x2cc>)
 8004830:	429a      	cmp	r2, r3
 8004832:	d005      	beq.n	8004840 <UART_SetConfig+0xa0>
 8004834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	4b8d      	ldr	r3, [pc, #564]	@ (8004a70 <UART_SetConfig+0x2d0>)
 800483c:	429a      	cmp	r2, r3
 800483e:	d104      	bne.n	800484a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004840:	f7fe fa6a 	bl	8002d18 <HAL_RCC_GetPCLK2Freq>
 8004844:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004848:	e003      	b.n	8004852 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800484a:	f7fe fa51 	bl	8002cf0 <HAL_RCC_GetPCLK1Freq>
 800484e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004856:	69db      	ldr	r3, [r3, #28]
 8004858:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800485c:	f040 810c 	bne.w	8004a78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004860:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004864:	2200      	movs	r2, #0
 8004866:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800486a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800486e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004872:	4622      	mov	r2, r4
 8004874:	462b      	mov	r3, r5
 8004876:	1891      	adds	r1, r2, r2
 8004878:	65b9      	str	r1, [r7, #88]	@ 0x58
 800487a:	415b      	adcs	r3, r3
 800487c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800487e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004882:	4621      	mov	r1, r4
 8004884:	eb12 0801 	adds.w	r8, r2, r1
 8004888:	4629      	mov	r1, r5
 800488a:	eb43 0901 	adc.w	r9, r3, r1
 800488e:	f04f 0200 	mov.w	r2, #0
 8004892:	f04f 0300 	mov.w	r3, #0
 8004896:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800489a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800489e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048a2:	4690      	mov	r8, r2
 80048a4:	4699      	mov	r9, r3
 80048a6:	4623      	mov	r3, r4
 80048a8:	eb18 0303 	adds.w	r3, r8, r3
 80048ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80048b0:	462b      	mov	r3, r5
 80048b2:	eb49 0303 	adc.w	r3, r9, r3
 80048b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80048ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80048c6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80048ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80048ce:	460b      	mov	r3, r1
 80048d0:	18db      	adds	r3, r3, r3
 80048d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80048d4:	4613      	mov	r3, r2
 80048d6:	eb42 0303 	adc.w	r3, r2, r3
 80048da:	657b      	str	r3, [r7, #84]	@ 0x54
 80048dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80048e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80048e4:	f7fb fc82 	bl	80001ec <__aeabi_uldivmod>
 80048e8:	4602      	mov	r2, r0
 80048ea:	460b      	mov	r3, r1
 80048ec:	4b61      	ldr	r3, [pc, #388]	@ (8004a74 <UART_SetConfig+0x2d4>)
 80048ee:	fba3 2302 	umull	r2, r3, r3, r2
 80048f2:	095b      	lsrs	r3, r3, #5
 80048f4:	011c      	lsls	r4, r3, #4
 80048f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048fa:	2200      	movs	r2, #0
 80048fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004900:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004904:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004908:	4642      	mov	r2, r8
 800490a:	464b      	mov	r3, r9
 800490c:	1891      	adds	r1, r2, r2
 800490e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004910:	415b      	adcs	r3, r3
 8004912:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004914:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004918:	4641      	mov	r1, r8
 800491a:	eb12 0a01 	adds.w	sl, r2, r1
 800491e:	4649      	mov	r1, r9
 8004920:	eb43 0b01 	adc.w	fp, r3, r1
 8004924:	f04f 0200 	mov.w	r2, #0
 8004928:	f04f 0300 	mov.w	r3, #0
 800492c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004930:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004934:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004938:	4692      	mov	sl, r2
 800493a:	469b      	mov	fp, r3
 800493c:	4643      	mov	r3, r8
 800493e:	eb1a 0303 	adds.w	r3, sl, r3
 8004942:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004946:	464b      	mov	r3, r9
 8004948:	eb4b 0303 	adc.w	r3, fp, r3
 800494c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800495c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004960:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004964:	460b      	mov	r3, r1
 8004966:	18db      	adds	r3, r3, r3
 8004968:	643b      	str	r3, [r7, #64]	@ 0x40
 800496a:	4613      	mov	r3, r2
 800496c:	eb42 0303 	adc.w	r3, r2, r3
 8004970:	647b      	str	r3, [r7, #68]	@ 0x44
 8004972:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004976:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800497a:	f7fb fc37 	bl	80001ec <__aeabi_uldivmod>
 800497e:	4602      	mov	r2, r0
 8004980:	460b      	mov	r3, r1
 8004982:	4611      	mov	r1, r2
 8004984:	4b3b      	ldr	r3, [pc, #236]	@ (8004a74 <UART_SetConfig+0x2d4>)
 8004986:	fba3 2301 	umull	r2, r3, r3, r1
 800498a:	095b      	lsrs	r3, r3, #5
 800498c:	2264      	movs	r2, #100	@ 0x64
 800498e:	fb02 f303 	mul.w	r3, r2, r3
 8004992:	1acb      	subs	r3, r1, r3
 8004994:	00db      	lsls	r3, r3, #3
 8004996:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800499a:	4b36      	ldr	r3, [pc, #216]	@ (8004a74 <UART_SetConfig+0x2d4>)
 800499c:	fba3 2302 	umull	r2, r3, r3, r2
 80049a0:	095b      	lsrs	r3, r3, #5
 80049a2:	005b      	lsls	r3, r3, #1
 80049a4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80049a8:	441c      	add	r4, r3
 80049aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049ae:	2200      	movs	r2, #0
 80049b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80049b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80049b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80049bc:	4642      	mov	r2, r8
 80049be:	464b      	mov	r3, r9
 80049c0:	1891      	adds	r1, r2, r2
 80049c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80049c4:	415b      	adcs	r3, r3
 80049c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80049cc:	4641      	mov	r1, r8
 80049ce:	1851      	adds	r1, r2, r1
 80049d0:	6339      	str	r1, [r7, #48]	@ 0x30
 80049d2:	4649      	mov	r1, r9
 80049d4:	414b      	adcs	r3, r1
 80049d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80049d8:	f04f 0200 	mov.w	r2, #0
 80049dc:	f04f 0300 	mov.w	r3, #0
 80049e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80049e4:	4659      	mov	r1, fp
 80049e6:	00cb      	lsls	r3, r1, #3
 80049e8:	4651      	mov	r1, sl
 80049ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049ee:	4651      	mov	r1, sl
 80049f0:	00ca      	lsls	r2, r1, #3
 80049f2:	4610      	mov	r0, r2
 80049f4:	4619      	mov	r1, r3
 80049f6:	4603      	mov	r3, r0
 80049f8:	4642      	mov	r2, r8
 80049fa:	189b      	adds	r3, r3, r2
 80049fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a00:	464b      	mov	r3, r9
 8004a02:	460a      	mov	r2, r1
 8004a04:	eb42 0303 	adc.w	r3, r2, r3
 8004a08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a18:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004a1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004a20:	460b      	mov	r3, r1
 8004a22:	18db      	adds	r3, r3, r3
 8004a24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a26:	4613      	mov	r3, r2
 8004a28:	eb42 0303 	adc.w	r3, r2, r3
 8004a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004a36:	f7fb fbd9 	bl	80001ec <__aeabi_uldivmod>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a74 <UART_SetConfig+0x2d4>)
 8004a40:	fba3 1302 	umull	r1, r3, r3, r2
 8004a44:	095b      	lsrs	r3, r3, #5
 8004a46:	2164      	movs	r1, #100	@ 0x64
 8004a48:	fb01 f303 	mul.w	r3, r1, r3
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	00db      	lsls	r3, r3, #3
 8004a50:	3332      	adds	r3, #50	@ 0x32
 8004a52:	4a08      	ldr	r2, [pc, #32]	@ (8004a74 <UART_SetConfig+0x2d4>)
 8004a54:	fba2 2303 	umull	r2, r3, r2, r3
 8004a58:	095b      	lsrs	r3, r3, #5
 8004a5a:	f003 0207 	and.w	r2, r3, #7
 8004a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4422      	add	r2, r4
 8004a66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a68:	e106      	b.n	8004c78 <UART_SetConfig+0x4d8>
 8004a6a:	bf00      	nop
 8004a6c:	40011000 	.word	0x40011000
 8004a70:	40011400 	.word	0x40011400
 8004a74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004a82:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004a86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004a8a:	4642      	mov	r2, r8
 8004a8c:	464b      	mov	r3, r9
 8004a8e:	1891      	adds	r1, r2, r2
 8004a90:	6239      	str	r1, [r7, #32]
 8004a92:	415b      	adcs	r3, r3
 8004a94:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a9a:	4641      	mov	r1, r8
 8004a9c:	1854      	adds	r4, r2, r1
 8004a9e:	4649      	mov	r1, r9
 8004aa0:	eb43 0501 	adc.w	r5, r3, r1
 8004aa4:	f04f 0200 	mov.w	r2, #0
 8004aa8:	f04f 0300 	mov.w	r3, #0
 8004aac:	00eb      	lsls	r3, r5, #3
 8004aae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ab2:	00e2      	lsls	r2, r4, #3
 8004ab4:	4614      	mov	r4, r2
 8004ab6:	461d      	mov	r5, r3
 8004ab8:	4643      	mov	r3, r8
 8004aba:	18e3      	adds	r3, r4, r3
 8004abc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ac0:	464b      	mov	r3, r9
 8004ac2:	eb45 0303 	adc.w	r3, r5, r3
 8004ac6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ad6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ada:	f04f 0200 	mov.w	r2, #0
 8004ade:	f04f 0300 	mov.w	r3, #0
 8004ae2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004ae6:	4629      	mov	r1, r5
 8004ae8:	008b      	lsls	r3, r1, #2
 8004aea:	4621      	mov	r1, r4
 8004aec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004af0:	4621      	mov	r1, r4
 8004af2:	008a      	lsls	r2, r1, #2
 8004af4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004af8:	f7fb fb78 	bl	80001ec <__aeabi_uldivmod>
 8004afc:	4602      	mov	r2, r0
 8004afe:	460b      	mov	r3, r1
 8004b00:	4b60      	ldr	r3, [pc, #384]	@ (8004c84 <UART_SetConfig+0x4e4>)
 8004b02:	fba3 2302 	umull	r2, r3, r3, r2
 8004b06:	095b      	lsrs	r3, r3, #5
 8004b08:	011c      	lsls	r4, r3, #4
 8004b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b14:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004b18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004b1c:	4642      	mov	r2, r8
 8004b1e:	464b      	mov	r3, r9
 8004b20:	1891      	adds	r1, r2, r2
 8004b22:	61b9      	str	r1, [r7, #24]
 8004b24:	415b      	adcs	r3, r3
 8004b26:	61fb      	str	r3, [r7, #28]
 8004b28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b2c:	4641      	mov	r1, r8
 8004b2e:	1851      	adds	r1, r2, r1
 8004b30:	6139      	str	r1, [r7, #16]
 8004b32:	4649      	mov	r1, r9
 8004b34:	414b      	adcs	r3, r1
 8004b36:	617b      	str	r3, [r7, #20]
 8004b38:	f04f 0200 	mov.w	r2, #0
 8004b3c:	f04f 0300 	mov.w	r3, #0
 8004b40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b44:	4659      	mov	r1, fp
 8004b46:	00cb      	lsls	r3, r1, #3
 8004b48:	4651      	mov	r1, sl
 8004b4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b4e:	4651      	mov	r1, sl
 8004b50:	00ca      	lsls	r2, r1, #3
 8004b52:	4610      	mov	r0, r2
 8004b54:	4619      	mov	r1, r3
 8004b56:	4603      	mov	r3, r0
 8004b58:	4642      	mov	r2, r8
 8004b5a:	189b      	adds	r3, r3, r2
 8004b5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b60:	464b      	mov	r3, r9
 8004b62:	460a      	mov	r2, r1
 8004b64:	eb42 0303 	adc.w	r3, r2, r3
 8004b68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b76:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004b78:	f04f 0200 	mov.w	r2, #0
 8004b7c:	f04f 0300 	mov.w	r3, #0
 8004b80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004b84:	4649      	mov	r1, r9
 8004b86:	008b      	lsls	r3, r1, #2
 8004b88:	4641      	mov	r1, r8
 8004b8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b8e:	4641      	mov	r1, r8
 8004b90:	008a      	lsls	r2, r1, #2
 8004b92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004b96:	f7fb fb29 	bl	80001ec <__aeabi_uldivmod>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	4611      	mov	r1, r2
 8004ba0:	4b38      	ldr	r3, [pc, #224]	@ (8004c84 <UART_SetConfig+0x4e4>)
 8004ba2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ba6:	095b      	lsrs	r3, r3, #5
 8004ba8:	2264      	movs	r2, #100	@ 0x64
 8004baa:	fb02 f303 	mul.w	r3, r2, r3
 8004bae:	1acb      	subs	r3, r1, r3
 8004bb0:	011b      	lsls	r3, r3, #4
 8004bb2:	3332      	adds	r3, #50	@ 0x32
 8004bb4:	4a33      	ldr	r2, [pc, #204]	@ (8004c84 <UART_SetConfig+0x4e4>)
 8004bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bba:	095b      	lsrs	r3, r3, #5
 8004bbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bc0:	441c      	add	r4, r3
 8004bc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	673b      	str	r3, [r7, #112]	@ 0x70
 8004bca:	677a      	str	r2, [r7, #116]	@ 0x74
 8004bcc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004bd0:	4642      	mov	r2, r8
 8004bd2:	464b      	mov	r3, r9
 8004bd4:	1891      	adds	r1, r2, r2
 8004bd6:	60b9      	str	r1, [r7, #8]
 8004bd8:	415b      	adcs	r3, r3
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004be0:	4641      	mov	r1, r8
 8004be2:	1851      	adds	r1, r2, r1
 8004be4:	6039      	str	r1, [r7, #0]
 8004be6:	4649      	mov	r1, r9
 8004be8:	414b      	adcs	r3, r1
 8004bea:	607b      	str	r3, [r7, #4]
 8004bec:	f04f 0200 	mov.w	r2, #0
 8004bf0:	f04f 0300 	mov.w	r3, #0
 8004bf4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004bf8:	4659      	mov	r1, fp
 8004bfa:	00cb      	lsls	r3, r1, #3
 8004bfc:	4651      	mov	r1, sl
 8004bfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c02:	4651      	mov	r1, sl
 8004c04:	00ca      	lsls	r2, r1, #3
 8004c06:	4610      	mov	r0, r2
 8004c08:	4619      	mov	r1, r3
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	4642      	mov	r2, r8
 8004c0e:	189b      	adds	r3, r3, r2
 8004c10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c12:	464b      	mov	r3, r9
 8004c14:	460a      	mov	r2, r1
 8004c16:	eb42 0303 	adc.w	r3, r2, r3
 8004c1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c26:	667a      	str	r2, [r7, #100]	@ 0x64
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	f04f 0300 	mov.w	r3, #0
 8004c30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004c34:	4649      	mov	r1, r9
 8004c36:	008b      	lsls	r3, r1, #2
 8004c38:	4641      	mov	r1, r8
 8004c3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c3e:	4641      	mov	r1, r8
 8004c40:	008a      	lsls	r2, r1, #2
 8004c42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004c46:	f7fb fad1 	bl	80001ec <__aeabi_uldivmod>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c84 <UART_SetConfig+0x4e4>)
 8004c50:	fba3 1302 	umull	r1, r3, r3, r2
 8004c54:	095b      	lsrs	r3, r3, #5
 8004c56:	2164      	movs	r1, #100	@ 0x64
 8004c58:	fb01 f303 	mul.w	r3, r1, r3
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	011b      	lsls	r3, r3, #4
 8004c60:	3332      	adds	r3, #50	@ 0x32
 8004c62:	4a08      	ldr	r2, [pc, #32]	@ (8004c84 <UART_SetConfig+0x4e4>)
 8004c64:	fba2 2303 	umull	r2, r3, r2, r3
 8004c68:	095b      	lsrs	r3, r3, #5
 8004c6a:	f003 020f 	and.w	r2, r3, #15
 8004c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4422      	add	r2, r4
 8004c76:	609a      	str	r2, [r3, #8]
}
 8004c78:	bf00      	nop
 8004c7a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c84:	51eb851f 	.word	0x51eb851f

08004c88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c88:	b084      	sub	sp, #16
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b084      	sub	sp, #16
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
 8004c92:	f107 001c 	add.w	r0, r7, #28
 8004c96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c9a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d123      	bne.n	8004cea <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ca6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004cb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004cca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d105      	bne.n	8004cde <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 faa0 	bl	8005224 <USB_CoreReset>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	73fb      	strb	r3, [r7, #15]
 8004ce8:	e01b      	b.n	8004d22 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 fa94 	bl	8005224 <USB_CoreReset>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004d00:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d106      	bne.n	8004d16 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d0c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	639a      	str	r2, [r3, #56]	@ 0x38
 8004d14:	e005      	b.n	8004d22 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d1a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d22:	7fbb      	ldrb	r3, [r7, #30]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d10b      	bne.n	8004d40 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f043 0206 	orr.w	r2, r3, #6
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f043 0220 	orr.w	r2, r3, #32
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d4c:	b004      	add	sp, #16
 8004d4e:	4770      	bx	lr

08004d50 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f023 0201 	bic.w	r2, r3, #1
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr

08004d72 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b084      	sub	sp, #16
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004d8e:	78fb      	ldrb	r3, [r7, #3]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d115      	bne.n	8004dc0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004da0:	200a      	movs	r0, #10
 8004da2:	f7fc fb71 	bl	8001488 <HAL_Delay>
      ms += 10U;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	330a      	adds	r3, #10
 8004daa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 fa2b 	bl	8005208 <USB_GetMode>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d01e      	beq.n	8004df6 <USB_SetCurrentMode+0x84>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2bc7      	cmp	r3, #199	@ 0xc7
 8004dbc:	d9f0      	bls.n	8004da0 <USB_SetCurrentMode+0x2e>
 8004dbe:	e01a      	b.n	8004df6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004dc0:	78fb      	ldrb	r3, [r7, #3]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d115      	bne.n	8004df2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004dd2:	200a      	movs	r0, #10
 8004dd4:	f7fc fb58 	bl	8001488 <HAL_Delay>
      ms += 10U;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	330a      	adds	r3, #10
 8004ddc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 fa12 	bl	8005208 <USB_GetMode>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d005      	beq.n	8004df6 <USB_SetCurrentMode+0x84>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2bc7      	cmp	r3, #199	@ 0xc7
 8004dee:	d9f0      	bls.n	8004dd2 <USB_SetCurrentMode+0x60>
 8004df0:	e001      	b.n	8004df6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e005      	b.n	8004e02 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2bc8      	cmp	r3, #200	@ 0xc8
 8004dfa:	d101      	bne.n	8004e00 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e000      	b.n	8004e02 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
	...

08004e0c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e0c:	b084      	sub	sp, #16
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b086      	sub	sp, #24
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
 8004e16:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004e1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004e26:	2300      	movs	r3, #0
 8004e28:	613b      	str	r3, [r7, #16]
 8004e2a:	e009      	b.n	8004e40 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	3340      	adds	r3, #64	@ 0x40
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4413      	add	r3, r2
 8004e36:	2200      	movs	r2, #0
 8004e38:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	613b      	str	r3, [r7, #16]
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	2b0e      	cmp	r3, #14
 8004e44:	d9f2      	bls.n	8004e2c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004e46:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d11c      	bne.n	8004e88 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e5c:	f043 0302 	orr.w	r3, r3, #2
 8004e60:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e66:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e72:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e7e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	639a      	str	r2, [r3, #56]	@ 0x38
 8004e86:	e00b      	b.n	8004ea0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e8c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e98:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004eac:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d10d      	bne.n	8004ed0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d104      	bne.n	8004ec6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f968 	bl	8005194 <USB_SetDevSpeed>
 8004ec4:	e008      	b.n	8004ed8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 f963 	bl	8005194 <USB_SetDevSpeed>
 8004ece:	e003      	b.n	8004ed8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004ed0:	2103      	movs	r1, #3
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f95e 	bl	8005194 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004ed8:	2110      	movs	r1, #16
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f8fa 	bl	80050d4 <USB_FlushTxFifo>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f924 	bl	8005138 <USB_FlushRxFifo>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f00:	461a      	mov	r2, r3
 8004f02:	2300      	movs	r3, #0
 8004f04:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	2300      	movs	r3, #0
 8004f10:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f18:	461a      	mov	r2, r3
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f1e:	2300      	movs	r3, #0
 8004f20:	613b      	str	r3, [r7, #16]
 8004f22:	e043      	b.n	8004fac <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f3a:	d118      	bne.n	8004f6e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10a      	bne.n	8004f58 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	015a      	lsls	r2, r3, #5
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	4413      	add	r3, r2
 8004f4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f4e:	461a      	mov	r2, r3
 8004f50:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004f54:	6013      	str	r3, [r2, #0]
 8004f56:	e013      	b.n	8004f80 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	015a      	lsls	r2, r3, #5
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f64:	461a      	mov	r2, r3
 8004f66:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004f6a:	6013      	str	r3, [r2, #0]
 8004f6c:	e008      	b.n	8004f80 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	015a      	lsls	r2, r3, #5
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	4413      	add	r3, r2
 8004f76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	015a      	lsls	r2, r3, #5
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	4413      	add	r3, r2
 8004f88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	2300      	movs	r3, #0
 8004f90:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	015a      	lsls	r2, r3, #5
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	4413      	add	r3, r2
 8004f9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004fa4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	613b      	str	r3, [r7, #16]
 8004fac:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d3b5      	bcc.n	8004f24 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fb8:	2300      	movs	r3, #0
 8004fba:	613b      	str	r3, [r7, #16]
 8004fbc:	e043      	b.n	8005046 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	015a      	lsls	r2, r3, #5
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004fd0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fd4:	d118      	bne.n	8005008 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d10a      	bne.n	8004ff2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	015a      	lsls	r2, r3, #5
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fe8:	461a      	mov	r2, r3
 8004fea:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004fee:	6013      	str	r3, [r2, #0]
 8004ff0:	e013      	b.n	800501a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	015a      	lsls	r2, r3, #5
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ffe:	461a      	mov	r2, r3
 8005000:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005004:	6013      	str	r3, [r2, #0]
 8005006:	e008      	b.n	800501a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	4413      	add	r3, r2
 8005010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005014:	461a      	mov	r2, r3
 8005016:	2300      	movs	r3, #0
 8005018:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	4413      	add	r3, r2
 8005022:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005026:	461a      	mov	r2, r3
 8005028:	2300      	movs	r3, #0
 800502a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	015a      	lsls	r2, r3, #5
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4413      	add	r3, r2
 8005034:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005038:	461a      	mov	r2, r3
 800503a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800503e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	3301      	adds	r3, #1
 8005044:	613b      	str	r3, [r7, #16]
 8005046:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800504a:	461a      	mov	r2, r3
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	4293      	cmp	r3, r2
 8005050:	d3b5      	bcc.n	8004fbe <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005060:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005064:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005072:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005074:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005078:	2b00      	cmp	r3, #0
 800507a:	d105      	bne.n	8005088 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	f043 0210 	orr.w	r2, r3, #16
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	699a      	ldr	r2, [r3, #24]
 800508c:	4b10      	ldr	r3, [pc, #64]	@ (80050d0 <USB_DevInit+0x2c4>)
 800508e:	4313      	orrs	r3, r2
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005094:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005098:	2b00      	cmp	r3, #0
 800509a:	d005      	beq.n	80050a8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	699b      	ldr	r3, [r3, #24]
 80050a0:	f043 0208 	orr.w	r2, r3, #8
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80050a8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d107      	bne.n	80050c0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80050b8:	f043 0304 	orr.w	r3, r3, #4
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80050c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3718      	adds	r7, #24
 80050c6:	46bd      	mov	sp, r7
 80050c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050cc:	b004      	add	sp, #16
 80050ce:	4770      	bx	lr
 80050d0:	803c3800 	.word	0x803c3800

080050d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80050de:	2300      	movs	r3, #0
 80050e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	3301      	adds	r3, #1
 80050e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050ee:	d901      	bls.n	80050f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e01b      	b.n	800512c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	daf2      	bge.n	80050e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80050fc:	2300      	movs	r3, #0
 80050fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	019b      	lsls	r3, r3, #6
 8005104:	f043 0220 	orr.w	r2, r3, #32
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	3301      	adds	r3, #1
 8005110:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005118:	d901      	bls.n	800511e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e006      	b.n	800512c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	f003 0320 	and.w	r3, r3, #32
 8005126:	2b20      	cmp	r3, #32
 8005128:	d0f0      	beq.n	800510c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3714      	adds	r7, #20
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005140:	2300      	movs	r3, #0
 8005142:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	3301      	adds	r3, #1
 8005148:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005150:	d901      	bls.n	8005156 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e018      	b.n	8005188 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	2b00      	cmp	r3, #0
 800515c:	daf2      	bge.n	8005144 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800515e:	2300      	movs	r3, #0
 8005160:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2210      	movs	r2, #16
 8005166:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	3301      	adds	r3, #1
 800516c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005174:	d901      	bls.n	800517a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e006      	b.n	8005188 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	f003 0310 	and.w	r3, r3, #16
 8005182:	2b10      	cmp	r3, #16
 8005184:	d0f0      	beq.n	8005168 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3714      	adds	r7, #20
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	460b      	mov	r3, r1
 800519e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	78fb      	ldrb	r3, [r7, #3]
 80051ae:	68f9      	ldr	r1, [r7, #12]
 80051b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80051b4:	4313      	orrs	r3, r2
 80051b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b085      	sub	sp, #20
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80051e0:	f023 0303 	bic.w	r3, r3, #3
 80051e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051f4:	f043 0302 	orr.w	r3, r3, #2
 80051f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3714      	adds	r7, #20
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	f003 0301 	and.w	r3, r3, #1
}
 8005218:	4618      	mov	r0, r3
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800522c:	2300      	movs	r3, #0
 800522e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	3301      	adds	r3, #1
 8005234:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800523c:	d901      	bls.n	8005242 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e01b      	b.n	800527a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	2b00      	cmp	r3, #0
 8005248:	daf2      	bge.n	8005230 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800524a:	2300      	movs	r3, #0
 800524c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	f043 0201 	orr.w	r2, r3, #1
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	3301      	adds	r3, #1
 800525e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005266:	d901      	bls.n	800526c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e006      	b.n	800527a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	f003 0301 	and.w	r3, r3, #1
 8005274:	2b01      	cmp	r3, #1
 8005276:	d0f0      	beq.n	800525a <USB_CoreReset+0x36>

  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3714      	adds	r7, #20
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <memset>:
 8005286:	4402      	add	r2, r0
 8005288:	4603      	mov	r3, r0
 800528a:	4293      	cmp	r3, r2
 800528c:	d100      	bne.n	8005290 <memset+0xa>
 800528e:	4770      	bx	lr
 8005290:	f803 1b01 	strb.w	r1, [r3], #1
 8005294:	e7f9      	b.n	800528a <memset+0x4>
	...

08005298 <__libc_init_array>:
 8005298:	b570      	push	{r4, r5, r6, lr}
 800529a:	4d0d      	ldr	r5, [pc, #52]	@ (80052d0 <__libc_init_array+0x38>)
 800529c:	4c0d      	ldr	r4, [pc, #52]	@ (80052d4 <__libc_init_array+0x3c>)
 800529e:	1b64      	subs	r4, r4, r5
 80052a0:	10a4      	asrs	r4, r4, #2
 80052a2:	2600      	movs	r6, #0
 80052a4:	42a6      	cmp	r6, r4
 80052a6:	d109      	bne.n	80052bc <__libc_init_array+0x24>
 80052a8:	4d0b      	ldr	r5, [pc, #44]	@ (80052d8 <__libc_init_array+0x40>)
 80052aa:	4c0c      	ldr	r4, [pc, #48]	@ (80052dc <__libc_init_array+0x44>)
 80052ac:	f000 f818 	bl	80052e0 <_init>
 80052b0:	1b64      	subs	r4, r4, r5
 80052b2:	10a4      	asrs	r4, r4, #2
 80052b4:	2600      	movs	r6, #0
 80052b6:	42a6      	cmp	r6, r4
 80052b8:	d105      	bne.n	80052c6 <__libc_init_array+0x2e>
 80052ba:	bd70      	pop	{r4, r5, r6, pc}
 80052bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80052c0:	4798      	blx	r3
 80052c2:	3601      	adds	r6, #1
 80052c4:	e7ee      	b.n	80052a4 <__libc_init_array+0xc>
 80052c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80052ca:	4798      	blx	r3
 80052cc:	3601      	adds	r6, #1
 80052ce:	e7f2      	b.n	80052b6 <__libc_init_array+0x1e>
 80052d0:	08005318 	.word	0x08005318
 80052d4:	08005318 	.word	0x08005318
 80052d8:	08005318 	.word	0x08005318
 80052dc:	0800531c 	.word	0x0800531c

080052e0 <_init>:
 80052e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052e2:	bf00      	nop
 80052e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052e6:	bc08      	pop	{r3}
 80052e8:	469e      	mov	lr, r3
 80052ea:	4770      	bx	lr

080052ec <_fini>:
 80052ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ee:	bf00      	nop
 80052f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052f2:	bc08      	pop	{r3}
 80052f4:	469e      	mov	lr, r3
 80052f6:	4770      	bx	lr
